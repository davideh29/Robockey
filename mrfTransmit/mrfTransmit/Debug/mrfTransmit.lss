
mrfTransmit.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  000002ca  0000033e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002ca  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000348  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000378  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000a8  00000000  00000000  000003b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000108b  00000000  00000000  00000460  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000cb5  00000000  00000000  000014eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000008c7  00000000  00000000  000021a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000158  00000000  00000000  00002a68  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000062e  00000000  00000000  00002bc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000508  00000000  00000000  000031ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000078  00000000  00000000  000036f6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 56 00 	jmp	0xac	; 0xac <__ctors_end>
   4:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
   8:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
   c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  10:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  14:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  18:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  1c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  20:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  24:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  28:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  2c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  30:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  34:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  38:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  3c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  40:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  44:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  48:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  4c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  50:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  54:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  58:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  5c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  60:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  64:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  68:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  6c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  70:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  74:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  78:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  7c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  80:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  84:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  88:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  8c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  90:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  94:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  98:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  9c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  a0:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  a4:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  a8:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf ef       	ldi	r28, 0xFF	; 255
  b2:	da e0       	ldi	r29, 0x0A	; 10
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	cd bf       	out	0x3d, r28	; 61

000000b8 <__do_copy_data>:
  b8:	11 e0       	ldi	r17, 0x01	; 1
  ba:	a0 e0       	ldi	r26, 0x00	; 0
  bc:	b1 e0       	ldi	r27, 0x01	; 1
  be:	ea ec       	ldi	r30, 0xCA	; 202
  c0:	f2 e0       	ldi	r31, 0x02	; 2
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <__do_copy_data+0x10>
  c4:	05 90       	lpm	r0, Z+
  c6:	0d 92       	st	X+, r0
  c8:	aa 30       	cpi	r26, 0x0A	; 10
  ca:	b1 07       	cpc	r27, r17
  cc:	d9 f7       	brne	.-10     	; 0xc4 <__do_copy_data+0xc>
  ce:	0e 94 6d 00 	call	0xda	; 0xda <main>
  d2:	0c 94 63 01 	jmp	0x2c6	; 0x2c6 <_exit>

000000d6 <__bad_interrupt>:
  d6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000da <main>:
#include "m_rf.h"
#include "m_bus.h"


int main(void)
{
  da:	cf 93       	push	r28
  dc:	df 93       	push	r29
  de:	cd b7       	in	r28, 0x3d	; 61
  e0:	de b7       	in	r29, 0x3e	; 62
  e2:	2a 97       	sbiw	r28, 0x0a	; 10
  e4:	0f b6       	in	r0, 0x3f	; 63
  e6:	f8 94       	cli
  e8:	de bf       	out	0x3e, r29	; 62
  ea:	0f be       	out	0x3f, r0	; 63
  ec:	cd bf       	out	0x3d, r28	; 61
	m_clockdivide(3);
  ee:	e1 e6       	ldi	r30, 0x61	; 97
  f0:	f0 e0       	ldi	r31, 0x00	; 0
  f2:	80 e8       	ldi	r24, 0x80	; 128
  f4:	80 83       	st	Z, r24
  f6:	83 e0       	ldi	r24, 0x03	; 3
  f8:	80 83       	st	Z, r24
	m_bus_init();
  fa:	0e 94 ab 00 	call	0x156	; 0x156 <m_bus_init>
	if (!m_rf_open(25, 52, 10)) m_red(ON);
  fe:	4a e0       	ldi	r20, 0x0A	; 10
 100:	64 e3       	ldi	r22, 0x34	; 52
 102:	89 e1       	ldi	r24, 0x19	; 25
 104:	0e 94 bc 00 	call	0x178	; 0x178 <m_rf_open>
 108:	81 11       	cpse	r24, r1
 10a:	01 c0       	rjmp	.+2      	; 0x10e <main+0x34>
 10c:	6e 9a       	sbi	0x0d, 6	; 13
 10e:	76 98       	cbi	0x0e, 6	; 14
	char buffer[10] = {0xA0, 0xA0, 0xA0, 0xA0, 0xA0, 0xA0, 0xA0, 0xA0, 0xA0, 0xA0};
 110:	8a e0       	ldi	r24, 0x0A	; 10
 112:	e0 e0       	ldi	r30, 0x00	; 0
 114:	f1 e0       	ldi	r31, 0x01	; 1
 116:	de 01       	movw	r26, r28
 118:	11 96       	adiw	r26, 0x01	; 1
 11a:	01 90       	ld	r0, Z+
 11c:	0d 92       	st	X+, r0
 11e:	8a 95       	dec	r24
 120:	e1 f7       	brne	.-8      	; 0x11a <main+0x40>
	// char buffer[10] = {0xA1, 0xA1, 0xA1, 0xA1, 0xA1, 0xA1, 0xA1, 0xA1, 0xA1, 0xA1};
    /* Replace with your application code */
    while (1) 
    {
		if (m_rf_send(52, buffer, 10)) {
 122:	4a e0       	ldi	r20, 0x0A	; 10
 124:	be 01       	movw	r22, r28
 126:	6f 5f       	subi	r22, 0xFF	; 255
 128:	7f 4f       	sbci	r23, 0xFF	; 255
 12a:	84 e3       	ldi	r24, 0x34	; 52
 12c:	0e 94 12 01 	call	0x224	; 0x224 <m_rf_send>
 130:	88 23       	and	r24, r24
 132:	11 f0       	breq	.+4      	; 0x138 <main+0x5e>
			m_green(ON);
 134:	6a 9a       	sbi	0x0d, 2	; 13
 136:	72 98       	cbi	0x0e, 2	; 14
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 138:	8f e4       	ldi	r24, 0x4F	; 79
 13a:	93 ec       	ldi	r25, 0xC3	; 195
 13c:	01 97       	sbiw	r24, 0x01	; 1
 13e:	f1 f7       	brne	.-4      	; 0x13c <main+0x62>
 140:	00 c0       	rjmp	.+0      	; 0x142 <main+0x68>
 142:	00 00       	nop
		}
		m_wait(200);
		m_green(OFF);
 144:	6a 9a       	sbi	0x0d, 2	; 13
 146:	72 9a       	sbi	0x0e, 2	; 14
 148:	8f e4       	ldi	r24, 0x4F	; 79
 14a:	93 ec       	ldi	r25, 0xC3	; 195
 14c:	01 97       	sbiw	r24, 0x01	; 1
 14e:	f1 f7       	brne	.-4      	; 0x14c <main+0x72>
 150:	00 c0       	rjmp	.+0      	; 0x152 <main+0x78>
 152:	00 00       	nop
 154:	e6 cf       	rjmp	.-52     	; 0x122 <main+0x48>

00000156 <m_bus_init>:

// PUBLIC FUNCTIONS
void m_bus_init(void)
{
	// ENABLE PULLUPS
	set(PORTD,0);
 156:	58 9a       	sbi	0x0b, 0	; 11
	set(PORTD,1);
 158:	59 9a       	sbi	0x0b, 1	; 11
	set(PORTD,2);
 15a:	5a 9a       	sbi	0x0b, 2	; 11
	
	// CONFIGURE THE CLOCK
	TWBR = 12;	// CLK freq = CPU clock / (16 + 2*TWBR*(4^TWPS)), 16MHz clock, TWBR=12, TWPS=00 -> 400kHz
 15c:	8c e0       	ldi	r24, 0x0C	; 12
 15e:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>

	// ENABLE interrupts in INT2 (D2)
	set(EICRA,ISC21); clear(EICRA,ISC20); // trigger on falling edge
 162:	e9 e6       	ldi	r30, 0x69	; 105
 164:	f0 e0       	ldi	r31, 0x00	; 0
 166:	80 81       	ld	r24, Z
 168:	80 62       	ori	r24, 0x20	; 32
 16a:	80 83       	st	Z, r24
 16c:	80 81       	ld	r24, Z
 16e:	8f 7e       	andi	r24, 0xEF	; 239
 170:	80 83       	st	Z, r24
	set(EIMSK,INT2); // demask the interrupt
 172:	ea 9a       	sbi	0x1d, 2	; 29
	sei(); // enable global interrupts
 174:	78 94       	sei
 176:	08 95       	ret

00000178 <m_rf_open>:
	
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);

	return 1;
}
 178:	1f 93       	push	r17
 17a:	cf 93       	push	r28
 17c:	df 93       	push	r29
 17e:	18 2f       	mov	r17, r24
 180:	d6 2f       	mov	r29, r22
 182:	c4 2f       	mov	r28, r20
 184:	0e 94 ab 00 	call	0x156	; 0x156 <m_bus_init>
 188:	94 ea       	ldi	r25, 0xA4	; 164
 18a:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 18e:	ec eb       	ldi	r30, 0xBC	; 188
 190:	f0 e0       	ldi	r31, 0x00	; 0
 192:	90 81       	ld	r25, Z
 194:	99 23       	and	r25, r25
 196:	ec f7       	brge	.-6      	; 0x192 <m_rf_open+0x1a>
 198:	90 e5       	ldi	r25, 0x50	; 80
 19a:	90 93 bb 00 	sts	0x00BB, r25	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 19e:	94 e8       	ldi	r25, 0x84	; 132
 1a0:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 1a4:	ec eb       	ldi	r30, 0xBC	; 188
 1a6:	f0 e0       	ldi	r31, 0x00	; 0
 1a8:	90 81       	ld	r25, Z
 1aa:	99 23       	and	r25, r25
 1ac:	ec f7       	brge	.-6      	; 0x1a8 <m_rf_open+0x30>
 1ae:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 1b2:	98 7f       	andi	r25, 0xF8	; 248
 1b4:	90 32       	cpi	r25, 0x20	; 32
 1b6:	29 f4       	brne	.+10     	; 0x1c2 <m_rf_open+0x4a>
 1b8:	84 e9       	ldi	r24, 0x94	; 148
 1ba:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 1be:	80 e0       	ldi	r24, 0x00	; 0
 1c0:	2d c0       	rjmp	.+90     	; 0x21c <m_rf_open+0xa4>
 1c2:	81 e0       	ldi	r24, 0x01	; 1
 1c4:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 1c8:	84 e8       	ldi	r24, 0x84	; 132
 1ca:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 1ce:	ec eb       	ldi	r30, 0xBC	; 188
 1d0:	f0 e0       	ldi	r31, 0x00	; 0
 1d2:	90 81       	ld	r25, Z
 1d4:	99 23       	and	r25, r25
 1d6:	ec f7       	brge	.-6      	; 0x1d2 <m_rf_open+0x5a>
 1d8:	10 93 bb 00 	sts	0x00BB, r17	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 1dc:	84 e8       	ldi	r24, 0x84	; 132
 1de:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 1e2:	ec eb       	ldi	r30, 0xBC	; 188
 1e4:	f0 e0       	ldi	r31, 0x00	; 0
 1e6:	80 81       	ld	r24, Z
 1e8:	88 23       	and	r24, r24
 1ea:	ec f7       	brge	.-6      	; 0x1e6 <m_rf_open+0x6e>
 1ec:	d0 93 bb 00 	sts	0x00BB, r29	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 1f0:	84 e8       	ldi	r24, 0x84	; 132
 1f2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 1f6:	ec eb       	ldi	r30, 0xBC	; 188
 1f8:	f0 e0       	ldi	r31, 0x00	; 0
 1fa:	80 81       	ld	r24, Z
 1fc:	88 23       	and	r24, r24
 1fe:	ec f7       	brge	.-6      	; 0x1fa <m_rf_open+0x82>
 200:	c0 93 bb 00 	sts	0x00BB, r28	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 204:	84 e8       	ldi	r24, 0x84	; 132
 206:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 20a:	ec eb       	ldi	r30, 0xBC	; 188
 20c:	f0 e0       	ldi	r31, 0x00	; 0
 20e:	80 81       	ld	r24, Z
 210:	88 23       	and	r24, r24
 212:	ec f7       	brge	.-6      	; 0x20e <m_rf_open+0x96>
 214:	84 e9       	ldi	r24, 0x94	; 148
 216:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 21a:	81 e0       	ldi	r24, 0x01	; 1
 21c:	df 91       	pop	r29
 21e:	cf 91       	pop	r28
 220:	1f 91       	pop	r17
 222:	08 95       	ret

00000224 <m_rf_send>:

char m_rf_send(char TXaddress, char* buffer, char packet_length)
{
 224:	cf 93       	push	r28
 226:	df 93       	push	r29
	// START | MRFTWIADDR | MRFSEND | TXaddress | DATA_0 | ... | DATA_N | STOP
	
	int i;
	
	// DISABLE INTERRUPTS
	cli();
 228:	f8 94       	cli
	
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
 22a:	94 ea       	ldi	r25, 0xA4	; 164
 22c:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
 230:	ec eb       	ldi	r30, 0xBC	; 188
 232:	f0 e0       	ldi	r31, 0x00	; 0
 234:	90 81       	ld	r25, Z
 236:	99 23       	and	r25, r25
 238:	ec f7       	brge	.-6      	; 0x234 <m_rf_send+0x10>

	// ADDRESS
	TWDR = MRFTWIADDR<<1;
 23a:	90 e5       	ldi	r25, 0x50	; 80
 23c:	90 93 bb 00 	sts	0x00BB, r25	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR = (1<<TWINT) | (1<<TWEN);
 240:	94 e8       	ldi	r25, 0x84	; 132
 242:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
 246:	ec eb       	ldi	r30, 0xBC	; 188
 248:	f0 e0       	ldi	r31, 0x00	; 0
 24a:	90 81       	ld	r25, Z
 24c:	99 23       	and	r25, r25
 24e:	ec f7       	brge	.-6      	; 0x24a <m_rf_send+0x26>
	if((TWSR & 0xF8)== 0x20){ // ACK was not received - may not be connected/listening
 250:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 254:	98 7f       	andi	r25, 0xF8	; 248
 256:	90 32       	cpi	r25, 0x20	; 32
 258:	31 f4       	brne	.+12     	; 0x266 <m_rf_send+0x42>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
 25a:	84 e9       	ldi	r24, 0x94	; 148
 25c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
		sei();	// re-enable interrupts
 260:	78 94       	sei
		return 0;
 262:	80 e0       	ldi	r24, 0x00	; 0
 264:	2d c0       	rjmp	.+90     	; 0x2c0 <m_rf_send+0x9c>
	}
	
	// SEND THE DESIRED MRF MODE (SEND)
	TWDR = MRFSEND;
 266:	93 e0       	ldi	r25, 0x03	; 3
 268:	90 93 bb 00 	sts	0x00BB, r25	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR = (1<<TWINT) | (1<<TWEN);
 26c:	94 e8       	ldi	r25, 0x84	; 132
 26e:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
 272:	ec eb       	ldi	r30, 0xBC	; 188
 274:	f0 e0       	ldi	r31, 0x00	; 0
 276:	90 81       	ld	r25, Z
 278:	99 23       	and	r25, r25
 27a:	ec f7       	brge	.-6      	; 0x276 <m_rf_send+0x52>
	
	// SEND THE DESIRED MRF MODE (SEND)
	TWDR = TXaddress;
 27c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR = (1<<TWINT) | (1<<TWEN);
 280:	84 e8       	ldi	r24, 0x84	; 132
 282:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
 286:	ec eb       	ldi	r30, 0xBC	; 188
 288:	f0 e0       	ldi	r31, 0x00	; 0
 28a:	80 81       	ld	r24, Z
 28c:	88 23       	and	r24, r24
 28e:	ec f7       	brge	.-6      	; 0x28a <m_rf_send+0x66>

	// SEND DATA
	for(i=0;i<packet_length;i++){
 290:	44 23       	and	r20, r20
 292:	89 f0       	breq	.+34     	; 0x2b6 <m_rf_send+0x92>
 294:	db 01       	movw	r26, r22
 296:	64 0f       	add	r22, r20
 298:	71 1d       	adc	r23, r1
		TWDR = buffer[i];
 29a:	cb eb       	ldi	r28, 0xBB	; 187
 29c:	d0 e0       	ldi	r29, 0x00	; 0
		TWCR = (1<<TWINT) | (1<<TWEN);
 29e:	ec eb       	ldi	r30, 0xBC	; 188
 2a0:	f0 e0       	ldi	r31, 0x00	; 0
 2a2:	94 e8       	ldi	r25, 0x84	; 132
	TWCR = (1<<TWINT) | (1<<TWEN);
	while(!(TWCR & (1<<TWINT))){};

	// SEND DATA
	for(i=0;i<packet_length;i++){
		TWDR = buffer[i];
 2a4:	8d 91       	ld	r24, X+
 2a6:	88 83       	st	Y, r24
		TWCR = (1<<TWINT) | (1<<TWEN);
 2a8:	90 83       	st	Z, r25
		while(!(TWCR & (1<<TWINT))){};
 2aa:	80 81       	ld	r24, Z
 2ac:	88 23       	and	r24, r24
 2ae:	ec f7       	brge	.-6      	; 0x2aa <m_rf_send+0x86>
	TWDR = TXaddress;
	TWCR = (1<<TWINT) | (1<<TWEN);
	while(!(TWCR & (1<<TWINT))){};

	// SEND DATA
	for(i=0;i<packet_length;i++){
 2b0:	a6 17       	cp	r26, r22
 2b2:	b7 07       	cpc	r27, r23
 2b4:	b9 f7       	brne	.-18     	; 0x2a4 <m_rf_send+0x80>
		TWCR = (1<<TWINT) | (1<<TWEN);
		while(!(TWCR & (1<<TWINT))){};
	}
	
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
 2b6:	84 e9       	ldi	r24, 0x94	; 148
 2b8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	
	// RE-ENABLE INTERRUPTS
	sei();
 2bc:	78 94       	sei
	
	return 1;
 2be:	81 e0       	ldi	r24, 0x01	; 1
}
 2c0:	df 91       	pop	r29
 2c2:	cf 91       	pop	r28
 2c4:	08 95       	ret

000002c6 <_exit>:
 2c6:	f8 94       	cli

000002c8 <__stop_program>:
 2c8:	ff cf       	rjmp	.-2      	; 0x2c8 <__stop_program>
