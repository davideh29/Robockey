
LocalizationTest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000030  00800100  00001cd8  00001d6c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001cd8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800130  00800130  00001d9c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001d9c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001dcc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001f8  00000000  00000000  00001e0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002b57  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001304  00000000  00000000  00004b5b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001c3b  00000000  00000000  00005e5f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000590  00000000  00000000  00007a9c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000b46  00000000  00000000  0000802c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000259b  00000000  00000000  00008b72  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001e8  00000000  00000000  0000b10d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 08 01 	jmp	0x210	; 0x210 <__ctors_end>
       4:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
       8:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
       c:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      10:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      14:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      18:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      1c:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      20:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      24:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      28:	0c 94 c7 02 	jmp	0x58e	; 0x58e <__vector_10>
      2c:	0c 94 05 03 	jmp	0x60a	; 0x60a <__vector_11>
      30:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      34:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      38:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      3c:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      40:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      44:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      48:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      4c:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      50:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      54:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      58:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      5c:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      60:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      64:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      68:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      6c:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      70:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      74:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      78:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      7c:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      80:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      84:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      88:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      8c:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      90:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      94:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      98:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      9c:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      a0:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      a4:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      a8:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      ac:	08 4a       	sbci	r16, 0xA8	; 168
      ae:	d7 3b       	cpi	r29, 0xB7	; 183
      b0:	3b ce       	rjmp	.-906    	; 0xfffffd28 <__eeprom_end+0xff7efd28>
      b2:	01 6e       	ori	r16, 0xE1	; 225
      b4:	84 bc       	out	0x24, r8	; 36
      b6:	bf fd       	.word	0xfdbf	; ????
      b8:	c1 2f       	mov	r28, r17
      ba:	3d 6c       	ori	r19, 0xCD	; 205
      bc:	74 31       	cpi	r23, 0x14	; 20
      be:	9a bd       	out	0x2a, r25	; 42
      c0:	56 83       	std	Z+6, r21	; 0x06
      c2:	3d da       	rcall	.-2950   	; 0xfffff53e <__eeprom_end+0xff7ef53e>
      c4:	3d 00       	.word	0x003d	; ????
      c6:	c7 7f       	andi	r28, 0xF7	; 247
      c8:	11 be       	out	0x31, r1	; 49
      ca:	d9 e4       	ldi	r29, 0x49	; 73
      cc:	bb 4c       	sbci	r27, 0xCB	; 203
      ce:	3e 91       	ld	r19, -X
      d0:	6b aa       	std	Y+51, r6	; 0x33
      d2:	aa be       	out	0x3a, r10	; 58
      d4:	00 00       	nop
      d6:	00 80       	ld	r0, Z
      d8:	3f 07       	cpc	r19, r31
      da:	63 42       	sbci	r22, 0x23	; 35
      dc:	36 b7       	in	r19, 0x36	; 54
      de:	9b d8       	rcall	.-3786   	; 0xfffff216 <__eeprom_end+0xff7ef216>
      e0:	a7 1a       	sub	r10, r23
      e2:	39 68       	ori	r19, 0x89	; 137
      e4:	56 18       	sub	r5, r6
      e6:	ae ba       	out	0x1e, r10	; 30
      e8:	ab 55       	subi	r26, 0x5B	; 91
      ea:	8c 1d       	adc	r24, r12
      ec:	3c b7       	in	r19, 0x3c	; 60
      ee:	cc 57       	subi	r28, 0x7C	; 124
      f0:	63 bd       	out	0x23, r22	; 35
      f2:	6d ed       	ldi	r22, 0xDD	; 221
      f4:	fd 75       	andi	r31, 0x5D	; 93
      f6:	3e f6       	brtc	.-114    	; 0x86 <__SREG__+0x47>
      f8:	17 72       	andi	r17, 0x27	; 39
      fa:	31 bf       	out	0x31, r19	; 49
      fc:	00 00       	nop
      fe:	00 80       	ld	r0, Z
     100:	3f 08       	sbc	r3, r15
     102:	00 00       	nop
     104:	00 be       	out	0x30, r0	; 48
     106:	92 24       	eor	r9, r2
     108:	49 12       	cpse	r4, r25
     10a:	3e ab       	std	Y+54, r19	; 0x36
     10c:	aa aa       	std	Y+50, r10	; 0x32
     10e:	2a be       	out	0x3a, r2	; 58
     110:	cd cc       	rjmp	.-1638   	; 0xfffffaac <__eeprom_end+0xff7efaac>
     112:	cc 4c       	sbci	r28, 0xCC	; 204
     114:	3e 00       	.word	0x003e	; ????
     116:	00 00       	nop
     118:	80 be       	out	0x30, r8	; 48
     11a:	ab aa       	std	Y+51, r10	; 0x33
     11c:	aa aa       	std	Y+50, r10	; 0x32
     11e:	3e 00       	.word	0x003e	; ????
     120:	00 00       	nop
     122:	00 bf       	out	0x30, r16	; 48
     124:	00 00       	nop
     126:	00 80       	ld	r0, Z
     128:	3f 00       	.word	0x003f	; ????
     12a:	00 00       	nop
     12c:	00 00       	nop
     12e:	08 41       	sbci	r16, 0x18	; 24
     130:	78 d3       	rcall	.+1776   	; 0x822 <__vector_11+0x218>
     132:	bb 43       	sbci	r27, 0x3B	; 59
     134:	87 d1       	rcall	.+782    	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
     136:	13 3d       	cpi	r17, 0xD3	; 211
     138:	19 0e       	add	r1, r25
     13a:	3c c3       	rjmp	.+1656   	; 0x7b4 <__vector_11+0x1aa>
     13c:	bd 42       	sbci	r27, 0x2D	; 45
     13e:	82 ad       	ldd	r24, Z+58	; 0x3a
     140:	2b 3e       	cpi	r18, 0xEB	; 235
     142:	68 ec       	ldi	r22, 0xC8	; 200
     144:	82 76       	andi	r24, 0x62	; 98
     146:	be d9       	rcall	.-3204   	; 0xfffff4c4 <__eeprom_end+0xff7ef4c4>
     148:	8f e1       	ldi	r24, 0x1F	; 31
     14a:	a9 3e       	cpi	r26, 0xE9	; 233
     14c:	4c 80       	ldd	r4, Y+4	; 0x04
     14e:	ef ff       	.word	0xffef	; ????
     150:	be 01       	movw	r22, r28
     152:	c4 ff       	sbrs	r28, 4
     154:	7f 3f       	cpi	r23, 0xFF	; 255
     156:	00 00       	nop
     158:	00 00       	nop
	...

0000015c <__trampolines_end>:
     15c:	00 01       	movw	r0, r0
     15e:	00 00       	nop
     160:	f3 01       	movw	r30, r6
     162:	12 00       	.word	0x0012	; ????
     164:	02 00       	.word	0x0002	; ????
     166:	00 b0       	in	r0, 0x00	; 0
     168:	01 43       	sbci	r16, 0x31	; 49
     16a:	00 03       	mulsu	r16, r16
     16c:	00 00       	nop
     16e:	ac 01       	movw	r20, r24
     170:	04 01       	movw	r0, r8
     172:	03 09       	sbc	r16, r3
     174:	04 98       	cbi	0x00, 4	; 0
     176:	01 12       	cpse	r0, r17
     178:	02 03       	mulsu	r16, r18
     17a:	09 04       	cpc	r0, r9
     17c:	90 01       	movw	r18, r0
     17e:	06 03       	mulsu	r16, r22
     180:	03 09       	sbc	r16, r3
     182:	04 86       	std	Z+12, r0	; 0x0c
     184:	01 08       	sbc	r0, r1

00000186 <string3>:
     186:	08 03 34 00 31 00 30 00 00 00                       ..4.1.0...

00000190 <string2>:
     190:	06 03 4d 00 32 00 00 00                             ..M.2...

00000198 <string1>:
     198:	12 03 4a 00 2e 00 20 00 46 00 69 00 65 00 6e 00     ..J... .F.i.e.n.
     1a8:	65 00 00 00                                         e...

000001ac <string0>:
     1ac:	04 03 09 04                                         ....

000001b0 <config1_descriptor>:
     1b0:	09 02 43 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..C.....2.......
     1c0:	01 00 05 24 00 10 01 05 24 01 01 01 04 24 02 06     ...$....$....$..
     1d0:	05 24 06 00 01 07 05 82 03 10 00 40 09 04 01 00     .$.........@....
     1e0:	02 0a 00 00 00 07 05 03 02 40 00 00 07 05 84 02     .........@......
     1f0:	40 00 00                                            @..

000001f3 <device_descriptor>:
     1f3:	12 01 00 02 02 00 00 10 c0 16 7a 04 00 01 01 02     ..........z.....
     203:	03 01                                               ..

00000205 <endpoint_config_table>:
     205:	00 01 c1 12 01 80 36 01 81 36 00                    ......6..6.

00000210 <__ctors_end>:
     210:	11 24       	eor	r1, r1
     212:	1f be       	out	0x3f, r1	; 63
     214:	cf ef       	ldi	r28, 0xFF	; 255
     216:	da e0       	ldi	r29, 0x0A	; 10
     218:	de bf       	out	0x3e, r29	; 62
     21a:	cd bf       	out	0x3d, r28	; 61

0000021c <__do_copy_data>:
     21c:	11 e0       	ldi	r17, 0x01	; 1
     21e:	a0 e0       	ldi	r26, 0x00	; 0
     220:	b1 e0       	ldi	r27, 0x01	; 1
     222:	e8 ed       	ldi	r30, 0xD8	; 216
     224:	fc e1       	ldi	r31, 0x1C	; 28
     226:	02 c0       	rjmp	.+4      	; 0x22c <__do_copy_data+0x10>
     228:	05 90       	lpm	r0, Z+
     22a:	0d 92       	st	X+, r0
     22c:	a0 33       	cpi	r26, 0x30	; 48
     22e:	b1 07       	cpc	r27, r17
     230:	d9 f7       	brne	.-10     	; 0x228 <__do_copy_data+0xc>

00000232 <__do_clear_bss>:
     232:	21 e0       	ldi	r18, 0x01	; 1
     234:	a0 e3       	ldi	r26, 0x30	; 48
     236:	b1 e0       	ldi	r27, 0x01	; 1
     238:	01 c0       	rjmp	.+2      	; 0x23c <.do_clear_bss_start>

0000023a <.do_clear_bss_loop>:
     23a:	1d 92       	st	X+, r1

0000023c <.do_clear_bss_start>:
     23c:	a4 33       	cpi	r26, 0x34	; 52
     23e:	b2 07       	cpc	r27, r18
     240:	e1 f7       	brne	.-8      	; 0x23a <.do_clear_bss_loop>
     242:	0e 94 27 01 	call	0x24e	; 0x24e <main>
     246:	0c 94 6a 0e 	jmp	0x1cd4	; 0x1cd4 <_exit>

0000024a <__bad_interrupt>:
     24a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000024e <main>:
#include "m_usb.h"
#include "motor_control.h"
#include "robockey_robot.h"
#define PI 3.14159

int main(void) {
     24e:	cf 93       	push	r28
     250:	df 93       	push	r29
     252:	cd b7       	in	r28, 0x3d	; 61
     254:	de b7       	in	r29, 0x3e	; 62
     256:	a4 97       	sbiw	r28, 0x24	; 36
     258:	0f b6       	in	r0, 0x3f	; 63
     25a:	f8 94       	cli
     25c:	de bf       	out	0x3e, r29	; 62
     25e:	0f be       	out	0x3f, r0	; 63
     260:	cd bf       	out	0x3d, r28	; 61
	m_clockdivide(3);
     262:	e1 e6       	ldi	r30, 0x61	; 97
     264:	f0 e0       	ldi	r31, 0x00	; 0
     266:	80 e8       	ldi	r24, 0x80	; 128
     268:	80 83       	st	Z, r24
     26a:	83 e0       	ldi	r24, 0x03	; 3
     26c:	80 83       	st	Z, r24
	// Initialize motor
	motor_init();
     26e:	0e 94 b7 01 	call	0x36e	; 0x36e <motor_init>
	turn(50);
     272:	82 e3       	ldi	r24, 0x32	; 50
     274:	90 e0       	ldi	r25, 0x00	; 0
     276:	0e 94 ef 01 	call	0x3de	; 0x3de <turn>
	// Get mwii readings
	char wiiOpen = m_wii_open();
     27a:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <m_wii_open>
	if (wiiOpen) {
     27e:	88 23       	and	r24, r24
     280:	19 f0       	breq	.+6      	; 0x288 <main+0x3a>
		m_green(ON);
     282:	6a 9a       	sbi	0x0d, 2	; 13
     284:	72 98       	cbi	0x0e, 2	; 14
     286:	02 c0       	rjmp	.+4      	; 0x28c <main+0x3e>
	} else {
		m_red(ON);
     288:	6e 9a       	sbi	0x0d, 6	; 13
     28a:	76 98       	cbi	0x0e, 6	; 14
	}
	unsigned int starArray[12];
	Robot testBot;
	m_usb_init();
     28c:	0e 94 50 02 	call	0x4a0	; 0x4a0 <m_usb_init>
	while (!m_usb_isconnected()){
     290:	0e 94 69 02 	call	0x4d2	; 0x4d2 <m_usb_isconnected>
     294:	88 23       	and	r24, r24
     296:	e1 f3       	breq	.-8      	; 0x290 <main+0x42>
	}
	while (1) {
		// Get mWii array
		if (!m_wii_read(starArray)) m_red(ON);
		// Get robot location and orientation
		interpret(&testBot, starArray);
     298:	6e 01       	movw	r12, r28
     29a:	29 e1       	ldi	r18, 0x19	; 25
     29c:	c2 0e       	add	r12, r18
     29e:	d1 1c       	adc	r13, r1
	m_usb_init();
	while (!m_usb_isconnected()){
	}
	while (1) {
		// Get mWii array
		if (!m_wii_read(starArray)) m_red(ON);
     2a0:	ce 01       	movw	r24, r28
     2a2:	01 96       	adiw	r24, 0x01	; 1
     2a4:	0e 94 14 06 	call	0xc28	; 0xc28 <m_wii_read>
     2a8:	81 11       	cpse	r24, r1
     2aa:	01 c0       	rjmp	.+2      	; 0x2ae <main+0x60>
     2ac:	6e 9a       	sbi	0x0d, 6	; 13
     2ae:	76 98       	cbi	0x0e, 6	; 14
		// Get robot location and orientation
		interpret(&testBot, starArray);
     2b0:	be 01       	movw	r22, r28
     2b2:	6f 5f       	subi	r22, 0xFF	; 255
     2b4:	7f 4f       	sbci	r23, 0xFF	; 255
     2b6:	c6 01       	movw	r24, r12
     2b8:	0e 94 a7 06 	call	0xd4e	; 0xd4e <interpret>
     2bc:	8e 01       	movw	r16, r28
     2be:	0f 5f       	subi	r16, 0xFF	; 255
     2c0:	1f 4f       	sbci	r17, 0xFF	; 255
     2c2:	76 01       	movw	r14, r12
		// Print results through usb
		for (int i = 0; i < 4; i++) {
			m_usb_tx_int(starArray[3*i]);
     2c4:	f8 01       	movw	r30, r16
     2c6:	80 81       	ld	r24, Z
     2c8:	91 81       	ldd	r25, Z+1	; 0x01
     2ca:	0e 94 88 04 	call	0x910	; 0x910 <m_usb_tx_int>
			m_usb_tx_char(95);
     2ce:	8f e5       	ldi	r24, 0x5F	; 95
     2d0:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <m_usb_tx_char>
			m_usb_tx_int(starArray[3*i + 1]);
     2d4:	f8 01       	movw	r30, r16
     2d6:	82 81       	ldd	r24, Z+2	; 0x02
     2d8:	93 81       	ldd	r25, Z+3	; 0x03
     2da:	0e 94 88 04 	call	0x910	; 0x910 <m_usb_tx_int>
			m_usb_tx_char(95);
     2de:	8f e5       	ldi	r24, 0x5F	; 95
     2e0:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <m_usb_tx_char>
     2e4:	0a 5f       	subi	r16, 0xFA	; 250
     2e6:	1f 4f       	sbci	r17, 0xFF	; 255
		// Get mWii array
		if (!m_wii_read(starArray)) m_red(ON);
		// Get robot location and orientation
		interpret(&testBot, starArray);
		// Print results through usb
		for (int i = 0; i < 4; i++) {
     2e8:	0e 15       	cp	r16, r14
     2ea:	1f 05       	cpc	r17, r15
     2ec:	59 f7       	brne	.-42     	; 0x2c4 <main+0x76>
			m_usb_tx_int(starArray[3*i]);
			m_usb_tx_char(95);
			m_usb_tx_int(starArray[3*i + 1]);
			m_usb_tx_char(95);
		}
		m_usb_tx_char(13);
     2ee:	8d e0       	ldi	r24, 0x0D	; 13
     2f0:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <m_usb_tx_char>
		m_usb_tx_int((int) testBot.x);	
     2f4:	69 8d       	ldd	r22, Y+25	; 0x19
     2f6:	7a 8d       	ldd	r23, Y+26	; 0x1a
     2f8:	8b 8d       	ldd	r24, Y+27	; 0x1b
     2fa:	9c 8d       	ldd	r25, Y+28	; 0x1c
     2fc:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <__fixsfsi>
     300:	cb 01       	movw	r24, r22
     302:	0e 94 88 04 	call	0x910	; 0x910 <m_usb_tx_int>
		m_usb_tx_char(95);
     306:	8f e5       	ldi	r24, 0x5F	; 95
     308:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <m_usb_tx_char>
		m_usb_tx_int((int) testBot.y);	
     30c:	6d 8d       	ldd	r22, Y+29	; 0x1d
     30e:	7e 8d       	ldd	r23, Y+30	; 0x1e
     310:	8f 8d       	ldd	r24, Y+31	; 0x1f
     312:	98 a1       	ldd	r25, Y+32	; 0x20
     314:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <__fixsfsi>
     318:	cb 01       	movw	r24, r22
     31a:	0e 94 88 04 	call	0x910	; 0x910 <m_usb_tx_int>
		m_usb_tx_char(95);
     31e:	8f e5       	ldi	r24, 0x5F	; 95
     320:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <m_usb_tx_char>
		m_usb_tx_int((int) (testBot.o * 180.0 / PI));	// print angle in degrees
     324:	20 e0       	ldi	r18, 0x00	; 0
     326:	30 e0       	ldi	r19, 0x00	; 0
     328:	44 e3       	ldi	r20, 0x34	; 52
     32a:	53 e4       	ldi	r21, 0x43	; 67
     32c:	69 a1       	ldd	r22, Y+33	; 0x21
     32e:	7a a1       	ldd	r23, Y+34	; 0x22
     330:	8b a1       	ldd	r24, Y+35	; 0x23
     332:	9c a1       	ldd	r25, Y+36	; 0x24
     334:	0e 94 4a 0c 	call	0x1894	; 0x1894 <__mulsf3>
     338:	20 ed       	ldi	r18, 0xD0	; 208
     33a:	3f e0       	ldi	r19, 0x0F	; 15
     33c:	49 e4       	ldi	r20, 0x49	; 73
     33e:	50 e4       	ldi	r21, 0x40	; 64
     340:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <__divsf3>
     344:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <__fixsfsi>
     348:	cb 01       	movw	r24, r22
     34a:	0e 94 88 04 	call	0x910	; 0x910 <m_usb_tx_int>
		m_usb_tx_char(13);
     34e:	8d e0       	ldi	r24, 0x0D	; 13
     350:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <m_usb_tx_char>
		m_usb_tx_char(13);
     354:	8d e0       	ldi	r24, 0x0D	; 13
     356:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <m_usb_tx_char>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     35a:	ff e3       	ldi	r31, 0x3F	; 63
     35c:	22 e4       	ldi	r18, 0x42	; 66
     35e:	8f e0       	ldi	r24, 0x0F	; 15
     360:	f1 50       	subi	r31, 0x01	; 1
     362:	20 40       	sbci	r18, 0x00	; 0
     364:	80 40       	sbci	r24, 0x00	; 0
     366:	e1 f7       	brne	.-8      	; 0x360 <main+0x112>
     368:	00 c0       	rjmp	.+0      	; 0x36a <main+0x11c>
     36a:	00 00       	nop
     36c:	99 cf       	rjmp	.-206    	; 0x2a0 <main+0x52>

0000036e <motor_init>:
		OCR1A = 0x00;
		OCR1B = 0x00;
		clear(PORTB, 1);
		set(PORTB, 2);
		set(PORTB, 3);
		clear(PORTB, 7);
     36e:	21 9a       	sbi	0x04, 1	; 4
     370:	22 9a       	sbi	0x04, 2	; 4
     372:	23 9a       	sbi	0x04, 3	; 4
     374:	27 9a       	sbi	0x04, 7	; 4
     376:	29 9a       	sbi	0x05, 1	; 5
     378:	2a 98       	cbi	0x05, 2	; 5
     37a:	2b 9a       	sbi	0x05, 3	; 5
     37c:	2f 98       	cbi	0x05, 7	; 5
     37e:	e1 e8       	ldi	r30, 0x81	; 129
     380:	f0 e0       	ldi	r31, 0x00	; 0
     382:	80 81       	ld	r24, Z
     384:	8b 7f       	andi	r24, 0xFB	; 251
     386:	80 83       	st	Z, r24
     388:	80 81       	ld	r24, Z
     38a:	82 60       	ori	r24, 0x02	; 2
     38c:	80 83       	st	Z, r24
     38e:	80 81       	ld	r24, Z
     390:	8e 7f       	andi	r24, 0xFE	; 254
     392:	80 83       	st	Z, r24
     394:	80 81       	ld	r24, Z
     396:	8f 7e       	andi	r24, 0xEF	; 239
     398:	80 83       	st	Z, r24
     39a:	80 81       	ld	r24, Z
     39c:	88 60       	ori	r24, 0x08	; 8
     39e:	80 83       	st	Z, r24
     3a0:	e0 e8       	ldi	r30, 0x80	; 128
     3a2:	f0 e0       	ldi	r31, 0x00	; 0
     3a4:	80 81       	ld	r24, Z
     3a6:	8d 7f       	andi	r24, 0xFD	; 253
     3a8:	80 83       	st	Z, r24
     3aa:	80 81       	ld	r24, Z
     3ac:	81 60       	ori	r24, 0x01	; 1
     3ae:	80 83       	st	Z, r24
     3b0:	80 81       	ld	r24, Z
     3b2:	80 68       	ori	r24, 0x80	; 128
     3b4:	80 83       	st	Z, r24
     3b6:	80 81       	ld	r24, Z
     3b8:	80 64       	ori	r24, 0x40	; 64
     3ba:	80 83       	st	Z, r24
     3bc:	80 81       	ld	r24, Z
     3be:	80 62       	ori	r24, 0x20	; 32
     3c0:	80 83       	st	Z, r24
     3c2:	80 81       	ld	r24, Z
     3c4:	80 61       	ori	r24, 0x10	; 16
     3c6:	80 83       	st	Z, r24
     3c8:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     3cc:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     3d0:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
     3d4:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
     3d8:	26 9a       	sbi	0x04, 6	; 4
     3da:	25 9a       	sbi	0x04, 5	; 4
     3dc:	08 95       	ret

000003de <turn>:
	}
}

// -50 to -1 left, 0 forward, 1 to 50 right
void turn(int direction) {
	set(PORTB, 1);
     3de:	29 9a       	sbi	0x05, 1	; 5
	clear(PORTB, 2);
     3e0:	2a 98       	cbi	0x05, 2	; 5
	set(PORTB, 3);
     3e2:	2b 9a       	sbi	0x05, 3	; 5
	clear(PORTB, 7);
     3e4:	2f 98       	cbi	0x05, 7	; 5
	if (direction == 0) {
     3e6:	00 97       	sbiw	r24, 0x00	; 0
     3e8:	49 f4       	brne	.+18     	; 0x3fc <turn+0x1e>
		OCR1A = 0x00;
     3ea:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     3ee:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
		OCR1B = 0x00;
     3f2:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
     3f6:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
     3fa:	08 95       	ret
     3fc:	bc 01       	movw	r22, r24
		} else if (direction > 0) {
     3fe:	18 16       	cp	r1, r24
     400:	19 06       	cpc	r1, r25
     402:	ec f4       	brge	.+58     	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
		OCR1A = 0x00;
     404:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     408:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
		OCR1B = (int) (255.0 * (float) direction / 50.0);
     40c:	07 2e       	mov	r0, r23
     40e:	00 0c       	add	r0, r0
     410:	88 0b       	sbc	r24, r24
     412:	99 0b       	sbc	r25, r25
     414:	0e 94 8a 0b 	call	0x1714	; 0x1714 <__floatsisf>
     418:	20 e0       	ldi	r18, 0x00	; 0
     41a:	30 e0       	ldi	r19, 0x00	; 0
     41c:	4f e7       	ldi	r20, 0x7F	; 127
     41e:	53 e4       	ldi	r21, 0x43	; 67
     420:	0e 94 4a 0c 	call	0x1894	; 0x1894 <__mulsf3>
     424:	20 e0       	ldi	r18, 0x00	; 0
     426:	30 e0       	ldi	r19, 0x00	; 0
     428:	48 e4       	ldi	r20, 0x48	; 72
     42a:	52 e4       	ldi	r21, 0x42	; 66
     42c:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <__divsf3>
     430:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <__fixsfsi>
     434:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
     438:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
     43c:	08 95       	ret
		} else {
		OCR1A = (int) (255.0 * (float) -direction / 50.0);
     43e:	71 95       	neg	r23
     440:	61 95       	neg	r22
     442:	71 09       	sbc	r23, r1
     444:	07 2e       	mov	r0, r23
     446:	00 0c       	add	r0, r0
     448:	88 0b       	sbc	r24, r24
     44a:	99 0b       	sbc	r25, r25
     44c:	0e 94 8a 0b 	call	0x1714	; 0x1714 <__floatsisf>
     450:	20 e0       	ldi	r18, 0x00	; 0
     452:	30 e0       	ldi	r19, 0x00	; 0
     454:	4f e7       	ldi	r20, 0x7F	; 127
     456:	53 e4       	ldi	r21, 0x43	; 67
     458:	0e 94 4a 0c 	call	0x1894	; 0x1894 <__mulsf3>
     45c:	20 e0       	ldi	r18, 0x00	; 0
     45e:	30 e0       	ldi	r19, 0x00	; 0
     460:	48 e4       	ldi	r20, 0x48	; 72
     462:	52 e4       	ldi	r21, 0x42	; 66
     464:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <__divsf3>
     468:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <__fixsfsi>
     46c:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     470:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
		OCR1B = 0x00;
     474:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
     478:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
     47c:	08 95       	ret

0000047e <m_bus_init>:

// PUBLIC FUNCTIONS
void m_bus_init(void)
{
	// ENABLE PULLUPS
	set(PORTD,0);
     47e:	58 9a       	sbi	0x0b, 0	; 11
	set(PORTD,1);
     480:	59 9a       	sbi	0x0b, 1	; 11
	set(PORTD,2);
     482:	5a 9a       	sbi	0x0b, 2	; 11
	
	// CONFIGURE THE CLOCK
	TWBR = 12;	// CLK freq = CPU clock / (16 + 2*TWBR*(4^TWPS)), 16MHz clock, TWBR=12, TWPS=00 -> 400kHz
     484:	8c e0       	ldi	r24, 0x0C	; 12
     486:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>

	// ENABLE interrupts in INT2 (D2)
	set(EICRA,ISC21); clear(EICRA,ISC20); // trigger on falling edge
     48a:	e9 e6       	ldi	r30, 0x69	; 105
     48c:	f0 e0       	ldi	r31, 0x00	; 0
     48e:	80 81       	ld	r24, Z
     490:	80 62       	ori	r24, 0x20	; 32
     492:	80 83       	st	Z, r24
     494:	80 81       	ld	r24, Z
     496:	8f 7e       	andi	r24, 0xEF	; 239
     498:	80 83       	st	Z, r24
	set(EIMSK,INT2); // demask the interrupt
     49a:	ea 9a       	sbi	0x1d, 2	; 29
	sei(); // enable global interrupts
     49c:	78 94       	sei
     49e:	08 95       	ret

000004a0 <m_usb_init>:
	phex(i);
}

void m_usb_tx_hexchar(unsigned char i)
{
	phex(i);
     4a0:	81 e0       	ldi	r24, 0x01	; 1
     4a2:	80 93 d7 00 	sts	0x00D7, r24	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
     4a6:	80 ea       	ldi	r24, 0xA0	; 160
     4a8:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
     4ac:	82 e1       	ldi	r24, 0x12	; 18
     4ae:	89 bd       	out	0x29, r24	; 41
     4b0:	09 b4       	in	r0, 0x29	; 41
     4b2:	00 fe       	sbrs	r0, 0
     4b4:	fd cf       	rjmp	.-6      	; 0x4b0 <m_usb_init+0x10>
     4b6:	80 e9       	ldi	r24, 0x90	; 144
     4b8:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
     4bc:	10 92 e0 00 	sts	0x00E0, r1	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
     4c0:	10 92 33 01 	sts	0x0133, r1	; 0x800133 <usb_configuration>
     4c4:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <__data_end>
     4c8:	8c e0       	ldi	r24, 0x0C	; 12
     4ca:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
     4ce:	78 94       	sei
     4d0:	08 95       	ret

000004d2 <m_usb_isconnected>:
     4d2:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <usb_configuration>
     4d6:	08 95       	ret

000004d8 <m_usb_tx_char>:
     4d8:	cf 93       	push	r28
     4da:	df 93       	push	r29
     4dc:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <usb_configuration>
     4e0:	99 23       	and	r25, r25
     4e2:	09 f4       	brne	.+2      	; 0x4e6 <m_usb_tx_char+0xe>
     4e4:	4c c0       	rjmp	.+152    	; 0x57e <m_usb_tx_char+0xa6>
     4e6:	9f b7       	in	r25, 0x3f	; 63
     4e8:	f8 94       	cli
     4ea:	24 e0       	ldi	r18, 0x04	; 4
     4ec:	20 93 e9 00 	sts	0x00E9, r18	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
     4f0:	20 91 31 01 	lds	r18, 0x0131	; 0x800131 <transmit_previous_timeout>
     4f4:	22 23       	and	r18, r18
     4f6:	49 f0       	breq	.+18     	; 0x50a <m_usb_tx_char+0x32>
     4f8:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     4fc:	25 fd       	sbrc	r18, 5
     4fe:	03 c0       	rjmp	.+6      	; 0x506 <m_usb_tx_char+0x2e>
     500:	9f bf       	out	0x3f, r25	; 63
     502:	8f ef       	ldi	r24, 0xFF	; 255
     504:	41 c0       	rjmp	.+130    	; 0x588 <m_usb_tx_char+0xb0>
     506:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <transmit_previous_timeout>
     50a:	30 91 e4 00 	lds	r19, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
     50e:	37 5e       	subi	r19, 0xE7	; 231
     510:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     514:	25 fd       	sbrc	r18, 5
     516:	24 c0       	rjmp	.+72     	; 0x560 <m_usb_tx_char+0x88>
     518:	9f bf       	out	0x3f, r25	; 63
     51a:	90 91 e4 00 	lds	r25, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
     51e:	93 17       	cp	r25, r19
     520:	81 f0       	breq	.+32     	; 0x542 <m_usb_tx_char+0x6a>
     522:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <usb_configuration>
     526:	99 23       	and	r25, r25
     528:	61 f1       	breq	.+88     	; 0x582 <m_usb_tx_char+0xaa>
     52a:	a9 ee       	ldi	r26, 0xE9	; 233
     52c:	b0 e0       	ldi	r27, 0x00	; 0
     52e:	44 e0       	ldi	r20, 0x04	; 4
     530:	e8 ee       	ldi	r30, 0xE8	; 232
     532:	f0 e0       	ldi	r31, 0x00	; 0
     534:	c4 ee       	ldi	r28, 0xE4	; 228
     536:	d0 e0       	ldi	r29, 0x00	; 0
     538:	0d c0       	rjmp	.+26     	; 0x554 <m_usb_tx_char+0x7c>
     53a:	9f bf       	out	0x3f, r25	; 63
     53c:	98 81       	ld	r25, Y
     53e:	93 13       	cpse	r25, r19
     540:	05 c0       	rjmp	.+10     	; 0x54c <m_usb_tx_char+0x74>
     542:	81 e0       	ldi	r24, 0x01	; 1
     544:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <transmit_previous_timeout>
     548:	8f ef       	ldi	r24, 0xFF	; 255
     54a:	1e c0       	rjmp	.+60     	; 0x588 <m_usb_tx_char+0xb0>
     54c:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <usb_configuration>
     550:	99 23       	and	r25, r25
     552:	c9 f0       	breq	.+50     	; 0x586 <m_usb_tx_char+0xae>
     554:	9f b7       	in	r25, 0x3f	; 63
     556:	f8 94       	cli
     558:	4c 93       	st	X, r20
     55a:	20 81       	ld	r18, Z
     55c:	25 ff       	sbrs	r18, 5
     55e:	ed cf       	rjmp	.-38     	; 0x53a <m_usb_tx_char+0x62>
     560:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     564:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     568:	85 fd       	sbrc	r24, 5
     56a:	03 c0       	rjmp	.+6      	; 0x572 <m_usb_tx_char+0x9a>
     56c:	8a e3       	ldi	r24, 0x3A	; 58
     56e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     572:	85 e0       	ldi	r24, 0x05	; 5
     574:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <transmit_flush_timer>
     578:	9f bf       	out	0x3f, r25	; 63
     57a:	80 e0       	ldi	r24, 0x00	; 0
     57c:	05 c0       	rjmp	.+10     	; 0x588 <m_usb_tx_char+0xb0>
     57e:	8f ef       	ldi	r24, 0xFF	; 255
     580:	03 c0       	rjmp	.+6      	; 0x588 <m_usb_tx_char+0xb0>
     582:	8f ef       	ldi	r24, 0xFF	; 255
     584:	01 c0       	rjmp	.+2      	; 0x588 <m_usb_tx_char+0xb0>
     586:	8f ef       	ldi	r24, 0xFF	; 255
     588:	df 91       	pop	r29
     58a:	cf 91       	pop	r28
     58c:	08 95       	ret

0000058e <__vector_10>:
     58e:	1f 92       	push	r1
     590:	0f 92       	push	r0
     592:	0f b6       	in	r0, 0x3f	; 63
     594:	0f 92       	push	r0
     596:	11 24       	eor	r1, r1
     598:	8f 93       	push	r24
     59a:	9f 93       	push	r25
     59c:	ef 93       	push	r30
     59e:	ff 93       	push	r31
     5a0:	e1 ee       	ldi	r30, 0xE1	; 225
     5a2:	f0 e0       	ldi	r31, 0x00	; 0
     5a4:	80 81       	ld	r24, Z
     5a6:	10 82       	st	Z, r1
     5a8:	83 ff       	sbrs	r24, 3
     5aa:	11 c0       	rjmp	.+34     	; 0x5ce <__vector_10+0x40>
     5ac:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
     5b0:	91 e0       	ldi	r25, 0x01	; 1
     5b2:	90 93 eb 00 	sts	0x00EB, r25	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
     5b6:	10 92 ec 00 	sts	0x00EC, r1	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
     5ba:	92 e1       	ldi	r25, 0x12	; 18
     5bc:	90 93 ed 00 	sts	0x00ED, r25	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
     5c0:	98 e0       	ldi	r25, 0x08	; 8
     5c2:	90 93 f0 00 	sts	0x00F0, r25	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
     5c6:	10 92 33 01 	sts	0x0133, r1	; 0x800133 <usb_configuration>
     5ca:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <__data_end>
     5ce:	82 ff       	sbrs	r24, 2
     5d0:	13 c0       	rjmp	.+38     	; 0x5f8 <__vector_10+0x6a>
     5d2:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <usb_configuration>
     5d6:	88 23       	and	r24, r24
     5d8:	79 f0       	breq	.+30     	; 0x5f8 <__vector_10+0x6a>
     5da:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <transmit_flush_timer>
     5de:	88 23       	and	r24, r24
     5e0:	59 f0       	breq	.+22     	; 0x5f8 <__vector_10+0x6a>
     5e2:	81 50       	subi	r24, 0x01	; 1
     5e4:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <transmit_flush_timer>
     5e8:	81 11       	cpse	r24, r1
     5ea:	06 c0       	rjmp	.+12     	; 0x5f8 <__vector_10+0x6a>
     5ec:	84 e0       	ldi	r24, 0x04	; 4
     5ee:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
     5f2:	8a e3       	ldi	r24, 0x3A	; 58
     5f4:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     5f8:	ff 91       	pop	r31
     5fa:	ef 91       	pop	r30
     5fc:	9f 91       	pop	r25
     5fe:	8f 91       	pop	r24
     600:	0f 90       	pop	r0
     602:	0f be       	out	0x3f, r0	; 63
     604:	0f 90       	pop	r0
     606:	1f 90       	pop	r1
     608:	18 95       	reti

0000060a <__vector_11>:
     60a:	1f 92       	push	r1
     60c:	0f 92       	push	r0
     60e:	0f b6       	in	r0, 0x3f	; 63
     610:	0f 92       	push	r0
     612:	11 24       	eor	r1, r1
     614:	0f 93       	push	r16
     616:	1f 93       	push	r17
     618:	2f 93       	push	r18
     61a:	3f 93       	push	r19
     61c:	4f 93       	push	r20
     61e:	5f 93       	push	r21
     620:	6f 93       	push	r22
     622:	7f 93       	push	r23
     624:	8f 93       	push	r24
     626:	9f 93       	push	r25
     628:	af 93       	push	r26
     62a:	bf 93       	push	r27
     62c:	cf 93       	push	r28
     62e:	df 93       	push	r29
     630:	ef 93       	push	r30
     632:	ff 93       	push	r31
     634:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
     638:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     63c:	83 ff       	sbrs	r24, 3
     63e:	4c c1       	rjmp	.+664    	; 0x8d8 <__vector_11+0x2ce>
     640:	e1 ef       	ldi	r30, 0xF1	; 241
     642:	f0 e0       	ldi	r31, 0x00	; 0
     644:	60 81       	ld	r22, Z
     646:	80 81       	ld	r24, Z
     648:	20 81       	ld	r18, Z
     64a:	90 81       	ld	r25, Z
     64c:	30 e0       	ldi	r19, 0x00	; 0
     64e:	39 2b       	or	r19, r25
     650:	40 81       	ld	r20, Z
     652:	90 81       	ld	r25, Z
     654:	50 e0       	ldi	r21, 0x00	; 0
     656:	59 2b       	or	r21, r25
     658:	70 81       	ld	r23, Z
     65a:	c0 81       	ld	r28, Z
     65c:	92 ef       	ldi	r25, 0xF2	; 242
     65e:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     662:	86 30       	cpi	r24, 0x06	; 6
     664:	09 f0       	breq	.+2      	; 0x668 <__vector_11+0x5e>
     666:	58 c0       	rjmp	.+176    	; 0x718 <__vector_11+0x10e>
     668:	04 c0       	rjmp	.+8      	; 0x672 <__vector_11+0x68>
     66a:	81 e2       	ldi	r24, 0x21	; 33
     66c:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
     670:	3a c1       	rjmp	.+628    	; 0x8e6 <__vector_11+0x2dc>
     672:	66 e0       	ldi	r22, 0x06	; 6
     674:	8c e5       	ldi	r24, 0x5C	; 92
     676:	91 e0       	ldi	r25, 0x01	; 1
     678:	fc 01       	movw	r30, r24
     67a:	a5 91       	lpm	r26, Z+
     67c:	b4 91       	lpm	r27, Z
     67e:	2a 17       	cp	r18, r26
     680:	3b 07       	cpc	r19, r27
     682:	11 f0       	breq	.+4      	; 0x688 <__vector_11+0x7e>
     684:	07 96       	adiw	r24, 0x07	; 7
     686:	23 c0       	rjmp	.+70     	; 0x6ce <__vector_11+0xc4>
     688:	fc 01       	movw	r30, r24
     68a:	32 96       	adiw	r30, 0x02	; 2
     68c:	a5 91       	lpm	r26, Z+
     68e:	b4 91       	lpm	r27, Z
     690:	4a 17       	cp	r20, r26
     692:	5b 07       	cpc	r21, r27
     694:	11 f0       	breq	.+4      	; 0x69a <__vector_11+0x90>
     696:	07 96       	adiw	r24, 0x07	; 7
     698:	1a c0       	rjmp	.+52     	; 0x6ce <__vector_11+0xc4>
     69a:	fc 01       	movw	r30, r24
     69c:	34 96       	adiw	r30, 0x04	; 4
     69e:	45 91       	lpm	r20, Z+
     6a0:	54 91       	lpm	r21, Z
     6a2:	fc 01       	movw	r30, r24
     6a4:	36 96       	adiw	r30, 0x06	; 6
     6a6:	24 91       	lpm	r18, Z
     6a8:	87 2f       	mov	r24, r23
     6aa:	90 e0       	ldi	r25, 0x00	; 0
     6ac:	9c 2b       	or	r25, r28
     6ae:	8f 3f       	cpi	r24, 0xFF	; 255
     6b0:	91 05       	cpc	r25, r1
     6b2:	19 f0       	breq	.+6      	; 0x6ba <__vector_11+0xb0>
     6b4:	10 f0       	brcs	.+4      	; 0x6ba <__vector_11+0xb0>
     6b6:	8f ef       	ldi	r24, 0xFF	; 255
     6b8:	90 e0       	ldi	r25, 0x00	; 0
     6ba:	82 17       	cp	r24, r18
     6bc:	08 f4       	brcc	.+2      	; 0x6c0 <__vector_11+0xb6>
     6be:	28 2f       	mov	r18, r24
     6c0:	a8 ee       	ldi	r26, 0xE8	; 232
     6c2:	b0 e0       	ldi	r27, 0x00	; 0
     6c4:	70 e1       	ldi	r23, 0x10	; 16
     6c6:	6e ef       	ldi	r22, 0xFE	; 254
     6c8:	c1 ef       	ldi	r28, 0xF1	; 241
     6ca:	d0 e0       	ldi	r29, 0x00	; 0
     6cc:	03 c0       	rjmp	.+6      	; 0x6d4 <__vector_11+0xca>
     6ce:	61 50       	subi	r22, 0x01	; 1
     6d0:	99 f6       	brne	.-90     	; 0x678 <__vector_11+0x6e>
     6d2:	cb cf       	rjmp	.-106    	; 0x66a <__vector_11+0x60>
     6d4:	8c 91       	ld	r24, X
     6d6:	98 2f       	mov	r25, r24
     6d8:	95 70       	andi	r25, 0x05	; 5
     6da:	e1 f3       	breq	.-8      	; 0x6d4 <__vector_11+0xca>
     6dc:	82 fd       	sbrc	r24, 2
     6de:	03 c1       	rjmp	.+518    	; 0x8e6 <__vector_11+0x2dc>
     6e0:	32 2f       	mov	r19, r18
     6e2:	21 31       	cpi	r18, 0x11	; 17
     6e4:	08 f0       	brcs	.+2      	; 0x6e8 <__vector_11+0xde>
     6e6:	37 2f       	mov	r19, r23
     6e8:	33 23       	and	r19, r19
     6ea:	09 f4       	brne	.+2      	; 0x6ee <__vector_11+0xe4>
     6ec:	f9 c0       	rjmp	.+498    	; 0x8e0 <__vector_11+0x2d6>
     6ee:	fa 01       	movw	r30, r20
     6f0:	83 2f       	mov	r24, r19
     6f2:	94 91       	lpm	r25, Z
     6f4:	98 83       	st	Y, r25
     6f6:	81 50       	subi	r24, 0x01	; 1
     6f8:	31 96       	adiw	r30, 0x01	; 1
     6fa:	81 11       	cpse	r24, r1
     6fc:	fa cf       	rjmp	.-12     	; 0x6f2 <__vector_11+0xe8>
     6fe:	8f ef       	ldi	r24, 0xFF	; 255
     700:	83 0f       	add	r24, r19
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	01 96       	adiw	r24, 0x01	; 1
     706:	48 0f       	add	r20, r24
     708:	59 1f       	adc	r21, r25
     70a:	23 1b       	sub	r18, r19
     70c:	6c 93       	st	X, r22
     70e:	21 11       	cpse	r18, r1
     710:	e1 cf       	rjmp	.-62     	; 0x6d4 <__vector_11+0xca>
     712:	30 31       	cpi	r19, 0x10	; 16
     714:	f9 f2       	breq	.-66     	; 0x6d4 <__vector_11+0xca>
     716:	e7 c0       	rjmp	.+462    	; 0x8e6 <__vector_11+0x2dc>
     718:	85 30       	cpi	r24, 0x05	; 5
     71a:	61 f4       	brne	.+24     	; 0x734 <__vector_11+0x12a>
     71c:	8e ef       	ldi	r24, 0xFE	; 254
     71e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     722:	e8 ee       	ldi	r30, 0xE8	; 232
     724:	f0 e0       	ldi	r31, 0x00	; 0
     726:	80 81       	ld	r24, Z
     728:	80 ff       	sbrs	r24, 0
     72a:	fd cf       	rjmp	.-6      	; 0x726 <__vector_11+0x11c>
     72c:	20 68       	ori	r18, 0x80	; 128
     72e:	20 93 e3 00 	sts	0x00E3, r18	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
     732:	d9 c0       	rjmp	.+434    	; 0x8e6 <__vector_11+0x2dc>
     734:	89 30       	cpi	r24, 0x09	; 9
     736:	09 f0       	breq	.+2      	; 0x73a <__vector_11+0x130>
     738:	35 c0       	rjmp	.+106    	; 0x7a4 <__vector_11+0x19a>
     73a:	61 11       	cpse	r22, r1
     73c:	cd c0       	rjmp	.+410    	; 0x8d8 <__vector_11+0x2ce>
     73e:	20 93 33 01 	sts	0x0133, r18	; 0x800133 <usb_configuration>
     742:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <__data_end>
     746:	10 92 32 01 	sts	0x0132, r1	; 0x800132 <transmit_flush_timer>
     74a:	8e ef       	ldi	r24, 0xFE	; 254
     74c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     750:	81 e0       	ldi	r24, 0x01	; 1
     752:	25 e0       	ldi	r18, 0x05	; 5
     754:	32 e0       	ldi	r19, 0x02	; 2
     756:	c9 ee       	ldi	r28, 0xE9	; 233
     758:	d0 e0       	ldi	r29, 0x00	; 0
     75a:	ab ee       	ldi	r26, 0xEB	; 235
     75c:	b0 e0       	ldi	r27, 0x00	; 0
     75e:	0c ee       	ldi	r16, 0xEC	; 236
     760:	10 e0       	ldi	r17, 0x00	; 0
     762:	6d ee       	ldi	r22, 0xED	; 237
     764:	70 e0       	ldi	r23, 0x00	; 0
     766:	88 83       	st	Y, r24
     768:	a9 01       	movw	r20, r18
     76a:	4f 5f       	subi	r20, 0xFF	; 255
     76c:	5f 4f       	sbci	r21, 0xFF	; 255
     76e:	f9 01       	movw	r30, r18
     770:	94 91       	lpm	r25, Z
     772:	9c 93       	st	X, r25
     774:	99 23       	and	r25, r25
     776:	61 f0       	breq	.+24     	; 0x790 <__vector_11+0x186>
     778:	fa 01       	movw	r30, r20
     77a:	44 91       	lpm	r20, Z
     77c:	f8 01       	movw	r30, r16
     77e:	40 83       	st	Z, r20
     780:	f9 01       	movw	r30, r18
     782:	32 96       	adiw	r30, 0x02	; 2
     784:	94 91       	lpm	r25, Z
     786:	2d 5f       	subi	r18, 0xFD	; 253
     788:	3f 4f       	sbci	r19, 0xFF	; 255
     78a:	fb 01       	movw	r30, r22
     78c:	90 83       	st	Z, r25
     78e:	01 c0       	rjmp	.+2      	; 0x792 <__vector_11+0x188>
     790:	9a 01       	movw	r18, r20
     792:	8f 5f       	subi	r24, 0xFF	; 255
     794:	85 30       	cpi	r24, 0x05	; 5
     796:	39 f7       	brne	.-50     	; 0x766 <__vector_11+0x15c>
     798:	ea ee       	ldi	r30, 0xEA	; 234
     79a:	f0 e0       	ldi	r31, 0x00	; 0
     79c:	8e e1       	ldi	r24, 0x1E	; 30
     79e:	80 83       	st	Z, r24
     7a0:	10 82       	st	Z, r1
     7a2:	a1 c0       	rjmp	.+322    	; 0x8e6 <__vector_11+0x2dc>
     7a4:	88 30       	cpi	r24, 0x08	; 8
     7a6:	81 f4       	brne	.+32     	; 0x7c8 <__vector_11+0x1be>
     7a8:	60 38       	cpi	r22, 0x80	; 128
     7aa:	09 f0       	breq	.+2      	; 0x7ae <__vector_11+0x1a4>
     7ac:	95 c0       	rjmp	.+298    	; 0x8d8 <__vector_11+0x2ce>
     7ae:	e8 ee       	ldi	r30, 0xE8	; 232
     7b0:	f0 e0       	ldi	r31, 0x00	; 0
     7b2:	80 81       	ld	r24, Z
     7b4:	80 ff       	sbrs	r24, 0
     7b6:	fd cf       	rjmp	.-6      	; 0x7b2 <__vector_11+0x1a8>
     7b8:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <usb_configuration>
     7bc:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     7c0:	8e ef       	ldi	r24, 0xFE	; 254
     7c2:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     7c6:	8f c0       	rjmp	.+286    	; 0x8e6 <__vector_11+0x2dc>
     7c8:	81 32       	cpi	r24, 0x21	; 33
     7ca:	b9 f4       	brne	.+46     	; 0x7fa <__vector_11+0x1f0>
     7cc:	61 3a       	cpi	r22, 0xA1	; 161
     7ce:	09 f0       	breq	.+2      	; 0x7d2 <__vector_11+0x1c8>
     7d0:	83 c0       	rjmp	.+262    	; 0x8d8 <__vector_11+0x2ce>
     7d2:	e8 ee       	ldi	r30, 0xE8	; 232
     7d4:	f0 e0       	ldi	r31, 0x00	; 0
     7d6:	80 81       	ld	r24, Z
     7d8:	80 ff       	sbrs	r24, 0
     7da:	fd cf       	rjmp	.-6      	; 0x7d6 <__vector_11+0x1cc>
     7dc:	e0 e0       	ldi	r30, 0x00	; 0
     7de:	f1 e0       	ldi	r31, 0x01	; 1
     7e0:	27 e0       	ldi	r18, 0x07	; 7
     7e2:	31 e0       	ldi	r19, 0x01	; 1
     7e4:	a1 ef       	ldi	r26, 0xF1	; 241
     7e6:	b0 e0       	ldi	r27, 0x00	; 0
     7e8:	81 91       	ld	r24, Z+
     7ea:	8c 93       	st	X, r24
     7ec:	e2 17       	cp	r30, r18
     7ee:	f3 07       	cpc	r31, r19
     7f0:	d9 f7       	brne	.-10     	; 0x7e8 <__vector_11+0x1de>
     7f2:	8e ef       	ldi	r24, 0xFE	; 254
     7f4:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     7f8:	76 c0       	rjmp	.+236    	; 0x8e6 <__vector_11+0x2dc>
     7fa:	80 32       	cpi	r24, 0x20	; 32
     7fc:	d1 f4       	brne	.+52     	; 0x832 <__vector_11+0x228>
     7fe:	61 32       	cpi	r22, 0x21	; 33
     800:	09 f0       	breq	.+2      	; 0x804 <__vector_11+0x1fa>
     802:	6a c0       	rjmp	.+212    	; 0x8d8 <__vector_11+0x2ce>
     804:	e8 ee       	ldi	r30, 0xE8	; 232
     806:	f0 e0       	ldi	r31, 0x00	; 0
     808:	80 81       	ld	r24, Z
     80a:	82 ff       	sbrs	r24, 2
     80c:	fd cf       	rjmp	.-6      	; 0x808 <__vector_11+0x1fe>
     80e:	e0 e0       	ldi	r30, 0x00	; 0
     810:	f1 e0       	ldi	r31, 0x01	; 1
     812:	27 e0       	ldi	r18, 0x07	; 7
     814:	31 e0       	ldi	r19, 0x01	; 1
     816:	a1 ef       	ldi	r26, 0xF1	; 241
     818:	b0 e0       	ldi	r27, 0x00	; 0
     81a:	8c 91       	ld	r24, X
     81c:	81 93       	st	Z+, r24
     81e:	e2 17       	cp	r30, r18
     820:	f3 07       	cpc	r31, r19
     822:	d9 f7       	brne	.-10     	; 0x81a <__vector_11+0x210>
     824:	e8 ee       	ldi	r30, 0xE8	; 232
     826:	f0 e0       	ldi	r31, 0x00	; 0
     828:	8b ef       	ldi	r24, 0xFB	; 251
     82a:	80 83       	st	Z, r24
     82c:	8e ef       	ldi	r24, 0xFE	; 254
     82e:	80 83       	st	Z, r24
     830:	5a c0       	rjmp	.+180    	; 0x8e6 <__vector_11+0x2dc>
     832:	82 32       	cpi	r24, 0x22	; 34
     834:	71 f4       	brne	.+28     	; 0x852 <__vector_11+0x248>
     836:	61 32       	cpi	r22, 0x21	; 33
     838:	09 f0       	breq	.+2      	; 0x83c <__vector_11+0x232>
     83a:	4e c0       	rjmp	.+156    	; 0x8d8 <__vector_11+0x2ce>
     83c:	20 93 30 01 	sts	0x0130, r18	; 0x800130 <__data_end>
     840:	e8 ee       	ldi	r30, 0xE8	; 232
     842:	f0 e0       	ldi	r31, 0x00	; 0
     844:	80 81       	ld	r24, Z
     846:	80 ff       	sbrs	r24, 0
     848:	fd cf       	rjmp	.-6      	; 0x844 <__vector_11+0x23a>
     84a:	8e ef       	ldi	r24, 0xFE	; 254
     84c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     850:	4a c0       	rjmp	.+148    	; 0x8e6 <__vector_11+0x2dc>
     852:	81 11       	cpse	r24, r1
     854:	1a c0       	rjmp	.+52     	; 0x88a <__vector_11+0x280>
     856:	e8 ee       	ldi	r30, 0xE8	; 232
     858:	f0 e0       	ldi	r31, 0x00	; 0
     85a:	80 81       	ld	r24, Z
     85c:	80 ff       	sbrs	r24, 0
     85e:	fd cf       	rjmp	.-6      	; 0x85a <__vector_11+0x250>
     860:	62 38       	cpi	r22, 0x82	; 130
     862:	51 f4       	brne	.+20     	; 0x878 <__vector_11+0x26e>
     864:	e9 ee       	ldi	r30, 0xE9	; 233
     866:	f0 e0       	ldi	r31, 0x00	; 0
     868:	40 83       	st	Z, r20
     86a:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
     86e:	85 fb       	bst	r24, 5
     870:	88 27       	eor	r24, r24
     872:	80 f9       	bld	r24, 0
     874:	10 82       	st	Z, r1
     876:	01 c0       	rjmp	.+2      	; 0x87a <__vector_11+0x270>
     878:	80 e0       	ldi	r24, 0x00	; 0
     87a:	e1 ef       	ldi	r30, 0xF1	; 241
     87c:	f0 e0       	ldi	r31, 0x00	; 0
     87e:	80 83       	st	Z, r24
     880:	10 82       	st	Z, r1
     882:	8e ef       	ldi	r24, 0xFE	; 254
     884:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     888:	2e c0       	rjmp	.+92     	; 0x8e6 <__vector_11+0x2dc>
     88a:	98 2f       	mov	r25, r24
     88c:	9d 7f       	andi	r25, 0xFD	; 253
     88e:	91 30       	cpi	r25, 0x01	; 1
     890:	19 f5       	brne	.+70     	; 0x8d8 <__vector_11+0x2ce>
     892:	62 30       	cpi	r22, 0x02	; 2
     894:	09 f5       	brne	.+66     	; 0x8d8 <__vector_11+0x2ce>
     896:	23 2b       	or	r18, r19
     898:	f9 f4       	brne	.+62     	; 0x8d8 <__vector_11+0x2ce>
     89a:	4f 77       	andi	r20, 0x7F	; 127
     89c:	9f ef       	ldi	r25, 0xFF	; 255
     89e:	94 0f       	add	r25, r20
     8a0:	94 30       	cpi	r25, 0x04	; 4
     8a2:	d0 f4       	brcc	.+52     	; 0x8d8 <__vector_11+0x2ce>
     8a4:	9e ef       	ldi	r25, 0xFE	; 254
     8a6:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     8aa:	40 93 e9 00 	sts	0x00E9, r20	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
     8ae:	83 30       	cpi	r24, 0x03	; 3
     8b0:	21 f4       	brne	.+8      	; 0x8ba <__vector_11+0x2b0>
     8b2:	81 e2       	ldi	r24, 0x21	; 33
     8b4:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
     8b8:	16 c0       	rjmp	.+44     	; 0x8e6 <__vector_11+0x2dc>
     8ba:	89 e1       	ldi	r24, 0x19	; 25
     8bc:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
     8c0:	81 e0       	ldi	r24, 0x01	; 1
     8c2:	90 e0       	ldi	r25, 0x00	; 0
     8c4:	02 c0       	rjmp	.+4      	; 0x8ca <__vector_11+0x2c0>
     8c6:	88 0f       	add	r24, r24
     8c8:	99 1f       	adc	r25, r25
     8ca:	4a 95       	dec	r20
     8cc:	e2 f7       	brpl	.-8      	; 0x8c6 <__vector_11+0x2bc>
     8ce:	ea ee       	ldi	r30, 0xEA	; 234
     8d0:	f0 e0       	ldi	r31, 0x00	; 0
     8d2:	80 83       	st	Z, r24
     8d4:	10 82       	st	Z, r1
     8d6:	07 c0       	rjmp	.+14     	; 0x8e6 <__vector_11+0x2dc>
     8d8:	81 e2       	ldi	r24, 0x21	; 33
     8da:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
     8de:	03 c0       	rjmp	.+6      	; 0x8e6 <__vector_11+0x2dc>
     8e0:	6c 93       	st	X, r22
     8e2:	21 11       	cpse	r18, r1
     8e4:	f7 ce       	rjmp	.-530    	; 0x6d4 <__vector_11+0xca>
     8e6:	ff 91       	pop	r31
     8e8:	ef 91       	pop	r30
     8ea:	df 91       	pop	r29
     8ec:	cf 91       	pop	r28
     8ee:	bf 91       	pop	r27
     8f0:	af 91       	pop	r26
     8f2:	9f 91       	pop	r25
     8f4:	8f 91       	pop	r24
     8f6:	7f 91       	pop	r23
     8f8:	6f 91       	pop	r22
     8fa:	5f 91       	pop	r21
     8fc:	4f 91       	pop	r20
     8fe:	3f 91       	pop	r19
     900:	2f 91       	pop	r18
     902:	1f 91       	pop	r17
     904:	0f 91       	pop	r16
     906:	0f 90       	pop	r0
     908:	0f be       	out	0x3f, r0	; 63
     90a:	0f 90       	pop	r0
     90c:	1f 90       	pop	r1
     90e:	18 95       	reti

00000910 <m_usb_tx_int>:
}

void m_usb_tx_int(int i)
{
     910:	ef 92       	push	r14
     912:	ff 92       	push	r15
     914:	0f 93       	push	r16
     916:	1f 93       	push	r17
     918:	cf 93       	push	r28
     91a:	df 93       	push	r29
     91c:	cd b7       	in	r28, 0x3d	; 61
     91e:	de b7       	in	r29, 0x3e	; 62
     920:	27 97       	sbiw	r28, 0x07	; 7
     922:	0f b6       	in	r0, 0x3f	; 63
     924:	f8 94       	cli
     926:	de bf       	out	0x3e, r29	; 62
     928:	0f be       	out	0x3f, r0	; 63
     92a:	cd bf       	out	0x3d, r28	; 61
	char string[7] = {0,0,0,0,0,0,0};
     92c:	8e 01       	movw	r16, r28
     92e:	0f 5f       	subi	r16, 0xFF	; 255
     930:	1f 4f       	sbci	r17, 0xFF	; 255
     932:	27 e0       	ldi	r18, 0x07	; 7
     934:	f8 01       	movw	r30, r16
     936:	11 92       	st	Z+, r1
     938:	2a 95       	dec	r18
     93a:	e9 f7       	brne	.-6      	; 0x936 <m_usb_tx_int+0x26>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     93c:	4a e0       	ldi	r20, 0x0A	; 10
     93e:	b8 01       	movw	r22, r16
     940:	0e 94 35 0e 	call	0x1c6a	; 0x1c6a <__itoa_ncheck>
     944:	7e 01       	movw	r14, r28
     946:	f8 e0       	ldi	r31, 0x08	; 8
     948:	ef 0e       	add	r14, r31
     94a:	f1 1c       	adc	r15, r1
	itoa(i,string,10);
	for(i=0;i<7;i++){
        if(string[i]){
     94c:	f8 01       	movw	r30, r16
     94e:	81 91       	ld	r24, Z+
     950:	8f 01       	movw	r16, r30
     952:	81 11       	cpse	r24, r1
            m_usb_tx_char(string[i]);
     954:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <m_usb_tx_char>

void m_usb_tx_int(int i)
{
	char string[7] = {0,0,0,0,0,0,0};
	itoa(i,string,10);
	for(i=0;i<7;i++){
     958:	0e 15       	cp	r16, r14
     95a:	1f 05       	cpc	r17, r15
     95c:	b9 f7       	brne	.-18     	; 0x94c <m_usb_tx_int+0x3c>
        if(string[i]){
            m_usb_tx_char(string[i]);
        }
	}
}
     95e:	27 96       	adiw	r28, 0x07	; 7
     960:	0f b6       	in	r0, 0x3f	; 63
     962:	f8 94       	cli
     964:	de bf       	out	0x3e, r29	; 62
     966:	0f be       	out	0x3f, r0	; 63
     968:	cd bf       	out	0x3d, r28	; 61
     96a:	df 91       	pop	r29
     96c:	cf 91       	pop	r28
     96e:	1f 91       	pop	r17
     970:	0f 91       	pop	r16
     972:	ff 90       	pop	r15
     974:	ef 90       	pop	r14
     976:	08 95       	ret

00000978 <twi_wait>:
	}
}

unsigned char twi_wait(void)
{
	unsigned int wait=0;
     978:	20 e0       	ldi	r18, 0x00	; 0
     97a:	30 e0       	ldi	r19, 0x00	; 0
	while((!(TWCR & (1<<TWINT))) && (wait++<TWI_MAX_WAIT)){};	// wait for acknowledgement that they byte was sent
     97c:	ec eb       	ldi	r30, 0xBC	; 188
     97e:	f0 e0       	ldi	r31, 0x00	; 0
     980:	80 81       	ld	r24, Z
     982:	88 23       	and	r24, r24
     984:	34 f0       	brlt	.+12     	; 0x992 <twi_wait+0x1a>
     986:	2f 5f       	subi	r18, 0xFF	; 255
     988:	3f 4f       	sbci	r19, 0xFF	; 255
     98a:	29 3e       	cpi	r18, 0xE9	; 233
     98c:	83 e0       	ldi	r24, 0x03	; 3
     98e:	38 07       	cpc	r19, r24
     990:	b9 f7       	brne	.-18     	; 0x980 <twi_wait+0x8>
	if(wait==TWI_MAX_WAIT)
     992:	81 e0       	ldi	r24, 0x01	; 1
     994:	28 3e       	cpi	r18, 0xE8	; 232
     996:	33 40       	sbci	r19, 0x03	; 3
     998:	09 f4       	brne	.+2      	; 0x99c <twi_wait+0x24>
     99a:	80 e0       	ldi	r24, 0x00	; 0
	{
		return 0;					// fail
	} else {
		return 1;					// success
	}
}
     99c:	08 95       	ret

0000099e <send_byte>:
	return 1;	// success
}	

unsigned char send_byte(unsigned char byte)
{
	TWDR = byte;					// load the byte
     99e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR = (1<<TWINT) | (1<<TWEN);	// send the byte
     9a2:	84 e8       	ldi	r24, 0x84	; 132
     9a4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	if(twi_wait())					// timed out
     9a8:	0e 94 bc 04 	call	0x978	; 0x978 <twi_wait>
     9ac:	88 23       	and	r24, r24
     9ae:	19 f0       	breq	.+6      	; 0x9b6 <send_byte+0x18>
	{
		return (TWSR & 0xF8);		// return the status with prescaler bits masked out
     9b0:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     9b4:	88 7f       	andi	r24, 0xF8	; 248
	} else {
		return 0;					// comm failure
	}
}
     9b6:	08 95       	ret

000009b8 <start_write>:
//
//


unsigned char start_write(unsigned char address)
{
     9b8:	cf 93       	push	r28
     9ba:	c8 2f       	mov	r28, r24
	unsigned char status;
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
     9bc:	94 ea       	ldi	r25, 0xA4	; 164
     9be:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	if(!twi_wait())
     9c2:	0e 94 bc 04 	call	0x978	; 0x978 <twi_wait>
     9c6:	88 23       	and	r24, r24
     9c8:	61 f0       	breq	.+24     	; 0x9e2 <start_write+0x2a>
	{
		return 0;
	}
	
	// ADDRESS
	status = send_byte(address<<1);
     9ca:	8c 2f       	mov	r24, r28
     9cc:	88 0f       	add	r24, r24
     9ce:	0e 94 cf 04 	call	0x99e	; 0x99e <send_byte>
	if(status== 0x20){ // ACK was not received - may not be connected/listening
     9d2:	80 32       	cpi	r24, 0x20	; 32
     9d4:	29 f4       	brne	.+10     	; 0x9e0 <start_write+0x28>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
     9d6:	84 e9       	ldi	r24, 0x94	; 148
     9d8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
		return 0;	// failure
     9dc:	80 e0       	ldi	r24, 0x00	; 0
     9de:	01 c0       	rjmp	.+2      	; 0x9e2 <start_write+0x2a>
	}	
	return 1;	// success
     9e0:	81 e0       	ldi	r24, 0x01	; 1
}	
     9e2:	cf 91       	pop	r28
     9e4:	08 95       	ret

000009e6 <m_wii_open>:
unsigned char twi_wait(void);
void end(void);

char m_wii_open()
{	
	m_bus_init();
     9e6:	0e 94 3f 02 	call	0x47e	; 0x47e <m_bus_init>

	// enter configuration mode
	if(!start_write(MWIITWIADDR)){return 0;}
     9ea:	88 e5       	ldi	r24, 0x58	; 88
     9ec:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <start_write>
     9f0:	88 23       	and	r24, r24
     9f2:	09 f4       	brne	.+2      	; 0x9f6 <m_wii_open+0x10>
     9f4:	cd c0       	rjmp	.+410    	; 0xb90 <__stack+0x91>
	if(!send_byte(0x30)){return 0;}
     9f6:	80 e3       	ldi	r24, 0x30	; 48
     9f8:	0e 94 cf 04 	call	0x99e	; 0x99e <send_byte>
     9fc:	88 23       	and	r24, r24
     9fe:	09 f4       	brne	.+2      	; 0xa02 <m_wii_open+0x1c>
     a00:	c9 c0       	rjmp	.+402    	; 0xb94 <__stack+0x95>
	if(!send_byte(0x01)){return 0;}
     a02:	81 e0       	ldi	r24, 0x01	; 1
     a04:	0e 94 cf 04 	call	0x99e	; 0x99e <send_byte>
     a08:	88 23       	and	r24, r24
     a0a:	09 f4       	brne	.+2      	; 0xa0e <m_wii_open+0x28>
     a0c:	c5 c0       	rjmp	.+394    	; 0xb98 <__stack+0x99>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
     a0e:	84 e9       	ldi	r24, 0x94	; 148
     a10:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     a14:	83 ec       	ldi	r24, 0xC3	; 195
     a16:	99 e0       	ldi	r25, 0x09	; 9
     a18:	01 97       	sbiw	r24, 0x01	; 1
     a1a:	f1 f7       	brne	.-4      	; 0xa18 <m_wii_open+0x32>
     a1c:	00 c0       	rjmp	.+0      	; 0xa1e <m_wii_open+0x38>
     a1e:	00 00       	nop
	if(!send_byte(0x01)){return 0;}
	end();
	m_wait(INTERPACKET);
		
	// sensitivity setting, part 1
	if(!start_write(MWIITWIADDR)){return 0;}
     a20:	88 e5       	ldi	r24, 0x58	; 88
     a22:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <start_write>
     a26:	88 23       	and	r24, r24
     a28:	09 f4       	brne	.+2      	; 0xa2c <m_wii_open+0x46>
     a2a:	b8 c0       	rjmp	.+368    	; 0xb9c <__stack+0x9d>
	if(!send_byte(0x00)){return 0;}
     a2c:	80 e0       	ldi	r24, 0x00	; 0
     a2e:	0e 94 cf 04 	call	0x99e	; 0x99e <send_byte>
     a32:	88 23       	and	r24, r24
     a34:	09 f4       	brne	.+2      	; 0xa38 <m_wii_open+0x52>
     a36:	b4 c0       	rjmp	.+360    	; 0xba0 <__stack+0xa1>
	if(!send_byte(0x00)){return 0;}
     a38:	80 e0       	ldi	r24, 0x00	; 0
     a3a:	0e 94 cf 04 	call	0x99e	; 0x99e <send_byte>
     a3e:	88 23       	and	r24, r24
     a40:	09 f4       	brne	.+2      	; 0xa44 <m_wii_open+0x5e>
     a42:	b0 c0       	rjmp	.+352    	; 0xba4 <__stack+0xa5>
	if(!send_byte(0x00)){return 0;}
     a44:	80 e0       	ldi	r24, 0x00	; 0
     a46:	0e 94 cf 04 	call	0x99e	; 0x99e <send_byte>
     a4a:	88 23       	and	r24, r24
     a4c:	09 f4       	brne	.+2      	; 0xa50 <m_wii_open+0x6a>
     a4e:	ac c0       	rjmp	.+344    	; 0xba8 <__stack+0xa9>
	if(!send_byte(0x00)){return 0;}
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	0e 94 cf 04 	call	0x99e	; 0x99e <send_byte>
     a56:	88 23       	and	r24, r24
     a58:	09 f4       	brne	.+2      	; 0xa5c <m_wii_open+0x76>
     a5a:	a8 c0       	rjmp	.+336    	; 0xbac <__stack+0xad>
	if(!send_byte(0x00)){return 0;}
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	0e 94 cf 04 	call	0x99e	; 0x99e <send_byte>
     a62:	88 23       	and	r24, r24
     a64:	09 f4       	brne	.+2      	; 0xa68 <m_wii_open+0x82>
     a66:	a4 c0       	rjmp	.+328    	; 0xbb0 <__stack+0xb1>
	if(!send_byte(0x00)){return 0;}
     a68:	80 e0       	ldi	r24, 0x00	; 0
     a6a:	0e 94 cf 04 	call	0x99e	; 0x99e <send_byte>
     a6e:	88 23       	and	r24, r24
     a70:	09 f4       	brne	.+2      	; 0xa74 <m_wii_open+0x8e>
     a72:	a0 c0       	rjmp	.+320    	; 0xbb4 <__stack+0xb5>
	if(!send_byte(0x00)){return 0;}
     a74:	80 e0       	ldi	r24, 0x00	; 0
     a76:	0e 94 cf 04 	call	0x99e	; 0x99e <send_byte>
     a7a:	88 23       	and	r24, r24
     a7c:	09 f4       	brne	.+2      	; 0xa80 <m_wii_open+0x9a>
     a7e:	9c c0       	rjmp	.+312    	; 0xbb8 <__stack+0xb9>
	if(!send_byte(0x90)){return 0;} // p0
     a80:	80 e9       	ldi	r24, 0x90	; 144
     a82:	0e 94 cf 04 	call	0x99e	; 0x99e <send_byte>
     a86:	88 23       	and	r24, r24
     a88:	09 f4       	brne	.+2      	; 0xa8c <m_wii_open+0xa6>
     a8a:	98 c0       	rjmp	.+304    	; 0xbbc <__stack+0xbd>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
     a8c:	84 e9       	ldi	r24, 0x94	; 148
     a8e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     a92:	83 ec       	ldi	r24, 0xC3	; 195
     a94:	99 e0       	ldi	r25, 0x09	; 9
     a96:	01 97       	sbiw	r24, 0x01	; 1
     a98:	f1 f7       	brne	.-4      	; 0xa96 <m_wii_open+0xb0>
     a9a:	00 c0       	rjmp	.+0      	; 0xa9c <m_wii_open+0xb6>
     a9c:	00 00       	nop
	end();

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 2
	if(!start_write(MWIITWIADDR)){return 0;}
     a9e:	88 e5       	ldi	r24, 0x58	; 88
     aa0:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <start_write>
     aa4:	88 23       	and	r24, r24
     aa6:	09 f4       	brne	.+2      	; 0xaaa <m_wii_open+0xc4>
     aa8:	8b c0       	rjmp	.+278    	; 0xbc0 <__stack+0xc1>
	if(!send_byte(0x07)){return 0;}
     aaa:	87 e0       	ldi	r24, 0x07	; 7
     aac:	0e 94 cf 04 	call	0x99e	; 0x99e <send_byte>
     ab0:	88 23       	and	r24, r24
     ab2:	09 f4       	brne	.+2      	; 0xab6 <m_wii_open+0xd0>
     ab4:	87 c0       	rjmp	.+270    	; 0xbc4 <__stack+0xc5>
	if(!send_byte(0x00)){return 0;}
     ab6:	80 e0       	ldi	r24, 0x00	; 0
     ab8:	0e 94 cf 04 	call	0x99e	; 0x99e <send_byte>
     abc:	88 23       	and	r24, r24
     abe:	09 f4       	brne	.+2      	; 0xac2 <m_wii_open+0xdc>
     ac0:	83 c0       	rjmp	.+262    	; 0xbc8 <__stack+0xc9>
	if(!send_byte(0x41)){return 0;} // p1
     ac2:	81 e4       	ldi	r24, 0x41	; 65
     ac4:	0e 94 cf 04 	call	0x99e	; 0x99e <send_byte>
     ac8:	88 23       	and	r24, r24
     aca:	09 f4       	brne	.+2      	; 0xace <m_wii_open+0xe8>
     acc:	7f c0       	rjmp	.+254    	; 0xbcc <__stack+0xcd>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
     ace:	84 e9       	ldi	r24, 0x94	; 148
     ad0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     ad4:	83 ec       	ldi	r24, 0xC3	; 195
     ad6:	99 e0       	ldi	r25, 0x09	; 9
     ad8:	01 97       	sbiw	r24, 0x01	; 1
     ada:	f1 f7       	brne	.-4      	; 0xad8 <m_wii_open+0xf2>
     adc:	00 c0       	rjmp	.+0      	; 0xade <m_wii_open+0xf8>
     ade:	00 00       	nop
	end();

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 3
	if(!start_write(MWIITWIADDR)){return 0;}
     ae0:	88 e5       	ldi	r24, 0x58	; 88
     ae2:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <start_write>
     ae6:	88 23       	and	r24, r24
     ae8:	09 f4       	brne	.+2      	; 0xaec <m_wii_open+0x106>
     aea:	72 c0       	rjmp	.+228    	; 0xbd0 <__stack+0xd1>
	if(!send_byte(0x1A)){return 0;}
     aec:	8a e1       	ldi	r24, 0x1A	; 26
     aee:	0e 94 cf 04 	call	0x99e	; 0x99e <send_byte>
     af2:	88 23       	and	r24, r24
     af4:	09 f4       	brne	.+2      	; 0xaf8 <m_wii_open+0x112>
     af6:	6e c0       	rjmp	.+220    	; 0xbd4 <__stack+0xd5>
	if(!send_byte(0x40)){return 0;} // p2
     af8:	80 e4       	ldi	r24, 0x40	; 64
     afa:	0e 94 cf 04 	call	0x99e	; 0x99e <send_byte>
     afe:	88 23       	and	r24, r24
     b00:	09 f4       	brne	.+2      	; 0xb04 <__stack+0x5>
     b02:	6a c0       	rjmp	.+212    	; 0xbd8 <__stack+0xd9>
	if(!send_byte(0x00)){return 0;} // p3
     b04:	80 e0       	ldi	r24, 0x00	; 0
     b06:	0e 94 cf 04 	call	0x99e	; 0x99e <send_byte>
     b0a:	88 23       	and	r24, r24
     b0c:	09 f4       	brne	.+2      	; 0xb10 <__stack+0x11>
     b0e:	66 c0       	rjmp	.+204    	; 0xbdc <__stack+0xdd>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
     b10:	84 e9       	ldi	r24, 0x94	; 148
     b12:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     b16:	83 ec       	ldi	r24, 0xC3	; 195
     b18:	99 e0       	ldi	r25, 0x09	; 9
     b1a:	01 97       	sbiw	r24, 0x01	; 1
     b1c:	f1 f7       	brne	.-4      	; 0xb1a <__stack+0x1b>
     b1e:	00 c0       	rjmp	.+0      	; 0xb20 <__stack+0x21>
     b20:	00 00       	nop
	end();

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
     b22:	88 e5       	ldi	r24, 0x58	; 88
     b24:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <start_write>
     b28:	88 23       	and	r24, r24
     b2a:	09 f4       	brne	.+2      	; 0xb2e <__stack+0x2f>
     b2c:	59 c0       	rjmp	.+178    	; 0xbe0 <__stack+0xe1>
	if(!send_byte(0x33)){return 0;}
     b2e:	83 e3       	ldi	r24, 0x33	; 51
     b30:	0e 94 cf 04 	call	0x99e	; 0x99e <send_byte>
     b34:	88 23       	and	r24, r24
     b36:	09 f4       	brne	.+2      	; 0xb3a <__stack+0x3b>
     b38:	55 c0       	rjmp	.+170    	; 0xbe4 <__stack+0xe5>
	if(!send_byte(0x03)){return 0;}
     b3a:	83 e0       	ldi	r24, 0x03	; 3
     b3c:	0e 94 cf 04 	call	0x99e	; 0x99e <send_byte>
     b40:	88 23       	and	r24, r24
     b42:	09 f4       	brne	.+2      	; 0xb46 <__stack+0x47>
     b44:	51 c0       	rjmp	.+162    	; 0xbe8 <__stack+0xe9>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
     b46:	84 e9       	ldi	r24, 0x94	; 148
     b48:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     b4c:	83 ec       	ldi	r24, 0xC3	; 195
     b4e:	99 e0       	ldi	r25, 0x09	; 9
     b50:	01 97       	sbiw	r24, 0x01	; 1
     b52:	f1 f7       	brne	.-4      	; 0xb50 <__stack+0x51>
     b54:	00 c0       	rjmp	.+0      	; 0xb56 <__stack+0x57>
     b56:	00 00       	nop
	end();

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
     b58:	88 e5       	ldi	r24, 0x58	; 88
     b5a:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <start_write>
     b5e:	88 23       	and	r24, r24
     b60:	09 f4       	brne	.+2      	; 0xb64 <__stack+0x65>
     b62:	44 c0       	rjmp	.+136    	; 0xbec <__stack+0xed>
	if(!send_byte(0x30)){return 0;}
     b64:	80 e3       	ldi	r24, 0x30	; 48
     b66:	0e 94 cf 04 	call	0x99e	; 0x99e <send_byte>
     b6a:	88 23       	and	r24, r24
     b6c:	09 f4       	brne	.+2      	; 0xb70 <__stack+0x71>
     b6e:	40 c0       	rjmp	.+128    	; 0xbf0 <__stack+0xf1>
	if(!send_byte(0x08)){return 0;}
     b70:	88 e0       	ldi	r24, 0x08	; 8
     b72:	0e 94 cf 04 	call	0x99e	; 0x99e <send_byte>
     b76:	88 23       	and	r24, r24
     b78:	e9 f1       	breq	.+122    	; 0xbf4 <__stack+0xf5>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
     b7a:	84 e9       	ldi	r24, 0x94	; 148
     b7c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     b80:	83 ec       	ldi	r24, 0xC3	; 195
     b82:	99 e0       	ldi	r25, 0x09	; 9
     b84:	01 97       	sbiw	r24, 0x01	; 1
     b86:	f1 f7       	brne	.-4      	; 0xb84 <__stack+0x85>
     b88:	00 c0       	rjmp	.+0      	; 0xb8a <__stack+0x8b>
     b8a:	00 00       	nop
	if(!send_byte(0x08)){return 0;}
	end();
	
	m_wait(INTERPACKET);

	return 1;
     b8c:	81 e0       	ldi	r24, 0x01	; 1
     b8e:	08 95       	ret
char m_wii_open()
{	
	m_bus_init();

	// enter configuration mode
	if(!start_write(MWIITWIADDR)){return 0;}
     b90:	80 e0       	ldi	r24, 0x00	; 0
     b92:	08 95       	ret
	if(!send_byte(0x30)){return 0;}
     b94:	80 e0       	ldi	r24, 0x00	; 0
     b96:	08 95       	ret
	if(!send_byte(0x01)){return 0;}
     b98:	80 e0       	ldi	r24, 0x00	; 0
     b9a:	08 95       	ret
	end();
	m_wait(INTERPACKET);
		
	// sensitivity setting, part 1
	if(!start_write(MWIITWIADDR)){return 0;}
     b9c:	80 e0       	ldi	r24, 0x00	; 0
     b9e:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
     ba0:	80 e0       	ldi	r24, 0x00	; 0
     ba2:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
     ba4:	80 e0       	ldi	r24, 0x00	; 0
     ba6:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
     ba8:	80 e0       	ldi	r24, 0x00	; 0
     baa:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
     bac:	80 e0       	ldi	r24, 0x00	; 0
     bae:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
     bb0:	80 e0       	ldi	r24, 0x00	; 0
     bb2:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
     bb4:	80 e0       	ldi	r24, 0x00	; 0
     bb6:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
     bb8:	80 e0       	ldi	r24, 0x00	; 0
     bba:	08 95       	ret
	if(!send_byte(0x90)){return 0;} // p0
     bbc:	80 e0       	ldi	r24, 0x00	; 0
     bbe:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 2
	if(!start_write(MWIITWIADDR)){return 0;}
     bc0:	80 e0       	ldi	r24, 0x00	; 0
     bc2:	08 95       	ret
	if(!send_byte(0x07)){return 0;}
     bc4:	80 e0       	ldi	r24, 0x00	; 0
     bc6:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
     bc8:	80 e0       	ldi	r24, 0x00	; 0
     bca:	08 95       	ret
	if(!send_byte(0x41)){return 0;} // p1
     bcc:	80 e0       	ldi	r24, 0x00	; 0
     bce:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 3
	if(!start_write(MWIITWIADDR)){return 0;}
     bd0:	80 e0       	ldi	r24, 0x00	; 0
     bd2:	08 95       	ret
	if(!send_byte(0x1A)){return 0;}
     bd4:	80 e0       	ldi	r24, 0x00	; 0
     bd6:	08 95       	ret
	if(!send_byte(0x40)){return 0;} // p2
     bd8:	80 e0       	ldi	r24, 0x00	; 0
     bda:	08 95       	ret
	if(!send_byte(0x00)){return 0;} // p3
     bdc:	80 e0       	ldi	r24, 0x00	; 0
     bde:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
     be0:	80 e0       	ldi	r24, 0x00	; 0
     be2:	08 95       	ret
	if(!send_byte(0x33)){return 0;}
     be4:	80 e0       	ldi	r24, 0x00	; 0
     be6:	08 95       	ret
	if(!send_byte(0x03)){return 0;}
     be8:	80 e0       	ldi	r24, 0x00	; 0
     bea:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
     bec:	80 e0       	ldi	r24, 0x00	; 0
     bee:	08 95       	ret
	if(!send_byte(0x30)){return 0;}
     bf0:	80 e0       	ldi	r24, 0x00	; 0
     bf2:	08 95       	ret
	if(!send_byte(0x08)){return 0;}
     bf4:	80 e0       	ldi	r24, 0x00	; 0
	end();
	
	m_wait(INTERPACKET);

	return 1;
}
     bf6:	08 95       	ret

00000bf8 <start_read>:
	}	
	return 1;	// success
}	

unsigned char start_read(unsigned char address)
{
     bf8:	cf 93       	push	r28
     bfa:	c8 2f       	mov	r28, r24
	unsigned char status;
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
     bfc:	84 ea       	ldi	r24, 0xA4	; 164
     bfe:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	if(!twi_wait())
     c02:	0e 94 bc 04 	call	0x978	; 0x978 <twi_wait>
     c06:	88 23       	and	r24, r24
     c08:	69 f0       	breq	.+26     	; 0xc24 <start_read+0x2c>
	{
		return 0;
	}
	
	// ADDRESS
	status = send_byte(((address<<1) + 1));
     c0a:	8c 2f       	mov	r24, r28
     c0c:	88 0f       	add	r24, r24
     c0e:	8f 5f       	subi	r24, 0xFF	; 255
     c10:	0e 94 cf 04 	call	0x99e	; 0x99e <send_byte>
	if(status== 0x48){ // ACK was not received - may not be connected/listening
     c14:	88 34       	cpi	r24, 0x48	; 72
     c16:	29 f4       	brne	.+10     	; 0xc22 <start_read+0x2a>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
     c18:	84 e9       	ldi	r24, 0x94	; 148
     c1a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
		return 0;	// failure
     c1e:	80 e0       	ldi	r24, 0x00	; 0
     c20:	01 c0       	rjmp	.+2      	; 0xc24 <start_read+0x2c>
	}	
	return 1;	// success
     c22:	81 e0       	ldi	r24, 0x01	; 1
}	
     c24:	cf 91       	pop	r28
     c26:	08 95       	ret

00000c28 <m_wii_read>:

	return 1;
}

char m_wii_read(unsigned int* blob_data)
{
     c28:	0f 93       	push	r16
     c2a:	1f 93       	push	r17
     c2c:	cf 93       	push	r28
     c2e:	df 93       	push	r29
     c30:	cd b7       	in	r28, 0x3d	; 61
     c32:	de b7       	in	r29, 0x3e	; 62
     c34:	60 97       	sbiw	r28, 0x10	; 16
     c36:	0f b6       	in	r0, 0x3f	; 63
     c38:	f8 94       	cli
     c3a:	de bf       	out	0x3e, r29	; 62
     c3c:	0f be       	out	0x3f, r0	; 63
     c3e:	cd bf       	out	0x3d, r28	; 61
     c40:	8c 01       	movw	r16, r24
	int i;
	unsigned char temp[16] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
     c42:	fe 01       	movw	r30, r28
     c44:	31 96       	adiw	r30, 0x01	; 1
     c46:	80 e1       	ldi	r24, 0x10	; 16
     c48:	df 01       	movw	r26, r30
     c4a:	1d 92       	st	X+, r1
     c4c:	8a 95       	dec	r24
     c4e:	e9 f7       	brne	.-6      	; 0xc4a <m_wii_read+0x22>
	
	// prepare for reading
	if(!start_write(MWIITWIADDR)){return 0;}
     c50:	88 e5       	ldi	r24, 0x58	; 88
     c52:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <start_write>
     c56:	88 23       	and	r24, r24
     c58:	09 f4       	brne	.+2      	; 0xc5c <m_wii_read+0x34>
     c5a:	69 c0       	rjmp	.+210    	; 0xd2e <m_wii_read+0x106>
	if(!send_byte(0x36)){return 0;}
     c5c:	86 e3       	ldi	r24, 0x36	; 54
     c5e:	0e 94 cf 04 	call	0x99e	; 0x99e <send_byte>
     c62:	88 23       	and	r24, r24
     c64:	09 f4       	brne	.+2      	; 0xc68 <m_wii_read+0x40>
     c66:	65 c0       	rjmp	.+202    	; 0xd32 <m_wii_read+0x10a>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
     c68:	84 e9       	ldi	r24, 0x94	; 148
     c6a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     c6e:	b8 e0       	ldi	r27, 0x08	; 8
     c70:	ba 95       	dec	r27
     c72:	f1 f7       	brne	.-4      	; 0xc70 <m_wii_read+0x48>
     c74:	00 00       	nop
	if(!send_byte(0x36)){return 0;}
	end();

	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
     c76:	88 e5       	ldi	r24, 0x58	; 88
     c78:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <start_read>
     c7c:	88 23       	and	r24, r24
     c7e:	09 f4       	brne	.+2      	; 0xc82 <m_wii_read+0x5a>
     c80:	5a c0       	rjmp	.+180    	; 0xd36 <m_wii_read+0x10e>
     c82:	be 01       	movw	r22, r28
     c84:	6f 5f       	subi	r22, 0xFF	; 255
     c86:	7f 4f       	sbci	r23, 0xFF	; 255
     c88:	ae 01       	movw	r20, r28
     c8a:	40 5f       	subi	r20, 0xF0	; 240
     c8c:	5f 4f       	sbci	r21, 0xFF	; 255
	for(i=0;i<15;i++)
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
     c8e:	ec eb       	ldi	r30, 0xBC	; 188
     c90:	f0 e0       	ldi	r31, 0x00	; 0
     c92:	84 ec       	ldi	r24, 0xC4	; 196
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		temp[i] = TWDR;
     c94:	2b eb       	ldi	r18, 0xBB	; 187
     c96:	30 e0       	ldi	r19, 0x00	; 0
	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
	for(i=0;i<15;i++)
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
     c98:	80 83       	st	Z, r24
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
     c9a:	90 81       	ld	r25, Z
     c9c:	99 23       	and	r25, r25
     c9e:	ec f7       	brge	.-6      	; 0xc9a <m_wii_read+0x72>
		temp[i] = TWDR;
     ca0:	d9 01       	movw	r26, r18
     ca2:	9c 91       	ld	r25, X
     ca4:	db 01       	movw	r26, r22
     ca6:	9d 93       	st	X+, r25
     ca8:	bd 01       	movw	r22, r26
	end();

	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
	for(i=0;i<15;i++)
     caa:	a4 17       	cp	r26, r20
     cac:	b5 07       	cpc	r27, r21
     cae:	a1 f7       	brne	.-24     	; 0xc98 <m_wii_read+0x70>
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		temp[i] = TWDR;
	}
	TWCR = (1<<TWINT) | (1<<TWEN);	// clear the flag, no ACK, and wait for another byte
     cb0:	84 e8       	ldi	r24, 0x84	; 132
     cb2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
     cb6:	ec eb       	ldi	r30, 0xBC	; 188
     cb8:	f0 e0       	ldi	r31, 0x00	; 0
     cba:	80 81       	ld	r24, Z
     cbc:	88 23       	and	r24, r24
     cbe:	ec f7       	brge	.-6      	; 0xcba <m_wii_read+0x92>
	temp[15] = TWDR;
     cc0:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     cc4:	88 8b       	std	Y+16, r24	; 0x10
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
     cc6:	84 e9       	ldi	r24, 0x94	; 148
     cc8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     ccc:	be 01       	movw	r22, r28
     cce:	6c 5f       	subi	r22, 0xFC	; 252
     cd0:	7f 4f       	sbci	r23, 0xFF	; 255
     cd2:	f8 01       	movw	r30, r16
     cd4:	08 5e       	subi	r16, 0xE8	; 232
     cd6:	1f 4f       	sbci	r17, 0xFF	; 255
	temp[15] = TWDR;
	end();

	for(i=0;i<10;i+=3) // for each blob:
	{	// i = 0, 3, 6, 9
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
     cd8:	db 01       	movw	r26, r22
     cda:	2c 91       	ld	r18, X
     cdc:	32 2f       	mov	r19, r18
     cde:	30 73       	andi	r19, 0x30	; 48
     ce0:	cb 01       	movw	r24, r22
     ce2:	02 97       	sbiw	r24, 0x02	; 2
     ce4:	dc 01       	movw	r26, r24
     ce6:	8c 91       	ld	r24, X
     ce8:	90 e0       	ldi	r25, 0x00	; 0
     cea:	b0 e1       	ldi	r27, 0x10	; 16
     cec:	3b 9f       	mul	r19, r27
     cee:	80 0d       	add	r24, r0
     cf0:	91 1d       	adc	r25, r1
     cf2:	11 24       	eor	r1, r1
     cf4:	91 83       	std	Z+1, r25	; 0x01
     cf6:	80 83       	st	Z, r24
		blob_data[i+1] = (unsigned int)temp[i+2] + ((int)(temp[i+3] & 0b11000000) <<2);	// Y
     cf8:	42 2f       	mov	r20, r18
     cfa:	40 7c       	andi	r20, 0xC0	; 192
     cfc:	50 e0       	ldi	r21, 0x00	; 0
     cfe:	44 0f       	add	r20, r20
     d00:	55 1f       	adc	r21, r21
     d02:	44 0f       	add	r20, r20
     d04:	55 1f       	adc	r21, r21
     d06:	cb 01       	movw	r24, r22
     d08:	01 97       	sbiw	r24, 0x01	; 1
     d0a:	dc 01       	movw	r26, r24
     d0c:	8c 91       	ld	r24, X
     d0e:	48 0f       	add	r20, r24
     d10:	51 1d       	adc	r21, r1
     d12:	53 83       	std	Z+3, r21	; 0x03
     d14:	42 83       	std	Z+2, r20	; 0x02
		blob_data[i+2] = temp[i+3] & 0b00001111;										// size
     d16:	2f 70       	andi	r18, 0x0F	; 15
     d18:	30 e0       	ldi	r19, 0x00	; 0
     d1a:	35 83       	std	Z+5, r19	; 0x05
     d1c:	24 83       	std	Z+4, r18	; 0x04
     d1e:	6d 5f       	subi	r22, 0xFD	; 253
     d20:	7f 4f       	sbci	r23, 0xFF	; 255
     d22:	36 96       	adiw	r30, 0x06	; 6
	TWCR = (1<<TWINT) | (1<<TWEN);	// clear the flag, no ACK, and wait for another byte
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
	temp[15] = TWDR;
	end();

	for(i=0;i<10;i+=3) // for each blob:
     d24:	e0 17       	cp	r30, r16
     d26:	f1 07       	cpc	r31, r17
     d28:	b9 f6       	brne	.-82     	; 0xcd8 <m_wii_read+0xb0>
	{	// i = 0, 3, 6, 9
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
		blob_data[i+1] = (unsigned int)temp[i+2] + ((int)(temp[i+3] & 0b11000000) <<2);	// Y
		blob_data[i+2] = temp[i+3] & 0b00001111;										// size
	}
	return 1;
     d2a:	81 e0       	ldi	r24, 0x01	; 1
     d2c:	05 c0       	rjmp	.+10     	; 0xd38 <m_wii_read+0x110>
{
	int i;
	unsigned char temp[16] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
	
	// prepare for reading
	if(!start_write(MWIITWIADDR)){return 0;}
     d2e:	80 e0       	ldi	r24, 0x00	; 0
     d30:	03 c0       	rjmp	.+6      	; 0xd38 <m_wii_read+0x110>
	if(!send_byte(0x36)){return 0;}
     d32:	80 e0       	ldi	r24, 0x00	; 0
     d34:	01 c0       	rjmp	.+2      	; 0xd38 <m_wii_read+0x110>
	end();

	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
     d36:	80 e0       	ldi	r24, 0x00	; 0
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
		blob_data[i+1] = (unsigned int)temp[i+2] + ((int)(temp[i+3] & 0b11000000) <<2);	// Y
		blob_data[i+2] = temp[i+3] & 0b00001111;										// size
	}
	return 1;
}
     d38:	60 96       	adiw	r28, 0x10	; 16
     d3a:	0f b6       	in	r0, 0x3f	; 63
     d3c:	f8 94       	cli
     d3e:	de bf       	out	0x3e, r29	; 62
     d40:	0f be       	out	0x3f, r0	; 63
     d42:	cd bf       	out	0x3d, r28	; 61
     d44:	df 91       	pop	r29
     d46:	cf 91       	pop	r28
     d48:	1f 91       	pop	r17
     d4a:	0f 91       	pop	r16
     d4c:	08 95       	ret

00000d4e <interpret>:

#define PI 3.14159265359


/* Interpret the measurement vector returned by mWii and update Robot struct data */
void interpret(Robot* robot, unsigned int* measurement){
     d4e:	2f 92       	push	r2
     d50:	3f 92       	push	r3
     d52:	4f 92       	push	r4
     d54:	5f 92       	push	r5
     d56:	6f 92       	push	r6
     d58:	7f 92       	push	r7
     d5a:	8f 92       	push	r8
     d5c:	9f 92       	push	r9
     d5e:	af 92       	push	r10
     d60:	bf 92       	push	r11
     d62:	cf 92       	push	r12
     d64:	df 92       	push	r13
     d66:	ef 92       	push	r14
     d68:	ff 92       	push	r15
     d6a:	0f 93       	push	r16
     d6c:	1f 93       	push	r17
     d6e:	cf 93       	push	r28
     d70:	df 93       	push	r29
     d72:	cd b7       	in	r28, 0x3d	; 61
     d74:	de b7       	in	r29, 0x3e	; 62
     d76:	cc 56       	subi	r28, 0x6C	; 108
     d78:	d1 09       	sbc	r29, r1
     d7a:	0f b6       	in	r0, 0x3f	; 63
     d7c:	f8 94       	cli
     d7e:	de bf       	out	0x3e, r29	; 62
     d80:	0f be       	out	0x3f, r0	; 63
     d82:	cd bf       	out	0x3d, r28	; 61
     d84:	ad 96       	adiw	r28, 0x2d	; 45
     d86:	9f af       	std	Y+63, r25	; 0x3f
     d88:	8e af       	std	Y+62, r24	; 0x3e
     d8a:	ad 97       	sbiw	r28, 0x2d	; 45
     d8c:	8b 01       	movw	r16, r22
	int const RINK_SIZE[2] = {230, 120};	// cm
	float const CENTERED_STARS[4][2] = {{-0.2730, -17.3060}, {11.3820, 5.9350}, {-0.2730, 11.6940}, {-10.8360, -0.3230}}; // cm
     d8e:	80 e2       	ldi	r24, 0x20	; 32
     d90:	e7 e0       	ldi	r30, 0x07	; 7
     d92:	f1 e0       	ldi	r31, 0x01	; 1
     d94:	de 01       	movw	r26, r28
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	01 90       	ld	r0, Z+
     d9a:	0d 92       	st	X+, r0
     d9c:	8a 95       	dec	r24
     d9e:	e1 f7       	brne	.-8      	; 0xd98 <interpret+0x4a>
	float const CENTERED_RATIOS[4] = {.328537, .243655, .222032, .205776}; // Ratios of distances of each star from center
	float const STAR_TRANSLATION[2] = {0.2730, 2.8060};	// cm

	// extract x and y data from measurement
	float mx[] = { measurement[0], measurement[3], measurement[6], measurement[9] };
     da0:	db 01       	movw	r26, r22
     da2:	6d 91       	ld	r22, X+
     da4:	7c 91       	ld	r23, X
     da6:	80 e0       	ldi	r24, 0x00	; 0
     da8:	90 e0       	ldi	r25, 0x00	; 0
     daa:	0e 94 88 0b 	call	0x1710	; 0x1710 <__floatunsisf>
     dae:	69 a3       	std	Y+33, r22	; 0x21
     db0:	7a a3       	std	Y+34, r23	; 0x22
     db2:	8b a3       	std	Y+35, r24	; 0x23
     db4:	9c a3       	std	Y+36, r25	; 0x24
     db6:	f8 01       	movw	r30, r16
     db8:	66 81       	ldd	r22, Z+6	; 0x06
     dba:	77 81       	ldd	r23, Z+7	; 0x07
     dbc:	80 e0       	ldi	r24, 0x00	; 0
     dbe:	90 e0       	ldi	r25, 0x00	; 0
     dc0:	0e 94 88 0b 	call	0x1710	; 0x1710 <__floatunsisf>
     dc4:	6d a3       	std	Y+37, r22	; 0x25
     dc6:	7e a3       	std	Y+38, r23	; 0x26
     dc8:	8f a3       	std	Y+39, r24	; 0x27
     dca:	98 a7       	std	Y+40, r25	; 0x28
     dcc:	d8 01       	movw	r26, r16
     dce:	1c 96       	adiw	r26, 0x0c	; 12
     dd0:	6d 91       	ld	r22, X+
     dd2:	7c 91       	ld	r23, X
     dd4:	1d 97       	sbiw	r26, 0x0d	; 13
     dd6:	80 e0       	ldi	r24, 0x00	; 0
     dd8:	90 e0       	ldi	r25, 0x00	; 0
     dda:	0e 94 88 0b 	call	0x1710	; 0x1710 <__floatunsisf>
     dde:	69 a7       	std	Y+41, r22	; 0x29
     de0:	7a a7       	std	Y+42, r23	; 0x2a
     de2:	8b a7       	std	Y+43, r24	; 0x2b
     de4:	9c a7       	std	Y+44, r25	; 0x2c
     de6:	f8 01       	movw	r30, r16
     de8:	62 89       	ldd	r22, Z+18	; 0x12
     dea:	73 89       	ldd	r23, Z+19	; 0x13
     dec:	80 e0       	ldi	r24, 0x00	; 0
     dee:	90 e0       	ldi	r25, 0x00	; 0
     df0:	0e 94 88 0b 	call	0x1710	; 0x1710 <__floatunsisf>
     df4:	6d a7       	std	Y+45, r22	; 0x2d
     df6:	7e a7       	std	Y+46, r23	; 0x2e
     df8:	8f a7       	std	Y+47, r24	; 0x2f
     dfa:	98 ab       	std	Y+48, r25	; 0x30
	float my[] = { measurement[1], measurement[4], measurement[7], measurement[10] };
     dfc:	d8 01       	movw	r26, r16
     dfe:	12 96       	adiw	r26, 0x02	; 2
     e00:	6d 91       	ld	r22, X+
     e02:	7c 91       	ld	r23, X
     e04:	13 97       	sbiw	r26, 0x03	; 3
     e06:	80 e0       	ldi	r24, 0x00	; 0
     e08:	90 e0       	ldi	r25, 0x00	; 0
     e0a:	0e 94 88 0b 	call	0x1710	; 0x1710 <__floatunsisf>
     e0e:	69 ab       	std	Y+49, r22	; 0x31
     e10:	7a ab       	std	Y+50, r23	; 0x32
     e12:	8b ab       	std	Y+51, r24	; 0x33
     e14:	9c ab       	std	Y+52, r25	; 0x34
     e16:	f8 01       	movw	r30, r16
     e18:	60 85       	ldd	r22, Z+8	; 0x08
     e1a:	71 85       	ldd	r23, Z+9	; 0x09
     e1c:	80 e0       	ldi	r24, 0x00	; 0
     e1e:	90 e0       	ldi	r25, 0x00	; 0
     e20:	0e 94 88 0b 	call	0x1710	; 0x1710 <__floatunsisf>
     e24:	6d ab       	std	Y+53, r22	; 0x35
     e26:	7e ab       	std	Y+54, r23	; 0x36
     e28:	8f ab       	std	Y+55, r24	; 0x37
     e2a:	98 af       	std	Y+56, r25	; 0x38
     e2c:	d8 01       	movw	r26, r16
     e2e:	1e 96       	adiw	r26, 0x0e	; 14
     e30:	6d 91       	ld	r22, X+
     e32:	7c 91       	ld	r23, X
     e34:	1f 97       	sbiw	r26, 0x0f	; 15
     e36:	80 e0       	ldi	r24, 0x00	; 0
     e38:	90 e0       	ldi	r25, 0x00	; 0
     e3a:	0e 94 88 0b 	call	0x1710	; 0x1710 <__floatunsisf>
     e3e:	69 af       	std	Y+57, r22	; 0x39
     e40:	7a af       	std	Y+58, r23	; 0x3a
     e42:	8b af       	std	Y+59, r24	; 0x3b
     e44:	9c af       	std	Y+60, r25	; 0x3c
     e46:	f8 01       	movw	r30, r16
     e48:	64 89       	ldd	r22, Z+20	; 0x14
     e4a:	75 89       	ldd	r23, Z+21	; 0x15
     e4c:	80 e0       	ldi	r24, 0x00	; 0
     e4e:	90 e0       	ldi	r25, 0x00	; 0
     e50:	0e 94 88 0b 	call	0x1710	; 0x1710 <__floatunsisf>
     e54:	21 96       	adiw	r28, 0x01	; 1
     e56:	6c af       	std	Y+60, r22	; 0x3c
     e58:	7d af       	std	Y+61, r23	; 0x3d
     e5a:	8e af       	std	Y+62, r24	; 0x3e
     e5c:	9f af       	std	Y+63, r25	; 0x3f
     e5e:	21 97       	sbiw	r28, 0x01	; 1
     e60:	4e 01       	movw	r8, r28
     e62:	f1 e2       	ldi	r31, 0x21	; 33
     e64:	8f 0e       	add	r8, r31
     e66:	91 1c       	adc	r9, r1
     e68:	ce 01       	movw	r24, r28
     e6a:	c1 96       	adiw	r24, 0x31	; 49
     e6c:	a7 96       	adiw	r28, 0x27	; 39
     e6e:	9f af       	std	Y+63, r25	; 0x3f
     e70:	8e af       	std	Y+62, r24	; 0x3e
     e72:	a7 97       	sbiw	r28, 0x27	; 39
     e74:	5c 01       	movw	r10, r24
     e76:	3c 01       	movw	r6, r24
     e78:	84 01       	movw	r16, r8
	
 /* FIND LOCATION (x,y) */
	// find centroid
	int i;
	float centroid[2] = {0, 0};
     e7a:	6d 96       	adiw	r28, 0x1d	; 29
     e7c:	1c ae       	std	Y+60, r1	; 0x3c
     e7e:	1d ae       	std	Y+61, r1	; 0x3d
     e80:	1e ae       	std	Y+62, r1	; 0x3e
     e82:	1f ae       	std	Y+63, r1	; 0x3f
     e84:	6d 97       	sbiw	r28, 0x1d	; 29
     e86:	c1 2c       	mov	r12, r1
     e88:	d1 2c       	mov	r13, r1
     e8a:	76 01       	movw	r14, r12
	for(i=0; i<4; i++){
		centroid[0] += mx[i]/4.0;	// in pixels
     e8c:	d8 01       	movw	r26, r16
     e8e:	6d 91       	ld	r22, X+
     e90:	7d 91       	ld	r23, X+
     e92:	8d 91       	ld	r24, X+
     e94:	9d 91       	ld	r25, X+
     e96:	8d 01       	movw	r16, r26
     e98:	20 e0       	ldi	r18, 0x00	; 0
     e9a:	30 e0       	ldi	r19, 0x00	; 0
     e9c:	40 e8       	ldi	r20, 0x80	; 128
     e9e:	5e e3       	ldi	r21, 0x3E	; 62
     ea0:	0e 94 4a 0c 	call	0x1894	; 0x1894 <__mulsf3>
     ea4:	9b 01       	movw	r18, r22
     ea6:	ac 01       	movw	r20, r24
     ea8:	6d 96       	adiw	r28, 0x1d	; 29
     eaa:	6c ad       	ldd	r22, Y+60	; 0x3c
     eac:	7d ad       	ldd	r23, Y+61	; 0x3d
     eae:	8e ad       	ldd	r24, Y+62	; 0x3e
     eb0:	9f ad       	ldd	r25, Y+63	; 0x3f
     eb2:	6d 97       	sbiw	r28, 0x1d	; 29
     eb4:	0e 94 45 0a 	call	0x148a	; 0x148a <__addsf3>
     eb8:	6d 96       	adiw	r28, 0x1d	; 29
     eba:	6c af       	std	Y+60, r22	; 0x3c
     ebc:	7d af       	std	Y+61, r23	; 0x3d
     ebe:	8e af       	std	Y+62, r24	; 0x3e
     ec0:	9f af       	std	Y+63, r25	; 0x3f
     ec2:	6d 97       	sbiw	r28, 0x1d	; 29
		centroid[1] += my[i]/4.0;	// in pixels
     ec4:	f3 01       	movw	r30, r6
     ec6:	61 91       	ld	r22, Z+
     ec8:	71 91       	ld	r23, Z+
     eca:	81 91       	ld	r24, Z+
     ecc:	91 91       	ld	r25, Z+
     ece:	3f 01       	movw	r6, r30
     ed0:	20 e0       	ldi	r18, 0x00	; 0
     ed2:	30 e0       	ldi	r19, 0x00	; 0
     ed4:	40 e8       	ldi	r20, 0x80	; 128
     ed6:	5e e3       	ldi	r21, 0x3E	; 62
     ed8:	0e 94 4a 0c 	call	0x1894	; 0x1894 <__mulsf3>
     edc:	9b 01       	movw	r18, r22
     ede:	ac 01       	movw	r20, r24
     ee0:	c7 01       	movw	r24, r14
     ee2:	b6 01       	movw	r22, r12
     ee4:	0e 94 45 0a 	call	0x148a	; 0x148a <__addsf3>
     ee8:	6b 01       	movw	r12, r22
     eea:	7c 01       	movw	r14, r24
	
 /* FIND LOCATION (x,y) */
	// find centroid
	int i;
	float centroid[2] = {0, 0};
	for(i=0; i<4; i++){
     eec:	0a 15       	cp	r16, r10
     eee:	1b 05       	cpc	r17, r11
     ef0:	69 f6       	brne	.-102    	; 0xe8c <interpret+0x13e>
     ef2:	a7 96       	adiw	r28, 0x27	; 39
     ef4:	2e ac       	ldd	r2, Y+62	; 0x3e
     ef6:	3f ac       	ldd	r3, Y+63	; 0x3f
     ef8:	a7 97       	sbiw	r28, 0x27	; 39
     efa:	84 01       	movw	r16, r8
     efc:	a5 96       	adiw	r28, 0x25	; 37
     efe:	1c ae       	std	Y+60, r1	; 0x3c
     f00:	1d ae       	std	Y+61, r1	; 0x3d
     f02:	1e ae       	std	Y+62, r1	; 0x3e
     f04:	1f ae       	std	Y+63, r1	; 0x3f
     f06:	a5 97       	sbiw	r28, 0x25	; 37

	// find scale to get to unit size
	// scale = centroid size (sqrt of sum of distances^2 of points from centroid)
	float measurement_scale = 0;
	for(i=0;i<4;i++){
		measurement_scale += pow(mx[i]-centroid[0], 2) + pow(my[i]-centroid[1],2);
     f08:	d8 01       	movw	r26, r16
     f0a:	6d 91       	ld	r22, X+
     f0c:	7d 91       	ld	r23, X+
     f0e:	8d 91       	ld	r24, X+
     f10:	9d 91       	ld	r25, X+
     f12:	8d 01       	movw	r16, r26
     f14:	6d 96       	adiw	r28, 0x1d	; 29
     f16:	2c ad       	ldd	r18, Y+60	; 0x3c
     f18:	3d ad       	ldd	r19, Y+61	; 0x3d
     f1a:	4e ad       	ldd	r20, Y+62	; 0x3e
     f1c:	5f ad       	ldd	r21, Y+63	; 0x3f
     f1e:	6d 97       	sbiw	r28, 0x1d	; 29
     f20:	0e 94 44 0a 	call	0x1488	; 0x1488 <__subsf3>
     f24:	a1 96       	adiw	r28, 0x21	; 33
     f26:	6c af       	std	Y+60, r22	; 0x3c
     f28:	7d af       	std	Y+61, r23	; 0x3d
     f2a:	8e af       	std	Y+62, r24	; 0x3e
     f2c:	9f af       	std	Y+63, r25	; 0x3f
     f2e:	a1 97       	sbiw	r28, 0x21	; 33
     f30:	f1 01       	movw	r30, r2
     f32:	61 91       	ld	r22, Z+
     f34:	71 91       	ld	r23, Z+
     f36:	81 91       	ld	r24, Z+
     f38:	91 91       	ld	r25, Z+
     f3a:	1f 01       	movw	r2, r30
     f3c:	a7 01       	movw	r20, r14
     f3e:	96 01       	movw	r18, r12
     f40:	0e 94 44 0a 	call	0x1488	; 0x1488 <__subsf3>
     f44:	2b 01       	movw	r4, r22
     f46:	3c 01       	movw	r6, r24
     f48:	a1 96       	adiw	r28, 0x21	; 33
     f4a:	2c ad       	ldd	r18, Y+60	; 0x3c
     f4c:	3d ad       	ldd	r19, Y+61	; 0x3d
     f4e:	4e ad       	ldd	r20, Y+62	; 0x3e
     f50:	5f ad       	ldd	r21, Y+63	; 0x3f
     f52:	a1 97       	sbiw	r28, 0x21	; 33
     f54:	ca 01       	movw	r24, r20
     f56:	b9 01       	movw	r22, r18
     f58:	0e 94 4a 0c 	call	0x1894	; 0x1894 <__mulsf3>
     f5c:	a1 96       	adiw	r28, 0x21	; 33
     f5e:	6c af       	std	Y+60, r22	; 0x3c
     f60:	7d af       	std	Y+61, r23	; 0x3d
     f62:	8e af       	std	Y+62, r24	; 0x3e
     f64:	9f af       	std	Y+63, r25	; 0x3f
     f66:	a1 97       	sbiw	r28, 0x21	; 33
     f68:	a3 01       	movw	r20, r6
     f6a:	92 01       	movw	r18, r4
     f6c:	c3 01       	movw	r24, r6
     f6e:	b2 01       	movw	r22, r4
     f70:	0e 94 4a 0c 	call	0x1894	; 0x1894 <__mulsf3>
     f74:	9b 01       	movw	r18, r22
     f76:	ac 01       	movw	r20, r24
     f78:	a1 96       	adiw	r28, 0x21	; 33
     f7a:	6c ad       	ldd	r22, Y+60	; 0x3c
     f7c:	7d ad       	ldd	r23, Y+61	; 0x3d
     f7e:	8e ad       	ldd	r24, Y+62	; 0x3e
     f80:	9f ad       	ldd	r25, Y+63	; 0x3f
     f82:	a1 97       	sbiw	r28, 0x21	; 33
     f84:	0e 94 45 0a 	call	0x148a	; 0x148a <__addsf3>
     f88:	9b 01       	movw	r18, r22
     f8a:	ac 01       	movw	r20, r24
     f8c:	a5 96       	adiw	r28, 0x25	; 37
     f8e:	6c ad       	ldd	r22, Y+60	; 0x3c
     f90:	7d ad       	ldd	r23, Y+61	; 0x3d
     f92:	8e ad       	ldd	r24, Y+62	; 0x3e
     f94:	9f ad       	ldd	r25, Y+63	; 0x3f
     f96:	a5 97       	sbiw	r28, 0x25	; 37
     f98:	0e 94 45 0a 	call	0x148a	; 0x148a <__addsf3>
     f9c:	a5 96       	adiw	r28, 0x25	; 37
     f9e:	6c af       	std	Y+60, r22	; 0x3c
     fa0:	7d af       	std	Y+61, r23	; 0x3d
     fa2:	8e af       	std	Y+62, r24	; 0x3e
     fa4:	9f af       	std	Y+63, r25	; 0x3f
     fa6:	a5 97       	sbiw	r28, 0x25	; 37
	}

	// find scale to get to unit size
	// scale = centroid size (sqrt of sum of distances^2 of points from centroid)
	float measurement_scale = 0;
	for(i=0;i<4;i++){
     fa8:	0a 15       	cp	r16, r10
     faa:	1b 05       	cpc	r17, r11
     fac:	09 f0       	breq	.+2      	; 0xfb0 <interpret+0x262>
     fae:	ac cf       	rjmp	.-168    	; 0xf08 <interpret+0x1ba>
		measurement_scale += pow(mx[i]-centroid[0], 2) + pow(my[i]-centroid[1],2);
	}
	measurement_scale = pow(measurement_scale/4.0, 0.5);	// divide measurement by this to get unit size
     fb0:	20 e0       	ldi	r18, 0x00	; 0
     fb2:	30 e0       	ldi	r19, 0x00	; 0
     fb4:	40 e8       	ldi	r20, 0x80	; 128
     fb6:	5e e3       	ldi	r21, 0x3E	; 62
     fb8:	0e 94 4a 0c 	call	0x1894	; 0x1894 <__mulsf3>
     fbc:	20 e0       	ldi	r18, 0x00	; 0
     fbe:	30 e0       	ldi	r19, 0x00	; 0
     fc0:	40 e0       	ldi	r20, 0x00	; 0
     fc2:	5f e3       	ldi	r21, 0x3F	; 63
     fc4:	0e 94 b7 0c 	call	0x196e	; 0x196e <pow>
     fc8:	9b 01       	movw	r18, r22
     fca:	ac 01       	movw	r20, r24
	
	// convert centroids to cm
	centroid[0] *= RINK_SCALE/measurement_scale;	// now in cm
     fcc:	62 e4       	ldi	r22, 0x42	; 66
     fce:	7e eb       	ldi	r23, 0xBE	; 190
     fd0:	85 e1       	ldi	r24, 0x15	; 21
     fd2:	92 e4       	ldi	r25, 0x42	; 66
     fd4:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <__divsf3>
     fd8:	2b 01       	movw	r4, r22
     fda:	3c 01       	movw	r6, r24
     fdc:	6d 96       	adiw	r28, 0x1d	; 29
     fde:	2c ad       	ldd	r18, Y+60	; 0x3c
     fe0:	3d ad       	ldd	r19, Y+61	; 0x3d
     fe2:	4e ad       	ldd	r20, Y+62	; 0x3e
     fe4:	5f ad       	ldd	r21, Y+63	; 0x3f
     fe6:	6d 97       	sbiw	r28, 0x1d	; 29
     fe8:	0e 94 4a 0c 	call	0x1894	; 0x1894 <__mulsf3>
     fec:	6d 96       	adiw	r28, 0x1d	; 29
     fee:	6c af       	std	Y+60, r22	; 0x3c
     ff0:	7d af       	std	Y+61, r23	; 0x3d
     ff2:	8e af       	std	Y+62, r24	; 0x3e
     ff4:	9f af       	std	Y+63, r25	; 0x3f
     ff6:	6d 97       	sbiw	r28, 0x1d	; 29
	centroid[1] *= RINK_SCALE/measurement_scale;
     ff8:	a3 01       	movw	r20, r6
     ffa:	92 01       	movw	r18, r4
     ffc:	c7 01       	movw	r24, r14
     ffe:	b6 01       	movw	r22, r12
    1000:	0e 94 4a 0c 	call	0x1894	; 0x1894 <__mulsf3>
    1004:	a1 96       	adiw	r28, 0x21	; 33
    1006:	6c af       	std	Y+60, r22	; 0x3c
    1008:	7d af       	std	Y+61, r23	; 0x3d
    100a:	8e af       	std	Y+62, r24	; 0x3e
    100c:	9f af       	std	Y+63, r25	; 0x3f
    100e:	a1 97       	sbiw	r28, 0x21	; 33
	
	// centroid position = robot position
	robot->x = centroid[0] + STAR_TRANSLATION[0];
    1010:	28 ea       	ldi	r18, 0xA8	; 168
    1012:	36 ec       	ldi	r19, 0xC6	; 198
    1014:	4b e8       	ldi	r20, 0x8B	; 139
    1016:	5e e3       	ldi	r21, 0x3E	; 62
    1018:	6d 96       	adiw	r28, 0x1d	; 29
    101a:	6c ad       	ldd	r22, Y+60	; 0x3c
    101c:	7d ad       	ldd	r23, Y+61	; 0x3d
    101e:	8e ad       	ldd	r24, Y+62	; 0x3e
    1020:	9f ad       	ldd	r25, Y+63	; 0x3f
    1022:	6d 97       	sbiw	r28, 0x1d	; 29
    1024:	0e 94 45 0a 	call	0x148a	; 0x148a <__addsf3>
    1028:	ad 96       	adiw	r28, 0x2d	; 45
    102a:	ae ad       	ldd	r26, Y+62	; 0x3e
    102c:	bf ad       	ldd	r27, Y+63	; 0x3f
    102e:	ad 97       	sbiw	r28, 0x2d	; 45
    1030:	6d 93       	st	X+, r22
    1032:	7d 93       	st	X+, r23
    1034:	8d 93       	st	X+, r24
    1036:	9c 93       	st	X, r25
    1038:	13 97       	sbiw	r26, 0x03	; 3
	robot->y = centroid[1] + STAR_TRANSLATION[1];
    103a:	21 e8       	ldi	r18, 0x81	; 129
    103c:	35 e9       	ldi	r19, 0x95	; 149
    103e:	43 e3       	ldi	r20, 0x33	; 51
    1040:	50 e4       	ldi	r21, 0x40	; 64
    1042:	a1 96       	adiw	r28, 0x21	; 33
    1044:	6c ad       	ldd	r22, Y+60	; 0x3c
    1046:	7d ad       	ldd	r23, Y+61	; 0x3d
    1048:	8e ad       	ldd	r24, Y+62	; 0x3e
    104a:	9f ad       	ldd	r25, Y+63	; 0x3f
    104c:	a1 97       	sbiw	r28, 0x21	; 33
    104e:	0e 94 45 0a 	call	0x148a	; 0x148a <__addsf3>
    1052:	ad 96       	adiw	r28, 0x2d	; 45
    1054:	ee ad       	ldd	r30, Y+62	; 0x3e
    1056:	ff ad       	ldd	r31, Y+63	; 0x3f
    1058:	ad 97       	sbiw	r28, 0x2d	; 45
    105a:	64 83       	std	Z+4, r22	; 0x04
    105c:	75 83       	std	Z+5, r23	; 0x05
    105e:	86 83       	std	Z+6, r24	; 0x06
    1060:	97 83       	std	Z+7, r25	; 0x07
    1062:	a7 96       	adiw	r28, 0x27	; 39
    1064:	2e ac       	ldd	r2, Y+62	; 0x3e
    1066:	3f ac       	ldd	r3, Y+63	; 0x3f
    1068:	a7 97       	sbiw	r28, 0x27	; 39
    106a:	84 01       	movw	r16, r8
	
	/* FIND ROTATION ANGLE */ 
	// center and scale star points
	for(i=0;i<4;i++){
		mx[i] *= RINK_SCALE/measurement_scale;
		my[i] *= RINK_SCALE/measurement_scale;
    106c:	d1 01       	movw	r26, r2
    106e:	2d 91       	ld	r18, X+
    1070:	3d 91       	ld	r19, X+
    1072:	4d 91       	ld	r20, X+
    1074:	5c 91       	ld	r21, X
    1076:	c3 01       	movw	r24, r6
    1078:	b2 01       	movw	r22, r4
    107a:	0e 94 4a 0c 	call	0x1894	; 0x1894 <__mulsf3>
    107e:	6b 01       	movw	r12, r22
    1080:	7c 01       	movw	r14, r24
	robot->y = centroid[1] + STAR_TRANSLATION[1];
	
	/* FIND ROTATION ANGLE */ 
	// center and scale star points
	for(i=0;i<4;i++){
		mx[i] *= RINK_SCALE/measurement_scale;
    1082:	f8 01       	movw	r30, r16
    1084:	20 81       	ld	r18, Z
    1086:	31 81       	ldd	r19, Z+1	; 0x01
    1088:	42 81       	ldd	r20, Z+2	; 0x02
    108a:	53 81       	ldd	r21, Z+3	; 0x03
    108c:	c3 01       	movw	r24, r6
    108e:	b2 01       	movw	r22, r4
    1090:	0e 94 4a 0c 	call	0x1894	; 0x1894 <__mulsf3>
		my[i] *= RINK_SCALE/measurement_scale;
		mx[i] -= centroid[0];
    1094:	6d 96       	adiw	r28, 0x1d	; 29
    1096:	2c ad       	ldd	r18, Y+60	; 0x3c
    1098:	3d ad       	ldd	r19, Y+61	; 0x3d
    109a:	4e ad       	ldd	r20, Y+62	; 0x3e
    109c:	5f ad       	ldd	r21, Y+63	; 0x3f
    109e:	6d 97       	sbiw	r28, 0x1d	; 29
    10a0:	0e 94 44 0a 	call	0x1488	; 0x1488 <__subsf3>
    10a4:	d8 01       	movw	r26, r16
    10a6:	6d 93       	st	X+, r22
    10a8:	7d 93       	st	X+, r23
    10aa:	8d 93       	st	X+, r24
    10ac:	9d 93       	st	X+, r25
    10ae:	8d 01       	movw	r16, r26
		my[i] -= centroid[1];
    10b0:	a1 96       	adiw	r28, 0x21	; 33
    10b2:	2c ad       	ldd	r18, Y+60	; 0x3c
    10b4:	3d ad       	ldd	r19, Y+61	; 0x3d
    10b6:	4e ad       	ldd	r20, Y+62	; 0x3e
    10b8:	5f ad       	ldd	r21, Y+63	; 0x3f
    10ba:	a1 97       	sbiw	r28, 0x21	; 33
    10bc:	c7 01       	movw	r24, r14
    10be:	b6 01       	movw	r22, r12
    10c0:	0e 94 44 0a 	call	0x1488	; 0x1488 <__subsf3>
    10c4:	f1 01       	movw	r30, r2
    10c6:	61 93       	st	Z+, r22
    10c8:	71 93       	st	Z+, r23
    10ca:	81 93       	st	Z+, r24
    10cc:	91 93       	st	Z+, r25
    10ce:	1f 01       	movw	r2, r30
	robot->x = centroid[0] + STAR_TRANSLATION[0];
	robot->y = centroid[1] + STAR_TRANSLATION[1];
	
	/* FIND ROTATION ANGLE */ 
	// center and scale star points
	for(i=0;i<4;i++){
    10d0:	0a 15       	cp	r16, r10
    10d2:	1b 05       	cpc	r17, r11
    10d4:	59 f6       	brne	.-106    	; 0x106c <interpret+0x31e>
		my[i] -= centroid[1];
	}
	
	// Find corresponding points based on scale of distance from center over total distance
	float rd[4];
	int indices[4] = {0, 1, 2, 3};
    10d6:	88 e0       	ldi	r24, 0x08	; 8
    10d8:	e7 e2       	ldi	r30, 0x27	; 39
    10da:	f1 e0       	ldi	r31, 0x01	; 1
    10dc:	de 01       	movw	r26, r28
    10de:	af 5a       	subi	r26, 0xAF	; 175
    10e0:	bf 4f       	sbci	r27, 0xFF	; 255
    10e2:	01 90       	ld	r0, Z+
    10e4:	0d 92       	st	X+, r0
    10e6:	8a 95       	dec	r24
    10e8:	e1 f7       	brne	.-8      	; 0x10e2 <interpret+0x394>
    10ea:	1e 01       	movw	r2, r28
    10ec:	f1 e4       	ldi	r31, 0x41	; 65
    10ee:	2f 0e       	add	r2, r31
    10f0:	31 1c       	adc	r3, r1
    10f2:	81 01       	movw	r16, r2
	float total_distance = 0;
    10f4:	6d 96       	adiw	r28, 0x1d	; 29
    10f6:	1c ae       	std	Y+60, r1	; 0x3c
    10f8:	1d ae       	std	Y+61, r1	; 0x3d
    10fa:	1e ae       	std	Y+62, r1	; 0x3e
    10fc:	1f ae       	std	Y+63, r1	; 0x3f
    10fe:	6d 97       	sbiw	r28, 0x1d	; 29
    1100:	6f 96       	adiw	r28, 0x1f	; 31
    1102:	3f ae       	std	Y+63, r3	; 0x3f
    1104:	2e ae       	std	Y+62, r2	; 0x3e
    1106:	6f 97       	sbiw	r28, 0x1f	; 31
    1108:	a7 96       	adiw	r28, 0x27	; 39
    110a:	2e ac       	ldd	r2, Y+62	; 0x3e
    110c:	3f ac       	ldd	r3, Y+63	; 0x3f
    110e:	a7 97       	sbiw	r28, 0x27	; 39

	for (int i = 0; i < 4; i++) {
		rd[i] = pow(pow(mx[i], 2) + pow(my[i], 2), 0.5);
    1110:	d4 01       	movw	r26, r8
    1112:	6d 91       	ld	r22, X+
    1114:	7d 91       	ld	r23, X+
    1116:	8d 91       	ld	r24, X+
    1118:	9d 91       	ld	r25, X+
    111a:	4d 01       	movw	r8, r26
    111c:	f1 01       	movw	r30, r2
    111e:	c1 90       	ld	r12, Z+
    1120:	d1 90       	ld	r13, Z+
    1122:	e1 90       	ld	r14, Z+
    1124:	f1 90       	ld	r15, Z+
    1126:	1f 01       	movw	r2, r30
    1128:	9b 01       	movw	r18, r22
    112a:	ac 01       	movw	r20, r24
    112c:	0e 94 4a 0c 	call	0x1894	; 0x1894 <__mulsf3>
    1130:	2b 01       	movw	r4, r22
    1132:	3c 01       	movw	r6, r24
    1134:	a7 01       	movw	r20, r14
    1136:	96 01       	movw	r18, r12
    1138:	c7 01       	movw	r24, r14
    113a:	b6 01       	movw	r22, r12
    113c:	0e 94 4a 0c 	call	0x1894	; 0x1894 <__mulsf3>
    1140:	9b 01       	movw	r18, r22
    1142:	ac 01       	movw	r20, r24
    1144:	c3 01       	movw	r24, r6
    1146:	b2 01       	movw	r22, r4
    1148:	0e 94 45 0a 	call	0x148a	; 0x148a <__addsf3>
    114c:	20 e0       	ldi	r18, 0x00	; 0
    114e:	30 e0       	ldi	r19, 0x00	; 0
    1150:	40 e0       	ldi	r20, 0x00	; 0
    1152:	5f e3       	ldi	r21, 0x3F	; 63
    1154:	0e 94 b7 0c 	call	0x196e	; 0x196e <pow>
    1158:	9b 01       	movw	r18, r22
    115a:	ac 01       	movw	r20, r24
    115c:	d8 01       	movw	r26, r16
    115e:	6d 93       	st	X+, r22
    1160:	7d 93       	st	X+, r23
    1162:	8d 93       	st	X+, r24
    1164:	9d 93       	st	X+, r25
    1166:	8d 01       	movw	r16, r26
		total_distance += rd[i];
    1168:	6d 96       	adiw	r28, 0x1d	; 29
    116a:	6c ad       	ldd	r22, Y+60	; 0x3c
    116c:	7d ad       	ldd	r23, Y+61	; 0x3d
    116e:	8e ad       	ldd	r24, Y+62	; 0x3e
    1170:	9f ad       	ldd	r25, Y+63	; 0x3f
    1172:	6d 97       	sbiw	r28, 0x1d	; 29
    1174:	0e 94 45 0a 	call	0x148a	; 0x148a <__addsf3>
    1178:	6d 96       	adiw	r28, 0x1d	; 29
    117a:	6c af       	std	Y+60, r22	; 0x3c
    117c:	7d af       	std	Y+61, r23	; 0x3d
    117e:	8e af       	std	Y+62, r24	; 0x3e
    1180:	9f af       	std	Y+63, r25	; 0x3f
    1182:	6d 97       	sbiw	r28, 0x1d	; 29
	// Find corresponding points based on scale of distance from center over total distance
	float rd[4];
	int indices[4] = {0, 1, 2, 3};
	float total_distance = 0;

	for (int i = 0; i < 4; i++) {
    1184:	8a 14       	cp	r8, r10
    1186:	9b 04       	cpc	r9, r11
    1188:	19 f6       	brne	.-122    	; 0x1110 <interpret+0x3c2>
    118a:	6f 96       	adiw	r28, 0x1f	; 31
    118c:	2e ac       	ldd	r2, Y+62	; 0x3e
    118e:	3f ac       	ldd	r3, Y+63	; 0x3f
    1190:	6f 97       	sbiw	r28, 0x1f	; 31
		rd[i] = pow(pow(mx[i], 2) + pow(my[i], 2), 0.5);
		total_distance += rd[i];
	}
	total_distance = pow(total_distance, 0.5);
    1192:	20 e0       	ldi	r18, 0x00	; 0
    1194:	30 e0       	ldi	r19, 0x00	; 0
    1196:	40 e0       	ldi	r20, 0x00	; 0
    1198:	5f e3       	ldi	r21, 0x3F	; 63
    119a:	0e 94 b7 0c 	call	0x196e	; 0x196e <pow>
    119e:	a6 2e       	mov	r10, r22
    11a0:	b7 2e       	mov	r11, r23
    11a2:	c8 2e       	mov	r12, r24
    11a4:	d9 2e       	mov	r13, r25
    11a6:	7e 01       	movw	r14, r28
    11a8:	b1 e5       	ldi	r27, 0x51	; 81
    11aa:	eb 0e       	add	r14, r27
    11ac:	f1 1c       	adc	r15, r1
    11ae:	81 01       	movw	r16, r2

	for (int i = 0; i < 4; i++) {
		rd[i] /= total_distance;
    11b0:	2a 2d       	mov	r18, r10
    11b2:	3b 2d       	mov	r19, r11
    11b4:	4c 2d       	mov	r20, r12
    11b6:	5d 2d       	mov	r21, r13
    11b8:	f8 01       	movw	r30, r16
    11ba:	60 81       	ld	r22, Z
    11bc:	71 81       	ldd	r23, Z+1	; 0x01
    11be:	82 81       	ldd	r24, Z+2	; 0x02
    11c0:	93 81       	ldd	r25, Z+3	; 0x03
    11c2:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <__divsf3>
    11c6:	d8 01       	movw	r26, r16
    11c8:	6d 93       	st	X+, r22
    11ca:	7d 93       	st	X+, r23
    11cc:	8d 93       	st	X+, r24
    11ce:	9d 93       	st	X+, r25
    11d0:	8d 01       	movw	r16, r26
		rd[i] = pow(pow(mx[i], 2) + pow(my[i], 2), 0.5);
		total_distance += rd[i];
	}
	total_distance = pow(total_distance, 0.5);

	for (int i = 0; i < 4; i++) {
    11d2:	ae 15       	cp	r26, r14
    11d4:	bf 05       	cpc	r27, r15
    11d6:	61 f7       	brne	.-40     	; 0x11b0 <interpret+0x462>
    11d8:	fe 01       	movw	r30, r28
    11da:	ef 5a       	subi	r30, 0xAF	; 175
    11dc:	ff 4f       	sbci	r31, 0xFF	; 255
    11de:	ab 96       	adiw	r28, 0x2b	; 43
    11e0:	ff af       	std	Y+63, r31	; 0x3f
    11e2:	ee af       	std	Y+62, r30	; 0x3e
    11e4:	ab 97       	sbiw	r28, 0x2b	; 43
    11e6:	a3 96       	adiw	r28, 0x23	; 35
    11e8:	1f ae       	std	Y+63, r1	; 0x3f
    11ea:	1e ae       	std	Y+62, r1	; 0x3e
    11ec:	a3 97       	sbiw	r28, 0x23	; 35
    11ee:	61 01       	movw	r12, r2
    11f0:	6b 96       	adiw	r28, 0x1b	; 27
    11f2:	ff af       	std	Y+63, r31	; 0x3f
    11f4:	ee af       	std	Y+62, r30	; 0x3e
    11f6:	6b 97       	sbiw	r28, 0x1b	; 27
		rd[i] /= total_distance;
	}

	// Sort ratios and get corresponding indices
	for (int i = 0; i < 4; i++) {
		for (int j = i + 1; j < 4; j++) {
    11f8:	a3 96       	adiw	r28, 0x23	; 35
    11fa:	8e ad       	ldd	r24, Y+62	; 0x3e
    11fc:	9f ad       	ldd	r25, Y+63	; 0x3f
    11fe:	a3 97       	sbiw	r28, 0x23	; 35
    1200:	01 96       	adiw	r24, 0x01	; 1
    1202:	a3 96       	adiw	r28, 0x23	; 35
    1204:	9f af       	std	Y+63, r25	; 0x3f
    1206:	8e af       	std	Y+62, r24	; 0x3e
    1208:	a3 97       	sbiw	r28, 0x23	; 35
    120a:	84 30       	cpi	r24, 0x04	; 4
    120c:	91 05       	cpc	r25, r1
    120e:	09 f4       	brne	.+2      	; 0x1212 <interpret+0x4c4>
    1210:	70 c0       	rjmp	.+224    	; 0x12f2 <interpret+0x5a4>
    1212:	6b 96       	adiw	r28, 0x1b	; 27
    1214:	2e ac       	ldd	r2, Y+62	; 0x3e
    1216:	3f ac       	ldd	r3, Y+63	; 0x3f
    1218:	6b 97       	sbiw	r28, 0x1b	; 27
    121a:	86 01       	movw	r16, r12
    121c:	7c 01       	movw	r14, r24
    121e:	a7 96       	adiw	r28, 0x27	; 39
    1220:	df ae       	std	Y+63, r13	; 0x3f
    1222:	ce ae       	std	Y+62, r12	; 0x3e
    1224:	a7 97       	sbiw	r28, 0x27	; 39
    1226:	6f 96       	adiw	r28, 0x1f	; 31
    1228:	df ae       	std	Y+63, r13	; 0x3f
    122a:	ce ae       	std	Y+62, r12	; 0x3e
    122c:	6f 97       	sbiw	r28, 0x1f	; 31
			// If greater, swap
			if (rd[j] > rd[i]) {
    122e:	d8 01       	movw	r26, r16
    1230:	14 96       	adiw	r26, 0x04	; 4
    1232:	4d 90       	ld	r4, X+
    1234:	5d 90       	ld	r5, X+
    1236:	6d 90       	ld	r6, X+
    1238:	7c 90       	ld	r7, X
    123a:	17 97       	sbiw	r26, 0x07	; 7
    123c:	6f 96       	adiw	r28, 0x1f	; 31
    123e:	ee ad       	ldd	r30, Y+62	; 0x3e
    1240:	ff ad       	ldd	r31, Y+63	; 0x3f
    1242:	6f 97       	sbiw	r28, 0x1f	; 31
    1244:	80 80       	ld	r8, Z
    1246:	91 80       	ldd	r9, Z+1	; 0x01
    1248:	a2 80       	ldd	r10, Z+2	; 0x02
    124a:	b3 80       	ldd	r11, Z+3	; 0x03
    124c:	a5 01       	movw	r20, r10
    124e:	94 01       	movw	r18, r8
    1250:	c3 01       	movw	r24, r6
    1252:	b2 01       	movw	r22, r4
    1254:	0e 94 3d 0c 	call	0x187a	; 0x187a <__gesf2>
    1258:	18 16       	cp	r1, r24
    125a:	6c f5       	brge	.+90     	; 0x12b6 <interpret+0x568>
				int temp = rd[i], temp_i = indices[i];
    125c:	6b 96       	adiw	r28, 0x1b	; 27
    125e:	ae ad       	ldd	r26, Y+62	; 0x3e
    1260:	bf ad       	ldd	r27, Y+63	; 0x3f
    1262:	6b 97       	sbiw	r28, 0x1b	; 27
    1264:	cd 90       	ld	r12, X+
    1266:	dc 90       	ld	r13, X
				rd[i] = rd[j];
    1268:	a7 96       	adiw	r28, 0x27	; 39
    126a:	ee ad       	ldd	r30, Y+62	; 0x3e
    126c:	ff ad       	ldd	r31, Y+63	; 0x3f
    126e:	a7 97       	sbiw	r28, 0x27	; 39
    1270:	40 82       	st	Z, r4
    1272:	51 82       	std	Z+1, r5	; 0x01
    1274:	62 82       	std	Z+2, r6	; 0x02
    1276:	73 82       	std	Z+3, r7	; 0x03
				indices[i] = indices[j];
    1278:	d1 01       	movw	r26, r2
    127a:	12 96       	adiw	r26, 0x02	; 2
    127c:	8d 91       	ld	r24, X+
    127e:	9c 91       	ld	r25, X
    1280:	13 97       	sbiw	r26, 0x03	; 3
    1282:	6b 96       	adiw	r28, 0x1b	; 27
    1284:	ee ad       	ldd	r30, Y+62	; 0x3e
    1286:	ff ad       	ldd	r31, Y+63	; 0x3f
    1288:	6b 97       	sbiw	r28, 0x1b	; 27
    128a:	91 83       	std	Z+1, r25	; 0x01
    128c:	80 83       	st	Z, r24
	// Sort ratios and get corresponding indices
	for (int i = 0; i < 4; i++) {
		for (int j = i + 1; j < 4; j++) {
			// If greater, swap
			if (rd[j] > rd[i]) {
				int temp = rd[i], temp_i = indices[i];
    128e:	c5 01       	movw	r24, r10
    1290:	b4 01       	movw	r22, r8
    1292:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <__fixsfsi>
				rd[i] = rd[j];
				indices[i] = indices[j];
				rd[j] = temp;
    1296:	07 2e       	mov	r0, r23
    1298:	00 0c       	add	r0, r0
    129a:	88 0b       	sbc	r24, r24
    129c:	99 0b       	sbc	r25, r25
    129e:	0e 94 8a 0b 	call	0x1714	; 0x1714 <__floatsisf>
    12a2:	d8 01       	movw	r26, r16
    12a4:	14 96       	adiw	r26, 0x04	; 4
    12a6:	6d 93       	st	X+, r22
    12a8:	7d 93       	st	X+, r23
    12aa:	8d 93       	st	X+, r24
    12ac:	9c 93       	st	X, r25
    12ae:	17 97       	sbiw	r26, 0x07	; 7
				indices[j] = temp_i;
    12b0:	f1 01       	movw	r30, r2
    12b2:	d3 82       	std	Z+3, r13	; 0x03
    12b4:	c2 82       	std	Z+2, r12	; 0x02
		rd[i] /= total_distance;
	}

	// Sort ratios and get corresponding indices
	for (int i = 0; i < 4; i++) {
		for (int j = i + 1; j < 4; j++) {
    12b6:	ff ef       	ldi	r31, 0xFF	; 255
    12b8:	ef 1a       	sub	r14, r31
    12ba:	ff 0a       	sbc	r15, r31
    12bc:	0c 5f       	subi	r16, 0xFC	; 252
    12be:	1f 4f       	sbci	r17, 0xFF	; 255
    12c0:	82 e0       	ldi	r24, 0x02	; 2
    12c2:	28 0e       	add	r2, r24
    12c4:	31 1c       	adc	r3, r1
    12c6:	94 e0       	ldi	r25, 0x04	; 4
    12c8:	e9 16       	cp	r14, r25
    12ca:	f1 04       	cpc	r15, r1
    12cc:	0c f4       	brge	.+2      	; 0x12d0 <interpret+0x582>
    12ce:	af cf       	rjmp	.-162    	; 0x122e <interpret+0x4e0>
    12d0:	6f 96       	adiw	r28, 0x1f	; 31
    12d2:	ce ac       	ldd	r12, Y+62	; 0x3e
    12d4:	df ac       	ldd	r13, Y+63	; 0x3f
    12d6:	6f 97       	sbiw	r28, 0x1f	; 31
    12d8:	a4 e0       	ldi	r26, 0x04	; 4
    12da:	ca 0e       	add	r12, r26
    12dc:	d1 1c       	adc	r13, r1
    12de:	6b 96       	adiw	r28, 0x1b	; 27
    12e0:	ee ad       	ldd	r30, Y+62	; 0x3e
    12e2:	ff ad       	ldd	r31, Y+63	; 0x3f
    12e4:	6b 97       	sbiw	r28, 0x1b	; 27
    12e6:	32 96       	adiw	r30, 0x02	; 2
    12e8:	6b 96       	adiw	r28, 0x1b	; 27
    12ea:	ff af       	std	Y+63, r31	; 0x3f
    12ec:	ee af       	std	Y+62, r30	; 0x3e
    12ee:	6b 97       	sbiw	r28, 0x1b	; 27
    12f0:	83 cf       	rjmp	.-250    	; 0x11f8 <interpret+0x4aa>
    12f2:	8e 01       	movw	r16, r28
    12f4:	0f 5f       	subi	r16, 0xFF	; 255
    12f6:	1f 4f       	sbci	r17, 0xFF	; 255
    12f8:	1e 01       	movw	r2, r28
    12fa:	f1 e2       	ldi	r31, 0x21	; 33
    12fc:	2f 0e       	add	r2, r31
    12fe:	31 1c       	adc	r3, r1
    1300:	a5 96       	adiw	r28, 0x25	; 37
    1302:	1c ae       	std	Y+60, r1	; 0x3c
    1304:	1d ae       	std	Y+61, r1	; 0x3d
    1306:	1e ae       	std	Y+62, r1	; 0x3e
    1308:	1f ae       	std	Y+63, r1	; 0x3f
    130a:	a5 97       	sbiw	r28, 0x25	; 37
    130c:	a1 96       	adiw	r28, 0x21	; 33
    130e:	1c ae       	std	Y+60, r1	; 0x3c
    1310:	1d ae       	std	Y+61, r1	; 0x3d
    1312:	1e ae       	std	Y+62, r1	; 0x3e
    1314:	1f ae       	std	Y+63, r1	; 0x3f
    1316:	a1 97       	sbiw	r28, 0x21	; 33
	// (x, y) are the centered star points
	// (w, z) are the centered, scaled measurement points
	float num = 0;
	float den = 0;
	for (int i = 0; i < 4; i++) {
		num += CENTERED_STARS[i][0]*my[indices[i]] - CENTERED_STARS[i][1]*mx[indices[i]];
    1318:	d8 01       	movw	r26, r16
    131a:	cd 90       	ld	r12, X+
    131c:	dd 90       	ld	r13, X+
    131e:	ed 90       	ld	r14, X+
    1320:	fc 90       	ld	r15, X
    1322:	ab 96       	adiw	r28, 0x2b	; 43
    1324:	ae ad       	ldd	r26, Y+62	; 0x3e
    1326:	bf ad       	ldd	r27, Y+63	; 0x3f
    1328:	ab 97       	sbiw	r28, 0x2b	; 43
    132a:	ed 91       	ld	r30, X+
    132c:	fd 91       	ld	r31, X+
    132e:	ab 96       	adiw	r28, 0x2b	; 43
    1330:	bf af       	std	Y+63, r27	; 0x3f
    1332:	ae af       	std	Y+62, r26	; 0x3e
    1334:	ab 97       	sbiw	r28, 0x2b	; 43
    1336:	ee 0f       	add	r30, r30
    1338:	ff 1f       	adc	r31, r31
    133a:	ee 0f       	add	r30, r30
    133c:	ff 1f       	adc	r31, r31
    133e:	81 e0       	ldi	r24, 0x01	; 1
    1340:	90 e0       	ldi	r25, 0x00	; 0
    1342:	8c 0f       	add	r24, r28
    1344:	9d 1f       	adc	r25, r29
    1346:	e8 0f       	add	r30, r24
    1348:	f9 1f       	adc	r31, r25
    134a:	40 a8       	ldd	r4, Z+48	; 0x30
    134c:	51 a8       	ldd	r5, Z+49	; 0x31
    134e:	62 a8       	ldd	r6, Z+50	; 0x32
    1350:	73 a8       	ldd	r7, Z+51	; 0x33
    1352:	d8 01       	movw	r26, r16
    1354:	14 96       	adiw	r26, 0x04	; 4
    1356:	8d 91       	ld	r24, X+
    1358:	9d 91       	ld	r25, X+
    135a:	0d 90       	ld	r0, X+
    135c:	bc 91       	ld	r27, X
    135e:	a0 2d       	mov	r26, r0
    1360:	6d 96       	adiw	r28, 0x1d	; 29
    1362:	8c af       	std	Y+60, r24	; 0x3c
    1364:	9d af       	std	Y+61, r25	; 0x3d
    1366:	ae af       	std	Y+62, r26	; 0x3e
    1368:	bf af       	std	Y+63, r27	; 0x3f
    136a:	6d 97       	sbiw	r28, 0x1d	; 29
    136c:	80 a0       	ldd	r8, Z+32	; 0x20
    136e:	91 a0       	ldd	r9, Z+33	; 0x21
    1370:	a2 a0       	ldd	r10, Z+34	; 0x22
    1372:	b3 a0       	ldd	r11, Z+35	; 0x23
    1374:	a3 01       	movw	r20, r6
    1376:	92 01       	movw	r18, r4
    1378:	c7 01       	movw	r24, r14
    137a:	b6 01       	movw	r22, r12
    137c:	0e 94 4a 0c 	call	0x1894	; 0x1894 <__mulsf3>
    1380:	a9 96       	adiw	r28, 0x29	; 41
    1382:	6c af       	std	Y+60, r22	; 0x3c
    1384:	7d af       	std	Y+61, r23	; 0x3d
    1386:	8e af       	std	Y+62, r24	; 0x3e
    1388:	9f af       	std	Y+63, r25	; 0x3f
    138a:	a9 97       	sbiw	r28, 0x29	; 41
    138c:	a5 01       	movw	r20, r10
    138e:	94 01       	movw	r18, r8
    1390:	6d 96       	adiw	r28, 0x1d	; 29
    1392:	6c ad       	ldd	r22, Y+60	; 0x3c
    1394:	7d ad       	ldd	r23, Y+61	; 0x3d
    1396:	8e ad       	ldd	r24, Y+62	; 0x3e
    1398:	9f ad       	ldd	r25, Y+63	; 0x3f
    139a:	6d 97       	sbiw	r28, 0x1d	; 29
    139c:	0e 94 4a 0c 	call	0x1894	; 0x1894 <__mulsf3>
    13a0:	9b 01       	movw	r18, r22
    13a2:	ac 01       	movw	r20, r24
    13a4:	a9 96       	adiw	r28, 0x29	; 41
    13a6:	6c ad       	ldd	r22, Y+60	; 0x3c
    13a8:	7d ad       	ldd	r23, Y+61	; 0x3d
    13aa:	8e ad       	ldd	r24, Y+62	; 0x3e
    13ac:	9f ad       	ldd	r25, Y+63	; 0x3f
    13ae:	a9 97       	sbiw	r28, 0x29	; 41
    13b0:	0e 94 44 0a 	call	0x1488	; 0x1488 <__subsf3>
    13b4:	9b 01       	movw	r18, r22
    13b6:	ac 01       	movw	r20, r24
    13b8:	a1 96       	adiw	r28, 0x21	; 33
    13ba:	6c ad       	ldd	r22, Y+60	; 0x3c
    13bc:	7d ad       	ldd	r23, Y+61	; 0x3d
    13be:	8e ad       	ldd	r24, Y+62	; 0x3e
    13c0:	9f ad       	ldd	r25, Y+63	; 0x3f
    13c2:	a1 97       	sbiw	r28, 0x21	; 33
    13c4:	0e 94 45 0a 	call	0x148a	; 0x148a <__addsf3>
    13c8:	a1 96       	adiw	r28, 0x21	; 33
    13ca:	6c af       	std	Y+60, r22	; 0x3c
    13cc:	7d af       	std	Y+61, r23	; 0x3d
    13ce:	8e af       	std	Y+62, r24	; 0x3e
    13d0:	9f af       	std	Y+63, r25	; 0x3f
    13d2:	a1 97       	sbiw	r28, 0x21	; 33
		den += CENTERED_STARS[i][0]*mx[indices[i]] + CENTERED_STARS[i][1]*my[indices[i]];
    13d4:	a5 01       	movw	r20, r10
    13d6:	94 01       	movw	r18, r8
    13d8:	c7 01       	movw	r24, r14
    13da:	b6 01       	movw	r22, r12
    13dc:	0e 94 4a 0c 	call	0x1894	; 0x1894 <__mulsf3>
    13e0:	6b 01       	movw	r12, r22
    13e2:	7c 01       	movw	r14, r24
    13e4:	6d 96       	adiw	r28, 0x1d	; 29
    13e6:	2c ad       	ldd	r18, Y+60	; 0x3c
    13e8:	3d ad       	ldd	r19, Y+61	; 0x3d
    13ea:	4e ad       	ldd	r20, Y+62	; 0x3e
    13ec:	5f ad       	ldd	r21, Y+63	; 0x3f
    13ee:	6d 97       	sbiw	r28, 0x1d	; 29
    13f0:	c3 01       	movw	r24, r6
    13f2:	b2 01       	movw	r22, r4
    13f4:	0e 94 4a 0c 	call	0x1894	; 0x1894 <__mulsf3>
    13f8:	9b 01       	movw	r18, r22
    13fa:	ac 01       	movw	r20, r24
    13fc:	c7 01       	movw	r24, r14
    13fe:	b6 01       	movw	r22, r12
    1400:	0e 94 45 0a 	call	0x148a	; 0x148a <__addsf3>
    1404:	9b 01       	movw	r18, r22
    1406:	ac 01       	movw	r20, r24
    1408:	a5 96       	adiw	r28, 0x25	; 37
    140a:	6c ad       	ldd	r22, Y+60	; 0x3c
    140c:	7d ad       	ldd	r23, Y+61	; 0x3d
    140e:	8e ad       	ldd	r24, Y+62	; 0x3e
    1410:	9f ad       	ldd	r25, Y+63	; 0x3f
    1412:	a5 97       	sbiw	r28, 0x25	; 37
    1414:	0e 94 45 0a 	call	0x148a	; 0x148a <__addsf3>
    1418:	a5 96       	adiw	r28, 0x25	; 37
    141a:	6c af       	std	Y+60, r22	; 0x3c
    141c:	7d af       	std	Y+61, r23	; 0x3d
    141e:	8e af       	std	Y+62, r24	; 0x3e
    1420:	9f af       	std	Y+63, r25	; 0x3f
    1422:	a5 97       	sbiw	r28, 0x25	; 37
    1424:	08 5f       	subi	r16, 0xF8	; 248
    1426:	1f 4f       	sbci	r17, 0xFF	; 255
	// angle = atan(sum(w*y - z*x) / sum(w*x + z*y))
	// (x, y) are the centered star points
	// (w, z) are the centered, scaled measurement points
	float num = 0;
	float den = 0;
	for (int i = 0; i < 4; i++) {
    1428:	02 15       	cp	r16, r2
    142a:	13 05       	cpc	r17, r3
    142c:	09 f0       	breq	.+2      	; 0x1430 <interpret+0x6e2>
    142e:	74 cf       	rjmp	.-280    	; 0x1318 <interpret+0x5ca>
		num += CENTERED_STARS[i][0]*my[indices[i]] - CENTERED_STARS[i][1]*mx[indices[i]];
		den += CENTERED_STARS[i][0]*mx[indices[i]] + CENTERED_STARS[i][1]*my[indices[i]];
	}
	robot->o = atan(den/num); // Updated angle in radians
    1430:	a1 96       	adiw	r28, 0x21	; 33
    1432:	2c ad       	ldd	r18, Y+60	; 0x3c
    1434:	3d ad       	ldd	r19, Y+61	; 0x3d
    1436:	4e ad       	ldd	r20, Y+62	; 0x3e
    1438:	5f ad       	ldd	r21, Y+63	; 0x3f
    143a:	a1 97       	sbiw	r28, 0x21	; 33
    143c:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <__divsf3>
    1440:	0e 94 b1 0a 	call	0x1562	; 0x1562 <atan>
    1444:	ad 96       	adiw	r28, 0x2d	; 45
    1446:	ee ad       	ldd	r30, Y+62	; 0x3e
    1448:	ff ad       	ldd	r31, Y+63	; 0x3f
    144a:	ad 97       	sbiw	r28, 0x2d	; 45
    144c:	60 87       	std	Z+8, r22	; 0x08
    144e:	71 87       	std	Z+9, r23	; 0x09
    1450:	82 87       	std	Z+10, r24	; 0x0a
    1452:	93 87       	std	Z+11, r25	; 0x0b
		//num += CENTERED_STARS[i][1]*mx[i] - CENTERED_STARS[i][0]*my[i];
		//den += CENTERED_STARS[i][0]*mx[i] - CENTERED_STARS[i][1]*my[i]; // change to +?
	//}
	// update angle
	//robot->o = atan(den/num);
}
    1454:	c4 59       	subi	r28, 0x94	; 148
    1456:	df 4f       	sbci	r29, 0xFF	; 255
    1458:	0f b6       	in	r0, 0x3f	; 63
    145a:	f8 94       	cli
    145c:	de bf       	out	0x3e, r29	; 62
    145e:	0f be       	out	0x3f, r0	; 63
    1460:	cd bf       	out	0x3d, r28	; 61
    1462:	df 91       	pop	r29
    1464:	cf 91       	pop	r28
    1466:	1f 91       	pop	r17
    1468:	0f 91       	pop	r16
    146a:	ff 90       	pop	r15
    146c:	ef 90       	pop	r14
    146e:	df 90       	pop	r13
    1470:	cf 90       	pop	r12
    1472:	bf 90       	pop	r11
    1474:	af 90       	pop	r10
    1476:	9f 90       	pop	r9
    1478:	8f 90       	pop	r8
    147a:	7f 90       	pop	r7
    147c:	6f 90       	pop	r6
    147e:	5f 90       	pop	r5
    1480:	4f 90       	pop	r4
    1482:	3f 90       	pop	r3
    1484:	2f 90       	pop	r2
    1486:	08 95       	ret

00001488 <__subsf3>:
    1488:	50 58       	subi	r21, 0x80	; 128

0000148a <__addsf3>:
    148a:	bb 27       	eor	r27, r27
    148c:	aa 27       	eor	r26, r26
    148e:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <__addsf3x>
    1492:	0c 94 03 0c 	jmp	0x1806	; 0x1806 <__fp_round>
    1496:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <__fp_pscA>
    149a:	38 f0       	brcs	.+14     	; 0x14aa <__addsf3+0x20>
    149c:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <__fp_pscB>
    14a0:	20 f0       	brcs	.+8      	; 0x14aa <__addsf3+0x20>
    14a2:	39 f4       	brne	.+14     	; 0x14b2 <__addsf3+0x28>
    14a4:	9f 3f       	cpi	r25, 0xFF	; 255
    14a6:	19 f4       	brne	.+6      	; 0x14ae <__addsf3+0x24>
    14a8:	26 f4       	brtc	.+8      	; 0x14b2 <__addsf3+0x28>
    14aa:	0c 94 cb 0b 	jmp	0x1796	; 0x1796 <__fp_nan>
    14ae:	0e f4       	brtc	.+2      	; 0x14b2 <__addsf3+0x28>
    14b0:	e0 95       	com	r30
    14b2:	e7 fb       	bst	r30, 7
    14b4:	0c 94 c5 0b 	jmp	0x178a	; 0x178a <__fp_inf>

000014b8 <__addsf3x>:
    14b8:	e9 2f       	mov	r30, r25
    14ba:	0e 94 14 0c 	call	0x1828	; 0x1828 <__fp_split3>
    14be:	58 f3       	brcs	.-42     	; 0x1496 <__addsf3+0xc>
    14c0:	ba 17       	cp	r27, r26
    14c2:	62 07       	cpc	r22, r18
    14c4:	73 07       	cpc	r23, r19
    14c6:	84 07       	cpc	r24, r20
    14c8:	95 07       	cpc	r25, r21
    14ca:	20 f0       	brcs	.+8      	; 0x14d4 <__addsf3x+0x1c>
    14cc:	79 f4       	brne	.+30     	; 0x14ec <__addsf3x+0x34>
    14ce:	a6 f5       	brtc	.+104    	; 0x1538 <__addsf3x+0x80>
    14d0:	0c 94 36 0c 	jmp	0x186c	; 0x186c <__fp_zero>
    14d4:	0e f4       	brtc	.+2      	; 0x14d8 <__addsf3x+0x20>
    14d6:	e0 95       	com	r30
    14d8:	0b 2e       	mov	r0, r27
    14da:	ba 2f       	mov	r27, r26
    14dc:	a0 2d       	mov	r26, r0
    14de:	0b 01       	movw	r0, r22
    14e0:	b9 01       	movw	r22, r18
    14e2:	90 01       	movw	r18, r0
    14e4:	0c 01       	movw	r0, r24
    14e6:	ca 01       	movw	r24, r20
    14e8:	a0 01       	movw	r20, r0
    14ea:	11 24       	eor	r1, r1
    14ec:	ff 27       	eor	r31, r31
    14ee:	59 1b       	sub	r21, r25
    14f0:	99 f0       	breq	.+38     	; 0x1518 <__addsf3x+0x60>
    14f2:	59 3f       	cpi	r21, 0xF9	; 249
    14f4:	50 f4       	brcc	.+20     	; 0x150a <__addsf3x+0x52>
    14f6:	50 3e       	cpi	r21, 0xE0	; 224
    14f8:	68 f1       	brcs	.+90     	; 0x1554 <__addsf3x+0x9c>
    14fa:	1a 16       	cp	r1, r26
    14fc:	f0 40       	sbci	r31, 0x00	; 0
    14fe:	a2 2f       	mov	r26, r18
    1500:	23 2f       	mov	r18, r19
    1502:	34 2f       	mov	r19, r20
    1504:	44 27       	eor	r20, r20
    1506:	58 5f       	subi	r21, 0xF8	; 248
    1508:	f3 cf       	rjmp	.-26     	; 0x14f0 <__addsf3x+0x38>
    150a:	46 95       	lsr	r20
    150c:	37 95       	ror	r19
    150e:	27 95       	ror	r18
    1510:	a7 95       	ror	r26
    1512:	f0 40       	sbci	r31, 0x00	; 0
    1514:	53 95       	inc	r21
    1516:	c9 f7       	brne	.-14     	; 0x150a <__addsf3x+0x52>
    1518:	7e f4       	brtc	.+30     	; 0x1538 <__addsf3x+0x80>
    151a:	1f 16       	cp	r1, r31
    151c:	ba 0b       	sbc	r27, r26
    151e:	62 0b       	sbc	r22, r18
    1520:	73 0b       	sbc	r23, r19
    1522:	84 0b       	sbc	r24, r20
    1524:	ba f0       	brmi	.+46     	; 0x1554 <__addsf3x+0x9c>
    1526:	91 50       	subi	r25, 0x01	; 1
    1528:	a1 f0       	breq	.+40     	; 0x1552 <__addsf3x+0x9a>
    152a:	ff 0f       	add	r31, r31
    152c:	bb 1f       	adc	r27, r27
    152e:	66 1f       	adc	r22, r22
    1530:	77 1f       	adc	r23, r23
    1532:	88 1f       	adc	r24, r24
    1534:	c2 f7       	brpl	.-16     	; 0x1526 <__addsf3x+0x6e>
    1536:	0e c0       	rjmp	.+28     	; 0x1554 <__addsf3x+0x9c>
    1538:	ba 0f       	add	r27, r26
    153a:	62 1f       	adc	r22, r18
    153c:	73 1f       	adc	r23, r19
    153e:	84 1f       	adc	r24, r20
    1540:	48 f4       	brcc	.+18     	; 0x1554 <__addsf3x+0x9c>
    1542:	87 95       	ror	r24
    1544:	77 95       	ror	r23
    1546:	67 95       	ror	r22
    1548:	b7 95       	ror	r27
    154a:	f7 95       	ror	r31
    154c:	9e 3f       	cpi	r25, 0xFE	; 254
    154e:	08 f0       	brcs	.+2      	; 0x1552 <__addsf3x+0x9a>
    1550:	b0 cf       	rjmp	.-160    	; 0x14b2 <__addsf3+0x28>
    1552:	93 95       	inc	r25
    1554:	88 0f       	add	r24, r24
    1556:	08 f0       	brcs	.+2      	; 0x155a <__addsf3x+0xa2>
    1558:	99 27       	eor	r25, r25
    155a:	ee 0f       	add	r30, r30
    155c:	97 95       	ror	r25
    155e:	87 95       	ror	r24
    1560:	08 95       	ret

00001562 <atan>:
    1562:	df 93       	push	r29
    1564:	dd 27       	eor	r29, r29
    1566:	b9 2f       	mov	r27, r25
    1568:	bf 77       	andi	r27, 0x7F	; 127
    156a:	40 e8       	ldi	r20, 0x80	; 128
    156c:	5f e3       	ldi	r21, 0x3F	; 63
    156e:	16 16       	cp	r1, r22
    1570:	17 06       	cpc	r1, r23
    1572:	48 07       	cpc	r20, r24
    1574:	5b 07       	cpc	r21, r27
    1576:	18 f4       	brcc	.+6      	; 0x157e <atan+0x1c>
    1578:	d9 2f       	mov	r29, r25
    157a:	0e 94 42 0c 	call	0x1884	; 0x1884 <inverse>
    157e:	9f 93       	push	r25
    1580:	8f 93       	push	r24
    1582:	7f 93       	push	r23
    1584:	6f 93       	push	r22
    1586:	0e 94 07 0d 	call	0x1a0e	; 0x1a0e <square>
    158a:	ec ea       	ldi	r30, 0xAC	; 172
    158c:	f0 e0       	ldi	r31, 0x00	; 0
    158e:	0e 94 ce 0b 	call	0x179c	; 0x179c <__fp_powser>
    1592:	0e 94 03 0c 	call	0x1806	; 0x1806 <__fp_round>
    1596:	2f 91       	pop	r18
    1598:	3f 91       	pop	r19
    159a:	4f 91       	pop	r20
    159c:	5f 91       	pop	r21
    159e:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <__mulsf3x>
    15a2:	dd 23       	and	r29, r29
    15a4:	51 f0       	breq	.+20     	; 0x15ba <atan+0x58>
    15a6:	90 58       	subi	r25, 0x80	; 128
    15a8:	a2 ea       	ldi	r26, 0xA2	; 162
    15aa:	2a ed       	ldi	r18, 0xDA	; 218
    15ac:	3f e0       	ldi	r19, 0x0F	; 15
    15ae:	49 ec       	ldi	r20, 0xC9	; 201
    15b0:	5f e3       	ldi	r21, 0x3F	; 63
    15b2:	d0 78       	andi	r29, 0x80	; 128
    15b4:	5d 27       	eor	r21, r29
    15b6:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <__addsf3x>
    15ba:	df 91       	pop	r29
    15bc:	0c 94 03 0c 	jmp	0x1806	; 0x1806 <__fp_round>

000015c0 <__divsf3>:
    15c0:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <__divsf3x>
    15c4:	0c 94 03 0c 	jmp	0x1806	; 0x1806 <__fp_round>
    15c8:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <__fp_pscB>
    15cc:	58 f0       	brcs	.+22     	; 0x15e4 <__divsf3+0x24>
    15ce:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <__fp_pscA>
    15d2:	40 f0       	brcs	.+16     	; 0x15e4 <__divsf3+0x24>
    15d4:	29 f4       	brne	.+10     	; 0x15e0 <__divsf3+0x20>
    15d6:	5f 3f       	cpi	r21, 0xFF	; 255
    15d8:	29 f0       	breq	.+10     	; 0x15e4 <__divsf3+0x24>
    15da:	0c 94 c5 0b 	jmp	0x178a	; 0x178a <__fp_inf>
    15de:	51 11       	cpse	r21, r1
    15e0:	0c 94 37 0c 	jmp	0x186e	; 0x186e <__fp_szero>
    15e4:	0c 94 cb 0b 	jmp	0x1796	; 0x1796 <__fp_nan>

000015e8 <__divsf3x>:
    15e8:	0e 94 14 0c 	call	0x1828	; 0x1828 <__fp_split3>
    15ec:	68 f3       	brcs	.-38     	; 0x15c8 <__divsf3+0x8>

000015ee <__divsf3_pse>:
    15ee:	99 23       	and	r25, r25
    15f0:	b1 f3       	breq	.-20     	; 0x15de <__divsf3+0x1e>
    15f2:	55 23       	and	r21, r21
    15f4:	91 f3       	breq	.-28     	; 0x15da <__divsf3+0x1a>
    15f6:	95 1b       	sub	r25, r21
    15f8:	55 0b       	sbc	r21, r21
    15fa:	bb 27       	eor	r27, r27
    15fc:	aa 27       	eor	r26, r26
    15fe:	62 17       	cp	r22, r18
    1600:	73 07       	cpc	r23, r19
    1602:	84 07       	cpc	r24, r20
    1604:	38 f0       	brcs	.+14     	; 0x1614 <__divsf3_pse+0x26>
    1606:	9f 5f       	subi	r25, 0xFF	; 255
    1608:	5f 4f       	sbci	r21, 0xFF	; 255
    160a:	22 0f       	add	r18, r18
    160c:	33 1f       	adc	r19, r19
    160e:	44 1f       	adc	r20, r20
    1610:	aa 1f       	adc	r26, r26
    1612:	a9 f3       	breq	.-22     	; 0x15fe <__divsf3_pse+0x10>
    1614:	35 d0       	rcall	.+106    	; 0x1680 <__divsf3_pse+0x92>
    1616:	0e 2e       	mov	r0, r30
    1618:	3a f0       	brmi	.+14     	; 0x1628 <__divsf3_pse+0x3a>
    161a:	e0 e8       	ldi	r30, 0x80	; 128
    161c:	32 d0       	rcall	.+100    	; 0x1682 <__divsf3_pse+0x94>
    161e:	91 50       	subi	r25, 0x01	; 1
    1620:	50 40       	sbci	r21, 0x00	; 0
    1622:	e6 95       	lsr	r30
    1624:	00 1c       	adc	r0, r0
    1626:	ca f7       	brpl	.-14     	; 0x161a <__divsf3_pse+0x2c>
    1628:	2b d0       	rcall	.+86     	; 0x1680 <__divsf3_pse+0x92>
    162a:	fe 2f       	mov	r31, r30
    162c:	29 d0       	rcall	.+82     	; 0x1680 <__divsf3_pse+0x92>
    162e:	66 0f       	add	r22, r22
    1630:	77 1f       	adc	r23, r23
    1632:	88 1f       	adc	r24, r24
    1634:	bb 1f       	adc	r27, r27
    1636:	26 17       	cp	r18, r22
    1638:	37 07       	cpc	r19, r23
    163a:	48 07       	cpc	r20, r24
    163c:	ab 07       	cpc	r26, r27
    163e:	b0 e8       	ldi	r27, 0x80	; 128
    1640:	09 f0       	breq	.+2      	; 0x1644 <__divsf3_pse+0x56>
    1642:	bb 0b       	sbc	r27, r27
    1644:	80 2d       	mov	r24, r0
    1646:	bf 01       	movw	r22, r30
    1648:	ff 27       	eor	r31, r31
    164a:	93 58       	subi	r25, 0x83	; 131
    164c:	5f 4f       	sbci	r21, 0xFF	; 255
    164e:	3a f0       	brmi	.+14     	; 0x165e <__divsf3_pse+0x70>
    1650:	9e 3f       	cpi	r25, 0xFE	; 254
    1652:	51 05       	cpc	r21, r1
    1654:	78 f0       	brcs	.+30     	; 0x1674 <__divsf3_pse+0x86>
    1656:	0c 94 c5 0b 	jmp	0x178a	; 0x178a <__fp_inf>
    165a:	0c 94 37 0c 	jmp	0x186e	; 0x186e <__fp_szero>
    165e:	5f 3f       	cpi	r21, 0xFF	; 255
    1660:	e4 f3       	brlt	.-8      	; 0x165a <__divsf3_pse+0x6c>
    1662:	98 3e       	cpi	r25, 0xE8	; 232
    1664:	d4 f3       	brlt	.-12     	; 0x165a <__divsf3_pse+0x6c>
    1666:	86 95       	lsr	r24
    1668:	77 95       	ror	r23
    166a:	67 95       	ror	r22
    166c:	b7 95       	ror	r27
    166e:	f7 95       	ror	r31
    1670:	9f 5f       	subi	r25, 0xFF	; 255
    1672:	c9 f7       	brne	.-14     	; 0x1666 <__divsf3_pse+0x78>
    1674:	88 0f       	add	r24, r24
    1676:	91 1d       	adc	r25, r1
    1678:	96 95       	lsr	r25
    167a:	87 95       	ror	r24
    167c:	97 f9       	bld	r25, 7
    167e:	08 95       	ret
    1680:	e1 e0       	ldi	r30, 0x01	; 1
    1682:	66 0f       	add	r22, r22
    1684:	77 1f       	adc	r23, r23
    1686:	88 1f       	adc	r24, r24
    1688:	bb 1f       	adc	r27, r27
    168a:	62 17       	cp	r22, r18
    168c:	73 07       	cpc	r23, r19
    168e:	84 07       	cpc	r24, r20
    1690:	ba 07       	cpc	r27, r26
    1692:	20 f0       	brcs	.+8      	; 0x169c <__divsf3_pse+0xae>
    1694:	62 1b       	sub	r22, r18
    1696:	73 0b       	sbc	r23, r19
    1698:	84 0b       	sbc	r24, r20
    169a:	ba 0b       	sbc	r27, r26
    169c:	ee 1f       	adc	r30, r30
    169e:	88 f7       	brcc	.-30     	; 0x1682 <__divsf3_pse+0x94>
    16a0:	e0 95       	com	r30
    16a2:	08 95       	ret

000016a4 <__fixsfsi>:
    16a4:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <__fixunssfsi>
    16a8:	68 94       	set
    16aa:	b1 11       	cpse	r27, r1
    16ac:	0c 94 37 0c 	jmp	0x186e	; 0x186e <__fp_szero>
    16b0:	08 95       	ret

000016b2 <__fixunssfsi>:
    16b2:	0e 94 1c 0c 	call	0x1838	; 0x1838 <__fp_splitA>
    16b6:	88 f0       	brcs	.+34     	; 0x16da <__fixunssfsi+0x28>
    16b8:	9f 57       	subi	r25, 0x7F	; 127
    16ba:	98 f0       	brcs	.+38     	; 0x16e2 <__fixunssfsi+0x30>
    16bc:	b9 2f       	mov	r27, r25
    16be:	99 27       	eor	r25, r25
    16c0:	b7 51       	subi	r27, 0x17	; 23
    16c2:	b0 f0       	brcs	.+44     	; 0x16f0 <__fixunssfsi+0x3e>
    16c4:	e1 f0       	breq	.+56     	; 0x16fe <__fixunssfsi+0x4c>
    16c6:	66 0f       	add	r22, r22
    16c8:	77 1f       	adc	r23, r23
    16ca:	88 1f       	adc	r24, r24
    16cc:	99 1f       	adc	r25, r25
    16ce:	1a f0       	brmi	.+6      	; 0x16d6 <__fixunssfsi+0x24>
    16d0:	ba 95       	dec	r27
    16d2:	c9 f7       	brne	.-14     	; 0x16c6 <__fixunssfsi+0x14>
    16d4:	14 c0       	rjmp	.+40     	; 0x16fe <__fixunssfsi+0x4c>
    16d6:	b1 30       	cpi	r27, 0x01	; 1
    16d8:	91 f0       	breq	.+36     	; 0x16fe <__fixunssfsi+0x4c>
    16da:	0e 94 36 0c 	call	0x186c	; 0x186c <__fp_zero>
    16de:	b1 e0       	ldi	r27, 0x01	; 1
    16e0:	08 95       	ret
    16e2:	0c 94 36 0c 	jmp	0x186c	; 0x186c <__fp_zero>
    16e6:	67 2f       	mov	r22, r23
    16e8:	78 2f       	mov	r23, r24
    16ea:	88 27       	eor	r24, r24
    16ec:	b8 5f       	subi	r27, 0xF8	; 248
    16ee:	39 f0       	breq	.+14     	; 0x16fe <__fixunssfsi+0x4c>
    16f0:	b9 3f       	cpi	r27, 0xF9	; 249
    16f2:	cc f3       	brlt	.-14     	; 0x16e6 <__fixunssfsi+0x34>
    16f4:	86 95       	lsr	r24
    16f6:	77 95       	ror	r23
    16f8:	67 95       	ror	r22
    16fa:	b3 95       	inc	r27
    16fc:	d9 f7       	brne	.-10     	; 0x16f4 <__fixunssfsi+0x42>
    16fe:	3e f4       	brtc	.+14     	; 0x170e <__fixunssfsi+0x5c>
    1700:	90 95       	com	r25
    1702:	80 95       	com	r24
    1704:	70 95       	com	r23
    1706:	61 95       	neg	r22
    1708:	7f 4f       	sbci	r23, 0xFF	; 255
    170a:	8f 4f       	sbci	r24, 0xFF	; 255
    170c:	9f 4f       	sbci	r25, 0xFF	; 255
    170e:	08 95       	ret

00001710 <__floatunsisf>:
    1710:	e8 94       	clt
    1712:	09 c0       	rjmp	.+18     	; 0x1726 <__floatsisf+0x12>

00001714 <__floatsisf>:
    1714:	97 fb       	bst	r25, 7
    1716:	3e f4       	brtc	.+14     	; 0x1726 <__floatsisf+0x12>
    1718:	90 95       	com	r25
    171a:	80 95       	com	r24
    171c:	70 95       	com	r23
    171e:	61 95       	neg	r22
    1720:	7f 4f       	sbci	r23, 0xFF	; 255
    1722:	8f 4f       	sbci	r24, 0xFF	; 255
    1724:	9f 4f       	sbci	r25, 0xFF	; 255
    1726:	99 23       	and	r25, r25
    1728:	a9 f0       	breq	.+42     	; 0x1754 <__floatsisf+0x40>
    172a:	f9 2f       	mov	r31, r25
    172c:	96 e9       	ldi	r25, 0x96	; 150
    172e:	bb 27       	eor	r27, r27
    1730:	93 95       	inc	r25
    1732:	f6 95       	lsr	r31
    1734:	87 95       	ror	r24
    1736:	77 95       	ror	r23
    1738:	67 95       	ror	r22
    173a:	b7 95       	ror	r27
    173c:	f1 11       	cpse	r31, r1
    173e:	f8 cf       	rjmp	.-16     	; 0x1730 <__floatsisf+0x1c>
    1740:	fa f4       	brpl	.+62     	; 0x1780 <__floatsisf+0x6c>
    1742:	bb 0f       	add	r27, r27
    1744:	11 f4       	brne	.+4      	; 0x174a <__floatsisf+0x36>
    1746:	60 ff       	sbrs	r22, 0
    1748:	1b c0       	rjmp	.+54     	; 0x1780 <__floatsisf+0x6c>
    174a:	6f 5f       	subi	r22, 0xFF	; 255
    174c:	7f 4f       	sbci	r23, 0xFF	; 255
    174e:	8f 4f       	sbci	r24, 0xFF	; 255
    1750:	9f 4f       	sbci	r25, 0xFF	; 255
    1752:	16 c0       	rjmp	.+44     	; 0x1780 <__floatsisf+0x6c>
    1754:	88 23       	and	r24, r24
    1756:	11 f0       	breq	.+4      	; 0x175c <__floatsisf+0x48>
    1758:	96 e9       	ldi	r25, 0x96	; 150
    175a:	11 c0       	rjmp	.+34     	; 0x177e <__floatsisf+0x6a>
    175c:	77 23       	and	r23, r23
    175e:	21 f0       	breq	.+8      	; 0x1768 <__floatsisf+0x54>
    1760:	9e e8       	ldi	r25, 0x8E	; 142
    1762:	87 2f       	mov	r24, r23
    1764:	76 2f       	mov	r23, r22
    1766:	05 c0       	rjmp	.+10     	; 0x1772 <__floatsisf+0x5e>
    1768:	66 23       	and	r22, r22
    176a:	71 f0       	breq	.+28     	; 0x1788 <__floatsisf+0x74>
    176c:	96 e8       	ldi	r25, 0x86	; 134
    176e:	86 2f       	mov	r24, r22
    1770:	70 e0       	ldi	r23, 0x00	; 0
    1772:	60 e0       	ldi	r22, 0x00	; 0
    1774:	2a f0       	brmi	.+10     	; 0x1780 <__floatsisf+0x6c>
    1776:	9a 95       	dec	r25
    1778:	66 0f       	add	r22, r22
    177a:	77 1f       	adc	r23, r23
    177c:	88 1f       	adc	r24, r24
    177e:	da f7       	brpl	.-10     	; 0x1776 <__floatsisf+0x62>
    1780:	88 0f       	add	r24, r24
    1782:	96 95       	lsr	r25
    1784:	87 95       	ror	r24
    1786:	97 f9       	bld	r25, 7
    1788:	08 95       	ret

0000178a <__fp_inf>:
    178a:	97 f9       	bld	r25, 7
    178c:	9f 67       	ori	r25, 0x7F	; 127
    178e:	80 e8       	ldi	r24, 0x80	; 128
    1790:	70 e0       	ldi	r23, 0x00	; 0
    1792:	60 e0       	ldi	r22, 0x00	; 0
    1794:	08 95       	ret

00001796 <__fp_nan>:
    1796:	9f ef       	ldi	r25, 0xFF	; 255
    1798:	80 ec       	ldi	r24, 0xC0	; 192
    179a:	08 95       	ret

0000179c <__fp_powser>:
    179c:	df 93       	push	r29
    179e:	cf 93       	push	r28
    17a0:	1f 93       	push	r17
    17a2:	0f 93       	push	r16
    17a4:	ff 92       	push	r15
    17a6:	ef 92       	push	r14
    17a8:	df 92       	push	r13
    17aa:	7b 01       	movw	r14, r22
    17ac:	8c 01       	movw	r16, r24
    17ae:	68 94       	set
    17b0:	06 c0       	rjmp	.+12     	; 0x17be <__fp_powser+0x22>
    17b2:	da 2e       	mov	r13, r26
    17b4:	ef 01       	movw	r28, r30
    17b6:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <__mulsf3x>
    17ba:	fe 01       	movw	r30, r28
    17bc:	e8 94       	clt
    17be:	a5 91       	lpm	r26, Z+
    17c0:	25 91       	lpm	r18, Z+
    17c2:	35 91       	lpm	r19, Z+
    17c4:	45 91       	lpm	r20, Z+
    17c6:	55 91       	lpm	r21, Z+
    17c8:	a6 f3       	brts	.-24     	; 0x17b2 <__fp_powser+0x16>
    17ca:	ef 01       	movw	r28, r30
    17cc:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <__addsf3x>
    17d0:	fe 01       	movw	r30, r28
    17d2:	97 01       	movw	r18, r14
    17d4:	a8 01       	movw	r20, r16
    17d6:	da 94       	dec	r13
    17d8:	69 f7       	brne	.-38     	; 0x17b4 <__fp_powser+0x18>
    17da:	df 90       	pop	r13
    17dc:	ef 90       	pop	r14
    17de:	ff 90       	pop	r15
    17e0:	0f 91       	pop	r16
    17e2:	1f 91       	pop	r17
    17e4:	cf 91       	pop	r28
    17e6:	df 91       	pop	r29
    17e8:	08 95       	ret

000017ea <__fp_pscA>:
    17ea:	00 24       	eor	r0, r0
    17ec:	0a 94       	dec	r0
    17ee:	16 16       	cp	r1, r22
    17f0:	17 06       	cpc	r1, r23
    17f2:	18 06       	cpc	r1, r24
    17f4:	09 06       	cpc	r0, r25
    17f6:	08 95       	ret

000017f8 <__fp_pscB>:
    17f8:	00 24       	eor	r0, r0
    17fa:	0a 94       	dec	r0
    17fc:	12 16       	cp	r1, r18
    17fe:	13 06       	cpc	r1, r19
    1800:	14 06       	cpc	r1, r20
    1802:	05 06       	cpc	r0, r21
    1804:	08 95       	ret

00001806 <__fp_round>:
    1806:	09 2e       	mov	r0, r25
    1808:	03 94       	inc	r0
    180a:	00 0c       	add	r0, r0
    180c:	11 f4       	brne	.+4      	; 0x1812 <__fp_round+0xc>
    180e:	88 23       	and	r24, r24
    1810:	52 f0       	brmi	.+20     	; 0x1826 <__fp_round+0x20>
    1812:	bb 0f       	add	r27, r27
    1814:	40 f4       	brcc	.+16     	; 0x1826 <__fp_round+0x20>
    1816:	bf 2b       	or	r27, r31
    1818:	11 f4       	brne	.+4      	; 0x181e <__fp_round+0x18>
    181a:	60 ff       	sbrs	r22, 0
    181c:	04 c0       	rjmp	.+8      	; 0x1826 <__fp_round+0x20>
    181e:	6f 5f       	subi	r22, 0xFF	; 255
    1820:	7f 4f       	sbci	r23, 0xFF	; 255
    1822:	8f 4f       	sbci	r24, 0xFF	; 255
    1824:	9f 4f       	sbci	r25, 0xFF	; 255
    1826:	08 95       	ret

00001828 <__fp_split3>:
    1828:	57 fd       	sbrc	r21, 7
    182a:	90 58       	subi	r25, 0x80	; 128
    182c:	44 0f       	add	r20, r20
    182e:	55 1f       	adc	r21, r21
    1830:	59 f0       	breq	.+22     	; 0x1848 <__fp_splitA+0x10>
    1832:	5f 3f       	cpi	r21, 0xFF	; 255
    1834:	71 f0       	breq	.+28     	; 0x1852 <__fp_splitA+0x1a>
    1836:	47 95       	ror	r20

00001838 <__fp_splitA>:
    1838:	88 0f       	add	r24, r24
    183a:	97 fb       	bst	r25, 7
    183c:	99 1f       	adc	r25, r25
    183e:	61 f0       	breq	.+24     	; 0x1858 <__fp_splitA+0x20>
    1840:	9f 3f       	cpi	r25, 0xFF	; 255
    1842:	79 f0       	breq	.+30     	; 0x1862 <__fp_splitA+0x2a>
    1844:	87 95       	ror	r24
    1846:	08 95       	ret
    1848:	12 16       	cp	r1, r18
    184a:	13 06       	cpc	r1, r19
    184c:	14 06       	cpc	r1, r20
    184e:	55 1f       	adc	r21, r21
    1850:	f2 cf       	rjmp	.-28     	; 0x1836 <__fp_split3+0xe>
    1852:	46 95       	lsr	r20
    1854:	f1 df       	rcall	.-30     	; 0x1838 <__fp_splitA>
    1856:	08 c0       	rjmp	.+16     	; 0x1868 <__fp_splitA+0x30>
    1858:	16 16       	cp	r1, r22
    185a:	17 06       	cpc	r1, r23
    185c:	18 06       	cpc	r1, r24
    185e:	99 1f       	adc	r25, r25
    1860:	f1 cf       	rjmp	.-30     	; 0x1844 <__fp_splitA+0xc>
    1862:	86 95       	lsr	r24
    1864:	71 05       	cpc	r23, r1
    1866:	61 05       	cpc	r22, r1
    1868:	08 94       	sec
    186a:	08 95       	ret

0000186c <__fp_zero>:
    186c:	e8 94       	clt

0000186e <__fp_szero>:
    186e:	bb 27       	eor	r27, r27
    1870:	66 27       	eor	r22, r22
    1872:	77 27       	eor	r23, r23
    1874:	cb 01       	movw	r24, r22
    1876:	97 f9       	bld	r25, 7
    1878:	08 95       	ret

0000187a <__gesf2>:
    187a:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <__fp_cmp>
    187e:	08 f4       	brcc	.+2      	; 0x1882 <__gesf2+0x8>
    1880:	8f ef       	ldi	r24, 0xFF	; 255
    1882:	08 95       	ret

00001884 <inverse>:
    1884:	9b 01       	movw	r18, r22
    1886:	ac 01       	movw	r20, r24
    1888:	60 e0       	ldi	r22, 0x00	; 0
    188a:	70 e0       	ldi	r23, 0x00	; 0
    188c:	80 e8       	ldi	r24, 0x80	; 128
    188e:	9f e3       	ldi	r25, 0x3F	; 63
    1890:	0c 94 e0 0a 	jmp	0x15c0	; 0x15c0 <__divsf3>

00001894 <__mulsf3>:
    1894:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <__mulsf3x>
    1898:	0c 94 03 0c 	jmp	0x1806	; 0x1806 <__fp_round>
    189c:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <__fp_pscA>
    18a0:	38 f0       	brcs	.+14     	; 0x18b0 <__mulsf3+0x1c>
    18a2:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <__fp_pscB>
    18a6:	20 f0       	brcs	.+8      	; 0x18b0 <__mulsf3+0x1c>
    18a8:	95 23       	and	r25, r21
    18aa:	11 f0       	breq	.+4      	; 0x18b0 <__mulsf3+0x1c>
    18ac:	0c 94 c5 0b 	jmp	0x178a	; 0x178a <__fp_inf>
    18b0:	0c 94 cb 0b 	jmp	0x1796	; 0x1796 <__fp_nan>
    18b4:	11 24       	eor	r1, r1
    18b6:	0c 94 37 0c 	jmp	0x186e	; 0x186e <__fp_szero>

000018ba <__mulsf3x>:
    18ba:	0e 94 14 0c 	call	0x1828	; 0x1828 <__fp_split3>
    18be:	70 f3       	brcs	.-36     	; 0x189c <__mulsf3+0x8>

000018c0 <__mulsf3_pse>:
    18c0:	95 9f       	mul	r25, r21
    18c2:	c1 f3       	breq	.-16     	; 0x18b4 <__mulsf3+0x20>
    18c4:	95 0f       	add	r25, r21
    18c6:	50 e0       	ldi	r21, 0x00	; 0
    18c8:	55 1f       	adc	r21, r21
    18ca:	62 9f       	mul	r22, r18
    18cc:	f0 01       	movw	r30, r0
    18ce:	72 9f       	mul	r23, r18
    18d0:	bb 27       	eor	r27, r27
    18d2:	f0 0d       	add	r31, r0
    18d4:	b1 1d       	adc	r27, r1
    18d6:	63 9f       	mul	r22, r19
    18d8:	aa 27       	eor	r26, r26
    18da:	f0 0d       	add	r31, r0
    18dc:	b1 1d       	adc	r27, r1
    18de:	aa 1f       	adc	r26, r26
    18e0:	64 9f       	mul	r22, r20
    18e2:	66 27       	eor	r22, r22
    18e4:	b0 0d       	add	r27, r0
    18e6:	a1 1d       	adc	r26, r1
    18e8:	66 1f       	adc	r22, r22
    18ea:	82 9f       	mul	r24, r18
    18ec:	22 27       	eor	r18, r18
    18ee:	b0 0d       	add	r27, r0
    18f0:	a1 1d       	adc	r26, r1
    18f2:	62 1f       	adc	r22, r18
    18f4:	73 9f       	mul	r23, r19
    18f6:	b0 0d       	add	r27, r0
    18f8:	a1 1d       	adc	r26, r1
    18fa:	62 1f       	adc	r22, r18
    18fc:	83 9f       	mul	r24, r19
    18fe:	a0 0d       	add	r26, r0
    1900:	61 1d       	adc	r22, r1
    1902:	22 1f       	adc	r18, r18
    1904:	74 9f       	mul	r23, r20
    1906:	33 27       	eor	r19, r19
    1908:	a0 0d       	add	r26, r0
    190a:	61 1d       	adc	r22, r1
    190c:	23 1f       	adc	r18, r19
    190e:	84 9f       	mul	r24, r20
    1910:	60 0d       	add	r22, r0
    1912:	21 1d       	adc	r18, r1
    1914:	82 2f       	mov	r24, r18
    1916:	76 2f       	mov	r23, r22
    1918:	6a 2f       	mov	r22, r26
    191a:	11 24       	eor	r1, r1
    191c:	9f 57       	subi	r25, 0x7F	; 127
    191e:	50 40       	sbci	r21, 0x00	; 0
    1920:	9a f0       	brmi	.+38     	; 0x1948 <__mulsf3_pse+0x88>
    1922:	f1 f0       	breq	.+60     	; 0x1960 <__mulsf3_pse+0xa0>
    1924:	88 23       	and	r24, r24
    1926:	4a f0       	brmi	.+18     	; 0x193a <__mulsf3_pse+0x7a>
    1928:	ee 0f       	add	r30, r30
    192a:	ff 1f       	adc	r31, r31
    192c:	bb 1f       	adc	r27, r27
    192e:	66 1f       	adc	r22, r22
    1930:	77 1f       	adc	r23, r23
    1932:	88 1f       	adc	r24, r24
    1934:	91 50       	subi	r25, 0x01	; 1
    1936:	50 40       	sbci	r21, 0x00	; 0
    1938:	a9 f7       	brne	.-22     	; 0x1924 <__mulsf3_pse+0x64>
    193a:	9e 3f       	cpi	r25, 0xFE	; 254
    193c:	51 05       	cpc	r21, r1
    193e:	80 f0       	brcs	.+32     	; 0x1960 <__mulsf3_pse+0xa0>
    1940:	0c 94 c5 0b 	jmp	0x178a	; 0x178a <__fp_inf>
    1944:	0c 94 37 0c 	jmp	0x186e	; 0x186e <__fp_szero>
    1948:	5f 3f       	cpi	r21, 0xFF	; 255
    194a:	e4 f3       	brlt	.-8      	; 0x1944 <__mulsf3_pse+0x84>
    194c:	98 3e       	cpi	r25, 0xE8	; 232
    194e:	d4 f3       	brlt	.-12     	; 0x1944 <__mulsf3_pse+0x84>
    1950:	86 95       	lsr	r24
    1952:	77 95       	ror	r23
    1954:	67 95       	ror	r22
    1956:	b7 95       	ror	r27
    1958:	f7 95       	ror	r31
    195a:	e7 95       	ror	r30
    195c:	9f 5f       	subi	r25, 0xFF	; 255
    195e:	c1 f7       	brne	.-16     	; 0x1950 <__mulsf3_pse+0x90>
    1960:	fe 2b       	or	r31, r30
    1962:	88 0f       	add	r24, r24
    1964:	91 1d       	adc	r25, r1
    1966:	96 95       	lsr	r25
    1968:	87 95       	ror	r24
    196a:	97 f9       	bld	r25, 7
    196c:	08 95       	ret

0000196e <pow>:
    196e:	fa 01       	movw	r30, r20
    1970:	ee 0f       	add	r30, r30
    1972:	ff 1f       	adc	r31, r31
    1974:	30 96       	adiw	r30, 0x00	; 0
    1976:	21 05       	cpc	r18, r1
    1978:	31 05       	cpc	r19, r1
    197a:	a1 f1       	breq	.+104    	; 0x19e4 <pow+0x76>
    197c:	61 15       	cp	r22, r1
    197e:	71 05       	cpc	r23, r1
    1980:	61 f4       	brne	.+24     	; 0x199a <pow+0x2c>
    1982:	80 38       	cpi	r24, 0x80	; 128
    1984:	bf e3       	ldi	r27, 0x3F	; 63
    1986:	9b 07       	cpc	r25, r27
    1988:	49 f1       	breq	.+82     	; 0x19dc <pow+0x6e>
    198a:	68 94       	set
    198c:	90 38       	cpi	r25, 0x80	; 128
    198e:	81 05       	cpc	r24, r1
    1990:	61 f0       	breq	.+24     	; 0x19aa <pow+0x3c>
    1992:	80 38       	cpi	r24, 0x80	; 128
    1994:	bf ef       	ldi	r27, 0xFF	; 255
    1996:	9b 07       	cpc	r25, r27
    1998:	41 f0       	breq	.+16     	; 0x19aa <pow+0x3c>
    199a:	99 23       	and	r25, r25
    199c:	4a f5       	brpl	.+82     	; 0x19f0 <pow+0x82>
    199e:	ff 3f       	cpi	r31, 0xFF	; 255
    19a0:	e1 05       	cpc	r30, r1
    19a2:	31 05       	cpc	r19, r1
    19a4:	21 05       	cpc	r18, r1
    19a6:	19 f1       	breq	.+70     	; 0x19ee <pow+0x80>
    19a8:	e8 94       	clt
    19aa:	08 94       	sec
    19ac:	e7 95       	ror	r30
    19ae:	d9 01       	movw	r26, r18
    19b0:	aa 23       	and	r26, r26
    19b2:	29 f4       	brne	.+10     	; 0x19be <pow+0x50>
    19b4:	ab 2f       	mov	r26, r27
    19b6:	be 2f       	mov	r27, r30
    19b8:	f8 5f       	subi	r31, 0xF8	; 248
    19ba:	d0 f3       	brcs	.-12     	; 0x19b0 <pow+0x42>
    19bc:	10 c0       	rjmp	.+32     	; 0x19de <pow+0x70>
    19be:	ff 5f       	subi	r31, 0xFF	; 255
    19c0:	70 f4       	brcc	.+28     	; 0x19de <pow+0x70>
    19c2:	a6 95       	lsr	r26
    19c4:	e0 f7       	brcc	.-8      	; 0x19be <pow+0x50>
    19c6:	f7 39       	cpi	r31, 0x97	; 151
    19c8:	50 f0       	brcs	.+20     	; 0x19de <pow+0x70>
    19ca:	19 f0       	breq	.+6      	; 0x19d2 <pow+0x64>
    19cc:	ff 3a       	cpi	r31, 0xAF	; 175
    19ce:	38 f4       	brcc	.+14     	; 0x19de <pow+0x70>
    19d0:	9f 77       	andi	r25, 0x7F	; 127
    19d2:	9f 93       	push	r25
    19d4:	0d d0       	rcall	.+26     	; 0x19f0 <pow+0x82>
    19d6:	0f 90       	pop	r0
    19d8:	07 fc       	sbrc	r0, 7
    19da:	90 58       	subi	r25, 0x80	; 128
    19dc:	08 95       	ret
    19de:	46 f0       	brts	.+16     	; 0x19f0 <pow+0x82>
    19e0:	0c 94 cb 0b 	jmp	0x1796	; 0x1796 <__fp_nan>
    19e4:	60 e0       	ldi	r22, 0x00	; 0
    19e6:	70 e0       	ldi	r23, 0x00	; 0
    19e8:	80 e8       	ldi	r24, 0x80	; 128
    19ea:	9f e3       	ldi	r25, 0x3F	; 63
    19ec:	08 95       	ret
    19ee:	4f e7       	ldi	r20, 0x7F	; 127
    19f0:	9f 77       	andi	r25, 0x7F	; 127
    19f2:	5f 93       	push	r21
    19f4:	4f 93       	push	r20
    19f6:	3f 93       	push	r19
    19f8:	2f 93       	push	r18
    19fa:	0e 94 ab 0d 	call	0x1b56	; 0x1b56 <log>
    19fe:	2f 91       	pop	r18
    1a00:	3f 91       	pop	r19
    1a02:	4f 91       	pop	r20
    1a04:	5f 91       	pop	r21
    1a06:	0e 94 4a 0c 	call	0x1894	; 0x1894 <__mulsf3>
    1a0a:	0c 94 13 0d 	jmp	0x1a26	; 0x1a26 <exp>

00001a0e <square>:
    1a0e:	9b 01       	movw	r18, r22
    1a10:	ac 01       	movw	r20, r24
    1a12:	0c 94 4a 0c 	jmp	0x1894	; 0x1894 <__mulsf3>
    1a16:	29 f4       	brne	.+10     	; 0x1a22 <square+0x14>
    1a18:	16 f0       	brts	.+4      	; 0x1a1e <square+0x10>
    1a1a:	0c 94 c5 0b 	jmp	0x178a	; 0x178a <__fp_inf>
    1a1e:	0c 94 36 0c 	jmp	0x186c	; 0x186c <__fp_zero>
    1a22:	0c 94 cb 0b 	jmp	0x1796	; 0x1796 <__fp_nan>

00001a26 <exp>:
    1a26:	0e 94 1c 0c 	call	0x1838	; 0x1838 <__fp_splitA>
    1a2a:	a8 f3       	brcs	.-22     	; 0x1a16 <square+0x8>
    1a2c:	96 38       	cpi	r25, 0x86	; 134
    1a2e:	a0 f7       	brcc	.-24     	; 0x1a18 <square+0xa>
    1a30:	07 f8       	bld	r0, 7
    1a32:	0f 92       	push	r0
    1a34:	e8 94       	clt
    1a36:	2b e3       	ldi	r18, 0x3B	; 59
    1a38:	3a ea       	ldi	r19, 0xAA	; 170
    1a3a:	48 eb       	ldi	r20, 0xB8	; 184
    1a3c:	5f e7       	ldi	r21, 0x7F	; 127
    1a3e:	0e 94 60 0c 	call	0x18c0	; 0x18c0 <__mulsf3_pse>
    1a42:	0f 92       	push	r0
    1a44:	0f 92       	push	r0
    1a46:	0f 92       	push	r0
    1a48:	4d b7       	in	r20, 0x3d	; 61
    1a4a:	5e b7       	in	r21, 0x3e	; 62
    1a4c:	0f 92       	push	r0
    1a4e:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <modf>
    1a52:	e9 ed       	ldi	r30, 0xD9	; 217
    1a54:	f0 e0       	ldi	r31, 0x00	; 0
    1a56:	0e 94 ce 0b 	call	0x179c	; 0x179c <__fp_powser>
    1a5a:	4f 91       	pop	r20
    1a5c:	5f 91       	pop	r21
    1a5e:	ef 91       	pop	r30
    1a60:	ff 91       	pop	r31
    1a62:	e5 95       	asr	r30
    1a64:	ee 1f       	adc	r30, r30
    1a66:	ff 1f       	adc	r31, r31
    1a68:	49 f0       	breq	.+18     	; 0x1a7c <exp+0x56>
    1a6a:	fe 57       	subi	r31, 0x7E	; 126
    1a6c:	e0 68       	ori	r30, 0x80	; 128
    1a6e:	44 27       	eor	r20, r20
    1a70:	ee 0f       	add	r30, r30
    1a72:	44 1f       	adc	r20, r20
    1a74:	fa 95       	dec	r31
    1a76:	e1 f7       	brne	.-8      	; 0x1a70 <exp+0x4a>
    1a78:	41 95       	neg	r20
    1a7a:	55 0b       	sbc	r21, r21
    1a7c:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <ldexp>
    1a80:	0f 90       	pop	r0
    1a82:	07 fe       	sbrs	r0, 7
    1a84:	0c 94 42 0c 	jmp	0x1884	; 0x1884 <inverse>
    1a88:	08 95       	ret

00001a8a <__fp_cmp>:
    1a8a:	99 0f       	add	r25, r25
    1a8c:	00 08       	sbc	r0, r0
    1a8e:	55 0f       	add	r21, r21
    1a90:	aa 0b       	sbc	r26, r26
    1a92:	e0 e8       	ldi	r30, 0x80	; 128
    1a94:	fe ef       	ldi	r31, 0xFE	; 254
    1a96:	16 16       	cp	r1, r22
    1a98:	17 06       	cpc	r1, r23
    1a9a:	e8 07       	cpc	r30, r24
    1a9c:	f9 07       	cpc	r31, r25
    1a9e:	c0 f0       	brcs	.+48     	; 0x1ad0 <__fp_cmp+0x46>
    1aa0:	12 16       	cp	r1, r18
    1aa2:	13 06       	cpc	r1, r19
    1aa4:	e4 07       	cpc	r30, r20
    1aa6:	f5 07       	cpc	r31, r21
    1aa8:	98 f0       	brcs	.+38     	; 0x1ad0 <__fp_cmp+0x46>
    1aaa:	62 1b       	sub	r22, r18
    1aac:	73 0b       	sbc	r23, r19
    1aae:	84 0b       	sbc	r24, r20
    1ab0:	95 0b       	sbc	r25, r21
    1ab2:	39 f4       	brne	.+14     	; 0x1ac2 <__fp_cmp+0x38>
    1ab4:	0a 26       	eor	r0, r26
    1ab6:	61 f0       	breq	.+24     	; 0x1ad0 <__fp_cmp+0x46>
    1ab8:	23 2b       	or	r18, r19
    1aba:	24 2b       	or	r18, r20
    1abc:	25 2b       	or	r18, r21
    1abe:	21 f4       	brne	.+8      	; 0x1ac8 <__fp_cmp+0x3e>
    1ac0:	08 95       	ret
    1ac2:	0a 26       	eor	r0, r26
    1ac4:	09 f4       	brne	.+2      	; 0x1ac8 <__fp_cmp+0x3e>
    1ac6:	a1 40       	sbci	r26, 0x01	; 1
    1ac8:	a6 95       	lsr	r26
    1aca:	8f ef       	ldi	r24, 0xFF	; 255
    1acc:	81 1d       	adc	r24, r1
    1ace:	81 1d       	adc	r24, r1
    1ad0:	08 95       	ret
    1ad2:	0c 94 c5 0b 	jmp	0x178a	; 0x178a <__fp_inf>
    1ad6:	0c 94 27 0e 	jmp	0x1c4e	; 0x1c4e <__fp_mpack>

00001ada <ldexp>:
    1ada:	0e 94 1c 0c 	call	0x1838	; 0x1838 <__fp_splitA>
    1ade:	d8 f3       	brcs	.-10     	; 0x1ad6 <__fp_cmp+0x4c>
    1ae0:	99 23       	and	r25, r25
    1ae2:	c9 f3       	breq	.-14     	; 0x1ad6 <__fp_cmp+0x4c>
    1ae4:	94 0f       	add	r25, r20
    1ae6:	51 1d       	adc	r21, r1
    1ae8:	a3 f3       	brvs	.-24     	; 0x1ad2 <__fp_cmp+0x48>
    1aea:	91 50       	subi	r25, 0x01	; 1
    1aec:	50 40       	sbci	r21, 0x00	; 0
    1aee:	94 f0       	brlt	.+36     	; 0x1b14 <ldexp+0x3a>
    1af0:	59 f0       	breq	.+22     	; 0x1b08 <ldexp+0x2e>
    1af2:	88 23       	and	r24, r24
    1af4:	32 f0       	brmi	.+12     	; 0x1b02 <ldexp+0x28>
    1af6:	66 0f       	add	r22, r22
    1af8:	77 1f       	adc	r23, r23
    1afa:	88 1f       	adc	r24, r24
    1afc:	91 50       	subi	r25, 0x01	; 1
    1afe:	50 40       	sbci	r21, 0x00	; 0
    1b00:	c1 f7       	brne	.-16     	; 0x1af2 <ldexp+0x18>
    1b02:	9e 3f       	cpi	r25, 0xFE	; 254
    1b04:	51 05       	cpc	r21, r1
    1b06:	2c f7       	brge	.-54     	; 0x1ad2 <__fp_cmp+0x48>
    1b08:	88 0f       	add	r24, r24
    1b0a:	91 1d       	adc	r25, r1
    1b0c:	96 95       	lsr	r25
    1b0e:	87 95       	ror	r24
    1b10:	97 f9       	bld	r25, 7
    1b12:	08 95       	ret
    1b14:	5f 3f       	cpi	r21, 0xFF	; 255
    1b16:	ac f0       	brlt	.+42     	; 0x1b42 <ldexp+0x68>
    1b18:	98 3e       	cpi	r25, 0xE8	; 232
    1b1a:	9c f0       	brlt	.+38     	; 0x1b42 <ldexp+0x68>
    1b1c:	bb 27       	eor	r27, r27
    1b1e:	86 95       	lsr	r24
    1b20:	77 95       	ror	r23
    1b22:	67 95       	ror	r22
    1b24:	b7 95       	ror	r27
    1b26:	08 f4       	brcc	.+2      	; 0x1b2a <ldexp+0x50>
    1b28:	b1 60       	ori	r27, 0x01	; 1
    1b2a:	93 95       	inc	r25
    1b2c:	c1 f7       	brne	.-16     	; 0x1b1e <ldexp+0x44>
    1b2e:	bb 0f       	add	r27, r27
    1b30:	58 f7       	brcc	.-42     	; 0x1b08 <ldexp+0x2e>
    1b32:	11 f4       	brne	.+4      	; 0x1b38 <ldexp+0x5e>
    1b34:	60 ff       	sbrs	r22, 0
    1b36:	e8 cf       	rjmp	.-48     	; 0x1b08 <ldexp+0x2e>
    1b38:	6f 5f       	subi	r22, 0xFF	; 255
    1b3a:	7f 4f       	sbci	r23, 0xFF	; 255
    1b3c:	8f 4f       	sbci	r24, 0xFF	; 255
    1b3e:	9f 4f       	sbci	r25, 0xFF	; 255
    1b40:	e3 cf       	rjmp	.-58     	; 0x1b08 <ldexp+0x2e>
    1b42:	0c 94 37 0c 	jmp	0x186e	; 0x186e <__fp_szero>
    1b46:	16 f0       	brts	.+4      	; 0x1b4c <ldexp+0x72>
    1b48:	0c 94 27 0e 	jmp	0x1c4e	; 0x1c4e <__fp_mpack>
    1b4c:	0c 94 cb 0b 	jmp	0x1796	; 0x1796 <__fp_nan>
    1b50:	68 94       	set
    1b52:	0c 94 c5 0b 	jmp	0x178a	; 0x178a <__fp_inf>

00001b56 <log>:
    1b56:	0e 94 1c 0c 	call	0x1838	; 0x1838 <__fp_splitA>
    1b5a:	a8 f3       	brcs	.-22     	; 0x1b46 <ldexp+0x6c>
    1b5c:	99 23       	and	r25, r25
    1b5e:	c1 f3       	breq	.-16     	; 0x1b50 <ldexp+0x76>
    1b60:	ae f3       	brts	.-22     	; 0x1b4c <ldexp+0x72>
    1b62:	df 93       	push	r29
    1b64:	cf 93       	push	r28
    1b66:	1f 93       	push	r17
    1b68:	0f 93       	push	r16
    1b6a:	ff 92       	push	r15
    1b6c:	c9 2f       	mov	r28, r25
    1b6e:	dd 27       	eor	r29, r29
    1b70:	88 23       	and	r24, r24
    1b72:	2a f0       	brmi	.+10     	; 0x1b7e <log+0x28>
    1b74:	21 97       	sbiw	r28, 0x01	; 1
    1b76:	66 0f       	add	r22, r22
    1b78:	77 1f       	adc	r23, r23
    1b7a:	88 1f       	adc	r24, r24
    1b7c:	da f7       	brpl	.-10     	; 0x1b74 <log+0x1e>
    1b7e:	20 e0       	ldi	r18, 0x00	; 0
    1b80:	30 e0       	ldi	r19, 0x00	; 0
    1b82:	40 e8       	ldi	r20, 0x80	; 128
    1b84:	5f eb       	ldi	r21, 0xBF	; 191
    1b86:	9f e3       	ldi	r25, 0x3F	; 63
    1b88:	88 39       	cpi	r24, 0x98	; 152
    1b8a:	20 f0       	brcs	.+8      	; 0x1b94 <log+0x3e>
    1b8c:	80 3e       	cpi	r24, 0xE0	; 224
    1b8e:	38 f0       	brcs	.+14     	; 0x1b9e <log+0x48>
    1b90:	21 96       	adiw	r28, 0x01	; 1
    1b92:	8f 77       	andi	r24, 0x7F	; 127
    1b94:	0e 94 45 0a 	call	0x148a	; 0x148a <__addsf3>
    1b98:	e1 e0       	ldi	r30, 0x01	; 1
    1b9a:	f1 e0       	ldi	r31, 0x01	; 1
    1b9c:	04 c0       	rjmp	.+8      	; 0x1ba6 <log+0x50>
    1b9e:	0e 94 45 0a 	call	0x148a	; 0x148a <__addsf3>
    1ba2:	ee e2       	ldi	r30, 0x2E	; 46
    1ba4:	f1 e0       	ldi	r31, 0x01	; 1
    1ba6:	0e 94 ce 0b 	call	0x179c	; 0x179c <__fp_powser>
    1baa:	8b 01       	movw	r16, r22
    1bac:	be 01       	movw	r22, r28
    1bae:	ec 01       	movw	r28, r24
    1bb0:	fb 2e       	mov	r15, r27
    1bb2:	6f 57       	subi	r22, 0x7F	; 127
    1bb4:	71 09       	sbc	r23, r1
    1bb6:	75 95       	asr	r23
    1bb8:	77 1f       	adc	r23, r23
    1bba:	88 0b       	sbc	r24, r24
    1bbc:	99 0b       	sbc	r25, r25
    1bbe:	0e 94 8a 0b 	call	0x1714	; 0x1714 <__floatsisf>
    1bc2:	28 e1       	ldi	r18, 0x18	; 24
    1bc4:	32 e7       	ldi	r19, 0x72	; 114
    1bc6:	41 e3       	ldi	r20, 0x31	; 49
    1bc8:	5f e3       	ldi	r21, 0x3F	; 63
    1bca:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <__mulsf3x>
    1bce:	af 2d       	mov	r26, r15
    1bd0:	98 01       	movw	r18, r16
    1bd2:	ae 01       	movw	r20, r28
    1bd4:	ff 90       	pop	r15
    1bd6:	0f 91       	pop	r16
    1bd8:	1f 91       	pop	r17
    1bda:	cf 91       	pop	r28
    1bdc:	df 91       	pop	r29
    1bde:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <__addsf3x>
    1be2:	0c 94 03 0c 	jmp	0x1806	; 0x1806 <__fp_round>

00001be6 <modf>:
    1be6:	fa 01       	movw	r30, r20
    1be8:	dc 01       	movw	r26, r24
    1bea:	aa 0f       	add	r26, r26
    1bec:	bb 1f       	adc	r27, r27
    1bee:	9b 01       	movw	r18, r22
    1bf0:	ac 01       	movw	r20, r24
    1bf2:	bf 57       	subi	r27, 0x7F	; 127
    1bf4:	28 f4       	brcc	.+10     	; 0x1c00 <modf+0x1a>
    1bf6:	22 27       	eor	r18, r18
    1bf8:	33 27       	eor	r19, r19
    1bfa:	44 27       	eor	r20, r20
    1bfc:	50 78       	andi	r21, 0x80	; 128
    1bfe:	20 c0       	rjmp	.+64     	; 0x1c40 <modf+0x5a>
    1c00:	b7 51       	subi	r27, 0x17	; 23
    1c02:	90 f4       	brcc	.+36     	; 0x1c28 <modf+0x42>
    1c04:	ab 2f       	mov	r26, r27
    1c06:	00 24       	eor	r0, r0
    1c08:	46 95       	lsr	r20
    1c0a:	37 95       	ror	r19
    1c0c:	27 95       	ror	r18
    1c0e:	01 1c       	adc	r0, r1
    1c10:	a3 95       	inc	r26
    1c12:	d2 f3       	brmi	.-12     	; 0x1c08 <modf+0x22>
    1c14:	00 20       	and	r0, r0
    1c16:	71 f0       	breq	.+28     	; 0x1c34 <modf+0x4e>
    1c18:	22 0f       	add	r18, r18
    1c1a:	33 1f       	adc	r19, r19
    1c1c:	44 1f       	adc	r20, r20
    1c1e:	b3 95       	inc	r27
    1c20:	da f3       	brmi	.-10     	; 0x1c18 <modf+0x32>
    1c22:	0e d0       	rcall	.+28     	; 0x1c40 <modf+0x5a>
    1c24:	0c 94 44 0a 	jmp	0x1488	; 0x1488 <__subsf3>
    1c28:	61 30       	cpi	r22, 0x01	; 1
    1c2a:	71 05       	cpc	r23, r1
    1c2c:	a0 e8       	ldi	r26, 0x80	; 128
    1c2e:	8a 07       	cpc	r24, r26
    1c30:	b9 46       	sbci	r27, 0x69	; 105
    1c32:	30 f4       	brcc	.+12     	; 0x1c40 <modf+0x5a>
    1c34:	9b 01       	movw	r18, r22
    1c36:	ac 01       	movw	r20, r24
    1c38:	66 27       	eor	r22, r22
    1c3a:	77 27       	eor	r23, r23
    1c3c:	88 27       	eor	r24, r24
    1c3e:	90 78       	andi	r25, 0x80	; 128
    1c40:	30 96       	adiw	r30, 0x00	; 0
    1c42:	21 f0       	breq	.+8      	; 0x1c4c <modf+0x66>
    1c44:	20 83       	st	Z, r18
    1c46:	31 83       	std	Z+1, r19	; 0x01
    1c48:	42 83       	std	Z+2, r20	; 0x02
    1c4a:	53 83       	std	Z+3, r21	; 0x03
    1c4c:	08 95       	ret

00001c4e <__fp_mpack>:
    1c4e:	9f 3f       	cpi	r25, 0xFF	; 255
    1c50:	31 f0       	breq	.+12     	; 0x1c5e <__fp_mpack_finite+0xc>

00001c52 <__fp_mpack_finite>:
    1c52:	91 50       	subi	r25, 0x01	; 1
    1c54:	20 f4       	brcc	.+8      	; 0x1c5e <__fp_mpack_finite+0xc>
    1c56:	87 95       	ror	r24
    1c58:	77 95       	ror	r23
    1c5a:	67 95       	ror	r22
    1c5c:	b7 95       	ror	r27
    1c5e:	88 0f       	add	r24, r24
    1c60:	91 1d       	adc	r25, r1
    1c62:	96 95       	lsr	r25
    1c64:	87 95       	ror	r24
    1c66:	97 f9       	bld	r25, 7
    1c68:	08 95       	ret

00001c6a <__itoa_ncheck>:
    1c6a:	bb 27       	eor	r27, r27
    1c6c:	4a 30       	cpi	r20, 0x0A	; 10
    1c6e:	31 f4       	brne	.+12     	; 0x1c7c <__itoa_ncheck+0x12>
    1c70:	99 23       	and	r25, r25
    1c72:	22 f4       	brpl	.+8      	; 0x1c7c <__itoa_ncheck+0x12>
    1c74:	bd e2       	ldi	r27, 0x2D	; 45
    1c76:	90 95       	com	r25
    1c78:	81 95       	neg	r24
    1c7a:	9f 4f       	sbci	r25, 0xFF	; 255
    1c7c:	0c 94 41 0e 	jmp	0x1c82	; 0x1c82 <__utoa_common>

00001c80 <__utoa_ncheck>:
    1c80:	bb 27       	eor	r27, r27

00001c82 <__utoa_common>:
    1c82:	fb 01       	movw	r30, r22
    1c84:	55 27       	eor	r21, r21
    1c86:	aa 27       	eor	r26, r26
    1c88:	88 0f       	add	r24, r24
    1c8a:	99 1f       	adc	r25, r25
    1c8c:	aa 1f       	adc	r26, r26
    1c8e:	a4 17       	cp	r26, r20
    1c90:	10 f0       	brcs	.+4      	; 0x1c96 <__utoa_common+0x14>
    1c92:	a4 1b       	sub	r26, r20
    1c94:	83 95       	inc	r24
    1c96:	50 51       	subi	r21, 0x10	; 16
    1c98:	b9 f7       	brne	.-18     	; 0x1c88 <__utoa_common+0x6>
    1c9a:	a0 5d       	subi	r26, 0xD0	; 208
    1c9c:	aa 33       	cpi	r26, 0x3A	; 58
    1c9e:	08 f0       	brcs	.+2      	; 0x1ca2 <__utoa_common+0x20>
    1ca0:	a9 5d       	subi	r26, 0xD9	; 217
    1ca2:	a1 93       	st	Z+, r26
    1ca4:	00 97       	sbiw	r24, 0x00	; 0
    1ca6:	79 f7       	brne	.-34     	; 0x1c86 <__utoa_common+0x4>
    1ca8:	b1 11       	cpse	r27, r1
    1caa:	b1 93       	st	Z+, r27
    1cac:	11 92       	st	Z+, r1
    1cae:	cb 01       	movw	r24, r22
    1cb0:	0c 94 5a 0e 	jmp	0x1cb4	; 0x1cb4 <strrev>

00001cb4 <strrev>:
    1cb4:	dc 01       	movw	r26, r24
    1cb6:	fc 01       	movw	r30, r24
    1cb8:	67 2f       	mov	r22, r23
    1cba:	71 91       	ld	r23, Z+
    1cbc:	77 23       	and	r23, r23
    1cbe:	e1 f7       	brne	.-8      	; 0x1cb8 <strrev+0x4>
    1cc0:	32 97       	sbiw	r30, 0x02	; 2
    1cc2:	04 c0       	rjmp	.+8      	; 0x1ccc <strrev+0x18>
    1cc4:	7c 91       	ld	r23, X
    1cc6:	6d 93       	st	X+, r22
    1cc8:	70 83       	st	Z, r23
    1cca:	62 91       	ld	r22, -Z
    1ccc:	ae 17       	cp	r26, r30
    1cce:	bf 07       	cpc	r27, r31
    1cd0:	c8 f3       	brcs	.-14     	; 0x1cc4 <strrev+0x10>
    1cd2:	08 95       	ret

00001cd4 <_exit>:
    1cd4:	f8 94       	cli

00001cd6 <__stop_program>:
    1cd6:	ff cf       	rjmp	.-2      	; 0x1cd6 <__stop_program>
