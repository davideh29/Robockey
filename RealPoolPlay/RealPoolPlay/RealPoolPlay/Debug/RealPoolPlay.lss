
RealPoolPlay.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000020  00800100  00002d7c  00002e10  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002d7c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000007f  00800120  00800120  00002e30  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002e30  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002e60  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000390  00000000  00000000  00002ea0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000049e1  00000000  00000000  00003230  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001ea5  00000000  00000000  00007c11  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002e58  00000000  00000000  00009ab6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000adc  00000000  00000000  0000c910  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000f1f  00000000  00000000  0000d3ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003ca5  00000000  00000000  0000e30b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000360  00000000  00000000  00011fb0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 6d 01 	jmp	0x2da	; 0x2da <__ctors_end>
       4:	0c 94 8a 01 	jmp	0x314	; 0x314 <__bad_interrupt>
       8:	0c 94 8a 01 	jmp	0x314	; 0x314 <__bad_interrupt>
       c:	0c 94 a9 01 	jmp	0x352	; 0x352 <__vector_3>
      10:	0c 94 8a 01 	jmp	0x314	; 0x314 <__bad_interrupt>
      14:	0c 94 8a 01 	jmp	0x314	; 0x314 <__bad_interrupt>
      18:	0c 94 8a 01 	jmp	0x314	; 0x314 <__bad_interrupt>
      1c:	0c 94 8a 01 	jmp	0x314	; 0x314 <__bad_interrupt>
      20:	0c 94 8a 01 	jmp	0x314	; 0x314 <__bad_interrupt>
      24:	0c 94 8a 01 	jmp	0x314	; 0x314 <__bad_interrupt>
      28:	0c 94 06 05 	jmp	0xa0c	; 0xa0c <__vector_10>
      2c:	0c 94 44 05 	jmp	0xa88	; 0xa88 <__vector_11>
      30:	0c 94 8a 01 	jmp	0x314	; 0x314 <__bad_interrupt>
      34:	0c 94 8a 01 	jmp	0x314	; 0x314 <__bad_interrupt>
      38:	0c 94 8a 01 	jmp	0x314	; 0x314 <__bad_interrupt>
      3c:	0c 94 8a 01 	jmp	0x314	; 0x314 <__bad_interrupt>
      40:	0c 94 8a 01 	jmp	0x314	; 0x314 <__bad_interrupt>
      44:	0c 94 8a 01 	jmp	0x314	; 0x314 <__bad_interrupt>
      48:	0c 94 8a 01 	jmp	0x314	; 0x314 <__bad_interrupt>
      4c:	0c 94 8a 01 	jmp	0x314	; 0x314 <__bad_interrupt>
      50:	0c 94 8a 01 	jmp	0x314	; 0x314 <__bad_interrupt>
      54:	0c 94 8a 01 	jmp	0x314	; 0x314 <__bad_interrupt>
      58:	0c 94 8a 01 	jmp	0x314	; 0x314 <__bad_interrupt>
      5c:	0c 94 8a 01 	jmp	0x314	; 0x314 <__bad_interrupt>
      60:	0c 94 8a 01 	jmp	0x314	; 0x314 <__bad_interrupt>
      64:	0c 94 8a 01 	jmp	0x314	; 0x314 <__bad_interrupt>
      68:	0c 94 8a 01 	jmp	0x314	; 0x314 <__bad_interrupt>
      6c:	0c 94 8a 01 	jmp	0x314	; 0x314 <__bad_interrupt>
      70:	0c 94 8a 01 	jmp	0x314	; 0x314 <__bad_interrupt>
      74:	0c 94 8a 01 	jmp	0x314	; 0x314 <__bad_interrupt>
      78:	0c 94 8a 01 	jmp	0x314	; 0x314 <__bad_interrupt>
      7c:	0c 94 8a 01 	jmp	0x314	; 0x314 <__bad_interrupt>
      80:	0c 94 8a 01 	jmp	0x314	; 0x314 <__bad_interrupt>
      84:	0c 94 8a 01 	jmp	0x314	; 0x314 <__bad_interrupt>
      88:	0c 94 8a 01 	jmp	0x314	; 0x314 <__bad_interrupt>
      8c:	0c 94 8a 01 	jmp	0x314	; 0x314 <__bad_interrupt>
      90:	0c 94 8a 01 	jmp	0x314	; 0x314 <__bad_interrupt>
      94:	0c 94 8a 01 	jmp	0x314	; 0x314 <__bad_interrupt>
      98:	0c 94 8a 01 	jmp	0x314	; 0x314 <__bad_interrupt>
      9c:	0c 94 8a 01 	jmp	0x314	; 0x314 <__bad_interrupt>
      a0:	0c 94 8a 01 	jmp	0x314	; 0x314 <__bad_interrupt>
      a4:	0c 94 8a 01 	jmp	0x314	; 0x314 <__bad_interrupt>
      a8:	0c 94 8a 01 	jmp	0x314	; 0x314 <__bad_interrupt>
      ac:	08 4a       	sbci	r16, 0xA8	; 168
      ae:	d7 3b       	cpi	r29, 0xB7	; 183
      b0:	3b ce       	rjmp	.-906    	; 0xfffffd28 <__eeprom_end+0xff7efd28>
      b2:	01 6e       	ori	r16, 0xE1	; 225
      b4:	84 bc       	out	0x24, r8	; 36
      b6:	bf fd       	.word	0xfdbf	; ????
      b8:	c1 2f       	mov	r28, r17
      ba:	3d 6c       	ori	r19, 0xCD	; 205
      bc:	74 31       	cpi	r23, 0x14	; 20
      be:	9a bd       	out	0x2a, r25	; 42
      c0:	56 83       	std	Z+6, r21	; 0x06
      c2:	3d da       	rcall	.-2950   	; 0xfffff53e <__eeprom_end+0xff7ef53e>
      c4:	3d 00       	.word	0x003d	; ????
      c6:	c7 7f       	andi	r28, 0xF7	; 247
      c8:	11 be       	out	0x31, r1	; 49
      ca:	d9 e4       	ldi	r29, 0x49	; 73
      cc:	bb 4c       	sbci	r27, 0xCB	; 203
      ce:	3e 91       	ld	r19, -X
      d0:	6b aa       	std	Y+51, r6	; 0x33
      d2:	aa be       	out	0x3a, r10	; 58
      d4:	00 00       	nop
      d6:	00 80       	ld	r0, Z
      d8:	3f 07       	cpc	r19, r31
      da:	63 42       	sbci	r22, 0x23	; 35
      dc:	36 b7       	in	r19, 0x36	; 54
      de:	9b d8       	rcall	.-3786   	; 0xfffff216 <__eeprom_end+0xff7ef216>
      e0:	a7 1a       	sub	r10, r23
      e2:	39 68       	ori	r19, 0x89	; 137
      e4:	56 18       	sub	r5, r6
      e6:	ae ba       	out	0x1e, r10	; 30
      e8:	ab 55       	subi	r26, 0x5B	; 91
      ea:	8c 1d       	adc	r24, r12
      ec:	3c b7       	in	r19, 0x3c	; 60
      ee:	cc 57       	subi	r28, 0x7C	; 124
      f0:	63 bd       	out	0x23, r22	; 35
      f2:	6d ed       	ldi	r22, 0xDD	; 221
      f4:	fd 75       	andi	r31, 0x5D	; 93
      f6:	3e f6       	brtc	.-114    	; 0x86 <__SREG__+0x47>
      f8:	17 72       	andi	r17, 0x27	; 39
      fa:	31 bf       	out	0x31, r19	; 49
      fc:	00 00       	nop
      fe:	00 80       	ld	r0, Z
     100:	3f 05       	cpc	r19, r15
     102:	a8 4c       	sbci	r26, 0xC8	; 200
     104:	cd b2       	in	r12, 0x1d	; 29
     106:	d4 4e       	sbci	r29, 0xE4	; 228
     108:	b9 38       	cpi	r27, 0x89	; 137
     10a:	36 a9       	ldd	r19, Z+54	; 0x36
     10c:	02 0c       	add	r0, r2
     10e:	50 b9       	out	0x00, r21	; 0
     110:	91 86       	std	Z+9, r9	; 0x09
     112:	88 08       	sbc	r8, r8
     114:	3c a6       	std	Y+44, r3	; 0x2c
     116:	aa aa       	std	Y+50, r10	; 0x32
     118:	2a be       	out	0x3a, r2	; 58
     11a:	00 00       	nop
     11c:	00 80       	ld	r0, Z
     11e:	3f 08       	sbc	r3, r15
     120:	00 00       	nop
     122:	00 be       	out	0x30, r0	; 48
     124:	92 24       	eor	r9, r2
     126:	49 12       	cpse	r4, r25
     128:	3e ab       	std	Y+54, r19	; 0x36
     12a:	aa aa       	std	Y+50, r10	; 0x32
     12c:	2a be       	out	0x3a, r2	; 58
     12e:	cd cc       	rjmp	.-1638   	; 0xfffffaca <__eeprom_end+0xff7efaca>
     130:	cc 4c       	sbci	r28, 0xCC	; 204
     132:	3e 00       	.word	0x003e	; ????
     134:	00 00       	nop
     136:	80 be       	out	0x30, r8	; 48
     138:	ab aa       	std	Y+51, r10	; 0x33
     13a:	aa aa       	std	Y+50, r10	; 0x32
     13c:	3e 00       	.word	0x003e	; ????
     13e:	00 00       	nop
     140:	00 bf       	out	0x30, r16	; 48
     142:	00 00       	nop
     144:	00 80       	ld	r0, Z
     146:	3f 00       	.word	0x003f	; ????
     148:	00 00       	nop
     14a:	00 00       	nop
     14c:	08 41       	sbci	r16, 0x18	; 24
     14e:	78 d3       	rcall	.+1776   	; 0x840 <m_rf_open+0x90>
     150:	bb 43       	sbci	r27, 0x3B	; 59
     152:	87 d1       	rcall	.+782    	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
     154:	13 3d       	cpi	r17, 0xD3	; 211
     156:	19 0e       	add	r1, r25
     158:	3c c3       	rjmp	.+1656   	; 0x7d2 <m_rf_open+0x22>
     15a:	bd 42       	sbci	r27, 0x2D	; 45
     15c:	82 ad       	ldd	r24, Z+58	; 0x3a
     15e:	2b 3e       	cpi	r18, 0xEB	; 235
     160:	68 ec       	ldi	r22, 0xC8	; 200
     162:	82 76       	andi	r24, 0x62	; 98
     164:	be d9       	rcall	.-3204   	; 0xfffff4e2 <__eeprom_end+0xff7ef4e2>
     166:	8f e1       	ldi	r24, 0x1F	; 31
     168:	a9 3e       	cpi	r26, 0xE9	; 233
     16a:	4c 80       	ldd	r4, Y+4	; 0x04
     16c:	ef ff       	.word	0xffef	; ????
     16e:	be 01       	movw	r22, r28
     170:	c4 ff       	sbrs	r28, 4
     172:	7f 3f       	cpi	r23, 0xFF	; 255
     174:	00 00       	nop
     176:	00 00       	nop
	...

0000017a <__trampolines_end>:
     17a:	00 01       	movw	r0, r0
     17c:	00 00       	nop
     17e:	11 02       	muls	r17, r17
     180:	12 00       	.word	0x0012	; ????
     182:	02 00       	.word	0x0002	; ????
     184:	00 ce       	rjmp	.-1024   	; 0xfffffd86 <__eeprom_end+0xff7efd86>
     186:	01 43       	sbci	r16, 0x31	; 49
     188:	00 03       	mulsu	r16, r16
     18a:	00 00       	nop
     18c:	ca 01       	movw	r24, r20
     18e:	04 01       	movw	r0, r8
     190:	03 09       	sbc	r16, r3
     192:	04 b6       	in	r0, 0x34	; 52
     194:	01 12       	cpse	r0, r17
     196:	02 03       	mulsu	r16, r18
     198:	09 04       	cpc	r0, r9
     19a:	ae 01       	movw	r20, r28
     19c:	06 03       	mulsu	r16, r22
     19e:	03 09       	sbc	r16, r3
     1a0:	04 a4       	ldd	r0, Z+44	; 0x2c
     1a2:	01 08       	sbc	r0, r1

000001a4 <string3>:
     1a4:	08 03 34 00 31 00 30 00 00 00                       ..4.1.0...

000001ae <string2>:
     1ae:	06 03 4d 00 32 00 00 00                             ..M.2...

000001b6 <string1>:
     1b6:	12 03 4a 00 2e 00 20 00 46 00 69 00 65 00 6e 00     ..J... .F.i.e.n.
     1c6:	65 00 00 00                                         e...

000001ca <string0>:
     1ca:	04 03 09 04                                         ....

000001ce <config1_descriptor>:
     1ce:	09 02 43 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..C.....2.......
     1de:	01 00 05 24 00 10 01 05 24 01 01 01 04 24 02 06     ...$....$....$..
     1ee:	05 24 06 00 01 07 05 82 03 10 00 40 09 04 01 00     .$.........@....
     1fe:	02 0a 00 00 00 07 05 03 02 40 00 00 07 05 84 02     .........@......
     20e:	40 00 00                                            @..

00000211 <device_descriptor>:
     211:	12 01 00 02 02 00 00 10 c0 16 7a 04 00 01 01 02     ..........z.....
     221:	03 01                                               ..

00000223 <endpoint_config_table>:
     223:	00 01 c1 12 01 80 36 01 81 36                       ......6..6

0000022d <__c.2243>:
     22d:	20 20 20 2d 2d 2d 20 20 20 52 68 6f 3a 20 00           ---   Rho: .

0000023c <__c.2241>:
     23c:	20 20 20 2d 2d 2d 20 20 20 54 68 65 74 61 3a 20        ---   Theta: 
	...

0000024d <__c.2239>:
     24d:	20 29 00                                             ).

00000250 <__c.2237>:
     250:	2c 20 00                                            , .

00000253 <__c.2235>:
     253:	28 20 00                                            ( .

00000256 <__c.2233>:
     256:	20 20 20 2d 2d 2d 20 20 20 4e 65 77 20 66 72 61        ---   New fra
     266:	6d 65 3a 20 00                                      me: .

0000026b <__c.2231>:
     26b:	20 29 00                                             ).

0000026e <__c.2229>:
     26e:	2c 20 00                                            , .

00000271 <__c.2227>:
     271:	28 20 00                                            ( .

00000274 <__c.2225>:
     274:	20 20 20 2d 2d 2d 20 20 20 54 72 61 6e 73 6c 61        ---   Transla
     284:	74 69 6f 6e 3a 20 00                                tion: .

0000028b <__c.2223>:
     28b:	42 6f 74 74 6f 6d 20 49 6e 64 65 78 3a 20 00        Bottom Index: .

0000029a <__c.2221>:
     29a:	20 20 20 20 2d 2d 2d 2d 2d 2d 20 20 20 20 00            ------    .

000002a9 <__c.2219>:
     2a9:	54 6f 70 20 49 6e 64 65 78 3a 20 00                 Top Index: .

000002b5 <__c.2214>:
     2b5:	20 20 20 2d 2d 2d 20 20 20 00                          ---   .

000002bf <__c.2212>:
     2bf:	20 29 00                                             ).

000002c2 <__c.2210>:
     2c2:	2c 20 00                                            , .

000002c5 <__c.2208>:
     2c5:	28 20 00                                            ( .

000002c8 <__c.2205>:
     2c8:	20 2d 2d 2d 20 00                                    --- .

000002ce <__c.2198>:
     2ce:	44 69 73 74 61 6e 63 65 3a 20 00 00                 Distance: ..

000002da <__ctors_end>:
     2da:	11 24       	eor	r1, r1
     2dc:	1f be       	out	0x3f, r1	; 63
     2de:	cf ef       	ldi	r28, 0xFF	; 255
     2e0:	da e0       	ldi	r29, 0x0A	; 10
     2e2:	de bf       	out	0x3e, r29	; 62
     2e4:	cd bf       	out	0x3d, r28	; 61

000002e6 <__do_copy_data>:
     2e6:	11 e0       	ldi	r17, 0x01	; 1
     2e8:	a0 e0       	ldi	r26, 0x00	; 0
     2ea:	b1 e0       	ldi	r27, 0x01	; 1
     2ec:	ec e7       	ldi	r30, 0x7C	; 124
     2ee:	fd e2       	ldi	r31, 0x2D	; 45
     2f0:	02 c0       	rjmp	.+4      	; 0x2f6 <__do_copy_data+0x10>
     2f2:	05 90       	lpm	r0, Z+
     2f4:	0d 92       	st	X+, r0
     2f6:	a0 32       	cpi	r26, 0x20	; 32
     2f8:	b1 07       	cpc	r27, r17
     2fa:	d9 f7       	brne	.-10     	; 0x2f2 <__do_copy_data+0xc>

000002fc <__do_clear_bss>:
     2fc:	21 e0       	ldi	r18, 0x01	; 1
     2fe:	a0 e2       	ldi	r26, 0x20	; 32
     300:	b1 e0       	ldi	r27, 0x01	; 1
     302:	01 c0       	rjmp	.+2      	; 0x306 <.do_clear_bss_start>

00000304 <.do_clear_bss_loop>:
     304:	1d 92       	st	X+, r1

00000306 <.do_clear_bss_start>:
     306:	af 39       	cpi	r26, 0x9F	; 159
     308:	b2 07       	cpc	r27, r18
     30a:	e1 f7       	brne	.-8      	; 0x304 <.do_clear_bss_loop>
     30c:	0e 94 fe 01 	call	0x3fc	; 0x3fc <main>
     310:	0c 94 bc 16 	jmp	0x2d78	; 0x2d78 <_exit>

00000314 <__bad_interrupt>:
     314:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000318 <color_init>:

 #define ROBOT_NUM 0
 
 void color_init() {
	// Set pins D2&3 as output
	set(DDRD, 2);
     318:	52 9a       	sbi	0x0a, 2	; 10
	set(DDRD, 3);
     31a:	53 9a       	sbi	0x0a, 3	; 10
     31c:	08 95       	ret

0000031e <robockey_init>:
 }


 void robockey_init() {
	// System prescaler
	m_clockdivide(3);
     31e:	e1 e6       	ldi	r30, 0x61	; 97
     320:	f0 e0       	ldi	r31, 0x00	; 0
     322:	80 e8       	ldi	r24, 0x80	; 128
     324:	80 83       	st	Z, r24
     326:	83 e0       	ldi	r24, 0x03	; 3
     328:	80 83       	st	Z, r24
	color_init();
     32a:	0e 94 8c 01 	call	0x318	; 0x318 <color_init>
	// Initialize usb
	m_usb_init();
     32e:	0e 94 92 04 	call	0x924	; 0x924 <m_usb_init>
	// Initialize motor
	motor_init();
     332:	0e 94 83 02 	call	0x506	; 0x506 <motor_init>
	//Initialize m_wii
	char wiiOpen = 0;
	while(wiiOpen == 0) {
		wiiOpen = m_wii_open();
     336:	0e 94 4e 07 	call	0xe9c	; 0xe9c <m_wii_open>
		m_red(ON);
     33a:	6e 9a       	sbi	0x0d, 6	; 13
     33c:	76 98       	cbi	0x0e, 6	; 14
	m_usb_init();
	// Initialize motor
	motor_init();
	//Initialize m_wii
	char wiiOpen = 0;
	while(wiiOpen == 0) {
     33e:	88 23       	and	r24, r24
     340:	d1 f3       	breq	.-12     	; 0x336 <robockey_init+0x18>
		wiiOpen = m_wii_open();
		m_red(ON);
	}
	m_red(OFF);
     342:	6e 9a       	sbi	0x0d, 6	; 13
     344:	76 9a       	sbi	0x0e, 6	; 14
	// enable B0 for digital input from switch
	clear(DDRB, 0);
     346:	20 98       	cbi	0x04, 0	; 4
	init_rf(ROBOT_NUM);
     348:	80 e0       	ldi	r24, 0x00	; 0
     34a:	90 e0       	ldi	r25, 0x00	; 0
     34c:	0e 94 42 02 	call	0x484	; 0x484 <init_rf>
     350:	08 95       	ret

00000352 <__vector_3>:
 }

 ISR(INT2_vect){
     352:	1f 92       	push	r1
     354:	0f 92       	push	r0
     356:	0f b6       	in	r0, 0x3f	; 63
     358:	0f 92       	push	r0
     35a:	11 24       	eor	r1, r1
     35c:	2f 93       	push	r18
     35e:	3f 93       	push	r19
     360:	4f 93       	push	r20
     362:	5f 93       	push	r21
     364:	6f 93       	push	r22
     366:	7f 93       	push	r23
     368:	8f 93       	push	r24
     36a:	9f 93       	push	r25
     36c:	af 93       	push	r26
     36e:	bf 93       	push	r27
     370:	ef 93       	push	r30
     372:	ff 93       	push	r31
     374:	cf 93       	push	r28
     376:	df 93       	push	r29
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	2a 97       	sbiw	r28, 0x0a	; 10
     37e:	de bf       	out	0x3e, r29	; 62
     380:	cd bf       	out	0x3d, r28	; 61
	 char package[10];
	 // read message into package buffer
	 if (!m_rf_read(package, 10)) {
     382:	6a e0       	ldi	r22, 0x0A	; 10
     384:	ce 01       	movw	r24, r28
     386:	01 96       	adiw	r24, 0x01	; 1
     388:	0e 94 2e 04 	call	0x85c	; 0x85c <m_rf_read>
     38c:	88 23       	and	r24, r24
     38e:	c9 f0       	breq	.+50     	; 0x3c2 <__vector_3+0x70>
		 // Default to pause if command not read
		 package[0] = 0xA4;
		 } else {
		 m_green(ON);
     390:	6a 9a       	sbi	0x0d, 2	; 13
     392:	72 98       	cbi	0x0e, 2	; 14
	 }
	 
	 switch(package[0]){
     394:	89 81       	ldd	r24, Y+1	; 0x01
     396:	80 3a       	cpi	r24, 0xA0	; 160
     398:	19 f0       	breq	.+6      	; 0x3a0 <__vector_3+0x4e>
     39a:	81 3a       	cpi	r24, 0xA1	; 161
     39c:	31 f0       	breq	.+12     	; 0x3aa <__vector_3+0x58>
     39e:	11 c0       	rjmp	.+34     	; 0x3c2 <__vector_3+0x70>
		 case 0xA0: // Comm test
		 // flash LED
		 read_switch();
     3a0:	0e 94 62 02 	call	0x4c4	; 0x4c4 <read_switch>
		 flash_LED();
     3a4:	0e 94 75 02 	call	0x4ea	; 0x4ea <flash_LED>
		 break;
     3a8:	0e c0       	rjmp	.+28     	; 0x3c6 <__vector_3+0x74>
		 case 0xA1:	// Play command
		 // light LED
		 // set flag to play!
		 active = true;
     3aa:	81 e0       	ldi	r24, 0x01	; 1
     3ac:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <active>
		 read_switch();
     3b0:	0e 94 62 02 	call	0x4c4	; 0x4c4 <read_switch>
		 flash_LED();
     3b4:	0e 94 75 02 	call	0x4ea	; 0x4ea <flash_LED>
		 turn(0);
     3b8:	80 e0       	ldi	r24, 0x00	; 0
     3ba:	90 e0       	ldi	r25, 0x00	; 0
     3bc:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <turn>
		 break;
     3c0:	02 c0       	rjmp	.+4      	; 0x3c6 <__vector_3+0x74>
		 case 0xA3:
		 case 0xA4:
		 case 0xA6:
		 case 0xA7:
		 default:
		 active = false;
     3c2:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <active>
	 }
	 received_message = false;
     3c6:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <received_message>
	 package[0] = 0;
 }
     3ca:	2a 96       	adiw	r28, 0x0a	; 10
     3cc:	0f b6       	in	r0, 0x3f	; 63
     3ce:	f8 94       	cli
     3d0:	de bf       	out	0x3e, r29	; 62
     3d2:	0f be       	out	0x3f, r0	; 63
     3d4:	cd bf       	out	0x3d, r28	; 61
     3d6:	df 91       	pop	r29
     3d8:	cf 91       	pop	r28
     3da:	ff 91       	pop	r31
     3dc:	ef 91       	pop	r30
     3de:	bf 91       	pop	r27
     3e0:	af 91       	pop	r26
     3e2:	9f 91       	pop	r25
     3e4:	8f 91       	pop	r24
     3e6:	7f 91       	pop	r23
     3e8:	6f 91       	pop	r22
     3ea:	5f 91       	pop	r21
     3ec:	4f 91       	pop	r20
     3ee:	3f 91       	pop	r19
     3f0:	2f 91       	pop	r18
     3f2:	0f 90       	pop	r0
     3f4:	0f be       	out	0x3f, r0	; 63
     3f6:	0f 90       	pop	r0
     3f8:	1f 90       	pop	r1
     3fa:	18 95       	reti

000003fc <main>:

int main(void){
     3fc:	cf 93       	push	r28
     3fe:	df 93       	push	r29
     400:	cd b7       	in	r28, 0x3d	; 61
     402:	de b7       	in	r29, 0x3e	; 62
     404:	2d 97       	sbiw	r28, 0x0d	; 13
     406:	0f b6       	in	r0, 0x3f	; 63
     408:	f8 94       	cli
     40a:	de bf       	out	0x3e, r29	; 62
     40c:	0f be       	out	0x3f, r0	; 63
     40e:	cd bf       	out	0x3d, r28	; 61
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     410:	2f eb       	ldi	r18, 0xBF	; 191
     412:	87 e2       	ldi	r24, 0x27	; 39
     414:	99 e0       	ldi	r25, 0x09	; 9
     416:	21 50       	subi	r18, 0x01	; 1
     418:	80 40       	sbci	r24, 0x00	; 0
     41a:	90 40       	sbci	r25, 0x00	; 0
     41c:	e1 f7       	brne	.-8      	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
     41e:	00 c0       	rjmp	.+0      	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
     420:	00 00       	nop
	m_wait(3000);
	robockey_init();
     422:	0e 94 8f 01 	call	0x31e	; 0x31e <robockey_init>
	
	Robot robot;	// Robot variable
	init_robot(&robot);
     426:	ce 01       	movw	r24, r28
     428:	01 96       	adiw	r24, 0x01	; 1
     42a:	0e 94 a1 0c 	call	0x1942	; 0x1942 <init_robot>

	///// FOR TESTING WITHOUT PLAY COMMAND //////////////////
	active = false;
     42e:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <active>
	// init_rf(1);
	//unsigned int star_array[12];
	/////////////////////////////////////////////////////////
	int k = 0;
	sei();
     432:	78 94       	sei
	while(!m_rf_open(1, 52, 10)){
		m_red(TOGGLE);
     434:	10 e4       	ldi	r17, 0x40	; 64
	// init_rf(1);
	//unsigned int star_array[12];
	/////////////////////////////////////////////////////////
	int k = 0;
	sei();
	while(!m_rf_open(1, 52, 10)){
     436:	0a c0       	rjmp	.+20     	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
		m_red(TOGGLE);
     438:	6e 9a       	sbi	0x0d, 6	; 13
     43a:	8e b1       	in	r24, 0x0e	; 14
     43c:	81 27       	eor	r24, r17
     43e:	8e b9       	out	0x0e, r24	; 14
     440:	87 ea       	ldi	r24, 0xA7	; 167
     442:	91 e6       	ldi	r25, 0x61	; 97
     444:	01 97       	sbiw	r24, 0x01	; 1
     446:	f1 f7       	brne	.-4      	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
     448:	00 c0       	rjmp	.+0      	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
     44a:	00 00       	nop
	// init_rf(1);
	//unsigned int star_array[12];
	/////////////////////////////////////////////////////////
	int k = 0;
	sei();
	while(!m_rf_open(1, 52, 10)){
     44c:	4a e0       	ldi	r20, 0x0A	; 10
     44e:	64 e3       	ldi	r22, 0x34	; 52
     450:	81 e0       	ldi	r24, 0x01	; 1
     452:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <m_rf_open>
     456:	88 23       	and	r24, r24
     458:	79 f3       	breq	.-34     	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
			m_red(TOGGLE);
			interpret(&robot, star_array);
		}*/
		
		// Check if robot is active
		if(active){
     45a:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <active>
     45e:	88 23       	and	r24, r24
     460:	e1 f3       	breq	.-8      	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
			// move to puck 
			if(step_to_puck()){
     462:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <step_to_puck>
     466:	88 23       	and	r24, r24
     468:	c1 f3       	breq	.-16     	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
				// if step_to_puck returns true, it means you have the puck!
				turn(0);
     46a:	80 e0       	ldi	r24, 0x00	; 0
     46c:	90 e0       	ldi	r25, 0x00	; 0
     46e:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <turn>
				if(step_to_goal(&robot)) {
     472:	ce 01       	movw	r24, r28
     474:	01 96       	adiw	r24, 0x01	; 1
     476:	0e 94 2c 11 	call	0x2258	; 0x2258 <step_to_goal>
     47a:	88 23       	and	r24, r24
     47c:	71 f3       	breq	.-36     	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
					// if step_to_goal returns true, it means you scored!
					m_red(ON);	// roxanne, you have to turn on the red light
     47e:	6e 9a       	sbi	0x0d, 6	; 13
     480:	76 98       	cbi	0x0e, 6	; 14
     482:	eb cf       	rjmp	.-42     	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>

00000484 <init_rf>:
int rx_address[]  = {52, 53, 54};
char package[10];

extern volatile bool active;

void init_rf(int robot_num){
     484:	1f 93       	push	r17
     486:	cf 93       	push	r28
     488:	df 93       	push	r29
	sei();
     48a:	78 94       	sei
	while(!m_rf_open(1, rx_address[robot_num], 10)){
     48c:	ec 01       	movw	r28, r24
     48e:	cc 0f       	add	r28, r28
     490:	dd 1f       	adc	r29, r29
     492:	c0 50       	subi	r28, 0x00	; 0
     494:	df 4f       	sbci	r29, 0xFF	; 255
		m_red(TOGGLE);
     496:	10 e4       	ldi	r17, 0x40	; 64

extern volatile bool active;

void init_rf(int robot_num){
	sei();
	while(!m_rf_open(1, rx_address[robot_num], 10)){
     498:	0a c0       	rjmp	.+20     	; 0x4ae <init_rf+0x2a>
		m_red(TOGGLE);
     49a:	6e 9a       	sbi	0x0d, 6	; 13
     49c:	9e b1       	in	r25, 0x0e	; 14
     49e:	91 27       	eor	r25, r17
     4a0:	9e b9       	out	0x0e, r25	; 14
     4a2:	87 ea       	ldi	r24, 0xA7	; 167
     4a4:	91 e6       	ldi	r25, 0x61	; 97
     4a6:	01 97       	sbiw	r24, 0x01	; 1
     4a8:	f1 f7       	brne	.-4      	; 0x4a6 <init_rf+0x22>
     4aa:	00 c0       	rjmp	.+0      	; 0x4ac <init_rf+0x28>
     4ac:	00 00       	nop

extern volatile bool active;

void init_rf(int robot_num){
	sei();
	while(!m_rf_open(1, rx_address[robot_num], 10)){
     4ae:	4a e0       	ldi	r20, 0x0A	; 10
     4b0:	68 81       	ld	r22, Y
     4b2:	81 e0       	ldi	r24, 0x01	; 1
     4b4:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <m_rf_open>
     4b8:	88 23       	and	r24, r24
     4ba:	79 f3       	breq	.-34     	; 0x49a <init_rf+0x16>
		m_red(TOGGLE);
		m_wait(100);
	}
}
     4bc:	df 91       	pop	r29
     4be:	cf 91       	pop	r28
     4c0:	1f 91       	pop	r17
     4c2:	08 95       	ret

000004c4 <read_switch>:

void read_switch(){
	// read input
	// set color
	if (check(PINB, 0)) {
     4c4:	18 9b       	sbis	0x03, 0	; 3
     4c6:	04 c0       	rjmp	.+8      	; 0x4d0 <read_switch+0xc>
		color = BLUE;
     4c8:	81 e0       	ldi	r24, 0x01	; 1
     4ca:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <color>
     4ce:	08 95       	ret
	} else {
		color = RED;
     4d0:	10 92 27 01 	sts	0x0127, r1	; 0x800127 <color>
     4d4:	08 95       	ret

000004d6 <light_LED>:
	}
}

void light_LED() {
	if (color) {	// red (color = 1)
     4d6:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <color>
     4da:	88 23       	and	r24, r24
     4dc:	19 f0       	breq	.+6      	; 0x4e4 <light_LED+0xe>
		// Testing LED
		set(PORTD, 2);
     4de:	5a 9a       	sbi	0x0b, 2	; 11
		clear(PORTD, 3);
     4e0:	5b 98       	cbi	0x0b, 3	; 11
     4e2:	08 95       	ret
	} else {	// blue (color = 0)
		// Testing LED
		clear(PORTD, 2);
     4e4:	5a 98       	cbi	0x0b, 2	; 11
		set(PORTD, 3);
     4e6:	5b 9a       	sbi	0x0b, 3	; 11
     4e8:	08 95       	ret

000004ea <flash_LED>:
	}
 }

void flash_LED(){
	// turn off LED
	clear(PORTD, 2);
     4ea:	5a 98       	cbi	0x0b, 2	; 11
	clear(PORTD, 3);
     4ec:	5b 98       	cbi	0x0b, 3	; 11
     4ee:	87 ea       	ldi	r24, 0xA7	; 167
     4f0:	91 e6       	ldi	r25, 0x61	; 97
     4f2:	01 97       	sbiw	r24, 0x01	; 1
     4f4:	f1 f7       	brne	.-4      	; 0x4f2 <flash_LED+0x8>
     4f6:	00 c0       	rjmp	.+0      	; 0x4f8 <flash_LED+0xe>
     4f8:	00 00       	nop
	m_wait(100);
	// turn on LED
	light_LED(color);
     4fa:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <color>
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <light_LED>
     504:	08 95       	ret

00000506 <motor_init>:
		} else if (direction > 0) {
		OCR1A = 0x00;
		OCR1B = 255 - direction;
		} else {
		OCR1A = 255 - direction;
		OCR1B = 0x00;
     506:	21 9a       	sbi	0x04, 1	; 4
     508:	22 9a       	sbi	0x04, 2	; 4
     50a:	23 9a       	sbi	0x04, 3	; 4
     50c:	27 9a       	sbi	0x04, 7	; 4
     50e:	29 9a       	sbi	0x05, 1	; 5
     510:	2a 98       	cbi	0x05, 2	; 5
     512:	2b 9a       	sbi	0x05, 3	; 5
     514:	2f 98       	cbi	0x05, 7	; 5
     516:	e1 e8       	ldi	r30, 0x81	; 129
     518:	f0 e0       	ldi	r31, 0x00	; 0
     51a:	80 81       	ld	r24, Z
     51c:	8b 7f       	andi	r24, 0xFB	; 251
     51e:	80 83       	st	Z, r24
     520:	80 81       	ld	r24, Z
     522:	82 60       	ori	r24, 0x02	; 2
     524:	80 83       	st	Z, r24
     526:	80 81       	ld	r24, Z
     528:	8e 7f       	andi	r24, 0xFE	; 254
     52a:	80 83       	st	Z, r24
     52c:	80 81       	ld	r24, Z
     52e:	8f 7e       	andi	r24, 0xEF	; 239
     530:	80 83       	st	Z, r24
     532:	80 81       	ld	r24, Z
     534:	88 60       	ori	r24, 0x08	; 8
     536:	80 83       	st	Z, r24
     538:	e0 e8       	ldi	r30, 0x80	; 128
     53a:	f0 e0       	ldi	r31, 0x00	; 0
     53c:	80 81       	ld	r24, Z
     53e:	8d 7f       	andi	r24, 0xFD	; 253
     540:	80 83       	st	Z, r24
     542:	80 81       	ld	r24, Z
     544:	81 60       	ori	r24, 0x01	; 1
     546:	80 83       	st	Z, r24
     548:	80 81       	ld	r24, Z
     54a:	80 68       	ori	r24, 0x80	; 128
     54c:	80 83       	st	Z, r24
     54e:	80 81       	ld	r24, Z
     550:	80 64       	ori	r24, 0x40	; 64
     552:	80 83       	st	Z, r24
     554:	80 81       	ld	r24, Z
     556:	80 62       	ori	r24, 0x20	; 32
     558:	80 83       	st	Z, r24
     55a:	80 81       	ld	r24, Z
     55c:	80 61       	ori	r24, 0x10	; 16
     55e:	80 83       	st	Z, r24
     560:	8f eb       	ldi	r24, 0xBF	; 191
     562:	90 e0       	ldi	r25, 0x00	; 0
     564:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     568:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     56c:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
     570:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
     574:	26 9a       	sbi	0x04, 6	; 4
     576:	25 9a       	sbi	0x04, 5	; 4
     578:	08 95       	ret

0000057a <turn_in_place>:
     57a:	88 23       	and	r24, r24
     57c:	89 f0       	breq	.+34     	; 0x5a0 <turn_in_place+0x26>
     57e:	8f ef       	ldi	r24, 0xFF	; 255
     580:	90 e0       	ldi	r25, 0x00	; 0
     582:	86 1b       	sub	r24, r22
     584:	97 0b       	sbc	r25, r23
     586:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     58a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     58e:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
     592:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
     596:	29 9a       	sbi	0x05, 1	; 5
     598:	2a 98       	cbi	0x05, 2	; 5
     59a:	2b 98       	cbi	0x05, 3	; 5
     59c:	2f 9a       	sbi	0x05, 7	; 5
     59e:	08 95       	ret
     5a0:	8f ef       	ldi	r24, 0xFF	; 255
     5a2:	90 e0       	ldi	r25, 0x00	; 0
     5a4:	86 1b       	sub	r24, r22
     5a6:	97 0b       	sbc	r25, r23
     5a8:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     5ac:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     5b0:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
     5b4:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
     5b8:	29 98       	cbi	0x05, 1	; 5
     5ba:	2a 9a       	sbi	0x05, 2	; 5
     5bc:	2b 9a       	sbi	0x05, 3	; 5
     5be:	2f 98       	cbi	0x05, 7	; 5
     5c0:	08 95       	ret

000005c2 <turn>:
     5c2:	29 98       	cbi	0x05, 1	; 5
     5c4:	2a 9a       	sbi	0x05, 2	; 5
     5c6:	2b 98       	cbi	0x05, 3	; 5
     5c8:	2f 9a       	sbi	0x05, 7	; 5
     5ca:	00 97       	sbiw	r24, 0x00	; 0
     5cc:	69 f4       	brne	.+26     	; 0x5e8 <turn+0x26>
     5ce:	87 e3       	ldi	r24, 0x37	; 55
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     5d6:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     5da:	8f e3       	ldi	r24, 0x3F	; 63
     5dc:	90 e0       	ldi	r25, 0x00	; 0
     5de:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
     5e2:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
     5e6:	08 95       	ret
     5e8:	bc 01       	movw	r22, r24
     5ea:	18 16       	cp	r1, r24
     5ec:	19 06       	cpc	r1, r25
     5ee:	ec f4       	brge	.+58     	; 0x62a <turn+0x68>
     5f0:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     5f4:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     5f8:	07 2e       	mov	r0, r23
     5fa:	00 0c       	add	r0, r0
     5fc:	88 0b       	sbc	r24, r24
     5fe:	99 0b       	sbc	r25, r25
     600:	0e 94 93 13 	call	0x2726	; 0x2726 <__floatsisf>
     604:	20 e0       	ldi	r18, 0x00	; 0
     606:	30 e0       	ldi	r19, 0x00	; 0
     608:	4f e7       	ldi	r20, 0x7F	; 127
     60a:	53 e4       	ldi	r21, 0x43	; 67
     60c:	0e 94 24 15 	call	0x2a48	; 0x2a48 <__mulsf3>
     610:	20 e0       	ldi	r18, 0x00	; 0
     612:	30 e0       	ldi	r19, 0x00	; 0
     614:	48 e4       	ldi	r20, 0x48	; 72
     616:	52 e4       	ldi	r21, 0x42	; 66
     618:	0e 94 af 12 	call	0x255e	; 0x255e <__divsf3>
     61c:	0e 94 5b 13 	call	0x26b6	; 0x26b6 <__fixsfsi>
     620:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
     624:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
     628:	08 95       	ret
     62a:	71 95       	neg	r23
     62c:	61 95       	neg	r22
     62e:	71 09       	sbc	r23, r1
     630:	07 2e       	mov	r0, r23
     632:	00 0c       	add	r0, r0
     634:	88 0b       	sbc	r24, r24
     636:	99 0b       	sbc	r25, r25
     638:	0e 94 93 13 	call	0x2726	; 0x2726 <__floatsisf>
     63c:	20 e0       	ldi	r18, 0x00	; 0
     63e:	30 e0       	ldi	r19, 0x00	; 0
     640:	4f e7       	ldi	r20, 0x7F	; 127
     642:	53 e4       	ldi	r21, 0x43	; 67
     644:	0e 94 24 15 	call	0x2a48	; 0x2a48 <__mulsf3>
     648:	20 e0       	ldi	r18, 0x00	; 0
     64a:	30 e0       	ldi	r19, 0x00	; 0
     64c:	48 e4       	ldi	r20, 0x48	; 72
     64e:	52 e4       	ldi	r21, 0x42	; 66
     650:	0e 94 af 12 	call	0x255e	; 0x255e <__divsf3>
     654:	0e 94 5b 13 	call	0x26b6	; 0x26b6 <__fixsfsi>
     658:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     65c:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     660:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
     664:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
     668:	08 95       	ret

0000066a <facing_goal>:
	}
}

// Turn to face opponent's goal
bool facing_goal(Robot* robot, float opponent_x, float opponent_y) {
     66a:	4f 92       	push	r4
     66c:	5f 92       	push	r5
     66e:	6f 92       	push	r6
     670:	7f 92       	push	r7
     672:	8f 92       	push	r8
     674:	9f 92       	push	r9
     676:	af 92       	push	r10
     678:	bf 92       	push	r11
     67a:	cf 92       	push	r12
     67c:	df 92       	push	r13
     67e:	ef 92       	push	r14
     680:	ff 92       	push	r15
     682:	0f 93       	push	r16
     684:	1f 93       	push	r17
     686:	cf 93       	push	r28
     688:	df 93       	push	r29
     68a:	ec 01       	movw	r28, r24
     68c:	4a 01       	movw	r8, r20
     68e:	5b 01       	movw	r10, r22
     690:	68 01       	movw	r12, r16
     692:	79 01       	movw	r14, r18
	if (opponent_x == robot->x) robot->x += 1;
     694:	49 80       	ldd	r4, Y+1	; 0x01
     696:	5a 80       	ldd	r5, Y+2	; 0x02
     698:	6b 80       	ldd	r6, Y+3	; 0x03
     69a:	7c 80       	ldd	r7, Y+4	; 0x04
     69c:	9a 01       	movw	r18, r20
     69e:	ab 01       	movw	r20, r22
     6a0:	c3 01       	movw	r24, r6
     6a2:	b2 01       	movw	r22, r4
     6a4:	0e 94 a5 12 	call	0x254a	; 0x254a <__cmpsf2>
     6a8:	81 11       	cpse	r24, r1
     6aa:	0c c0       	rjmp	.+24     	; 0x6c4 <facing_goal+0x5a>
     6ac:	20 e0       	ldi	r18, 0x00	; 0
     6ae:	30 e0       	ldi	r19, 0x00	; 0
     6b0:	40 e8       	ldi	r20, 0x80	; 128
     6b2:	5f e3       	ldi	r21, 0x3F	; 63
     6b4:	c3 01       	movw	r24, r6
     6b6:	b2 01       	movw	r22, r4
     6b8:	0e 94 c7 11 	call	0x238e	; 0x238e <__addsf3>
     6bc:	69 83       	std	Y+1, r22	; 0x01
     6be:	7a 83       	std	Y+2, r23	; 0x02
     6c0:	8b 83       	std	Y+3, r24	; 0x03
     6c2:	9c 83       	std	Y+4, r25	; 0x04
	if (opponent_y == robot->y) robot->y += 1;
     6c4:	4d 80       	ldd	r4, Y+5	; 0x05
     6c6:	5e 80       	ldd	r5, Y+6	; 0x06
     6c8:	6f 80       	ldd	r6, Y+7	; 0x07
     6ca:	78 84       	ldd	r7, Y+8	; 0x08
     6cc:	a7 01       	movw	r20, r14
     6ce:	96 01       	movw	r18, r12
     6d0:	c3 01       	movw	r24, r6
     6d2:	b2 01       	movw	r22, r4
     6d4:	0e 94 a5 12 	call	0x254a	; 0x254a <__cmpsf2>
     6d8:	81 11       	cpse	r24, r1
     6da:	0c c0       	rjmp	.+24     	; 0x6f4 <facing_goal+0x8a>
     6dc:	20 e0       	ldi	r18, 0x00	; 0
     6de:	30 e0       	ldi	r19, 0x00	; 0
     6e0:	40 e8       	ldi	r20, 0x80	; 128
     6e2:	5f e3       	ldi	r21, 0x3F	; 63
     6e4:	c3 01       	movw	r24, r6
     6e6:	b2 01       	movw	r22, r4
     6e8:	0e 94 c7 11 	call	0x238e	; 0x238e <__addsf3>
     6ec:	6d 83       	std	Y+5, r22	; 0x05
     6ee:	7e 83       	std	Y+6, r23	; 0x06
     6f0:	8f 83       	std	Y+7, r24	; 0x07
     6f2:	98 87       	std	Y+8, r25	; 0x08
	float opponent_angle = atan2f((opponent_y - robot->y), opponent_x - robot->x);
     6f4:	29 81       	ldd	r18, Y+1	; 0x01
     6f6:	3a 81       	ldd	r19, Y+2	; 0x02
     6f8:	4b 81       	ldd	r20, Y+3	; 0x03
     6fa:	5c 81       	ldd	r21, Y+4	; 0x04
     6fc:	c5 01       	movw	r24, r10
     6fe:	b4 01       	movw	r22, r8
     700:	0e 94 c6 11 	call	0x238c	; 0x238c <__subsf3>
     704:	4b 01       	movw	r8, r22
     706:	5c 01       	movw	r10, r24
     708:	2d 81       	ldd	r18, Y+5	; 0x05
     70a:	3e 81       	ldd	r19, Y+6	; 0x06
     70c:	4f 81       	ldd	r20, Y+7	; 0x07
     70e:	58 85       	ldd	r21, Y+8	; 0x08
     710:	c7 01       	movw	r24, r14
     712:	b6 01       	movw	r22, r12
     714:	0e 94 c6 11 	call	0x238c	; 0x238c <__subsf3>
     718:	a5 01       	movw	r20, r10
     71a:	94 01       	movw	r18, r8
     71c:	0e 94 46 12 	call	0x248c	; 0x248c <atan2>
     720:	4b 01       	movw	r8, r22
     722:	5c 01       	movw	r10, r24
	// Near -PI
	if (opponent_angle < high_bound && opponent_angle < PI && low_bound >= PI - error) {
		return true;
	}*/
	// Normal case
	return (robot->o > low_bound && robot->o < high_bound);
     724:	c9 84       	ldd	r12, Y+9	; 0x09
     726:	da 84       	ldd	r13, Y+10	; 0x0a
     728:	eb 84       	ldd	r14, Y+11	; 0x0b
     72a:	fc 84       	ldd	r15, Y+12	; 0x0c
bool facing_goal(Robot* robot, float opponent_x, float opponent_y) {
	if (opponent_x == robot->x) robot->x += 1;
	if (opponent_y == robot->y) robot->y += 1;
	float opponent_angle = atan2f((opponent_y - robot->y), opponent_x - robot->x);
	float error = PI / 18.0;
	float low_bound = opponent_angle - error;
     72c:	29 eb       	ldi	r18, 0xB9	; 185
     72e:	38 eb       	ldi	r19, 0xB8	; 184
     730:	42 e3       	ldi	r20, 0x32	; 50
     732:	5e e3       	ldi	r21, 0x3E	; 62
     734:	0e 94 c6 11 	call	0x238c	; 0x238c <__subsf3>
	// Near -PI
	if (opponent_angle < high_bound && opponent_angle < PI && low_bound >= PI - error) {
		return true;
	}*/
	// Normal case
	return (robot->o > low_bound && robot->o < high_bound);
     738:	a7 01       	movw	r20, r14
     73a:	96 01       	movw	r18, r12
     73c:	0e 94 a5 12 	call	0x254a	; 0x254a <__cmpsf2>
     740:	88 23       	and	r24, r24
     742:	94 f4       	brge	.+36     	; 0x768 <facing_goal+0xfe>
	if (opponent_x == robot->x) robot->x += 1;
	if (opponent_y == robot->y) robot->y += 1;
	float opponent_angle = atan2f((opponent_y - robot->y), opponent_x - robot->x);
	float error = PI / 18.0;
	float low_bound = opponent_angle - error;
	float high_bound = opponent_angle + error;
     744:	29 eb       	ldi	r18, 0xB9	; 185
     746:	38 eb       	ldi	r19, 0xB8	; 184
     748:	42 e3       	ldi	r20, 0x32	; 50
     74a:	5e e3       	ldi	r21, 0x3E	; 62
     74c:	c5 01       	movw	r24, r10
     74e:	b4 01       	movw	r22, r8
     750:	0e 94 c7 11 	call	0x238e	; 0x238e <__addsf3>
	// Near -PI
	if (opponent_angle < high_bound && opponent_angle < PI && low_bound >= PI - error) {
		return true;
	}*/
	// Normal case
	return (robot->o > low_bound && robot->o < high_bound);
     754:	c1 e0       	ldi	r28, 0x01	; 1
     756:	a7 01       	movw	r20, r14
     758:	96 01       	movw	r18, r12
     75a:	0e 94 a9 14 	call	0x2952	; 0x2952 <__gesf2>
     75e:	18 16       	cp	r1, r24
     760:	0c f0       	brlt	.+2      	; 0x764 <facing_goal+0xfa>
     762:	c0 e0       	ldi	r28, 0x00	; 0
     764:	8c 2f       	mov	r24, r28
     766:	01 c0       	rjmp	.+2      	; 0x76a <facing_goal+0x100>
     768:	80 e0       	ldi	r24, 0x00	; 0
}
     76a:	81 70       	andi	r24, 0x01	; 1
     76c:	df 91       	pop	r29
     76e:	cf 91       	pop	r28
     770:	1f 91       	pop	r17
     772:	0f 91       	pop	r16
     774:	ff 90       	pop	r15
     776:	ef 90       	pop	r14
     778:	df 90       	pop	r13
     77a:	cf 90       	pop	r12
     77c:	bf 90       	pop	r11
     77e:	af 90       	pop	r10
     780:	9f 90       	pop	r9
     782:	8f 90       	pop	r8
     784:	7f 90       	pop	r7
     786:	6f 90       	pop	r6
     788:	5f 90       	pop	r5
     78a:	4f 90       	pop	r4
     78c:	08 95       	ret

0000078e <m_bus_init>:

// PUBLIC FUNCTIONS
void m_bus_init(void)
{
	// ENABLE PULLUPS
	set(PORTD,0);
     78e:	58 9a       	sbi	0x0b, 0	; 11
	set(PORTD,1);
     790:	59 9a       	sbi	0x0b, 1	; 11
	set(PORTD,2);
     792:	5a 9a       	sbi	0x0b, 2	; 11
	
	// CONFIGURE THE CLOCK
	TWBR = 12;	// CLK freq = CPU clock / (16 + 2*TWBR*(4^TWPS)), 16MHz clock, TWBR=12, TWPS=00 -> 400kHz
     794:	8c e0       	ldi	r24, 0x0C	; 12
     796:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>

	// ENABLE interrupts in INT2 (D2)
	set(EICRA,ISC21); clear(EICRA,ISC20); // trigger on falling edge
     79a:	e9 e6       	ldi	r30, 0x69	; 105
     79c:	f0 e0       	ldi	r31, 0x00	; 0
     79e:	80 81       	ld	r24, Z
     7a0:	80 62       	ori	r24, 0x20	; 32
     7a2:	80 83       	st	Z, r24
     7a4:	80 81       	ld	r24, Z
     7a6:	8f 7e       	andi	r24, 0xEF	; 239
     7a8:	80 83       	st	Z, r24
	set(EIMSK,INT2); // demask the interrupt
     7aa:	ea 9a       	sbi	0x1d, 2	; 29
	sei(); // enable global interrupts
     7ac:	78 94       	sei
     7ae:	08 95       	ret

000007b0 <m_rf_open>:
#define MRFINIT			0x01
#define	MRFREAD			0x02
#define MRFSEND			0x03

char m_rf_open(char channel, char RXaddress, char packet_length)
{	
     7b0:	1f 93       	push	r17
     7b2:	cf 93       	push	r28
     7b4:	df 93       	push	r29
     7b6:	18 2f       	mov	r17, r24
     7b8:	d6 2f       	mov	r29, r22
     7ba:	c4 2f       	mov	r28, r20
	// START | MRFTWIADDR | MRFINIT | channel | RXaddress | packet_length | STOP
	
	m_bus_init();
     7bc:	0e 94 c7 03 	call	0x78e	; 0x78e <m_bus_init>
	
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
     7c0:	94 ea       	ldi	r25, 0xA4	; 164
     7c2:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
     7c6:	ec eb       	ldi	r30, 0xBC	; 188
     7c8:	f0 e0       	ldi	r31, 0x00	; 0
     7ca:	90 81       	ld	r25, Z
     7cc:	99 23       	and	r25, r25
     7ce:	ec f7       	brge	.-6      	; 0x7ca <m_rf_open+0x1a>
	
	// ADDRESS
	TWDR = MRFTWIADDR<<1;
     7d0:	90 e5       	ldi	r25, 0x50	; 80
     7d2:	90 93 bb 00 	sts	0x00BB, r25	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR = (1<<TWINT) | (1<<TWEN);
     7d6:	94 e8       	ldi	r25, 0x84	; 132
     7d8:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
     7dc:	ec eb       	ldi	r30, 0xBC	; 188
     7de:	f0 e0       	ldi	r31, 0x00	; 0
     7e0:	90 81       	ld	r25, Z
     7e2:	99 23       	and	r25, r25
     7e4:	ec f7       	brge	.-6      	; 0x7e0 <m_rf_open+0x30>
	if((TWSR & 0xF8)== 0x20){ // ACK was not received - may not be connected/listening
     7e6:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     7ea:	98 7f       	andi	r25, 0xF8	; 248
     7ec:	90 32       	cpi	r25, 0x20	; 32
     7ee:	29 f4       	brne	.+10     	; 0x7fa <m_rf_open+0x4a>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
     7f0:	84 e9       	ldi	r24, 0x94	; 148
     7f2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
		return 0;
     7f6:	80 e0       	ldi	r24, 0x00	; 0
     7f8:	2d c0       	rjmp	.+90     	; 0x854 <m_rf_open+0xa4>
	}
	
	// SEND THE DESIRED MRF MODE
	TWDR = MRFINIT;
     7fa:	81 e0       	ldi	r24, 0x01	; 1
     7fc:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR = (1<<TWINT) | (1<<TWEN);
     800:	84 e8       	ldi	r24, 0x84	; 132
     802:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
     806:	ec eb       	ldi	r30, 0xBC	; 188
     808:	f0 e0       	ldi	r31, 0x00	; 0
     80a:	90 81       	ld	r25, Z
     80c:	99 23       	and	r25, r25
     80e:	ec f7       	brge	.-6      	; 0x80a <m_rf_open+0x5a>
	
	// SEND DATA
	TWDR = channel;
     810:	10 93 bb 00 	sts	0x00BB, r17	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR = (1<<TWINT) | (1<<TWEN);
     814:	84 e8       	ldi	r24, 0x84	; 132
     816:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
     81a:	ec eb       	ldi	r30, 0xBC	; 188
     81c:	f0 e0       	ldi	r31, 0x00	; 0
     81e:	80 81       	ld	r24, Z
     820:	88 23       	and	r24, r24
     822:	ec f7       	brge	.-6      	; 0x81e <m_rf_open+0x6e>
	
	TWDR = RXaddress;
     824:	d0 93 bb 00 	sts	0x00BB, r29	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR = (1<<TWINT) | (1<<TWEN);
     828:	84 e8       	ldi	r24, 0x84	; 132
     82a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
     82e:	ec eb       	ldi	r30, 0xBC	; 188
     830:	f0 e0       	ldi	r31, 0x00	; 0
     832:	80 81       	ld	r24, Z
     834:	88 23       	and	r24, r24
     836:	ec f7       	brge	.-6      	; 0x832 <m_rf_open+0x82>
	
	TWDR = packet_length;
     838:	c0 93 bb 00 	sts	0x00BB, r28	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR = (1<<TWINT) | (1<<TWEN);
     83c:	84 e8       	ldi	r24, 0x84	; 132
     83e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
     842:	ec eb       	ldi	r30, 0xBC	; 188
     844:	f0 e0       	ldi	r31, 0x00	; 0
     846:	80 81       	ld	r24, Z
     848:	88 23       	and	r24, r24
     84a:	ec f7       	brge	.-6      	; 0x846 <m_rf_open+0x96>
	
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
     84c:	84 e9       	ldi	r24, 0x94	; 148
     84e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	
	return 1;
     852:	81 e0       	ldi	r24, 0x01	; 1
}
     854:	df 91       	pop	r29
     856:	cf 91       	pop	r28
     858:	1f 91       	pop	r17
     85a:	08 95       	ret

0000085c <m_rf_read>:

char m_rf_read(char* buffer, char packet_length)
{
     85c:	cf 93       	push	r28
     85e:	df 93       	push	r29
     860:	9c 01       	movw	r18, r24

	char bytes;
	int i;

	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
     862:	84 ea       	ldi	r24, 0xA4	; 164
     864:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
     868:	ec eb       	ldi	r30, 0xBC	; 188
     86a:	f0 e0       	ldi	r31, 0x00	; 0
     86c:	90 81       	ld	r25, Z
     86e:	99 23       	and	r25, r25
     870:	ec f7       	brge	.-6      	; 0x86c <m_rf_read+0x10>
	
	// ADDRESS (in Master-Receiver Mode)
	TWDR = ((MRFTWIADDR<<1)|1);
     872:	81 e5       	ldi	r24, 0x51	; 81
     874:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR = (1<<TWINT) | (1<<TWEN);
     878:	84 e8       	ldi	r24, 0x84	; 132
     87a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){}; // wait until finished sending address
     87e:	ec eb       	ldi	r30, 0xBC	; 188
     880:	f0 e0       	ldi	r31, 0x00	; 0
     882:	90 81       	ld	r25, Z
     884:	99 23       	and	r25, r25
     886:	ec f7       	brge	.-6      	; 0x882 <m_rf_read+0x26>
	if((TWSR & 0xF8)== 0x48){ // ACK was not received
     888:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     88c:	88 7f       	andi	r24, 0xF8	; 248
     88e:	88 34       	cpi	r24, 0x48	; 72
     890:	29 f4       	brne	.+10     	; 0x89c <m_rf_read+0x40>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
     892:	84 e9       	ldi	r24, 0x94	; 148
     894:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
		return 0; // not connected/listening
     898:	80 e0       	ldi	r24, 0x00	; 0
     89a:	41 c0       	rjmp	.+130    	; 0x91e <m_rf_read+0xc2>
	}
	

	// (BYTES)
	TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
     89c:	84 ec       	ldi	r24, 0xC4	; 196
     89e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
     8a2:	ec eb       	ldi	r30, 0xBC	; 188
     8a4:	f0 e0       	ldi	r31, 0x00	; 0
     8a6:	90 81       	ld	r25, Z
     8a8:	99 23       	and	r25, r25
     8aa:	ec f7       	brge	.-6      	; 0x8a6 <m_rf_read+0x4a>
	bytes = TWDR;
     8ac:	40 91 bb 00 	lds	r20, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	if(bytes != packet_length){
     8b0:	46 13       	cpse	r20, r22
     8b2:	09 c0       	rjmp	.+18     	; 0x8c6 <m_rf_read+0x6a>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
		return 0; // indicate length mismatch
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
     8b4:	84 2f       	mov	r24, r20
     8b6:	90 e0       	ldi	r25, 0x00	; 0
     8b8:	01 97       	sbiw	r24, 0x01	; 1
     8ba:	18 16       	cp	r1, r24
     8bc:	19 06       	cpc	r1, r25
     8be:	44 f0       	brlt	.+16     	; 0x8d0 <m_rf_read+0x74>
     8c0:	40 e0       	ldi	r20, 0x00	; 0
     8c2:	50 e0       	ldi	r21, 0x00	; 0
     8c4:	1a c0       	rjmp	.+52     	; 0x8fa <m_rf_read+0x9e>
	// (BYTES)
	TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
	bytes = TWDR;
	if(bytes != packet_length){
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
     8c6:	84 e9       	ldi	r24, 0x94	; 148
     8c8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
		return 0; // indicate length mismatch
     8cc:	80 e0       	ldi	r24, 0x00	; 0
     8ce:	27 c0       	rjmp	.+78     	; 0x91e <m_rf_read+0xc2>
     8d0:	d9 01       	movw	r26, r18
     8d2:	50 e0       	ldi	r21, 0x00	; 0
     8d4:	41 50       	subi	r20, 0x01	; 1
     8d6:	51 09       	sbc	r21, r1
     8d8:	b9 01       	movw	r22, r18
     8da:	64 0f       	add	r22, r20
     8dc:	75 1f       	adc	r23, r21
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
     8de:	ec eb       	ldi	r30, 0xBC	; 188
     8e0:	f0 e0       	ldi	r31, 0x00	; 0
     8e2:	84 ec       	ldi	r24, 0xC4	; 196
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		buffer[i] = TWDR;
     8e4:	cb eb       	ldi	r28, 0xBB	; 187
     8e6:	d0 e0       	ldi	r29, 0x00	; 0
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
     8e8:	80 83       	st	Z, r24
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
     8ea:	90 81       	ld	r25, Z
     8ec:	99 23       	and	r25, r25
     8ee:	ec f7       	brge	.-6      	; 0x8ea <m_rf_read+0x8e>
		buffer[i] = TWDR;
     8f0:	98 81       	ld	r25, Y
     8f2:	9d 93       	st	X+, r25
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
		return 0; // indicate length mismatch
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
     8f4:	a6 17       	cp	r26, r22
     8f6:	b7 07       	cpc	r27, r23
     8f8:	b9 f7       	brne	.-18     	; 0x8e8 <m_rf_read+0x8c>
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		buffer[i] = TWDR;
	}
	TWCR = (1<<TWINT) | (1<<TWEN);	// clear the flag, no ACK, and wait for another byte
     8fa:	84 e8       	ldi	r24, 0x84	; 132
     8fc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
     900:	ec eb       	ldi	r30, 0xBC	; 188
     902:	f0 e0       	ldi	r31, 0x00	; 0
     904:	90 81       	ld	r25, Z
     906:	99 23       	and	r25, r25
     908:	ec f7       	brge	.-6      	; 0x904 <m_rf_read+0xa8>
	buffer[i++] = TWDR;
     90a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     90e:	f9 01       	movw	r30, r18
     910:	e4 0f       	add	r30, r20
     912:	f5 1f       	adc	r31, r21
     914:	80 83       	st	Z, r24
	
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
     916:	84 e9       	ldi	r24, 0x94	; 148
     918:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

	return 1;
     91c:	81 e0       	ldi	r24, 0x01	; 1
}
     91e:	df 91       	pop	r29
     920:	cf 91       	pop	r28
     922:	08 95       	ret

00000924 <m_usb_init>:
	phex(i);
}

void m_usb_tx_hexchar(unsigned char i)
{
	phex(i);
     924:	81 e0       	ldi	r24, 0x01	; 1
     926:	80 93 d7 00 	sts	0x00D7, r24	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
     92a:	80 ea       	ldi	r24, 0xA0	; 160
     92c:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
     930:	82 e1       	ldi	r24, 0x12	; 18
     932:	89 bd       	out	0x29, r24	; 41
     934:	09 b4       	in	r0, 0x29	; 41
     936:	00 fe       	sbrs	r0, 0
     938:	fd cf       	rjmp	.-6      	; 0x934 <m_usb_init+0x10>
     93a:	80 e9       	ldi	r24, 0x90	; 144
     93c:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
     940:	10 92 e0 00 	sts	0x00E0, r1	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
     944:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <usb_configuration>
     948:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <__data_end>
     94c:	8c e0       	ldi	r24, 0x0C	; 12
     94e:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
     952:	78 94       	sei
     954:	08 95       	ret

00000956 <m_usb_tx_char>:
     956:	cf 93       	push	r28
     958:	df 93       	push	r29
     95a:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <usb_configuration>
     95e:	99 23       	and	r25, r25
     960:	09 f4       	brne	.+2      	; 0x964 <m_usb_tx_char+0xe>
     962:	4c c0       	rjmp	.+152    	; 0x9fc <m_usb_tx_char+0xa6>
     964:	9f b7       	in	r25, 0x3f	; 63
     966:	f8 94       	cli
     968:	24 e0       	ldi	r18, 0x04	; 4
     96a:	20 93 e9 00 	sts	0x00E9, r18	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
     96e:	20 91 21 01 	lds	r18, 0x0121	; 0x800121 <transmit_previous_timeout>
     972:	22 23       	and	r18, r18
     974:	49 f0       	breq	.+18     	; 0x988 <m_usb_tx_char+0x32>
     976:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     97a:	25 fd       	sbrc	r18, 5
     97c:	03 c0       	rjmp	.+6      	; 0x984 <m_usb_tx_char+0x2e>
     97e:	9f bf       	out	0x3f, r25	; 63
     980:	8f ef       	ldi	r24, 0xFF	; 255
     982:	41 c0       	rjmp	.+130    	; 0xa06 <m_usb_tx_char+0xb0>
     984:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <transmit_previous_timeout>
     988:	30 91 e4 00 	lds	r19, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
     98c:	37 5e       	subi	r19, 0xE7	; 231
     98e:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     992:	25 fd       	sbrc	r18, 5
     994:	24 c0       	rjmp	.+72     	; 0x9de <m_usb_tx_char+0x88>
     996:	9f bf       	out	0x3f, r25	; 63
     998:	90 91 e4 00 	lds	r25, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
     99c:	93 17       	cp	r25, r19
     99e:	81 f0       	breq	.+32     	; 0x9c0 <m_usb_tx_char+0x6a>
     9a0:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <usb_configuration>
     9a4:	99 23       	and	r25, r25
     9a6:	61 f1       	breq	.+88     	; 0xa00 <m_usb_tx_char+0xaa>
     9a8:	a9 ee       	ldi	r26, 0xE9	; 233
     9aa:	b0 e0       	ldi	r27, 0x00	; 0
     9ac:	44 e0       	ldi	r20, 0x04	; 4
     9ae:	e8 ee       	ldi	r30, 0xE8	; 232
     9b0:	f0 e0       	ldi	r31, 0x00	; 0
     9b2:	c4 ee       	ldi	r28, 0xE4	; 228
     9b4:	d0 e0       	ldi	r29, 0x00	; 0
     9b6:	0d c0       	rjmp	.+26     	; 0x9d2 <m_usb_tx_char+0x7c>
     9b8:	9f bf       	out	0x3f, r25	; 63
     9ba:	98 81       	ld	r25, Y
     9bc:	93 13       	cpse	r25, r19
     9be:	05 c0       	rjmp	.+10     	; 0x9ca <m_usb_tx_char+0x74>
     9c0:	81 e0       	ldi	r24, 0x01	; 1
     9c2:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <transmit_previous_timeout>
     9c6:	8f ef       	ldi	r24, 0xFF	; 255
     9c8:	1e c0       	rjmp	.+60     	; 0xa06 <m_usb_tx_char+0xb0>
     9ca:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <usb_configuration>
     9ce:	99 23       	and	r25, r25
     9d0:	c9 f0       	breq	.+50     	; 0xa04 <m_usb_tx_char+0xae>
     9d2:	9f b7       	in	r25, 0x3f	; 63
     9d4:	f8 94       	cli
     9d6:	4c 93       	st	X, r20
     9d8:	20 81       	ld	r18, Z
     9da:	25 ff       	sbrs	r18, 5
     9dc:	ed cf       	rjmp	.-38     	; 0x9b8 <m_usb_tx_char+0x62>
     9de:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     9e2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     9e6:	85 fd       	sbrc	r24, 5
     9e8:	03 c0       	rjmp	.+6      	; 0x9f0 <m_usb_tx_char+0x9a>
     9ea:	8a e3       	ldi	r24, 0x3A	; 58
     9ec:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     9f0:	85 e0       	ldi	r24, 0x05	; 5
     9f2:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <transmit_flush_timer>
     9f6:	9f bf       	out	0x3f, r25	; 63
     9f8:	80 e0       	ldi	r24, 0x00	; 0
     9fa:	05 c0       	rjmp	.+10     	; 0xa06 <m_usb_tx_char+0xb0>
     9fc:	8f ef       	ldi	r24, 0xFF	; 255
     9fe:	03 c0       	rjmp	.+6      	; 0xa06 <m_usb_tx_char+0xb0>
     a00:	8f ef       	ldi	r24, 0xFF	; 255
     a02:	01 c0       	rjmp	.+2      	; 0xa06 <m_usb_tx_char+0xb0>
     a04:	8f ef       	ldi	r24, 0xFF	; 255
     a06:	df 91       	pop	r29
     a08:	cf 91       	pop	r28
     a0a:	08 95       	ret

00000a0c <__vector_10>:
     a0c:	1f 92       	push	r1
     a0e:	0f 92       	push	r0
     a10:	0f b6       	in	r0, 0x3f	; 63
     a12:	0f 92       	push	r0
     a14:	11 24       	eor	r1, r1
     a16:	8f 93       	push	r24
     a18:	9f 93       	push	r25
     a1a:	ef 93       	push	r30
     a1c:	ff 93       	push	r31
     a1e:	e1 ee       	ldi	r30, 0xE1	; 225
     a20:	f0 e0       	ldi	r31, 0x00	; 0
     a22:	80 81       	ld	r24, Z
     a24:	10 82       	st	Z, r1
     a26:	83 ff       	sbrs	r24, 3
     a28:	11 c0       	rjmp	.+34     	; 0xa4c <__vector_10+0x40>
     a2a:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
     a2e:	91 e0       	ldi	r25, 0x01	; 1
     a30:	90 93 eb 00 	sts	0x00EB, r25	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
     a34:	10 92 ec 00 	sts	0x00EC, r1	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
     a38:	92 e1       	ldi	r25, 0x12	; 18
     a3a:	90 93 ed 00 	sts	0x00ED, r25	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
     a3e:	98 e0       	ldi	r25, 0x08	; 8
     a40:	90 93 f0 00 	sts	0x00F0, r25	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
     a44:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <usb_configuration>
     a48:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <__data_end>
     a4c:	82 ff       	sbrs	r24, 2
     a4e:	13 c0       	rjmp	.+38     	; 0xa76 <__vector_10+0x6a>
     a50:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <usb_configuration>
     a54:	88 23       	and	r24, r24
     a56:	79 f0       	breq	.+30     	; 0xa76 <__vector_10+0x6a>
     a58:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <transmit_flush_timer>
     a5c:	88 23       	and	r24, r24
     a5e:	59 f0       	breq	.+22     	; 0xa76 <__vector_10+0x6a>
     a60:	81 50       	subi	r24, 0x01	; 1
     a62:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <transmit_flush_timer>
     a66:	81 11       	cpse	r24, r1
     a68:	06 c0       	rjmp	.+12     	; 0xa76 <__vector_10+0x6a>
     a6a:	84 e0       	ldi	r24, 0x04	; 4
     a6c:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
     a70:	8a e3       	ldi	r24, 0x3A	; 58
     a72:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     a76:	ff 91       	pop	r31
     a78:	ef 91       	pop	r30
     a7a:	9f 91       	pop	r25
     a7c:	8f 91       	pop	r24
     a7e:	0f 90       	pop	r0
     a80:	0f be       	out	0x3f, r0	; 63
     a82:	0f 90       	pop	r0
     a84:	1f 90       	pop	r1
     a86:	18 95       	reti

00000a88 <__vector_11>:
     a88:	1f 92       	push	r1
     a8a:	0f 92       	push	r0
     a8c:	0f b6       	in	r0, 0x3f	; 63
     a8e:	0f 92       	push	r0
     a90:	11 24       	eor	r1, r1
     a92:	0f 93       	push	r16
     a94:	1f 93       	push	r17
     a96:	2f 93       	push	r18
     a98:	3f 93       	push	r19
     a9a:	4f 93       	push	r20
     a9c:	5f 93       	push	r21
     a9e:	6f 93       	push	r22
     aa0:	7f 93       	push	r23
     aa2:	8f 93       	push	r24
     aa4:	9f 93       	push	r25
     aa6:	af 93       	push	r26
     aa8:	bf 93       	push	r27
     aaa:	cf 93       	push	r28
     aac:	df 93       	push	r29
     aae:	ef 93       	push	r30
     ab0:	ff 93       	push	r31
     ab2:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
     ab6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     aba:	83 ff       	sbrs	r24, 3
     abc:	4c c1       	rjmp	.+664    	; 0xd56 <__stack+0x257>
     abe:	e1 ef       	ldi	r30, 0xF1	; 241
     ac0:	f0 e0       	ldi	r31, 0x00	; 0
     ac2:	60 81       	ld	r22, Z
     ac4:	80 81       	ld	r24, Z
     ac6:	20 81       	ld	r18, Z
     ac8:	90 81       	ld	r25, Z
     aca:	30 e0       	ldi	r19, 0x00	; 0
     acc:	39 2b       	or	r19, r25
     ace:	40 81       	ld	r20, Z
     ad0:	90 81       	ld	r25, Z
     ad2:	50 e0       	ldi	r21, 0x00	; 0
     ad4:	59 2b       	or	r21, r25
     ad6:	70 81       	ld	r23, Z
     ad8:	c0 81       	ld	r28, Z
     ada:	92 ef       	ldi	r25, 0xF2	; 242
     adc:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     ae0:	86 30       	cpi	r24, 0x06	; 6
     ae2:	09 f0       	breq	.+2      	; 0xae6 <__vector_11+0x5e>
     ae4:	58 c0       	rjmp	.+176    	; 0xb96 <__stack+0x97>
     ae6:	04 c0       	rjmp	.+8      	; 0xaf0 <__vector_11+0x68>
     ae8:	81 e2       	ldi	r24, 0x21	; 33
     aea:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
     aee:	3a c1       	rjmp	.+628    	; 0xd64 <__stack+0x265>
     af0:	66 e0       	ldi	r22, 0x06	; 6
     af2:	8a e7       	ldi	r24, 0x7A	; 122
     af4:	91 e0       	ldi	r25, 0x01	; 1
     af6:	fc 01       	movw	r30, r24
     af8:	a5 91       	lpm	r26, Z+
     afa:	b4 91       	lpm	r27, Z
     afc:	2a 17       	cp	r18, r26
     afe:	3b 07       	cpc	r19, r27
     b00:	11 f0       	breq	.+4      	; 0xb06 <__stack+0x7>
     b02:	07 96       	adiw	r24, 0x07	; 7
     b04:	23 c0       	rjmp	.+70     	; 0xb4c <__stack+0x4d>
     b06:	fc 01       	movw	r30, r24
     b08:	32 96       	adiw	r30, 0x02	; 2
     b0a:	a5 91       	lpm	r26, Z+
     b0c:	b4 91       	lpm	r27, Z
     b0e:	4a 17       	cp	r20, r26
     b10:	5b 07       	cpc	r21, r27
     b12:	11 f0       	breq	.+4      	; 0xb18 <__stack+0x19>
     b14:	07 96       	adiw	r24, 0x07	; 7
     b16:	1a c0       	rjmp	.+52     	; 0xb4c <__stack+0x4d>
     b18:	fc 01       	movw	r30, r24
     b1a:	34 96       	adiw	r30, 0x04	; 4
     b1c:	45 91       	lpm	r20, Z+
     b1e:	54 91       	lpm	r21, Z
     b20:	fc 01       	movw	r30, r24
     b22:	36 96       	adiw	r30, 0x06	; 6
     b24:	24 91       	lpm	r18, Z
     b26:	87 2f       	mov	r24, r23
     b28:	90 e0       	ldi	r25, 0x00	; 0
     b2a:	9c 2b       	or	r25, r28
     b2c:	8f 3f       	cpi	r24, 0xFF	; 255
     b2e:	91 05       	cpc	r25, r1
     b30:	19 f0       	breq	.+6      	; 0xb38 <__stack+0x39>
     b32:	10 f0       	brcs	.+4      	; 0xb38 <__stack+0x39>
     b34:	8f ef       	ldi	r24, 0xFF	; 255
     b36:	90 e0       	ldi	r25, 0x00	; 0
     b38:	82 17       	cp	r24, r18
     b3a:	08 f4       	brcc	.+2      	; 0xb3e <__stack+0x3f>
     b3c:	28 2f       	mov	r18, r24
     b3e:	a8 ee       	ldi	r26, 0xE8	; 232
     b40:	b0 e0       	ldi	r27, 0x00	; 0
     b42:	70 e1       	ldi	r23, 0x10	; 16
     b44:	6e ef       	ldi	r22, 0xFE	; 254
     b46:	c1 ef       	ldi	r28, 0xF1	; 241
     b48:	d0 e0       	ldi	r29, 0x00	; 0
     b4a:	03 c0       	rjmp	.+6      	; 0xb52 <__stack+0x53>
     b4c:	61 50       	subi	r22, 0x01	; 1
     b4e:	99 f6       	brne	.-90     	; 0xaf6 <__vector_11+0x6e>
     b50:	cb cf       	rjmp	.-106    	; 0xae8 <__vector_11+0x60>
     b52:	8c 91       	ld	r24, X
     b54:	98 2f       	mov	r25, r24
     b56:	95 70       	andi	r25, 0x05	; 5
     b58:	e1 f3       	breq	.-8      	; 0xb52 <__stack+0x53>
     b5a:	82 fd       	sbrc	r24, 2
     b5c:	03 c1       	rjmp	.+518    	; 0xd64 <__stack+0x265>
     b5e:	32 2f       	mov	r19, r18
     b60:	21 31       	cpi	r18, 0x11	; 17
     b62:	08 f0       	brcs	.+2      	; 0xb66 <__stack+0x67>
     b64:	37 2f       	mov	r19, r23
     b66:	33 23       	and	r19, r19
     b68:	09 f4       	brne	.+2      	; 0xb6c <__stack+0x6d>
     b6a:	f9 c0       	rjmp	.+498    	; 0xd5e <__stack+0x25f>
     b6c:	fa 01       	movw	r30, r20
     b6e:	83 2f       	mov	r24, r19
     b70:	94 91       	lpm	r25, Z
     b72:	98 83       	st	Y, r25
     b74:	81 50       	subi	r24, 0x01	; 1
     b76:	31 96       	adiw	r30, 0x01	; 1
     b78:	81 11       	cpse	r24, r1
     b7a:	fa cf       	rjmp	.-12     	; 0xb70 <__stack+0x71>
     b7c:	8f ef       	ldi	r24, 0xFF	; 255
     b7e:	83 0f       	add	r24, r19
     b80:	90 e0       	ldi	r25, 0x00	; 0
     b82:	01 96       	adiw	r24, 0x01	; 1
     b84:	48 0f       	add	r20, r24
     b86:	59 1f       	adc	r21, r25
     b88:	23 1b       	sub	r18, r19
     b8a:	6c 93       	st	X, r22
     b8c:	21 11       	cpse	r18, r1
     b8e:	e1 cf       	rjmp	.-62     	; 0xb52 <__stack+0x53>
     b90:	30 31       	cpi	r19, 0x10	; 16
     b92:	f9 f2       	breq	.-66     	; 0xb52 <__stack+0x53>
     b94:	e7 c0       	rjmp	.+462    	; 0xd64 <__stack+0x265>
     b96:	85 30       	cpi	r24, 0x05	; 5
     b98:	61 f4       	brne	.+24     	; 0xbb2 <__stack+0xb3>
     b9a:	8e ef       	ldi	r24, 0xFE	; 254
     b9c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     ba0:	e8 ee       	ldi	r30, 0xE8	; 232
     ba2:	f0 e0       	ldi	r31, 0x00	; 0
     ba4:	80 81       	ld	r24, Z
     ba6:	80 ff       	sbrs	r24, 0
     ba8:	fd cf       	rjmp	.-6      	; 0xba4 <__stack+0xa5>
     baa:	20 68       	ori	r18, 0x80	; 128
     bac:	20 93 e3 00 	sts	0x00E3, r18	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
     bb0:	d9 c0       	rjmp	.+434    	; 0xd64 <__stack+0x265>
     bb2:	89 30       	cpi	r24, 0x09	; 9
     bb4:	09 f0       	breq	.+2      	; 0xbb8 <__stack+0xb9>
     bb6:	35 c0       	rjmp	.+106    	; 0xc22 <__stack+0x123>
     bb8:	61 11       	cpse	r22, r1
     bba:	cd c0       	rjmp	.+410    	; 0xd56 <__stack+0x257>
     bbc:	20 93 23 01 	sts	0x0123, r18	; 0x800123 <usb_configuration>
     bc0:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <__data_end>
     bc4:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <transmit_flush_timer>
     bc8:	8e ef       	ldi	r24, 0xFE	; 254
     bca:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     bce:	81 e0       	ldi	r24, 0x01	; 1
     bd0:	23 e2       	ldi	r18, 0x23	; 35
     bd2:	32 e0       	ldi	r19, 0x02	; 2
     bd4:	c9 ee       	ldi	r28, 0xE9	; 233
     bd6:	d0 e0       	ldi	r29, 0x00	; 0
     bd8:	ab ee       	ldi	r26, 0xEB	; 235
     bda:	b0 e0       	ldi	r27, 0x00	; 0
     bdc:	0c ee       	ldi	r16, 0xEC	; 236
     bde:	10 e0       	ldi	r17, 0x00	; 0
     be0:	6d ee       	ldi	r22, 0xED	; 237
     be2:	70 e0       	ldi	r23, 0x00	; 0
     be4:	88 83       	st	Y, r24
     be6:	a9 01       	movw	r20, r18
     be8:	4f 5f       	subi	r20, 0xFF	; 255
     bea:	5f 4f       	sbci	r21, 0xFF	; 255
     bec:	f9 01       	movw	r30, r18
     bee:	94 91       	lpm	r25, Z
     bf0:	9c 93       	st	X, r25
     bf2:	99 23       	and	r25, r25
     bf4:	61 f0       	breq	.+24     	; 0xc0e <__stack+0x10f>
     bf6:	fa 01       	movw	r30, r20
     bf8:	44 91       	lpm	r20, Z
     bfa:	f8 01       	movw	r30, r16
     bfc:	40 83       	st	Z, r20
     bfe:	f9 01       	movw	r30, r18
     c00:	32 96       	adiw	r30, 0x02	; 2
     c02:	94 91       	lpm	r25, Z
     c04:	2d 5f       	subi	r18, 0xFD	; 253
     c06:	3f 4f       	sbci	r19, 0xFF	; 255
     c08:	fb 01       	movw	r30, r22
     c0a:	90 83       	st	Z, r25
     c0c:	01 c0       	rjmp	.+2      	; 0xc10 <__stack+0x111>
     c0e:	9a 01       	movw	r18, r20
     c10:	8f 5f       	subi	r24, 0xFF	; 255
     c12:	85 30       	cpi	r24, 0x05	; 5
     c14:	39 f7       	brne	.-50     	; 0xbe4 <__stack+0xe5>
     c16:	ea ee       	ldi	r30, 0xEA	; 234
     c18:	f0 e0       	ldi	r31, 0x00	; 0
     c1a:	8e e1       	ldi	r24, 0x1E	; 30
     c1c:	80 83       	st	Z, r24
     c1e:	10 82       	st	Z, r1
     c20:	a1 c0       	rjmp	.+322    	; 0xd64 <__stack+0x265>
     c22:	88 30       	cpi	r24, 0x08	; 8
     c24:	81 f4       	brne	.+32     	; 0xc46 <__stack+0x147>
     c26:	60 38       	cpi	r22, 0x80	; 128
     c28:	09 f0       	breq	.+2      	; 0xc2c <__stack+0x12d>
     c2a:	95 c0       	rjmp	.+298    	; 0xd56 <__stack+0x257>
     c2c:	e8 ee       	ldi	r30, 0xE8	; 232
     c2e:	f0 e0       	ldi	r31, 0x00	; 0
     c30:	80 81       	ld	r24, Z
     c32:	80 ff       	sbrs	r24, 0
     c34:	fd cf       	rjmp	.-6      	; 0xc30 <__stack+0x131>
     c36:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <usb_configuration>
     c3a:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     c3e:	8e ef       	ldi	r24, 0xFE	; 254
     c40:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     c44:	8f c0       	rjmp	.+286    	; 0xd64 <__stack+0x265>
     c46:	81 32       	cpi	r24, 0x21	; 33
     c48:	b9 f4       	brne	.+46     	; 0xc78 <__stack+0x179>
     c4a:	61 3a       	cpi	r22, 0xA1	; 161
     c4c:	09 f0       	breq	.+2      	; 0xc50 <__stack+0x151>
     c4e:	83 c0       	rjmp	.+262    	; 0xd56 <__stack+0x257>
     c50:	e8 ee       	ldi	r30, 0xE8	; 232
     c52:	f0 e0       	ldi	r31, 0x00	; 0
     c54:	80 81       	ld	r24, Z
     c56:	80 ff       	sbrs	r24, 0
     c58:	fd cf       	rjmp	.-6      	; 0xc54 <__stack+0x155>
     c5a:	e6 e0       	ldi	r30, 0x06	; 6
     c5c:	f1 e0       	ldi	r31, 0x01	; 1
     c5e:	2d e0       	ldi	r18, 0x0D	; 13
     c60:	31 e0       	ldi	r19, 0x01	; 1
     c62:	a1 ef       	ldi	r26, 0xF1	; 241
     c64:	b0 e0       	ldi	r27, 0x00	; 0
     c66:	81 91       	ld	r24, Z+
     c68:	8c 93       	st	X, r24
     c6a:	e2 17       	cp	r30, r18
     c6c:	f3 07       	cpc	r31, r19
     c6e:	d9 f7       	brne	.-10     	; 0xc66 <__stack+0x167>
     c70:	8e ef       	ldi	r24, 0xFE	; 254
     c72:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     c76:	76 c0       	rjmp	.+236    	; 0xd64 <__stack+0x265>
     c78:	80 32       	cpi	r24, 0x20	; 32
     c7a:	d1 f4       	brne	.+52     	; 0xcb0 <__stack+0x1b1>
     c7c:	61 32       	cpi	r22, 0x21	; 33
     c7e:	09 f0       	breq	.+2      	; 0xc82 <__stack+0x183>
     c80:	6a c0       	rjmp	.+212    	; 0xd56 <__stack+0x257>
     c82:	e8 ee       	ldi	r30, 0xE8	; 232
     c84:	f0 e0       	ldi	r31, 0x00	; 0
     c86:	80 81       	ld	r24, Z
     c88:	82 ff       	sbrs	r24, 2
     c8a:	fd cf       	rjmp	.-6      	; 0xc86 <__stack+0x187>
     c8c:	e6 e0       	ldi	r30, 0x06	; 6
     c8e:	f1 e0       	ldi	r31, 0x01	; 1
     c90:	2d e0       	ldi	r18, 0x0D	; 13
     c92:	31 e0       	ldi	r19, 0x01	; 1
     c94:	a1 ef       	ldi	r26, 0xF1	; 241
     c96:	b0 e0       	ldi	r27, 0x00	; 0
     c98:	8c 91       	ld	r24, X
     c9a:	81 93       	st	Z+, r24
     c9c:	e2 17       	cp	r30, r18
     c9e:	f3 07       	cpc	r31, r19
     ca0:	d9 f7       	brne	.-10     	; 0xc98 <__stack+0x199>
     ca2:	e8 ee       	ldi	r30, 0xE8	; 232
     ca4:	f0 e0       	ldi	r31, 0x00	; 0
     ca6:	8b ef       	ldi	r24, 0xFB	; 251
     ca8:	80 83       	st	Z, r24
     caa:	8e ef       	ldi	r24, 0xFE	; 254
     cac:	80 83       	st	Z, r24
     cae:	5a c0       	rjmp	.+180    	; 0xd64 <__stack+0x265>
     cb0:	82 32       	cpi	r24, 0x22	; 34
     cb2:	71 f4       	brne	.+28     	; 0xcd0 <__stack+0x1d1>
     cb4:	61 32       	cpi	r22, 0x21	; 33
     cb6:	09 f0       	breq	.+2      	; 0xcba <__stack+0x1bb>
     cb8:	4e c0       	rjmp	.+156    	; 0xd56 <__stack+0x257>
     cba:	20 93 20 01 	sts	0x0120, r18	; 0x800120 <__data_end>
     cbe:	e8 ee       	ldi	r30, 0xE8	; 232
     cc0:	f0 e0       	ldi	r31, 0x00	; 0
     cc2:	80 81       	ld	r24, Z
     cc4:	80 ff       	sbrs	r24, 0
     cc6:	fd cf       	rjmp	.-6      	; 0xcc2 <__stack+0x1c3>
     cc8:	8e ef       	ldi	r24, 0xFE	; 254
     cca:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     cce:	4a c0       	rjmp	.+148    	; 0xd64 <__stack+0x265>
     cd0:	81 11       	cpse	r24, r1
     cd2:	1a c0       	rjmp	.+52     	; 0xd08 <__stack+0x209>
     cd4:	e8 ee       	ldi	r30, 0xE8	; 232
     cd6:	f0 e0       	ldi	r31, 0x00	; 0
     cd8:	80 81       	ld	r24, Z
     cda:	80 ff       	sbrs	r24, 0
     cdc:	fd cf       	rjmp	.-6      	; 0xcd8 <__stack+0x1d9>
     cde:	62 38       	cpi	r22, 0x82	; 130
     ce0:	51 f4       	brne	.+20     	; 0xcf6 <__stack+0x1f7>
     ce2:	e9 ee       	ldi	r30, 0xE9	; 233
     ce4:	f0 e0       	ldi	r31, 0x00	; 0
     ce6:	40 83       	st	Z, r20
     ce8:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
     cec:	85 fb       	bst	r24, 5
     cee:	88 27       	eor	r24, r24
     cf0:	80 f9       	bld	r24, 0
     cf2:	10 82       	st	Z, r1
     cf4:	01 c0       	rjmp	.+2      	; 0xcf8 <__stack+0x1f9>
     cf6:	80 e0       	ldi	r24, 0x00	; 0
     cf8:	e1 ef       	ldi	r30, 0xF1	; 241
     cfa:	f0 e0       	ldi	r31, 0x00	; 0
     cfc:	80 83       	st	Z, r24
     cfe:	10 82       	st	Z, r1
     d00:	8e ef       	ldi	r24, 0xFE	; 254
     d02:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     d06:	2e c0       	rjmp	.+92     	; 0xd64 <__stack+0x265>
     d08:	98 2f       	mov	r25, r24
     d0a:	9d 7f       	andi	r25, 0xFD	; 253
     d0c:	91 30       	cpi	r25, 0x01	; 1
     d0e:	19 f5       	brne	.+70     	; 0xd56 <__stack+0x257>
     d10:	62 30       	cpi	r22, 0x02	; 2
     d12:	09 f5       	brne	.+66     	; 0xd56 <__stack+0x257>
     d14:	23 2b       	or	r18, r19
     d16:	f9 f4       	brne	.+62     	; 0xd56 <__stack+0x257>
     d18:	4f 77       	andi	r20, 0x7F	; 127
     d1a:	9f ef       	ldi	r25, 0xFF	; 255
     d1c:	94 0f       	add	r25, r20
     d1e:	94 30       	cpi	r25, 0x04	; 4
     d20:	d0 f4       	brcc	.+52     	; 0xd56 <__stack+0x257>
     d22:	9e ef       	ldi	r25, 0xFE	; 254
     d24:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     d28:	40 93 e9 00 	sts	0x00E9, r20	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
     d2c:	83 30       	cpi	r24, 0x03	; 3
     d2e:	21 f4       	brne	.+8      	; 0xd38 <__stack+0x239>
     d30:	81 e2       	ldi	r24, 0x21	; 33
     d32:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
     d36:	16 c0       	rjmp	.+44     	; 0xd64 <__stack+0x265>
     d38:	89 e1       	ldi	r24, 0x19	; 25
     d3a:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
     d3e:	81 e0       	ldi	r24, 0x01	; 1
     d40:	90 e0       	ldi	r25, 0x00	; 0
     d42:	02 c0       	rjmp	.+4      	; 0xd48 <__stack+0x249>
     d44:	88 0f       	add	r24, r24
     d46:	99 1f       	adc	r25, r25
     d48:	4a 95       	dec	r20
     d4a:	e2 f7       	brpl	.-8      	; 0xd44 <__stack+0x245>
     d4c:	ea ee       	ldi	r30, 0xEA	; 234
     d4e:	f0 e0       	ldi	r31, 0x00	; 0
     d50:	80 83       	st	Z, r24
     d52:	10 82       	st	Z, r1
     d54:	07 c0       	rjmp	.+14     	; 0xd64 <__stack+0x265>
     d56:	81 e2       	ldi	r24, 0x21	; 33
     d58:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
     d5c:	03 c0       	rjmp	.+6      	; 0xd64 <__stack+0x265>
     d5e:	6c 93       	st	X, r22
     d60:	21 11       	cpse	r18, r1
     d62:	f7 ce       	rjmp	.-530    	; 0xb52 <__stack+0x53>
     d64:	ff 91       	pop	r31
     d66:	ef 91       	pop	r30
     d68:	df 91       	pop	r29
     d6a:	cf 91       	pop	r28
     d6c:	bf 91       	pop	r27
     d6e:	af 91       	pop	r26
     d70:	9f 91       	pop	r25
     d72:	8f 91       	pop	r24
     d74:	7f 91       	pop	r23
     d76:	6f 91       	pop	r22
     d78:	5f 91       	pop	r21
     d7a:	4f 91       	pop	r20
     d7c:	3f 91       	pop	r19
     d7e:	2f 91       	pop	r18
     d80:	1f 91       	pop	r17
     d82:	0f 91       	pop	r16
     d84:	0f 90       	pop	r0
     d86:	0f be       	out	0x3f, r0	; 63
     d88:	0f 90       	pop	r0
     d8a:	1f 90       	pop	r1
     d8c:	18 95       	reti

00000d8e <print_P>:
     d8e:	0f 93       	push	r16
     d90:	1f 93       	push	r17
     d92:	cf 93       	push	r28
     d94:	8c 01       	movw	r16, r24
     d96:	0f 5f       	subi	r16, 0xFF	; 255
     d98:	1f 4f       	sbci	r17, 0xFF	; 255
     d9a:	fc 01       	movw	r30, r24
     d9c:	c4 91       	lpm	r28, Z
     d9e:	cc 23       	and	r28, r28
     da0:	71 f0       	breq	.+28     	; 0xdbe <print_P+0x30>
     da2:	ca 30       	cpi	r28, 0x0A	; 10
     da4:	19 f4       	brne	.+6      	; 0xdac <print_P+0x1e>
     da6:	8d e0       	ldi	r24, 0x0D	; 13
     da8:	0e 94 ab 04 	call	0x956	; 0x956 <m_usb_tx_char>
     dac:	8c 2f       	mov	r24, r28
     dae:	0e 94 ab 04 	call	0x956	; 0x956 <m_usb_tx_char>
     db2:	f8 01       	movw	r30, r16
     db4:	c4 91       	lpm	r28, Z
     db6:	0f 5f       	subi	r16, 0xFF	; 255
     db8:	1f 4f       	sbci	r17, 0xFF	; 255
     dba:	c1 11       	cpse	r28, r1
     dbc:	f2 cf       	rjmp	.-28     	; 0xda2 <print_P+0x14>
     dbe:	cf 91       	pop	r28
     dc0:	1f 91       	pop	r17
     dc2:	0f 91       	pop	r16
     dc4:	08 95       	ret

00000dc6 <m_usb_tx_int>:
}

void m_usb_tx_int(int i)
{
     dc6:	ef 92       	push	r14
     dc8:	ff 92       	push	r15
     dca:	0f 93       	push	r16
     dcc:	1f 93       	push	r17
     dce:	cf 93       	push	r28
     dd0:	df 93       	push	r29
     dd2:	cd b7       	in	r28, 0x3d	; 61
     dd4:	de b7       	in	r29, 0x3e	; 62
     dd6:	27 97       	sbiw	r28, 0x07	; 7
     dd8:	0f b6       	in	r0, 0x3f	; 63
     dda:	f8 94       	cli
     ddc:	de bf       	out	0x3e, r29	; 62
     dde:	0f be       	out	0x3f, r0	; 63
     de0:	cd bf       	out	0x3d, r28	; 61
	char string[7] = {0,0,0,0,0,0,0};
     de2:	8e 01       	movw	r16, r28
     de4:	0f 5f       	subi	r16, 0xFF	; 255
     de6:	1f 4f       	sbci	r17, 0xFF	; 255
     de8:	27 e0       	ldi	r18, 0x07	; 7
     dea:	f8 01       	movw	r30, r16
     dec:	11 92       	st	Z+, r1
     dee:	2a 95       	dec	r18
     df0:	e9 f7       	brne	.-6      	; 0xdec <m_usb_tx_int+0x26>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     df2:	4a e0       	ldi	r20, 0x0A	; 10
     df4:	b8 01       	movw	r22, r16
     df6:	0e 94 87 16 	call	0x2d0e	; 0x2d0e <__itoa_ncheck>
     dfa:	7e 01       	movw	r14, r28
     dfc:	f8 e0       	ldi	r31, 0x08	; 8
     dfe:	ef 0e       	add	r14, r31
     e00:	f1 1c       	adc	r15, r1
	itoa(i,string,10);
	for(i=0;i<7;i++){
        if(string[i]){
     e02:	f8 01       	movw	r30, r16
     e04:	81 91       	ld	r24, Z+
     e06:	8f 01       	movw	r16, r30
     e08:	81 11       	cpse	r24, r1
            m_usb_tx_char(string[i]);
     e0a:	0e 94 ab 04 	call	0x956	; 0x956 <m_usb_tx_char>

void m_usb_tx_int(int i)
{
	char string[7] = {0,0,0,0,0,0,0};
	itoa(i,string,10);
	for(i=0;i<7;i++){
     e0e:	0e 15       	cp	r16, r14
     e10:	1f 05       	cpc	r17, r15
     e12:	b9 f7       	brne	.-18     	; 0xe02 <m_usb_tx_int+0x3c>
        if(string[i]){
            m_usb_tx_char(string[i]);
        }
	}
}
     e14:	27 96       	adiw	r28, 0x07	; 7
     e16:	0f b6       	in	r0, 0x3f	; 63
     e18:	f8 94       	cli
     e1a:	de bf       	out	0x3e, r29	; 62
     e1c:	0f be       	out	0x3f, r0	; 63
     e1e:	cd bf       	out	0x3d, r28	; 61
     e20:	df 91       	pop	r29
     e22:	cf 91       	pop	r28
     e24:	1f 91       	pop	r17
     e26:	0f 91       	pop	r16
     e28:	ff 90       	pop	r15
     e2a:	ef 90       	pop	r14
     e2c:	08 95       	ret

00000e2e <twi_wait>:
	}
}

unsigned char twi_wait(void)
{
	unsigned int wait=0;
     e2e:	20 e0       	ldi	r18, 0x00	; 0
     e30:	30 e0       	ldi	r19, 0x00	; 0
	while((!(TWCR & (1<<TWINT))) && (wait++<TWI_MAX_WAIT)){};	// wait for acknowledgement that they byte was sent
     e32:	ec eb       	ldi	r30, 0xBC	; 188
     e34:	f0 e0       	ldi	r31, 0x00	; 0
     e36:	80 81       	ld	r24, Z
     e38:	88 23       	and	r24, r24
     e3a:	34 f0       	brlt	.+12     	; 0xe48 <twi_wait+0x1a>
     e3c:	2f 5f       	subi	r18, 0xFF	; 255
     e3e:	3f 4f       	sbci	r19, 0xFF	; 255
     e40:	29 3e       	cpi	r18, 0xE9	; 233
     e42:	83 e0       	ldi	r24, 0x03	; 3
     e44:	38 07       	cpc	r19, r24
     e46:	b9 f7       	brne	.-18     	; 0xe36 <twi_wait+0x8>
	if(wait==TWI_MAX_WAIT)
     e48:	81 e0       	ldi	r24, 0x01	; 1
     e4a:	28 3e       	cpi	r18, 0xE8	; 232
     e4c:	33 40       	sbci	r19, 0x03	; 3
     e4e:	09 f4       	brne	.+2      	; 0xe52 <twi_wait+0x24>
     e50:	80 e0       	ldi	r24, 0x00	; 0
	{
		return 0;					// fail
	} else {
		return 1;					// success
	}
}
     e52:	08 95       	ret

00000e54 <send_byte>:
	return 1;	// success
}	

unsigned char send_byte(unsigned char byte)
{
	TWDR = byte;					// load the byte
     e54:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR = (1<<TWINT) | (1<<TWEN);	// send the byte
     e58:	84 e8       	ldi	r24, 0x84	; 132
     e5a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	if(twi_wait())					// timed out
     e5e:	0e 94 17 07 	call	0xe2e	; 0xe2e <twi_wait>
     e62:	88 23       	and	r24, r24
     e64:	19 f0       	breq	.+6      	; 0xe6c <send_byte+0x18>
	{
		return (TWSR & 0xF8);		// return the status with prescaler bits masked out
     e66:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     e6a:	88 7f       	andi	r24, 0xF8	; 248
	} else {
		return 0;					// comm failure
	}
}
     e6c:	08 95       	ret

00000e6e <start_write>:
//
//


unsigned char start_write(unsigned char address)
{
     e6e:	cf 93       	push	r28
     e70:	c8 2f       	mov	r28, r24
	unsigned char status;
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
     e72:	94 ea       	ldi	r25, 0xA4	; 164
     e74:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	if(!twi_wait())
     e78:	0e 94 17 07 	call	0xe2e	; 0xe2e <twi_wait>
     e7c:	88 23       	and	r24, r24
     e7e:	61 f0       	breq	.+24     	; 0xe98 <start_write+0x2a>
	{
		return 0;
	}
	
	// ADDRESS
	status = send_byte(address<<1);
     e80:	8c 2f       	mov	r24, r28
     e82:	88 0f       	add	r24, r24
     e84:	0e 94 2a 07 	call	0xe54	; 0xe54 <send_byte>
	if(status== 0x20){ // ACK was not received - may not be connected/listening
     e88:	80 32       	cpi	r24, 0x20	; 32
     e8a:	29 f4       	brne	.+10     	; 0xe96 <start_write+0x28>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
     e8c:	84 e9       	ldi	r24, 0x94	; 148
     e8e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
		return 0;	// failure
     e92:	80 e0       	ldi	r24, 0x00	; 0
     e94:	01 c0       	rjmp	.+2      	; 0xe98 <start_write+0x2a>
	}	
	return 1;	// success
     e96:	81 e0       	ldi	r24, 0x01	; 1
}	
     e98:	cf 91       	pop	r28
     e9a:	08 95       	ret

00000e9c <m_wii_open>:
unsigned char twi_wait(void);
void end(void);

char m_wii_open()
{	
	m_bus_init();
     e9c:	0e 94 c7 03 	call	0x78e	; 0x78e <m_bus_init>

	// enter configuration mode
	if(!start_write(MWIITWIADDR)){return 0;}
     ea0:	88 e5       	ldi	r24, 0x58	; 88
     ea2:	0e 94 37 07 	call	0xe6e	; 0xe6e <start_write>
     ea6:	88 23       	and	r24, r24
     ea8:	09 f4       	brne	.+2      	; 0xeac <m_wii_open+0x10>
     eaa:	cd c0       	rjmp	.+410    	; 0x1046 <m_wii_open+0x1aa>
	if(!send_byte(0x30)){return 0;}
     eac:	80 e3       	ldi	r24, 0x30	; 48
     eae:	0e 94 2a 07 	call	0xe54	; 0xe54 <send_byte>
     eb2:	88 23       	and	r24, r24
     eb4:	09 f4       	brne	.+2      	; 0xeb8 <m_wii_open+0x1c>
     eb6:	c9 c0       	rjmp	.+402    	; 0x104a <m_wii_open+0x1ae>
	if(!send_byte(0x01)){return 0;}
     eb8:	81 e0       	ldi	r24, 0x01	; 1
     eba:	0e 94 2a 07 	call	0xe54	; 0xe54 <send_byte>
     ebe:	88 23       	and	r24, r24
     ec0:	09 f4       	brne	.+2      	; 0xec4 <m_wii_open+0x28>
     ec2:	c5 c0       	rjmp	.+394    	; 0x104e <m_wii_open+0x1b2>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
     ec4:	84 e9       	ldi	r24, 0x94	; 148
     ec6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     eca:	83 ec       	ldi	r24, 0xC3	; 195
     ecc:	99 e0       	ldi	r25, 0x09	; 9
     ece:	01 97       	sbiw	r24, 0x01	; 1
     ed0:	f1 f7       	brne	.-4      	; 0xece <m_wii_open+0x32>
     ed2:	00 c0       	rjmp	.+0      	; 0xed4 <m_wii_open+0x38>
     ed4:	00 00       	nop
	if(!send_byte(0x01)){return 0;}
	end();
	m_wait(INTERPACKET);
		
	// sensitivity setting, part 1
	if(!start_write(MWIITWIADDR)){return 0;}
     ed6:	88 e5       	ldi	r24, 0x58	; 88
     ed8:	0e 94 37 07 	call	0xe6e	; 0xe6e <start_write>
     edc:	88 23       	and	r24, r24
     ede:	09 f4       	brne	.+2      	; 0xee2 <m_wii_open+0x46>
     ee0:	b8 c0       	rjmp	.+368    	; 0x1052 <m_wii_open+0x1b6>
	if(!send_byte(0x00)){return 0;}
     ee2:	80 e0       	ldi	r24, 0x00	; 0
     ee4:	0e 94 2a 07 	call	0xe54	; 0xe54 <send_byte>
     ee8:	88 23       	and	r24, r24
     eea:	09 f4       	brne	.+2      	; 0xeee <m_wii_open+0x52>
     eec:	b4 c0       	rjmp	.+360    	; 0x1056 <m_wii_open+0x1ba>
	if(!send_byte(0x00)){return 0;}
     eee:	80 e0       	ldi	r24, 0x00	; 0
     ef0:	0e 94 2a 07 	call	0xe54	; 0xe54 <send_byte>
     ef4:	88 23       	and	r24, r24
     ef6:	09 f4       	brne	.+2      	; 0xefa <m_wii_open+0x5e>
     ef8:	b0 c0       	rjmp	.+352    	; 0x105a <m_wii_open+0x1be>
	if(!send_byte(0x00)){return 0;}
     efa:	80 e0       	ldi	r24, 0x00	; 0
     efc:	0e 94 2a 07 	call	0xe54	; 0xe54 <send_byte>
     f00:	88 23       	and	r24, r24
     f02:	09 f4       	brne	.+2      	; 0xf06 <m_wii_open+0x6a>
     f04:	ac c0       	rjmp	.+344    	; 0x105e <m_wii_open+0x1c2>
	if(!send_byte(0x00)){return 0;}
     f06:	80 e0       	ldi	r24, 0x00	; 0
     f08:	0e 94 2a 07 	call	0xe54	; 0xe54 <send_byte>
     f0c:	88 23       	and	r24, r24
     f0e:	09 f4       	brne	.+2      	; 0xf12 <m_wii_open+0x76>
     f10:	a8 c0       	rjmp	.+336    	; 0x1062 <m_wii_open+0x1c6>
	if(!send_byte(0x00)){return 0;}
     f12:	80 e0       	ldi	r24, 0x00	; 0
     f14:	0e 94 2a 07 	call	0xe54	; 0xe54 <send_byte>
     f18:	88 23       	and	r24, r24
     f1a:	09 f4       	brne	.+2      	; 0xf1e <m_wii_open+0x82>
     f1c:	a4 c0       	rjmp	.+328    	; 0x1066 <m_wii_open+0x1ca>
	if(!send_byte(0x00)){return 0;}
     f1e:	80 e0       	ldi	r24, 0x00	; 0
     f20:	0e 94 2a 07 	call	0xe54	; 0xe54 <send_byte>
     f24:	88 23       	and	r24, r24
     f26:	09 f4       	brne	.+2      	; 0xf2a <m_wii_open+0x8e>
     f28:	a0 c0       	rjmp	.+320    	; 0x106a <m_wii_open+0x1ce>
	if(!send_byte(0x00)){return 0;}
     f2a:	80 e0       	ldi	r24, 0x00	; 0
     f2c:	0e 94 2a 07 	call	0xe54	; 0xe54 <send_byte>
     f30:	88 23       	and	r24, r24
     f32:	09 f4       	brne	.+2      	; 0xf36 <m_wii_open+0x9a>
     f34:	9c c0       	rjmp	.+312    	; 0x106e <m_wii_open+0x1d2>
	if(!send_byte(0x90)){return 0;} // p0
     f36:	80 e9       	ldi	r24, 0x90	; 144
     f38:	0e 94 2a 07 	call	0xe54	; 0xe54 <send_byte>
     f3c:	88 23       	and	r24, r24
     f3e:	09 f4       	brne	.+2      	; 0xf42 <m_wii_open+0xa6>
     f40:	98 c0       	rjmp	.+304    	; 0x1072 <m_wii_open+0x1d6>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
     f42:	84 e9       	ldi	r24, 0x94	; 148
     f44:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     f48:	83 ec       	ldi	r24, 0xC3	; 195
     f4a:	99 e0       	ldi	r25, 0x09	; 9
     f4c:	01 97       	sbiw	r24, 0x01	; 1
     f4e:	f1 f7       	brne	.-4      	; 0xf4c <m_wii_open+0xb0>
     f50:	00 c0       	rjmp	.+0      	; 0xf52 <m_wii_open+0xb6>
     f52:	00 00       	nop
	end();

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 2
	if(!start_write(MWIITWIADDR)){return 0;}
     f54:	88 e5       	ldi	r24, 0x58	; 88
     f56:	0e 94 37 07 	call	0xe6e	; 0xe6e <start_write>
     f5a:	88 23       	and	r24, r24
     f5c:	09 f4       	brne	.+2      	; 0xf60 <m_wii_open+0xc4>
     f5e:	8b c0       	rjmp	.+278    	; 0x1076 <m_wii_open+0x1da>
	if(!send_byte(0x07)){return 0;}
     f60:	87 e0       	ldi	r24, 0x07	; 7
     f62:	0e 94 2a 07 	call	0xe54	; 0xe54 <send_byte>
     f66:	88 23       	and	r24, r24
     f68:	09 f4       	brne	.+2      	; 0xf6c <m_wii_open+0xd0>
     f6a:	87 c0       	rjmp	.+270    	; 0x107a <m_wii_open+0x1de>
	if(!send_byte(0x00)){return 0;}
     f6c:	80 e0       	ldi	r24, 0x00	; 0
     f6e:	0e 94 2a 07 	call	0xe54	; 0xe54 <send_byte>
     f72:	88 23       	and	r24, r24
     f74:	09 f4       	brne	.+2      	; 0xf78 <m_wii_open+0xdc>
     f76:	83 c0       	rjmp	.+262    	; 0x107e <m_wii_open+0x1e2>
	if(!send_byte(0x41)){return 0;} // p1
     f78:	81 e4       	ldi	r24, 0x41	; 65
     f7a:	0e 94 2a 07 	call	0xe54	; 0xe54 <send_byte>
     f7e:	88 23       	and	r24, r24
     f80:	09 f4       	brne	.+2      	; 0xf84 <m_wii_open+0xe8>
     f82:	7f c0       	rjmp	.+254    	; 0x1082 <m_wii_open+0x1e6>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
     f84:	84 e9       	ldi	r24, 0x94	; 148
     f86:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     f8a:	83 ec       	ldi	r24, 0xC3	; 195
     f8c:	99 e0       	ldi	r25, 0x09	; 9
     f8e:	01 97       	sbiw	r24, 0x01	; 1
     f90:	f1 f7       	brne	.-4      	; 0xf8e <m_wii_open+0xf2>
     f92:	00 c0       	rjmp	.+0      	; 0xf94 <m_wii_open+0xf8>
     f94:	00 00       	nop
	end();

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 3
	if(!start_write(MWIITWIADDR)){return 0;}
     f96:	88 e5       	ldi	r24, 0x58	; 88
     f98:	0e 94 37 07 	call	0xe6e	; 0xe6e <start_write>
     f9c:	88 23       	and	r24, r24
     f9e:	09 f4       	brne	.+2      	; 0xfa2 <m_wii_open+0x106>
     fa0:	72 c0       	rjmp	.+228    	; 0x1086 <m_wii_open+0x1ea>
	if(!send_byte(0x1A)){return 0;}
     fa2:	8a e1       	ldi	r24, 0x1A	; 26
     fa4:	0e 94 2a 07 	call	0xe54	; 0xe54 <send_byte>
     fa8:	88 23       	and	r24, r24
     faa:	09 f4       	brne	.+2      	; 0xfae <m_wii_open+0x112>
     fac:	6e c0       	rjmp	.+220    	; 0x108a <m_wii_open+0x1ee>
	if(!send_byte(0x40)){return 0;} // p2
     fae:	80 e4       	ldi	r24, 0x40	; 64
     fb0:	0e 94 2a 07 	call	0xe54	; 0xe54 <send_byte>
     fb4:	88 23       	and	r24, r24
     fb6:	09 f4       	brne	.+2      	; 0xfba <m_wii_open+0x11e>
     fb8:	6a c0       	rjmp	.+212    	; 0x108e <m_wii_open+0x1f2>
	if(!send_byte(0x00)){return 0;} // p3
     fba:	80 e0       	ldi	r24, 0x00	; 0
     fbc:	0e 94 2a 07 	call	0xe54	; 0xe54 <send_byte>
     fc0:	88 23       	and	r24, r24
     fc2:	09 f4       	brne	.+2      	; 0xfc6 <m_wii_open+0x12a>
     fc4:	66 c0       	rjmp	.+204    	; 0x1092 <m_wii_open+0x1f6>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
     fc6:	84 e9       	ldi	r24, 0x94	; 148
     fc8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     fcc:	83 ec       	ldi	r24, 0xC3	; 195
     fce:	99 e0       	ldi	r25, 0x09	; 9
     fd0:	01 97       	sbiw	r24, 0x01	; 1
     fd2:	f1 f7       	brne	.-4      	; 0xfd0 <m_wii_open+0x134>
     fd4:	00 c0       	rjmp	.+0      	; 0xfd6 <m_wii_open+0x13a>
     fd6:	00 00       	nop
	end();

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
     fd8:	88 e5       	ldi	r24, 0x58	; 88
     fda:	0e 94 37 07 	call	0xe6e	; 0xe6e <start_write>
     fde:	88 23       	and	r24, r24
     fe0:	09 f4       	brne	.+2      	; 0xfe4 <m_wii_open+0x148>
     fe2:	59 c0       	rjmp	.+178    	; 0x1096 <m_wii_open+0x1fa>
	if(!send_byte(0x33)){return 0;}
     fe4:	83 e3       	ldi	r24, 0x33	; 51
     fe6:	0e 94 2a 07 	call	0xe54	; 0xe54 <send_byte>
     fea:	88 23       	and	r24, r24
     fec:	09 f4       	brne	.+2      	; 0xff0 <m_wii_open+0x154>
     fee:	55 c0       	rjmp	.+170    	; 0x109a <m_wii_open+0x1fe>
	if(!send_byte(0x03)){return 0;}
     ff0:	83 e0       	ldi	r24, 0x03	; 3
     ff2:	0e 94 2a 07 	call	0xe54	; 0xe54 <send_byte>
     ff6:	88 23       	and	r24, r24
     ff8:	09 f4       	brne	.+2      	; 0xffc <m_wii_open+0x160>
     ffa:	51 c0       	rjmp	.+162    	; 0x109e <m_wii_open+0x202>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
     ffc:	84 e9       	ldi	r24, 0x94	; 148
     ffe:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1002:	83 ec       	ldi	r24, 0xC3	; 195
    1004:	99 e0       	ldi	r25, 0x09	; 9
    1006:	01 97       	sbiw	r24, 0x01	; 1
    1008:	f1 f7       	brne	.-4      	; 0x1006 <m_wii_open+0x16a>
    100a:	00 c0       	rjmp	.+0      	; 0x100c <m_wii_open+0x170>
    100c:	00 00       	nop
	end();

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    100e:	88 e5       	ldi	r24, 0x58	; 88
    1010:	0e 94 37 07 	call	0xe6e	; 0xe6e <start_write>
    1014:	88 23       	and	r24, r24
    1016:	09 f4       	brne	.+2      	; 0x101a <m_wii_open+0x17e>
    1018:	44 c0       	rjmp	.+136    	; 0x10a2 <m_wii_open+0x206>
	if(!send_byte(0x30)){return 0;}
    101a:	80 e3       	ldi	r24, 0x30	; 48
    101c:	0e 94 2a 07 	call	0xe54	; 0xe54 <send_byte>
    1020:	88 23       	and	r24, r24
    1022:	09 f4       	brne	.+2      	; 0x1026 <m_wii_open+0x18a>
    1024:	40 c0       	rjmp	.+128    	; 0x10a6 <m_wii_open+0x20a>
	if(!send_byte(0x08)){return 0;}
    1026:	88 e0       	ldi	r24, 0x08	; 8
    1028:	0e 94 2a 07 	call	0xe54	; 0xe54 <send_byte>
    102c:	88 23       	and	r24, r24
    102e:	e9 f1       	breq	.+122    	; 0x10aa <m_wii_open+0x20e>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    1030:	84 e9       	ldi	r24, 0x94	; 148
    1032:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1036:	83 ec       	ldi	r24, 0xC3	; 195
    1038:	99 e0       	ldi	r25, 0x09	; 9
    103a:	01 97       	sbiw	r24, 0x01	; 1
    103c:	f1 f7       	brne	.-4      	; 0x103a <m_wii_open+0x19e>
    103e:	00 c0       	rjmp	.+0      	; 0x1040 <m_wii_open+0x1a4>
    1040:	00 00       	nop
	if(!send_byte(0x08)){return 0;}
	end();
	
	m_wait(INTERPACKET);

	return 1;
    1042:	81 e0       	ldi	r24, 0x01	; 1
    1044:	08 95       	ret
char m_wii_open()
{	
	m_bus_init();

	// enter configuration mode
	if(!start_write(MWIITWIADDR)){return 0;}
    1046:	80 e0       	ldi	r24, 0x00	; 0
    1048:	08 95       	ret
	if(!send_byte(0x30)){return 0;}
    104a:	80 e0       	ldi	r24, 0x00	; 0
    104c:	08 95       	ret
	if(!send_byte(0x01)){return 0;}
    104e:	80 e0       	ldi	r24, 0x00	; 0
    1050:	08 95       	ret
	end();
	m_wait(INTERPACKET);
		
	// sensitivity setting, part 1
	if(!start_write(MWIITWIADDR)){return 0;}
    1052:	80 e0       	ldi	r24, 0x00	; 0
    1054:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    1056:	80 e0       	ldi	r24, 0x00	; 0
    1058:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    105a:	80 e0       	ldi	r24, 0x00	; 0
    105c:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    105e:	80 e0       	ldi	r24, 0x00	; 0
    1060:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    1062:	80 e0       	ldi	r24, 0x00	; 0
    1064:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    1066:	80 e0       	ldi	r24, 0x00	; 0
    1068:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    106a:	80 e0       	ldi	r24, 0x00	; 0
    106c:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    106e:	80 e0       	ldi	r24, 0x00	; 0
    1070:	08 95       	ret
	if(!send_byte(0x90)){return 0;} // p0
    1072:	80 e0       	ldi	r24, 0x00	; 0
    1074:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 2
	if(!start_write(MWIITWIADDR)){return 0;}
    1076:	80 e0       	ldi	r24, 0x00	; 0
    1078:	08 95       	ret
	if(!send_byte(0x07)){return 0;}
    107a:	80 e0       	ldi	r24, 0x00	; 0
    107c:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    107e:	80 e0       	ldi	r24, 0x00	; 0
    1080:	08 95       	ret
	if(!send_byte(0x41)){return 0;} // p1
    1082:	80 e0       	ldi	r24, 0x00	; 0
    1084:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 3
	if(!start_write(MWIITWIADDR)){return 0;}
    1086:	80 e0       	ldi	r24, 0x00	; 0
    1088:	08 95       	ret
	if(!send_byte(0x1A)){return 0;}
    108a:	80 e0       	ldi	r24, 0x00	; 0
    108c:	08 95       	ret
	if(!send_byte(0x40)){return 0;} // p2
    108e:	80 e0       	ldi	r24, 0x00	; 0
    1090:	08 95       	ret
	if(!send_byte(0x00)){return 0;} // p3
    1092:	80 e0       	ldi	r24, 0x00	; 0
    1094:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    1096:	80 e0       	ldi	r24, 0x00	; 0
    1098:	08 95       	ret
	if(!send_byte(0x33)){return 0;}
    109a:	80 e0       	ldi	r24, 0x00	; 0
    109c:	08 95       	ret
	if(!send_byte(0x03)){return 0;}
    109e:	80 e0       	ldi	r24, 0x00	; 0
    10a0:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    10a2:	80 e0       	ldi	r24, 0x00	; 0
    10a4:	08 95       	ret
	if(!send_byte(0x30)){return 0;}
    10a6:	80 e0       	ldi	r24, 0x00	; 0
    10a8:	08 95       	ret
	if(!send_byte(0x08)){return 0;}
    10aa:	80 e0       	ldi	r24, 0x00	; 0
	end();
	
	m_wait(INTERPACKET);

	return 1;
}
    10ac:	08 95       	ret

000010ae <start_read>:
	}	
	return 1;	// success
}	

unsigned char start_read(unsigned char address)
{
    10ae:	cf 93       	push	r28
    10b0:	c8 2f       	mov	r28, r24
	unsigned char status;
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
    10b2:	84 ea       	ldi	r24, 0xA4	; 164
    10b4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	if(!twi_wait())
    10b8:	0e 94 17 07 	call	0xe2e	; 0xe2e <twi_wait>
    10bc:	88 23       	and	r24, r24
    10be:	69 f0       	breq	.+26     	; 0x10da <start_read+0x2c>
	{
		return 0;
	}
	
	// ADDRESS
	status = send_byte(((address<<1) + 1));
    10c0:	8c 2f       	mov	r24, r28
    10c2:	88 0f       	add	r24, r24
    10c4:	8f 5f       	subi	r24, 0xFF	; 255
    10c6:	0e 94 2a 07 	call	0xe54	; 0xe54 <send_byte>
	if(status== 0x48){ // ACK was not received - may not be connected/listening
    10ca:	88 34       	cpi	r24, 0x48	; 72
    10cc:	29 f4       	brne	.+10     	; 0x10d8 <start_read+0x2a>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    10ce:	84 e9       	ldi	r24, 0x94	; 148
    10d0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
		return 0;	// failure
    10d4:	80 e0       	ldi	r24, 0x00	; 0
    10d6:	01 c0       	rjmp	.+2      	; 0x10da <start_read+0x2c>
	}	
	return 1;	// success
    10d8:	81 e0       	ldi	r24, 0x01	; 1
}	
    10da:	cf 91       	pop	r28
    10dc:	08 95       	ret

000010de <m_wii_read>:

	return 1;
}

char m_wii_read(unsigned int* blob_data)
{
    10de:	0f 93       	push	r16
    10e0:	1f 93       	push	r17
    10e2:	cf 93       	push	r28
    10e4:	df 93       	push	r29
    10e6:	cd b7       	in	r28, 0x3d	; 61
    10e8:	de b7       	in	r29, 0x3e	; 62
    10ea:	60 97       	sbiw	r28, 0x10	; 16
    10ec:	0f b6       	in	r0, 0x3f	; 63
    10ee:	f8 94       	cli
    10f0:	de bf       	out	0x3e, r29	; 62
    10f2:	0f be       	out	0x3f, r0	; 63
    10f4:	cd bf       	out	0x3d, r28	; 61
    10f6:	8c 01       	movw	r16, r24
	int i;
	unsigned char temp[16] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
    10f8:	fe 01       	movw	r30, r28
    10fa:	31 96       	adiw	r30, 0x01	; 1
    10fc:	80 e1       	ldi	r24, 0x10	; 16
    10fe:	df 01       	movw	r26, r30
    1100:	1d 92       	st	X+, r1
    1102:	8a 95       	dec	r24
    1104:	e9 f7       	brne	.-6      	; 0x1100 <m_wii_read+0x22>
	
	// prepare for reading
	if(!start_write(MWIITWIADDR)){return 0;}
    1106:	88 e5       	ldi	r24, 0x58	; 88
    1108:	0e 94 37 07 	call	0xe6e	; 0xe6e <start_write>
    110c:	88 23       	and	r24, r24
    110e:	09 f4       	brne	.+2      	; 0x1112 <m_wii_read+0x34>
    1110:	69 c0       	rjmp	.+210    	; 0x11e4 <m_wii_read+0x106>
	if(!send_byte(0x36)){return 0;}
    1112:	86 e3       	ldi	r24, 0x36	; 54
    1114:	0e 94 2a 07 	call	0xe54	; 0xe54 <send_byte>
    1118:	88 23       	and	r24, r24
    111a:	09 f4       	brne	.+2      	; 0x111e <m_wii_read+0x40>
    111c:	65 c0       	rjmp	.+202    	; 0x11e8 <m_wii_read+0x10a>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    111e:	84 e9       	ldi	r24, 0x94	; 148
    1120:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1124:	b8 e0       	ldi	r27, 0x08	; 8
    1126:	ba 95       	dec	r27
    1128:	f1 f7       	brne	.-4      	; 0x1126 <m_wii_read+0x48>
    112a:	00 00       	nop
	if(!send_byte(0x36)){return 0;}
	end();

	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
    112c:	88 e5       	ldi	r24, 0x58	; 88
    112e:	0e 94 57 08 	call	0x10ae	; 0x10ae <start_read>
    1132:	88 23       	and	r24, r24
    1134:	09 f4       	brne	.+2      	; 0x1138 <m_wii_read+0x5a>
    1136:	5a c0       	rjmp	.+180    	; 0x11ec <m_wii_read+0x10e>
    1138:	be 01       	movw	r22, r28
    113a:	6f 5f       	subi	r22, 0xFF	; 255
    113c:	7f 4f       	sbci	r23, 0xFF	; 255
    113e:	ae 01       	movw	r20, r28
    1140:	40 5f       	subi	r20, 0xF0	; 240
    1142:	5f 4f       	sbci	r21, 0xFF	; 255
	for(i=0;i<15;i++)
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    1144:	ec eb       	ldi	r30, 0xBC	; 188
    1146:	f0 e0       	ldi	r31, 0x00	; 0
    1148:	84 ec       	ldi	r24, 0xC4	; 196
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		temp[i] = TWDR;
    114a:	2b eb       	ldi	r18, 0xBB	; 187
    114c:	30 e0       	ldi	r19, 0x00	; 0
	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
	for(i=0;i<15;i++)
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    114e:	80 83       	st	Z, r24
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    1150:	90 81       	ld	r25, Z
    1152:	99 23       	and	r25, r25
    1154:	ec f7       	brge	.-6      	; 0x1150 <m_wii_read+0x72>
		temp[i] = TWDR;
    1156:	d9 01       	movw	r26, r18
    1158:	9c 91       	ld	r25, X
    115a:	db 01       	movw	r26, r22
    115c:	9d 93       	st	X+, r25
    115e:	bd 01       	movw	r22, r26
	end();

	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
	for(i=0;i<15;i++)
    1160:	a4 17       	cp	r26, r20
    1162:	b5 07       	cpc	r27, r21
    1164:	a1 f7       	brne	.-24     	; 0x114e <m_wii_read+0x70>
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		temp[i] = TWDR;
	}
	TWCR = (1<<TWINT) | (1<<TWEN);	// clear the flag, no ACK, and wait for another byte
    1166:	84 e8       	ldi	r24, 0x84	; 132
    1168:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    116c:	ec eb       	ldi	r30, 0xBC	; 188
    116e:	f0 e0       	ldi	r31, 0x00	; 0
    1170:	80 81       	ld	r24, Z
    1172:	88 23       	and	r24, r24
    1174:	ec f7       	brge	.-6      	; 0x1170 <m_wii_read+0x92>
	temp[15] = TWDR;
    1176:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    117a:	88 8b       	std	Y+16, r24	; 0x10
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    117c:	84 e9       	ldi	r24, 0x94	; 148
    117e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1182:	be 01       	movw	r22, r28
    1184:	6c 5f       	subi	r22, 0xFC	; 252
    1186:	7f 4f       	sbci	r23, 0xFF	; 255
    1188:	f8 01       	movw	r30, r16
    118a:	08 5e       	subi	r16, 0xE8	; 232
    118c:	1f 4f       	sbci	r17, 0xFF	; 255
	temp[15] = TWDR;
	end();

	for(i=0;i<10;i+=3) // for each blob:
	{	// i = 0, 3, 6, 9
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
    118e:	db 01       	movw	r26, r22
    1190:	2c 91       	ld	r18, X
    1192:	32 2f       	mov	r19, r18
    1194:	30 73       	andi	r19, 0x30	; 48
    1196:	cb 01       	movw	r24, r22
    1198:	02 97       	sbiw	r24, 0x02	; 2
    119a:	dc 01       	movw	r26, r24
    119c:	8c 91       	ld	r24, X
    119e:	90 e0       	ldi	r25, 0x00	; 0
    11a0:	b0 e1       	ldi	r27, 0x10	; 16
    11a2:	3b 9f       	mul	r19, r27
    11a4:	80 0d       	add	r24, r0
    11a6:	91 1d       	adc	r25, r1
    11a8:	11 24       	eor	r1, r1
    11aa:	91 83       	std	Z+1, r25	; 0x01
    11ac:	80 83       	st	Z, r24
		blob_data[i+1] = (unsigned int)temp[i+2] + ((int)(temp[i+3] & 0b11000000) <<2);	// Y
    11ae:	42 2f       	mov	r20, r18
    11b0:	40 7c       	andi	r20, 0xC0	; 192
    11b2:	50 e0       	ldi	r21, 0x00	; 0
    11b4:	44 0f       	add	r20, r20
    11b6:	55 1f       	adc	r21, r21
    11b8:	44 0f       	add	r20, r20
    11ba:	55 1f       	adc	r21, r21
    11bc:	cb 01       	movw	r24, r22
    11be:	01 97       	sbiw	r24, 0x01	; 1
    11c0:	dc 01       	movw	r26, r24
    11c2:	8c 91       	ld	r24, X
    11c4:	48 0f       	add	r20, r24
    11c6:	51 1d       	adc	r21, r1
    11c8:	53 83       	std	Z+3, r21	; 0x03
    11ca:	42 83       	std	Z+2, r20	; 0x02
		blob_data[i+2] = temp[i+3] & 0b00001111;										// size
    11cc:	2f 70       	andi	r18, 0x0F	; 15
    11ce:	30 e0       	ldi	r19, 0x00	; 0
    11d0:	35 83       	std	Z+5, r19	; 0x05
    11d2:	24 83       	std	Z+4, r18	; 0x04
    11d4:	6d 5f       	subi	r22, 0xFD	; 253
    11d6:	7f 4f       	sbci	r23, 0xFF	; 255
    11d8:	36 96       	adiw	r30, 0x06	; 6
	TWCR = (1<<TWINT) | (1<<TWEN);	// clear the flag, no ACK, and wait for another byte
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
	temp[15] = TWDR;
	end();

	for(i=0;i<10;i+=3) // for each blob:
    11da:	e0 17       	cp	r30, r16
    11dc:	f1 07       	cpc	r31, r17
    11de:	b9 f6       	brne	.-82     	; 0x118e <m_wii_read+0xb0>
	{	// i = 0, 3, 6, 9
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
		blob_data[i+1] = (unsigned int)temp[i+2] + ((int)(temp[i+3] & 0b11000000) <<2);	// Y
		blob_data[i+2] = temp[i+3] & 0b00001111;										// size
	}
	return 1;
    11e0:	81 e0       	ldi	r24, 0x01	; 1
    11e2:	05 c0       	rjmp	.+10     	; 0x11ee <m_wii_read+0x110>
{
	int i;
	unsigned char temp[16] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
	
	// prepare for reading
	if(!start_write(MWIITWIADDR)){return 0;}
    11e4:	80 e0       	ldi	r24, 0x00	; 0
    11e6:	03 c0       	rjmp	.+6      	; 0x11ee <m_wii_read+0x110>
	if(!send_byte(0x36)){return 0;}
    11e8:	80 e0       	ldi	r24, 0x00	; 0
    11ea:	01 c0       	rjmp	.+2      	; 0x11ee <m_wii_read+0x110>
	end();

	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
    11ec:	80 e0       	ldi	r24, 0x00	; 0
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
		blob_data[i+1] = (unsigned int)temp[i+2] + ((int)(temp[i+3] & 0b11000000) <<2);	// Y
		blob_data[i+2] = temp[i+3] & 0b00001111;										// size
	}
	return 1;
}
    11ee:	60 96       	adiw	r28, 0x10	; 16
    11f0:	0f b6       	in	r0, 0x3f	; 63
    11f2:	f8 94       	cli
    11f4:	de bf       	out	0x3e, r29	; 62
    11f6:	0f be       	out	0x3f, r0	; 63
    11f8:	cd bf       	out	0x3d, r28	; 61
    11fa:	df 91       	pop	r29
    11fc:	cf 91       	pop	r28
    11fe:	1f 91       	pop	r17
    1200:	0f 91       	pop	r16
    1202:	08 95       	ret

00001204 <ADC_init>:
		m_usb_tx_string("F7: ");
		m_usb_tx_int(pt_data[8]);
	}
	m_usb_tx_string("   ---   ");
	//m_usb_tx_char(13);
}
    1204:	ec e7       	ldi	r30, 0x7C	; 124
    1206:	f0 e0       	ldi	r31, 0x00	; 0
    1208:	80 81       	ld	r24, Z
    120a:	8f 77       	andi	r24, 0x7F	; 127
    120c:	80 83       	st	Z, r24
    120e:	80 81       	ld	r24, Z
    1210:	80 64       	ori	r24, 0x40	; 64
    1212:	80 83       	st	Z, r24
    1214:	aa e7       	ldi	r26, 0x7A	; 122
    1216:	b0 e0       	ldi	r27, 0x00	; 0
    1218:	8c 91       	ld	r24, X
    121a:	84 60       	ori	r24, 0x04	; 4
    121c:	8c 93       	st	X, r24
    121e:	8c 91       	ld	r24, X
    1220:	8d 7f       	andi	r24, 0xFD	; 253
    1222:	8c 93       	st	X, r24
    1224:	8c 91       	ld	r24, X
    1226:	81 60       	ori	r24, 0x01	; 1
    1228:	8c 93       	st	X, r24
    122a:	ee e7       	ldi	r30, 0x7E	; 126
    122c:	f0 e0       	ldi	r31, 0x00	; 0
    122e:	80 81       	ld	r24, Z
    1230:	81 60       	ori	r24, 0x01	; 1
    1232:	80 83       	st	Z, r24
    1234:	80 81       	ld	r24, Z
    1236:	82 60       	ori	r24, 0x02	; 2
    1238:	80 83       	st	Z, r24
    123a:	80 81       	ld	r24, Z
    123c:	80 61       	ori	r24, 0x10	; 16
    123e:	80 83       	st	Z, r24
    1240:	80 81       	ld	r24, Z
    1242:	80 62       	ori	r24, 0x20	; 32
    1244:	80 83       	st	Z, r24
    1246:	80 81       	ld	r24, Z
    1248:	80 64       	ori	r24, 0x40	; 64
    124a:	80 83       	st	Z, r24
    124c:	80 81       	ld	r24, Z
    124e:	80 68       	ori	r24, 0x80	; 128
    1250:	80 83       	st	Z, r24
    1252:	ed e7       	ldi	r30, 0x7D	; 125
    1254:	f0 e0       	ldi	r31, 0x00	; 0
    1256:	80 81       	ld	r24, Z
    1258:	81 60       	ori	r24, 0x01	; 1
    125a:	80 83       	st	Z, r24
    125c:	80 81       	ld	r24, Z
    125e:	82 60       	ori	r24, 0x02	; 2
    1260:	80 83       	st	Z, r24
    1262:	80 81       	ld	r24, Z
    1264:	84 60       	ori	r24, 0x04	; 4
    1266:	80 83       	st	Z, r24
    1268:	8c 91       	ld	r24, X
    126a:	80 62       	ori	r24, 0x20	; 32
    126c:	8c 93       	st	X, r24
    126e:	08 95       	ret

00001270 <setMUX>:
    1270:	82 30       	cpi	r24, 0x02	; 2
    1272:	91 05       	cpc	r25, r1
    1274:	b0 f0       	brcs	.+44     	; 0x12a2 <setMUX+0x32>
    1276:	84 30       	cpi	r24, 0x04	; 4
    1278:	91 05       	cpc	r25, r1
    127a:	d9 f0       	breq	.+54     	; 0x12b2 <setMUX+0x42>
    127c:	85 30       	cpi	r24, 0x05	; 5
    127e:	91 05       	cpc	r25, r1
    1280:	91 f0       	breq	.+36     	; 0x12a6 <setMUX+0x36>
    1282:	86 30       	cpi	r24, 0x06	; 6
    1284:	91 05       	cpc	r25, r1
    1286:	a9 f0       	breq	.+42     	; 0x12b2 <setMUX+0x42>
    1288:	87 30       	cpi	r24, 0x07	; 7
    128a:	91 05       	cpc	r25, r1
    128c:	61 f0       	breq	.+24     	; 0x12a6 <setMUX+0x36>
    128e:	88 30       	cpi	r24, 0x08	; 8
    1290:	91 05       	cpc	r25, r1
    1292:	79 f0       	breq	.+30     	; 0x12b2 <setMUX+0x42>
    1294:	89 30       	cpi	r24, 0x09	; 9
    1296:	91 05       	cpc	r25, r1
    1298:	31 f0       	breq	.+12     	; 0x12a6 <setMUX+0x36>
    129a:	8a 30       	cpi	r24, 0x0A	; 10
    129c:	91 05       	cpc	r25, r1
    129e:	b1 f5       	brne	.+108    	; 0x130c <setMUX+0x9c>
    12a0:	08 c0       	rjmp	.+16     	; 0x12b2 <setMUX+0x42>
    12a2:	80 ff       	sbrs	r24, 0
    12a4:	06 c0       	rjmp	.+12     	; 0x12b2 <setMUX+0x42>
    12a6:	ec e7       	ldi	r30, 0x7C	; 124
    12a8:	f0 e0       	ldi	r31, 0x00	; 0
    12aa:	20 81       	ld	r18, Z
    12ac:	21 60       	ori	r18, 0x01	; 1
    12ae:	20 83       	st	Z, r18
    12b0:	05 c0       	rjmp	.+10     	; 0x12bc <setMUX+0x4c>
    12b2:	ec e7       	ldi	r30, 0x7C	; 124
    12b4:	f0 e0       	ldi	r31, 0x00	; 0
    12b6:	20 81       	ld	r18, Z
    12b8:	2e 7f       	andi	r18, 0xFE	; 254
    12ba:	20 83       	st	Z, r18
    12bc:	81 ff       	sbrs	r24, 1
    12be:	06 c0       	rjmp	.+12     	; 0x12cc <setMUX+0x5c>
    12c0:	ec e7       	ldi	r30, 0x7C	; 124
    12c2:	f0 e0       	ldi	r31, 0x00	; 0
    12c4:	20 81       	ld	r18, Z
    12c6:	22 60       	ori	r18, 0x02	; 2
    12c8:	20 83       	st	Z, r18
    12ca:	05 c0       	rjmp	.+10     	; 0x12d6 <setMUX+0x66>
    12cc:	ec e7       	ldi	r30, 0x7C	; 124
    12ce:	f0 e0       	ldi	r31, 0x00	; 0
    12d0:	20 81       	ld	r18, Z
    12d2:	2d 7f       	andi	r18, 0xFD	; 253
    12d4:	20 83       	st	Z, r18
    12d6:	82 ff       	sbrs	r24, 2
    12d8:	06 c0       	rjmp	.+12     	; 0x12e6 <setMUX+0x76>
    12da:	ec e7       	ldi	r30, 0x7C	; 124
    12dc:	f0 e0       	ldi	r31, 0x00	; 0
    12de:	20 81       	ld	r18, Z
    12e0:	24 60       	ori	r18, 0x04	; 4
    12e2:	20 83       	st	Z, r18
    12e4:	05 c0       	rjmp	.+10     	; 0x12f0 <setMUX+0x80>
    12e6:	ec e7       	ldi	r30, 0x7C	; 124
    12e8:	f0 e0       	ldi	r31, 0x00	; 0
    12ea:	20 81       	ld	r18, Z
    12ec:	2b 7f       	andi	r18, 0xFB	; 251
    12ee:	20 83       	st	Z, r18
    12f0:	83 ff       	sbrs	r24, 3
    12f2:	06 c0       	rjmp	.+12     	; 0x1300 <setMUX+0x90>
    12f4:	eb e7       	ldi	r30, 0x7B	; 123
    12f6:	f0 e0       	ldi	r31, 0x00	; 0
    12f8:	80 81       	ld	r24, Z
    12fa:	80 62       	ori	r24, 0x20	; 32
    12fc:	80 83       	st	Z, r24
    12fe:	08 95       	ret
    1300:	eb e7       	ldi	r30, 0x7B	; 123
    1302:	f0 e0       	ldi	r31, 0x00	; 0
    1304:	80 81       	ld	r24, Z
    1306:	8f 7d       	andi	r24, 0xDF	; 223
    1308:	80 83       	st	Z, r24
    130a:	08 95       	ret
    130c:	6a 9a       	sbi	0x0d, 2	; 13
    130e:	72 98       	cbi	0x0e, 2	; 14
    1310:	08 95       	ret

00001312 <readADC>:
    1312:	ea e7       	ldi	r30, 0x7A	; 122
    1314:	f0 e0       	ldi	r31, 0x00	; 0
    1316:	80 81       	ld	r24, Z
    1318:	80 68       	ori	r24, 0x80	; 128
    131a:	80 83       	st	Z, r24
    131c:	80 81       	ld	r24, Z
    131e:	80 64       	ori	r24, 0x40	; 64
    1320:	80 83       	st	Z, r24
    1322:	80 81       	ld	r24, Z
    1324:	84 ff       	sbrs	r24, 4
    1326:	fd cf       	rjmp	.-6      	; 0x1322 <readADC+0x10>
    1328:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
    132c:	30 91 79 00 	lds	r19, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
    1330:	ea e7       	ldi	r30, 0x7A	; 122
    1332:	f0 e0       	ldi	r31, 0x00	; 0
    1334:	90 81       	ld	r25, Z
    1336:	9f 7e       	andi	r25, 0xEF	; 239
    1338:	90 83       	st	Z, r25
    133a:	90 81       	ld	r25, Z
    133c:	9f 77       	andi	r25, 0x7F	; 127
    133e:	90 83       	st	Z, r25
    1340:	c9 01       	movw	r24, r18
    1342:	08 95       	ret

00001344 <read_pts>:
    1344:	cf 92       	push	r12
    1346:	df 92       	push	r13
    1348:	ef 92       	push	r14
    134a:	ff 92       	push	r15
    134c:	0f 93       	push	r16
    134e:	1f 93       	push	r17
    1350:	cf 93       	push	r28
    1352:	df 93       	push	r29
    1354:	cd b7       	in	r28, 0x3d	; 61
    1356:	de b7       	in	r29, 0x3e	; 62
    1358:	62 97       	sbiw	r28, 0x12	; 18
    135a:	0f b6       	in	r0, 0x3f	; 63
    135c:	f8 94       	cli
    135e:	de bf       	out	0x3e, r29	; 62
    1360:	0f be       	out	0x3f, r0	; 63
    1362:	cd bf       	out	0x3d, r28	; 61
    1364:	6c 01       	movw	r12, r24
    1366:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <jtag_enabled>
    136a:	88 23       	and	r24, r24
    136c:	29 f0       	breq	.+10     	; 0x1378 <read_pts+0x34>
    136e:	80 e8       	ldi	r24, 0x80	; 128
    1370:	85 bf       	out	0x35, r24	; 53
    1372:	85 bf       	out	0x35, r24	; 53
    1374:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <jtag_enabled>
    1378:	89 e0       	ldi	r24, 0x09	; 9
    137a:	90 e0       	ldi	r25, 0x00	; 0
    137c:	0e 94 02 09 	call	0x1204	; 0x1204 <ADC_init>
    1380:	82 e1       	ldi	r24, 0x12	; 18
    1382:	ee e0       	ldi	r30, 0x0E	; 14
    1384:	f1 e0       	ldi	r31, 0x01	; 1
    1386:	de 01       	movw	r26, r28
    1388:	11 96       	adiw	r26, 0x01	; 1
    138a:	01 90       	ld	r0, Z+
    138c:	0d 92       	st	X+, r0
    138e:	8a 95       	dec	r24
    1390:	e1 f7       	brne	.-8      	; 0x138a <read_pts+0x46>
    1392:	ce 01       	movw	r24, r28
    1394:	01 96       	adiw	r24, 0x01	; 1
    1396:	7c 01       	movw	r14, r24
    1398:	86 01       	movw	r16, r12
    139a:	92 e1       	ldi	r25, 0x12	; 18
    139c:	c9 0e       	add	r12, r25
    139e:	d1 1c       	adc	r13, r1
    13a0:	f7 01       	movw	r30, r14
    13a2:	81 91       	ld	r24, Z+
    13a4:	91 91       	ld	r25, Z+
    13a6:	7f 01       	movw	r14, r30
    13a8:	0e 94 38 09 	call	0x1270	; 0x1270 <setMUX>
    13ac:	0e 94 89 09 	call	0x1312	; 0x1312 <readADC>
    13b0:	f8 01       	movw	r30, r16
    13b2:	81 93       	st	Z+, r24
    13b4:	91 93       	st	Z+, r25
    13b6:	8f 01       	movw	r16, r30
    13b8:	83 ef       	ldi	r24, 0xF3	; 243
    13ba:	91 e0       	ldi	r25, 0x01	; 1
    13bc:	01 97       	sbiw	r24, 0x01	; 1
    13be:	f1 f7       	brne	.-4      	; 0x13bc <read_pts+0x78>
    13c0:	00 c0       	rjmp	.+0      	; 0x13c2 <read_pts+0x7e>
    13c2:	00 00       	nop
    13c4:	ec 15       	cp	r30, r12
    13c6:	fd 05       	cpc	r31, r13
    13c8:	59 f7       	brne	.-42     	; 0x13a0 <read_pts+0x5c>
    13ca:	62 96       	adiw	r28, 0x12	; 18
    13cc:	0f b6       	in	r0, 0x3f	; 63
    13ce:	f8 94       	cli
    13d0:	de bf       	out	0x3e, r29	; 62
    13d2:	0f be       	out	0x3f, r0	; 63
    13d4:	cd bf       	out	0x3d, r28	; 61
    13d6:	df 91       	pop	r29
    13d8:	cf 91       	pop	r28
    13da:	1f 91       	pop	r17
    13dc:	0f 91       	pop	r16
    13de:	ff 90       	pop	r15
    13e0:	ef 90       	pop	r14
    13e2:	df 90       	pop	r13
    13e4:	cf 90       	pop	r12
    13e6:	08 95       	ret

000013e8 <get_turn>:
    13e8:	fc 01       	movw	r30, r24
    13ea:	20 85       	ldd	r18, Z+8	; 0x08
    13ec:	31 85       	ldd	r19, Z+9	; 0x09
    13ee:	22 0f       	add	r18, r18
    13f0:	33 1f       	adc	r19, r19
    13f2:	66 81       	ldd	r22, Z+6	; 0x06
    13f4:	77 81       	ldd	r23, Z+7	; 0x07
    13f6:	a9 01       	movw	r20, r18
    13f8:	46 0f       	add	r20, r22
    13fa:	57 1f       	adc	r21, r23
    13fc:	22 85       	ldd	r18, Z+10	; 0x0a
    13fe:	33 85       	ldd	r19, Z+11	; 0x0b
    1400:	c9 01       	movw	r24, r18
    1402:	88 0f       	add	r24, r24
    1404:	99 1f       	adc	r25, r25
    1406:	28 0f       	add	r18, r24
    1408:	39 1f       	adc	r19, r25
    140a:	24 0f       	add	r18, r20
    140c:	35 1f       	adc	r19, r21
    140e:	84 85       	ldd	r24, Z+12	; 0x0c
    1410:	95 85       	ldd	r25, Z+13	; 0x0d
    1412:	ac 01       	movw	r20, r24
    1414:	44 0f       	add	r20, r20
    1416:	55 1f       	adc	r21, r21
    1418:	84 0f       	add	r24, r20
    141a:	95 1f       	adc	r25, r21
    141c:	28 1b       	sub	r18, r24
    141e:	39 0b       	sbc	r19, r25
    1420:	86 85       	ldd	r24, Z+14	; 0x0e
    1422:	97 85       	ldd	r25, Z+15	; 0x0f
    1424:	88 0f       	add	r24, r24
    1426:	99 1f       	adc	r25, r25
    1428:	28 1b       	sub	r18, r24
    142a:	39 0b       	sbc	r19, r25
    142c:	80 89       	ldd	r24, Z+16	; 0x10
    142e:	91 89       	ldd	r25, Z+17	; 0x11
    1430:	28 1b       	sub	r18, r24
    1432:	39 0b       	sbc	r19, r25
    1434:	c9 01       	movw	r24, r18
    1436:	22 f4       	brpl	.+8      	; 0x1440 <get_turn+0x58>
    1438:	88 27       	eor	r24, r24
    143a:	99 27       	eor	r25, r25
    143c:	82 1b       	sub	r24, r18
    143e:	93 0b       	sbc	r25, r19
    1440:	89 97       	sbiw	r24, 0x29	; 41
    1442:	2c f0       	brlt	.+10     	; 0x144e <get_turn+0x66>
    1444:	33 23       	and	r19, r19
    1446:	dc f0       	brlt	.+54     	; 0x147e <get_turn+0x96>
    1448:	81 e0       	ldi	r24, 0x01	; 1
    144a:	90 e0       	ldi	r25, 0x00	; 0
    144c:	08 95       	ret
    144e:	82 81       	ldd	r24, Z+2	; 0x02
    1450:	93 81       	ldd	r25, Z+3	; 0x03
    1452:	40 97       	sbiw	r24, 0x10	; 16
    1454:	bc f4       	brge	.+46     	; 0x1484 <get_turn+0x9c>
    1456:	84 81       	ldd	r24, Z+4	; 0x04
    1458:	95 81       	ldd	r25, Z+5	; 0x05
    145a:	40 97       	sbiw	r24, 0x10	; 16
    145c:	b4 f4       	brge	.+44     	; 0x148a <get_turn+0xa2>
    145e:	33 23       	and	r19, r19
    1460:	1c f0       	brlt	.+6      	; 0x1468 <get_turn+0x80>
    1462:	81 e0       	ldi	r24, 0x01	; 1
    1464:	90 e0       	ldi	r25, 0x00	; 0
    1466:	02 c0       	rjmp	.+4      	; 0x146c <get_turn+0x84>
    1468:	8f ef       	ldi	r24, 0xFF	; 255
    146a:	9f ef       	ldi	r25, 0xFF	; 255
    146c:	41 e0       	ldi	r20, 0x01	; 1
    146e:	50 e0       	ldi	r21, 0x00	; 0
    1470:	23 2b       	or	r18, r19
    1472:	11 f0       	breq	.+4      	; 0x1478 <get_turn+0x90>
    1474:	40 e0       	ldi	r20, 0x00	; 0
    1476:	50 e0       	ldi	r21, 0x00	; 0
    1478:	84 1b       	sub	r24, r20
    147a:	95 0b       	sbc	r25, r21
    147c:	08 95       	ret
    147e:	8f ef       	ldi	r24, 0xFF	; 255
    1480:	9f ef       	ldi	r25, 0xFF	; 255
    1482:	08 95       	ret
    1484:	80 e0       	ldi	r24, 0x00	; 0
    1486:	90 e0       	ldi	r25, 0x00	; 0
    1488:	08 95       	ret
    148a:	80 e0       	ldi	r24, 0x00	; 0
    148c:	90 e0       	ldi	r25, 0x00	; 0
    148e:	08 95       	ret

00001490 <has_puck>:
    1490:	fc 01       	movw	r30, r24
    1492:	80 81       	ld	r24, Z
    1494:	91 81       	ldd	r25, Z+1	; 0x01
    1496:	22 81       	ldd	r18, Z+2	; 0x02
    1498:	33 81       	ldd	r19, Z+3	; 0x03
    149a:	28 0f       	add	r18, r24
    149c:	39 1f       	adc	r19, r25
    149e:	84 81       	ldd	r24, Z+4	; 0x04
    14a0:	95 81       	ldd	r25, Z+5	; 0x05
    14a2:	28 0f       	add	r18, r24
    14a4:	39 1f       	adc	r19, r25
    14a6:	81 e0       	ldi	r24, 0x01	; 1
    14a8:	23 3f       	cpi	r18, 0xF3	; 243
    14aa:	31 05       	cpc	r19, r1
    14ac:	0c f4       	brge	.+2      	; 0x14b0 <has_puck+0x20>
    14ae:	80 e0       	ldi	r24, 0x00	; 0
    14b0:	08 95       	ret

000014b2 <turn_to_puck>:
    14b2:	99 23       	and	r25, r25
    14b4:	5c f4       	brge	.+22     	; 0x14cc <turn_to_puck+0x1a>
    14b6:	bc 01       	movw	r22, r24
    14b8:	99 23       	and	r25, r25
    14ba:	24 f4       	brge	.+8      	; 0x14c4 <turn_to_puck+0x12>
    14bc:	66 27       	eor	r22, r22
    14be:	77 27       	eor	r23, r23
    14c0:	68 1b       	sub	r22, r24
    14c2:	79 0b       	sbc	r23, r25
    14c4:	80 e0       	ldi	r24, 0x00	; 0
    14c6:	0e 94 bd 02 	call	0x57a	; 0x57a <turn_in_place>
    14ca:	08 95       	ret
    14cc:	18 16       	cp	r1, r24
    14ce:	19 06       	cpc	r1, r25
    14d0:	24 f4       	brge	.+8      	; 0x14da <turn_to_puck+0x28>
    14d2:	bc 01       	movw	r22, r24
    14d4:	81 e0       	ldi	r24, 0x01	; 1
    14d6:	0e 94 bd 02 	call	0x57a	; 0x57a <turn_in_place>
    14da:	08 95       	ret

000014dc <step_to_puck>:
OUTPUTS:
	0 if puck is not in possession
	1 if puck is in possession
*/

bool step_to_puck() {
    14dc:	0f 93       	push	r16
    14de:	1f 93       	push	r17
    14e0:	cf 93       	push	r28
    14e2:	df 93       	push	r29
    14e4:	cd b7       	in	r28, 0x3d	; 61
    14e6:	de b7       	in	r29, 0x3e	; 62
    14e8:	62 97       	sbiw	r28, 0x12	; 18
    14ea:	0f b6       	in	r0, 0x3f	; 63
    14ec:	f8 94       	cli
    14ee:	de bf       	out	0x3e, r29	; 62
    14f0:	0f be       	out	0x3f, r0	; 63
    14f2:	cd bf       	out	0x3d, r28	; 61

	// Array for phototransistor readings
	int pt_data[NUM_PTS];

	// Get ADC phototransistor pt_data
	read_pts(pt_data); 
    14f4:	ce 01       	movw	r24, r28
    14f6:	01 96       	adiw	r24, 0x01	; 1
    14f8:	0e 94 a2 09 	call	0x1344	; 0x1344 <read_pts>

	// calculate direction and filter out noise
	int direction = filter_directions(get_turn(pt_data));
    14fc:	ce 01       	movw	r24, r28
    14fe:	01 96       	adiw	r24, 0x01	; 1
    1500:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <get_turn>
    1504:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <filter_directions>
    1508:	8c 01       	movw	r16, r24
	if (++zzz % 40 == 0) {
    150a:	20 91 24 01 	lds	r18, 0x0124	; 0x800124 <zzz>
    150e:	30 91 25 01 	lds	r19, 0x0125	; 0x800125 <zzz+0x1>
    1512:	2f 5f       	subi	r18, 0xFF	; 255
    1514:	3f 4f       	sbci	r19, 0xFF	; 255
    1516:	c9 01       	movw	r24, r18
    1518:	68 e2       	ldi	r22, 0x28	; 40
    151a:	70 e0       	ldi	r23, 0x00	; 0
    151c:	0e 94 5f 16 	call	0x2cbe	; 0x2cbe <__divmodhi4>
    1520:	89 2b       	or	r24, r25
    1522:	29 f0       	breq	.+10     	; 0x152e <step_to_puck+0x52>
    1524:	30 93 25 01 	sts	0x0125, r19	; 0x800125 <zzz+0x1>
    1528:	20 93 24 01 	sts	0x0124, r18	; 0x800124 <zzz>
    152c:	07 c0       	rjmp	.+14     	; 0x153c <step_to_puck+0x60>
		//printADC(pt_data);
		zzz = 0;
    152e:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <zzz+0x1>
    1532:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <zzz>
		} else if (direction < 0) {
			m_usb_tx_string("Right");
		} else {
			m_usb_tx_string("Left");
		}*/
		m_usb_tx_char(13);
    1536:	8d e0       	ldi	r24, 0x0D	; 13
    1538:	0e 94 ab 04 	call	0x956	; 0x956 <m_usb_tx_char>
	}
	if (direction == 0) {
    153c:	01 15       	cp	r16, r1
    153e:	11 05       	cpc	r17, r1
    1540:	69 f4       	brne	.+26     	; 0x155c <step_to_puck+0x80>
		turn(0);	// drive forward
    1542:	80 e0       	ldi	r24, 0x00	; 0
    1544:	90 e0       	ldi	r25, 0x00	; 0
    1546:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <turn>
		if(has_puck(pt_data)){
    154a:	ce 01       	movw	r24, r28
    154c:	01 96       	adiw	r24, 0x01	; 1
    154e:	0e 94 48 0a 	call	0x1490	; 0x1490 <has_puck>
    1552:	88 23       	and	r24, r24
    1554:	69 f0       	breq	.+26     	; 0x1570 <step_to_puck+0x94>
			m_red(ON);
    1556:	6e 9a       	sbi	0x0d, 6	; 13
    1558:	76 98       	cbi	0x0e, 6	; 14
			return 1;
    155a:	0a c0       	rjmp	.+20     	; 0x1570 <step_to_puck+0x94>
		}
	} else {
		turn_to_puck(direction * TURN_SPEED_FACTOR); // Turn to face puck
    155c:	86 e9       	ldi	r24, 0x96	; 150
    155e:	28 2f       	mov	r18, r24
    1560:	20 9f       	mul	r18, r16
    1562:	c0 01       	movw	r24, r0
    1564:	21 9f       	mul	r18, r17
    1566:	90 0d       	add	r25, r0
    1568:	11 24       	eor	r1, r1
    156a:	0e 94 59 0a 	call	0x14b2	; 0x14b2 <turn_to_puck>
	}
	return 0;
    156e:	80 e0       	ldi	r24, 0x00	; 0
    1570:	62 96       	adiw	r28, 0x12	; 18
    1572:	0f b6       	in	r0, 0x3f	; 63
    1574:	f8 94       	cli
    1576:	de bf       	out	0x3e, r29	; 62
    1578:	0f be       	out	0x3f, r0	; 63
    157a:	cd bf       	out	0x3d, r28	; 61
    157c:	df 91       	pop	r29
    157e:	cf 91       	pop	r28
    1580:	1f 91       	pop	r17
    1582:	0f 91       	pop	r16
    1584:	08 95       	ret

00001586 <initialize_past_directions>:
	
	// edit new_data to have median measurements
	new_data->x = x_med;
	new_data->y = y_med;
	new_data->o = o_med;
}
    1586:	e5 e8       	ldi	r30, 0x85	; 133
    1588:	f1 e0       	ldi	r31, 0x01	; 1
    158a:	8f e9       	ldi	r24, 0x9F	; 159
    158c:	91 e0       	ldi	r25, 0x01	; 1
    158e:	11 92       	st	Z+, r1
    1590:	11 92       	st	Z+, r1
    1592:	e8 17       	cp	r30, r24
    1594:	f9 07       	cpc	r31, r25
    1596:	d9 f7       	brne	.-10     	; 0x158e <initialize_past_directions+0x8>
    1598:	81 e0       	ldi	r24, 0x01	; 1
    159a:	80 93 84 01 	sts	0x0184, r24	; 0x800184 <past_directions_initialized>
    159e:	08 95       	ret

000015a0 <update_past_directions>:
    15a0:	ed e9       	ldi	r30, 0x9D	; 157
    15a2:	f1 e0       	ldi	r31, 0x01	; 1
    15a4:	45 e8       	ldi	r20, 0x85	; 133
    15a6:	51 e0       	ldi	r21, 0x01	; 1
    15a8:	32 91       	ld	r19, -Z
    15aa:	22 91       	ld	r18, -Z
    15ac:	33 83       	std	Z+3, r19	; 0x03
    15ae:	22 83       	std	Z+2, r18	; 0x02
    15b0:	e4 17       	cp	r30, r20
    15b2:	f5 07       	cpc	r31, r21
    15b4:	c9 f7       	brne	.-14     	; 0x15a8 <update_past_directions+0x8>
    15b6:	90 93 86 01 	sts	0x0186, r25	; 0x800186 <past_directions+0x1>
    15ba:	80 93 85 01 	sts	0x0185, r24	; 0x800185 <past_directions>
    15be:	08 95       	ret

000015c0 <filter_directions>:

// takes in new direction data, updates past_directions array, and updates "new direction"
// to filtered new directions -- MODE FILTER
int filter_directions(int direction){
    15c0:	af 92       	push	r10
    15c2:	bf 92       	push	r11
    15c4:	cf 92       	push	r12
    15c6:	df 92       	push	r13
    15c8:	ef 92       	push	r14
    15ca:	ff 92       	push	r15
    15cc:	0f 93       	push	r16
    15ce:	1f 93       	push	r17
    15d0:	cf 93       	push	r28
    15d2:	df 93       	push	r29
    15d4:	ec 01       	movw	r28, r24
	// if past_directions was not initialized, initialize it
	if(!past_directions_initialized){
    15d6:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <past_directions_initialized>
    15da:	81 11       	cpse	r24, r1
    15dc:	02 c0       	rjmp	.+4      	; 0x15e2 <filter_directions+0x22>
		initialize_past_directions();
    15de:	0e 94 c3 0a 	call	0x1586	; 0x1586 <initialize_past_directions>
	}
	
	// update past_data array
	update_past_directions(direction);
    15e2:	ce 01       	movw	r24, r28
    15e4:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <update_past_directions>
    15e8:	e5 e8       	ldi	r30, 0x85	; 133
    15ea:	f1 e0       	ldi	r31, 0x01	; 1
    15ec:	af e9       	ldi	r26, 0x9F	; 159
    15ee:	b1 e0       	ldi	r27, 0x01	; 1
	
	// count instances of each direction
	int right=0, left=0, front=0;
    15f0:	e1 2c       	mov	r14, r1
    15f2:	f1 2c       	mov	r15, r1
    15f4:	c0 e0       	ldi	r28, 0x00	; 0
    15f6:	d0 e0       	ldi	r29, 0x00	; 0
    15f8:	00 e0       	ldi	r16, 0x00	; 0
    15fa:	10 e0       	ldi	r17, 0x00	; 0

	for (int i = 0; i < NUM_SAVED_DIRECTIONS; i++) {
		switch(SIGN_OF(past_directions[i])){
    15fc:	aa 24       	eor	r10, r10
    15fe:	aa 94       	dec	r10
    1600:	bb 24       	eor	r11, r11
    1602:	ba 94       	dec	r11
    1604:	71 e0       	ldi	r23, 0x01	; 1
    1606:	60 e0       	ldi	r22, 0x00	; 0
    1608:	c1 2c       	mov	r12, r1
    160a:	d1 2c       	mov	r13, r1
    160c:	41 91       	ld	r20, Z+
    160e:	51 91       	ld	r21, Z+
    1610:	55 23       	and	r21, r21
    1612:	1c f0       	brlt	.+6      	; 0x161a <filter_directions+0x5a>
    1614:	87 2f       	mov	r24, r23
    1616:	96 2f       	mov	r25, r22
    1618:	02 c0       	rjmp	.+4      	; 0x161e <filter_directions+0x5e>
    161a:	8a 2d       	mov	r24, r10
    161c:	9b 2d       	mov	r25, r11
    161e:	27 2f       	mov	r18, r23
    1620:	36 2f       	mov	r19, r22
    1622:	45 2b       	or	r20, r21
    1624:	11 f0       	breq	.+4      	; 0x162a <filter_directions+0x6a>
    1626:	2c 2d       	mov	r18, r12
    1628:	3d 2d       	mov	r19, r13
    162a:	82 1b       	sub	r24, r18
    162c:	93 0b       	sbc	r25, r19
    162e:	8f 3f       	cpi	r24, 0xFF	; 255
    1630:	2f ef       	ldi	r18, 0xFF	; 255
    1632:	92 07       	cpc	r25, r18
    1634:	19 f0       	breq	.+6      	; 0x163c <filter_directions+0x7c>
    1636:	89 2b       	or	r24, r25
    1638:	21 f0       	breq	.+8      	; 0x1642 <filter_directions+0x82>
    163a:	07 c0       	rjmp	.+14     	; 0x164a <filter_directions+0x8a>
			case -1 : right++;
    163c:	0f 5f       	subi	r16, 0xFF	; 255
    163e:	1f 4f       	sbci	r17, 0xFF	; 255
				break;
    1640:	05 c0       	rjmp	.+10     	; 0x164c <filter_directions+0x8c>
			case 0 : front++;
    1642:	8f ef       	ldi	r24, 0xFF	; 255
    1644:	e8 1a       	sub	r14, r24
    1646:	f8 0a       	sbc	r15, r24
				break;
    1648:	01 c0       	rjmp	.+2      	; 0x164c <filter_directions+0x8c>
			case 1 :
			default : left++;
    164a:	21 96       	adiw	r28, 0x01	; 1
	update_past_directions(direction);
	
	// count instances of each direction
	int right=0, left=0, front=0;

	for (int i = 0; i < NUM_SAVED_DIRECTIONS; i++) {
    164c:	ea 17       	cp	r30, r26
    164e:	fb 07       	cpc	r31, r27
    1650:	e9 f6       	brne	.-70     	; 0x160c <filter_directions+0x4c>
				break;
		}
	}

	// return mode direction
	if(right > left && right > front) { return -1; }
    1652:	c0 17       	cp	r28, r16
    1654:	d1 07       	cpc	r29, r17
    1656:	1c f4       	brge	.+6      	; 0x165e <filter_directions+0x9e>
    1658:	e0 16       	cp	r14, r16
    165a:	f1 06       	cpc	r15, r17
    165c:	54 f0       	brlt	.+20     	; 0x1672 <filter_directions+0xb2>
	if(left > right && left > front) { return 1; }
    165e:	0c 17       	cp	r16, r28
    1660:	1d 07       	cpc	r17, r29
    1662:	54 f4       	brge	.+20     	; 0x1678 <filter_directions+0xb8>
    1664:	81 e0       	ldi	r24, 0x01	; 1
    1666:	90 e0       	ldi	r25, 0x00	; 0
    1668:	ec 16       	cp	r14, r28
    166a:	fd 06       	cpc	r15, r29
    166c:	3c f0       	brlt	.+14     	; 0x167c <filter_directions+0xbc>
    166e:	80 e0       	ldi	r24, 0x00	; 0
    1670:	05 c0       	rjmp	.+10     	; 0x167c <filter_directions+0xbc>
				break;
		}
	}

	// return mode direction
	if(right > left && right > front) { return -1; }
    1672:	8f ef       	ldi	r24, 0xFF	; 255
    1674:	9f ef       	ldi	r25, 0xFF	; 255
    1676:	02 c0       	rjmp	.+4      	; 0x167c <filter_directions+0xbc>
	if(left > right && left > front) { return 1; }
	else{ return 0; }
    1678:	80 e0       	ldi	r24, 0x00	; 0
    167a:	90 e0       	ldi	r25, 0x00	; 0
    167c:	df 91       	pop	r29
    167e:	cf 91       	pop	r28
    1680:	1f 91       	pop	r17
    1682:	0f 91       	pop	r16
    1684:	ff 90       	pop	r15
    1686:	ef 90       	pop	r14
    1688:	df 90       	pop	r13
    168a:	cf 90       	pop	r12
    168c:	bf 90       	pop	r11
    168e:	af 90       	pop	r10
    1690:	08 95       	ret

00001692 <print_data>:
	// read in switch position to get color
	active = false;
}

void set_color(int robot_color){
	color = robot_color;
    1692:	2f 92       	push	r2
    1694:	3f 92       	push	r3
    1696:	4f 92       	push	r4
    1698:	5f 92       	push	r5
    169a:	6f 92       	push	r6
    169c:	7f 92       	push	r7
    169e:	8f 92       	push	r8
    16a0:	9f 92       	push	r9
    16a2:	af 92       	push	r10
    16a4:	bf 92       	push	r11
    16a6:	cf 92       	push	r12
    16a8:	df 92       	push	r13
    16aa:	ef 92       	push	r14
    16ac:	ff 92       	push	r15
    16ae:	0f 93       	push	r16
    16b0:	1f 93       	push	r17
    16b2:	cf 93       	push	r28
    16b4:	df 93       	push	r29
    16b6:	cd b7       	in	r28, 0x3d	; 61
    16b8:	de b7       	in	r29, 0x3e	; 62
    16ba:	28 97       	sbiw	r28, 0x08	; 8
    16bc:	0f b6       	in	r0, 0x3f	; 63
    16be:	f8 94       	cli
    16c0:	de bf       	out	0x3e, r29	; 62
    16c2:	0f be       	out	0x3f, r0	; 63
    16c4:	cd bf       	out	0x3d, r28	; 61
    16c6:	1c 01       	movw	r2, r24
    16c8:	6f 83       	std	Y+7, r22	; 0x07
    16ca:	78 87       	std	Y+8, r23	; 0x08
    16cc:	29 01       	movw	r4, r18
    16ce:	3a 01       	movw	r6, r20
    16d0:	e9 82       	std	Y+1, r14	; 0x01
    16d2:	fa 82       	std	Y+2, r15	; 0x02
    16d4:	0b 83       	std	Y+3, r16	; 0x03
    16d6:	1c 83       	std	Y+4, r17	; 0x04
    16d8:	de 82       	std	Y+6, r13	; 0x06
    16da:	cd 82       	std	Y+5, r12	; 0x05
    16dc:	f4 01       	movw	r30, r8
    16de:	c1 80       	ldd	r12, Z+1	; 0x01
    16e0:	d2 80       	ldd	r13, Z+2	; 0x02
    16e2:	e3 80       	ldd	r14, Z+3	; 0x03
    16e4:	f4 80       	ldd	r15, Z+4	; 0x04
    16e6:	20 e0       	ldi	r18, 0x00	; 0
    16e8:	30 e0       	ldi	r19, 0x00	; 0
    16ea:	a9 01       	movw	r20, r18
    16ec:	c7 01       	movw	r24, r14
    16ee:	b6 01       	movw	r22, r12
    16f0:	0e 94 a5 12 	call	0x254a	; 0x254a <__cmpsf2>
    16f4:	81 11       	cpse	r24, r1
    16f6:	0d c0       	rjmp	.+26     	; 0x1712 <print_data+0x80>
    16f8:	20 e0       	ldi	r18, 0x00	; 0
    16fa:	30 e0       	ldi	r19, 0x00	; 0
    16fc:	40 e8       	ldi	r20, 0x80	; 128
    16fe:	5f e3       	ldi	r21, 0x3F	; 63
    1700:	c7 01       	movw	r24, r14
    1702:	b6 01       	movw	r22, r12
    1704:	0e 94 c7 11 	call	0x238e	; 0x238e <__addsf3>
    1708:	f4 01       	movw	r30, r8
    170a:	61 83       	std	Z+1, r22	; 0x01
    170c:	72 83       	std	Z+2, r23	; 0x02
    170e:	83 83       	std	Z+3, r24	; 0x03
    1710:	94 83       	std	Z+4, r25	; 0x04
    1712:	20 e0       	ldi	r18, 0x00	; 0
    1714:	30 e0       	ldi	r19, 0x00	; 0
    1716:	45 e7       	ldi	r20, 0x75	; 117
    1718:	53 ec       	ldi	r21, 0xC3	; 195
    171a:	f4 01       	movw	r30, r8
    171c:	65 81       	ldd	r22, Z+5	; 0x05
    171e:	76 81       	ldd	r23, Z+6	; 0x06
    1720:	87 81       	ldd	r24, Z+7	; 0x07
    1722:	90 85       	ldd	r25, Z+8	; 0x08
    1724:	0e 94 a5 12 	call	0x254a	; 0x254a <__cmpsf2>
    1728:	81 11       	cpse	r24, r1
    172a:	09 c0       	rjmp	.+18     	; 0x173e <print_data+0xac>
    172c:	80 e0       	ldi	r24, 0x00	; 0
    172e:	90 e0       	ldi	r25, 0x00	; 0
    1730:	a4 e7       	ldi	r26, 0x74	; 116
    1732:	b3 ec       	ldi	r27, 0xC3	; 195
    1734:	f4 01       	movw	r30, r8
    1736:	85 83       	std	Z+5, r24	; 0x05
    1738:	96 83       	std	Z+6, r25	; 0x06
    173a:	a7 83       	std	Z+7, r26	; 0x07
    173c:	b0 87       	std	Z+8, r27	; 0x08
    173e:	88 ec       	ldi	r24, 0xC8	; 200
    1740:	92 e0       	ldi	r25, 0x02	; 2
    1742:	0e 94 c7 06 	call	0xd8e	; 0xd8e <print_P>
    1746:	81 01       	movw	r16, r2
    1748:	cf 80       	ldd	r12, Y+7	; 0x07
    174a:	d8 84       	ldd	r13, Y+8	; 0x08
    174c:	71 01       	movw	r14, r2
    174e:	f0 e1       	ldi	r31, 0x10	; 16
    1750:	ef 0e       	add	r14, r31
    1752:	f1 1c       	adc	r15, r1
    1754:	85 ec       	ldi	r24, 0xC5	; 197
    1756:	92 e0       	ldi	r25, 0x02	; 2
    1758:	0e 94 c7 06 	call	0xd8e	; 0xd8e <print_P>
    175c:	f8 01       	movw	r30, r16
    175e:	61 91       	ld	r22, Z+
    1760:	71 91       	ld	r23, Z+
    1762:	81 91       	ld	r24, Z+
    1764:	91 91       	ld	r25, Z+
    1766:	8f 01       	movw	r16, r30
    1768:	0e 94 5b 13 	call	0x26b6	; 0x26b6 <__fixsfsi>
    176c:	cb 01       	movw	r24, r22
    176e:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <m_usb_tx_int>
    1772:	82 ec       	ldi	r24, 0xC2	; 194
    1774:	92 e0       	ldi	r25, 0x02	; 2
    1776:	0e 94 c7 06 	call	0xd8e	; 0xd8e <print_P>
    177a:	f6 01       	movw	r30, r12
    177c:	61 91       	ld	r22, Z+
    177e:	71 91       	ld	r23, Z+
    1780:	81 91       	ld	r24, Z+
    1782:	91 91       	ld	r25, Z+
    1784:	6f 01       	movw	r12, r30
    1786:	0e 94 5b 13 	call	0x26b6	; 0x26b6 <__fixsfsi>
    178a:	cb 01       	movw	r24, r22
    178c:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <m_usb_tx_int>
    1790:	8f eb       	ldi	r24, 0xBF	; 191
    1792:	92 e0       	ldi	r25, 0x02	; 2
    1794:	0e 94 c7 06 	call	0xd8e	; 0xd8e <print_P>
    1798:	85 eb       	ldi	r24, 0xB5	; 181
    179a:	92 e0       	ldi	r25, 0x02	; 2
    179c:	0e 94 c7 06 	call	0xd8e	; 0xd8e <print_P>
    17a0:	0e 15       	cp	r16, r14
    17a2:	1f 05       	cpc	r17, r15
    17a4:	b9 f6       	brne	.-82     	; 0x1754 <print_data+0xc2>
    17a6:	8d e0       	ldi	r24, 0x0D	; 13
    17a8:	0e 94 ab 04 	call	0x956	; 0x956 <m_usb_tx_char>
    17ac:	89 ea       	ldi	r24, 0xA9	; 169
    17ae:	92 e0       	ldi	r25, 0x02	; 2
    17b0:	0e 94 c7 06 	call	0xd8e	; 0xd8e <print_P>
    17b4:	8d 81       	ldd	r24, Y+5	; 0x05
    17b6:	9e 81       	ldd	r25, Y+6	; 0x06
    17b8:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <m_usb_tx_int>
    17bc:	8a e9       	ldi	r24, 0x9A	; 154
    17be:	92 e0       	ldi	r25, 0x02	; 2
    17c0:	0e 94 c7 06 	call	0xd8e	; 0xd8e <print_P>
    17c4:	8b e8       	ldi	r24, 0x8B	; 139
    17c6:	92 e0       	ldi	r25, 0x02	; 2
    17c8:	0e 94 c7 06 	call	0xd8e	; 0xd8e <print_P>
    17cc:	c5 01       	movw	r24, r10
    17ce:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <m_usb_tx_int>
    17d2:	8d e0       	ldi	r24, 0x0D	; 13
    17d4:	0e 94 ab 04 	call	0x956	; 0x956 <m_usb_tx_char>
    17d8:	84 e7       	ldi	r24, 0x74	; 116
    17da:	92 e0       	ldi	r25, 0x02	; 2
    17dc:	0e 94 c7 06 	call	0xd8e	; 0xd8e <print_P>
    17e0:	81 e7       	ldi	r24, 0x71	; 113
    17e2:	92 e0       	ldi	r25, 0x02	; 2
    17e4:	0e 94 c7 06 	call	0xd8e	; 0xd8e <print_P>
    17e8:	c3 01       	movw	r24, r6
    17ea:	b2 01       	movw	r22, r4
    17ec:	0e 94 5b 13 	call	0x26b6	; 0x26b6 <__fixsfsi>
    17f0:	cb 01       	movw	r24, r22
    17f2:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <m_usb_tx_int>
    17f6:	8e e6       	ldi	r24, 0x6E	; 110
    17f8:	92 e0       	ldi	r25, 0x02	; 2
    17fa:	0e 94 c7 06 	call	0xd8e	; 0xd8e <print_P>
    17fe:	69 81       	ldd	r22, Y+1	; 0x01
    1800:	7a 81       	ldd	r23, Y+2	; 0x02
    1802:	8b 81       	ldd	r24, Y+3	; 0x03
    1804:	9c 81       	ldd	r25, Y+4	; 0x04
    1806:	0e 94 5b 13 	call	0x26b6	; 0x26b6 <__fixsfsi>
    180a:	cb 01       	movw	r24, r22
    180c:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <m_usb_tx_int>
    1810:	8b e6       	ldi	r24, 0x6B	; 107
    1812:	92 e0       	ldi	r25, 0x02	; 2
    1814:	0e 94 c7 06 	call	0xd8e	; 0xd8e <print_P>
    1818:	86 e5       	ldi	r24, 0x56	; 86
    181a:	92 e0       	ldi	r25, 0x02	; 2
    181c:	0e 94 c7 06 	call	0xd8e	; 0xd8e <print_P>
    1820:	83 e5       	ldi	r24, 0x53	; 83
    1822:	92 e0       	ldi	r25, 0x02	; 2
    1824:	0e 94 c7 06 	call	0xd8e	; 0xd8e <print_P>
    1828:	f4 01       	movw	r30, r8
    182a:	61 81       	ldd	r22, Z+1	; 0x01
    182c:	72 81       	ldd	r23, Z+2	; 0x02
    182e:	83 81       	ldd	r24, Z+3	; 0x03
    1830:	94 81       	ldd	r25, Z+4	; 0x04
    1832:	0e 94 5b 13 	call	0x26b6	; 0x26b6 <__fixsfsi>
    1836:	cb 01       	movw	r24, r22
    1838:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <m_usb_tx_int>
    183c:	80 e5       	ldi	r24, 0x50	; 80
    183e:	92 e0       	ldi	r25, 0x02	; 2
    1840:	0e 94 c7 06 	call	0xd8e	; 0xd8e <print_P>
    1844:	f4 01       	movw	r30, r8
    1846:	65 81       	ldd	r22, Z+5	; 0x05
    1848:	76 81       	ldd	r23, Z+6	; 0x06
    184a:	87 81       	ldd	r24, Z+7	; 0x07
    184c:	90 85       	ldd	r25, Z+8	; 0x08
    184e:	0e 94 5b 13 	call	0x26b6	; 0x26b6 <__fixsfsi>
    1852:	cb 01       	movw	r24, r22
    1854:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <m_usb_tx_int>
    1858:	8d e4       	ldi	r24, 0x4D	; 77
    185a:	92 e0       	ldi	r25, 0x02	; 2
    185c:	0e 94 c7 06 	call	0xd8e	; 0xd8e <print_P>
    1860:	8c e3       	ldi	r24, 0x3C	; 60
    1862:	92 e0       	ldi	r25, 0x02	; 2
    1864:	0e 94 c7 06 	call	0xd8e	; 0xd8e <print_P>
    1868:	20 e0       	ldi	r18, 0x00	; 0
    186a:	30 e0       	ldi	r19, 0x00	; 0
    186c:	44 e3       	ldi	r20, 0x34	; 52
    186e:	53 e4       	ldi	r21, 0x43	; 67
    1870:	f4 01       	movw	r30, r8
    1872:	61 85       	ldd	r22, Z+9	; 0x09
    1874:	72 85       	ldd	r23, Z+10	; 0x0a
    1876:	83 85       	ldd	r24, Z+11	; 0x0b
    1878:	94 85       	ldd	r25, Z+12	; 0x0c
    187a:	0e 94 24 15 	call	0x2a48	; 0x2a48 <__mulsf3>
    187e:	0e 94 5b 13 	call	0x26b6	; 0x26b6 <__fixsfsi>
    1882:	07 2e       	mov	r0, r23
    1884:	00 0c       	add	r0, r0
    1886:	88 0b       	sbc	r24, r24
    1888:	99 0b       	sbc	r25, r25
    188a:	0e 94 93 13 	call	0x2726	; 0x2726 <__floatsisf>
    188e:	2b ed       	ldi	r18, 0xDB	; 219
    1890:	3f e0       	ldi	r19, 0x0F	; 15
    1892:	49 e4       	ldi	r20, 0x49	; 73
    1894:	50 e4       	ldi	r21, 0x40	; 64
    1896:	0e 94 af 12 	call	0x255e	; 0x255e <__divsf3>
    189a:	0e 94 5b 13 	call	0x26b6	; 0x26b6 <__fixsfsi>
    189e:	cb 01       	movw	r24, r22
    18a0:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <m_usb_tx_int>
    18a4:	8d e2       	ldi	r24, 0x2D	; 45
    18a6:	92 e0       	ldi	r25, 0x02	; 2
    18a8:	0e 94 c7 06 	call	0xd8e	; 0xd8e <print_P>
    18ac:	f4 01       	movw	r30, r8
    18ae:	21 81       	ldd	r18, Z+1	; 0x01
    18b0:	32 81       	ldd	r19, Z+2	; 0x02
    18b2:	43 81       	ldd	r20, Z+3	; 0x03
    18b4:	54 81       	ldd	r21, Z+4	; 0x04
    18b6:	60 e0       	ldi	r22, 0x00	; 0
    18b8:	70 e0       	ldi	r23, 0x00	; 0
    18ba:	cb 01       	movw	r24, r22
    18bc:	0e 94 c6 11 	call	0x238c	; 0x238c <__subsf3>
    18c0:	6b 01       	movw	r12, r22
    18c2:	7c 01       	movw	r14, r24
    18c4:	f4 01       	movw	r30, r8
    18c6:	25 81       	ldd	r18, Z+5	; 0x05
    18c8:	36 81       	ldd	r19, Z+6	; 0x06
    18ca:	47 81       	ldd	r20, Z+7	; 0x07
    18cc:	50 85       	ldd	r21, Z+8	; 0x08
    18ce:	60 e0       	ldi	r22, 0x00	; 0
    18d0:	70 e0       	ldi	r23, 0x00	; 0
    18d2:	85 e7       	ldi	r24, 0x75	; 117
    18d4:	93 ec       	ldi	r25, 0xC3	; 195
    18d6:	0e 94 c6 11 	call	0x238c	; 0x238c <__subsf3>
    18da:	a7 01       	movw	r20, r14
    18dc:	96 01       	movw	r18, r12
    18de:	0e 94 46 12 	call	0x248c	; 0x248c <atan2>
    18e2:	20 e0       	ldi	r18, 0x00	; 0
    18e4:	30 e0       	ldi	r19, 0x00	; 0
    18e6:	44 e3       	ldi	r20, 0x34	; 52
    18e8:	53 e4       	ldi	r21, 0x43	; 67
    18ea:	0e 94 24 15 	call	0x2a48	; 0x2a48 <__mulsf3>
    18ee:	2b ed       	ldi	r18, 0xDB	; 219
    18f0:	3f e0       	ldi	r19, 0x0F	; 15
    18f2:	49 e4       	ldi	r20, 0x49	; 73
    18f4:	50 e4       	ldi	r21, 0x40	; 64
    18f6:	0e 94 af 12 	call	0x255e	; 0x255e <__divsf3>
    18fa:	0e 94 5b 13 	call	0x26b6	; 0x26b6 <__fixsfsi>
    18fe:	cb 01       	movw	r24, r22
    1900:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <m_usb_tx_int>
    1904:	8d e0       	ldi	r24, 0x0D	; 13
    1906:	0e 94 ab 04 	call	0x956	; 0x956 <m_usb_tx_char>
    190a:	8d e0       	ldi	r24, 0x0D	; 13
    190c:	0e 94 ab 04 	call	0x956	; 0x956 <m_usb_tx_char>
    1910:	28 96       	adiw	r28, 0x08	; 8
    1912:	0f b6       	in	r0, 0x3f	; 63
    1914:	f8 94       	cli
    1916:	de bf       	out	0x3e, r29	; 62
    1918:	0f be       	out	0x3f, r0	; 63
    191a:	cd bf       	out	0x3d, r28	; 61
    191c:	df 91       	pop	r29
    191e:	cf 91       	pop	r28
    1920:	1f 91       	pop	r17
    1922:	0f 91       	pop	r16
    1924:	ff 90       	pop	r15
    1926:	ef 90       	pop	r14
    1928:	df 90       	pop	r13
    192a:	cf 90       	pop	r12
    192c:	bf 90       	pop	r11
    192e:	af 90       	pop	r10
    1930:	9f 90       	pop	r9
    1932:	8f 90       	pop	r8
    1934:	7f 90       	pop	r7
    1936:	6f 90       	pop	r6
    1938:	5f 90       	pop	r5
    193a:	4f 90       	pop	r4
    193c:	3f 90       	pop	r3
    193e:	2f 90       	pop	r2
    1940:	08 95       	ret

00001942 <init_robot>:
    1942:	fc 01       	movw	r30, r24
    1944:	11 82       	std	Z+1, r1	; 0x01
    1946:	12 82       	std	Z+2, r1	; 0x02
    1948:	13 82       	std	Z+3, r1	; 0x03
    194a:	14 82       	std	Z+4, r1	; 0x04
    194c:	15 82       	std	Z+5, r1	; 0x05
    194e:	16 82       	std	Z+6, r1	; 0x06
    1950:	17 82       	std	Z+7, r1	; 0x07
    1952:	10 86       	std	Z+8, r1	; 0x08
    1954:	11 86       	std	Z+9, r1	; 0x09
    1956:	12 86       	std	Z+10, r1	; 0x0a
    1958:	13 86       	std	Z+11, r1	; 0x0b
    195a:	14 86       	std	Z+12, r1	; 0x0c
    195c:	10 82       	st	Z, r1
    195e:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <active>
    1962:	08 95       	ret

00001964 <interpret>:
}

/* Interpret the measurement vector returned by mWii and update Robot struct data */
void interpret(Robot* robot, unsigned int* measurement){
    1964:	2f 92       	push	r2
    1966:	3f 92       	push	r3
    1968:	4f 92       	push	r4
    196a:	5f 92       	push	r5
    196c:	6f 92       	push	r6
    196e:	7f 92       	push	r7
    1970:	8f 92       	push	r8
    1972:	9f 92       	push	r9
    1974:	af 92       	push	r10
    1976:	bf 92       	push	r11
    1978:	cf 92       	push	r12
    197a:	df 92       	push	r13
    197c:	ef 92       	push	r14
    197e:	ff 92       	push	r15
    1980:	0f 93       	push	r16
    1982:	1f 93       	push	r17
    1984:	cf 93       	push	r28
    1986:	df 93       	push	r29
    1988:	cd b7       	in	r28, 0x3d	; 61
    198a:	de b7       	in	r29, 0x3e	; 62
    198c:	c7 56       	subi	r28, 0x67	; 103
    198e:	d1 09       	sbc	r29, r1
    1990:	0f b6       	in	r0, 0x3f	; 63
    1992:	f8 94       	cli
    1994:	de bf       	out	0x3e, r29	; 62
    1996:	0f be       	out	0x3f, r0	; 63
    1998:	cd bf       	out	0x3d, r28	; 61
    199a:	a8 96       	adiw	r28, 0x28	; 40
    199c:	9f af       	std	Y+63, r25	; 0x3f
    199e:	8e af       	std	Y+62, r24	; 0x3e
    19a0:	a8 97       	sbiw	r28, 0x28	; 40
    19a2:	8b 01       	movw	r16, r22
	// Star coordinates centered around the origin in order of distance from origin
	float const CENTERED_STARS[4][2] = {{-0.2730, -17.3060}, {11.3820, 5.9350}, {-0.2730, 11.6940}, {-10.8360, -0.3230}}; // cm

	// Extract x and y data from measurement
	float mWii_x[] = { (float) (measurement[0]-512.0), (float) (measurement[3]-512.0), (float) (measurement[6]-512.0), (float) (measurement[9]-512.0) };
    19a4:	db 01       	movw	r26, r22
    19a6:	6d 91       	ld	r22, X+
    19a8:	7c 91       	ld	r23, X
    19aa:	80 e0       	ldi	r24, 0x00	; 0
    19ac:	90 e0       	ldi	r25, 0x00	; 0
    19ae:	0e 94 91 13 	call	0x2722	; 0x2722 <__floatunsisf>
    19b2:	20 e0       	ldi	r18, 0x00	; 0
    19b4:	30 e0       	ldi	r19, 0x00	; 0
    19b6:	40 e0       	ldi	r20, 0x00	; 0
    19b8:	54 e4       	ldi	r21, 0x44	; 68
    19ba:	0e 94 c6 11 	call	0x238c	; 0x238c <__subsf3>
    19be:	69 83       	std	Y+1, r22	; 0x01
    19c0:	7a 83       	std	Y+2, r23	; 0x02
    19c2:	8b 83       	std	Y+3, r24	; 0x03
    19c4:	9c 83       	std	Y+4, r25	; 0x04
    19c6:	f8 01       	movw	r30, r16
    19c8:	66 81       	ldd	r22, Z+6	; 0x06
    19ca:	77 81       	ldd	r23, Z+7	; 0x07
    19cc:	80 e0       	ldi	r24, 0x00	; 0
    19ce:	90 e0       	ldi	r25, 0x00	; 0
    19d0:	0e 94 91 13 	call	0x2722	; 0x2722 <__floatunsisf>
    19d4:	20 e0       	ldi	r18, 0x00	; 0
    19d6:	30 e0       	ldi	r19, 0x00	; 0
    19d8:	40 e0       	ldi	r20, 0x00	; 0
    19da:	54 e4       	ldi	r21, 0x44	; 68
    19dc:	0e 94 c6 11 	call	0x238c	; 0x238c <__subsf3>
    19e0:	6d 83       	std	Y+5, r22	; 0x05
    19e2:	7e 83       	std	Y+6, r23	; 0x06
    19e4:	8f 83       	std	Y+7, r24	; 0x07
    19e6:	98 87       	std	Y+8, r25	; 0x08
    19e8:	d8 01       	movw	r26, r16
    19ea:	1c 96       	adiw	r26, 0x0c	; 12
    19ec:	6d 91       	ld	r22, X+
    19ee:	7c 91       	ld	r23, X
    19f0:	1d 97       	sbiw	r26, 0x0d	; 13
    19f2:	80 e0       	ldi	r24, 0x00	; 0
    19f4:	90 e0       	ldi	r25, 0x00	; 0
    19f6:	0e 94 91 13 	call	0x2722	; 0x2722 <__floatunsisf>
    19fa:	20 e0       	ldi	r18, 0x00	; 0
    19fc:	30 e0       	ldi	r19, 0x00	; 0
    19fe:	40 e0       	ldi	r20, 0x00	; 0
    1a00:	54 e4       	ldi	r21, 0x44	; 68
    1a02:	0e 94 c6 11 	call	0x238c	; 0x238c <__subsf3>
    1a06:	69 87       	std	Y+9, r22	; 0x09
    1a08:	7a 87       	std	Y+10, r23	; 0x0a
    1a0a:	8b 87       	std	Y+11, r24	; 0x0b
    1a0c:	9c 87       	std	Y+12, r25	; 0x0c
    1a0e:	f8 01       	movw	r30, r16
    1a10:	62 89       	ldd	r22, Z+18	; 0x12
    1a12:	73 89       	ldd	r23, Z+19	; 0x13
    1a14:	80 e0       	ldi	r24, 0x00	; 0
    1a16:	90 e0       	ldi	r25, 0x00	; 0
    1a18:	0e 94 91 13 	call	0x2722	; 0x2722 <__floatunsisf>
    1a1c:	20 e0       	ldi	r18, 0x00	; 0
    1a1e:	30 e0       	ldi	r19, 0x00	; 0
    1a20:	40 e0       	ldi	r20, 0x00	; 0
    1a22:	54 e4       	ldi	r21, 0x44	; 68
    1a24:	0e 94 c6 11 	call	0x238c	; 0x238c <__subsf3>
    1a28:	6d 87       	std	Y+13, r22	; 0x0d
    1a2a:	7e 87       	std	Y+14, r23	; 0x0e
    1a2c:	8f 87       	std	Y+15, r24	; 0x0f
    1a2e:	98 8b       	std	Y+16, r25	; 0x10
	// Flipping y to right-handed coordinate system
	float mWii_y[] = { (float) -(measurement[1]-384.0), (float) -(measurement[4]-384.0), (float) -(measurement[7]-384.0), (float) -(measurement[10]-384.0) };
    1a30:	d8 01       	movw	r26, r16
    1a32:	12 96       	adiw	r26, 0x02	; 2
    1a34:	6d 91       	ld	r22, X+
    1a36:	7c 91       	ld	r23, X
    1a38:	13 97       	sbiw	r26, 0x03	; 3
    1a3a:	80 e0       	ldi	r24, 0x00	; 0
    1a3c:	90 e0       	ldi	r25, 0x00	; 0
    1a3e:	0e 94 91 13 	call	0x2722	; 0x2722 <__floatunsisf>
    1a42:	20 e0       	ldi	r18, 0x00	; 0
    1a44:	30 e0       	ldi	r19, 0x00	; 0
    1a46:	40 ec       	ldi	r20, 0xC0	; 192
    1a48:	53 e4       	ldi	r21, 0x43	; 67
    1a4a:	0e 94 c6 11 	call	0x238c	; 0x238c <__subsf3>
    1a4e:	dc 01       	movw	r26, r24
    1a50:	cb 01       	movw	r24, r22
    1a52:	b0 58       	subi	r27, 0x80	; 128
    1a54:	89 8b       	std	Y+17, r24	; 0x11
    1a56:	9a 8b       	std	Y+18, r25	; 0x12
    1a58:	ab 8b       	std	Y+19, r26	; 0x13
    1a5a:	bc 8b       	std	Y+20, r27	; 0x14
    1a5c:	f8 01       	movw	r30, r16
    1a5e:	60 85       	ldd	r22, Z+8	; 0x08
    1a60:	71 85       	ldd	r23, Z+9	; 0x09
    1a62:	80 e0       	ldi	r24, 0x00	; 0
    1a64:	90 e0       	ldi	r25, 0x00	; 0
    1a66:	0e 94 91 13 	call	0x2722	; 0x2722 <__floatunsisf>
    1a6a:	20 e0       	ldi	r18, 0x00	; 0
    1a6c:	30 e0       	ldi	r19, 0x00	; 0
    1a6e:	40 ec       	ldi	r20, 0xC0	; 192
    1a70:	53 e4       	ldi	r21, 0x43	; 67
    1a72:	0e 94 c6 11 	call	0x238c	; 0x238c <__subsf3>
    1a76:	dc 01       	movw	r26, r24
    1a78:	cb 01       	movw	r24, r22
    1a7a:	b0 58       	subi	r27, 0x80	; 128
    1a7c:	8d 8b       	std	Y+21, r24	; 0x15
    1a7e:	9e 8b       	std	Y+22, r25	; 0x16
    1a80:	af 8b       	std	Y+23, r26	; 0x17
    1a82:	b8 8f       	std	Y+24, r27	; 0x18
    1a84:	d8 01       	movw	r26, r16
    1a86:	1e 96       	adiw	r26, 0x0e	; 14
    1a88:	6d 91       	ld	r22, X+
    1a8a:	7c 91       	ld	r23, X
    1a8c:	1f 97       	sbiw	r26, 0x0f	; 15
    1a8e:	80 e0       	ldi	r24, 0x00	; 0
    1a90:	90 e0       	ldi	r25, 0x00	; 0
    1a92:	0e 94 91 13 	call	0x2722	; 0x2722 <__floatunsisf>
    1a96:	20 e0       	ldi	r18, 0x00	; 0
    1a98:	30 e0       	ldi	r19, 0x00	; 0
    1a9a:	40 ec       	ldi	r20, 0xC0	; 192
    1a9c:	53 e4       	ldi	r21, 0x43	; 67
    1a9e:	0e 94 c6 11 	call	0x238c	; 0x238c <__subsf3>
    1aa2:	dc 01       	movw	r26, r24
    1aa4:	cb 01       	movw	r24, r22
    1aa6:	b0 58       	subi	r27, 0x80	; 128
    1aa8:	89 8f       	std	Y+25, r24	; 0x19
    1aaa:	9a 8f       	std	Y+26, r25	; 0x1a
    1aac:	ab 8f       	std	Y+27, r26	; 0x1b
    1aae:	bc 8f       	std	Y+28, r27	; 0x1c
    1ab0:	f8 01       	movw	r30, r16
    1ab2:	64 89       	ldd	r22, Z+20	; 0x14
    1ab4:	75 89       	ldd	r23, Z+21	; 0x15
    1ab6:	80 e0       	ldi	r24, 0x00	; 0
    1ab8:	90 e0       	ldi	r25, 0x00	; 0
    1aba:	0e 94 91 13 	call	0x2722	; 0x2722 <__floatunsisf>
    1abe:	20 e0       	ldi	r18, 0x00	; 0
    1ac0:	30 e0       	ldi	r19, 0x00	; 0
    1ac2:	40 ec       	ldi	r20, 0xC0	; 192
    1ac4:	53 e4       	ldi	r21, 0x43	; 67
    1ac6:	0e 94 c6 11 	call	0x238c	; 0x238c <__subsf3>
    1aca:	dc 01       	movw	r26, r24
    1acc:	cb 01       	movw	r24, r22
    1ace:	b0 58       	subi	r27, 0x80	; 128
    1ad0:	8d 8f       	std	Y+29, r24	; 0x1d
    1ad2:	9e 8f       	std	Y+30, r25	; 0x1e
    1ad4:	af 8f       	std	Y+31, r26	; 0x1f
    1ad6:	b8 a3       	std	Y+32, r27	; 0x20
    1ad8:	9e 01       	movw	r18, r28
    1ada:	2f 5f       	subi	r18, 0xFF	; 255
    1adc:	3f 4f       	sbci	r19, 0xFF	; 255
    1ade:	49 01       	movw	r8, r18
    1ae0:	5e 01       	movw	r10, r28
    1ae2:	31 e1       	ldi	r19, 0x11	; 17
    1ae4:	a3 0e       	add	r10, r19
    1ae6:	b1 1c       	adc	r11, r1
    1ae8:	15 01       	movw	r2, r10
    1aea:	75 01       	movw	r14, r10
    1aec:	84 01       	movw	r16, r8

	
	////////// Determine translation to origin //////////
	float translation_x = 0, translation_y = 0;
    1aee:	25 96       	adiw	r28, 0x05	; 5
    1af0:	1c ae       	std	Y+60, r1	; 0x3c
    1af2:	1d ae       	std	Y+61, r1	; 0x3d
    1af4:	1e ae       	std	Y+62, r1	; 0x3e
    1af6:	1f ae       	std	Y+63, r1	; 0x3f
    1af8:	25 97       	sbiw	r28, 0x05	; 5
    1afa:	41 2c       	mov	r4, r1
    1afc:	51 2c       	mov	r5, r1
    1afe:	32 01       	movw	r6, r4
	for (int i = 0; i < 4; i++) {
		translation_x += mWii_x[i];
    1b00:	d8 01       	movw	r26, r16
    1b02:	2d 91       	ld	r18, X+
    1b04:	3d 91       	ld	r19, X+
    1b06:	4d 91       	ld	r20, X+
    1b08:	5d 91       	ld	r21, X+
    1b0a:	8d 01       	movw	r16, r26
    1b0c:	c3 01       	movw	r24, r6
    1b0e:	b2 01       	movw	r22, r4
    1b10:	0e 94 c7 11 	call	0x238e	; 0x238e <__addsf3>
    1b14:	2b 01       	movw	r4, r22
    1b16:	3c 01       	movw	r6, r24
		translation_y += mWii_y[i];
    1b18:	f7 01       	movw	r30, r14
    1b1a:	21 91       	ld	r18, Z+
    1b1c:	31 91       	ld	r19, Z+
    1b1e:	41 91       	ld	r20, Z+
    1b20:	51 91       	ld	r21, Z+
    1b22:	7f 01       	movw	r14, r30
    1b24:	25 96       	adiw	r28, 0x05	; 5
    1b26:	6c ad       	ldd	r22, Y+60	; 0x3c
    1b28:	7d ad       	ldd	r23, Y+61	; 0x3d
    1b2a:	8e ad       	ldd	r24, Y+62	; 0x3e
    1b2c:	9f ad       	ldd	r25, Y+63	; 0x3f
    1b2e:	25 97       	sbiw	r28, 0x05	; 5
    1b30:	0e 94 c7 11 	call	0x238e	; 0x238e <__addsf3>
    1b34:	25 96       	adiw	r28, 0x05	; 5
    1b36:	6c af       	std	Y+60, r22	; 0x3c
    1b38:	7d af       	std	Y+61, r23	; 0x3d
    1b3a:	8e af       	std	Y+62, r24	; 0x3e
    1b3c:	9f af       	std	Y+63, r25	; 0x3f
    1b3e:	25 97       	sbiw	r28, 0x05	; 5
	float mWii_y[] = { (float) -(measurement[1]-384.0), (float) -(measurement[4]-384.0), (float) -(measurement[7]-384.0), (float) -(measurement[10]-384.0) };

	
	////////// Determine translation to origin //////////
	float translation_x = 0, translation_y = 0;
	for (int i = 0; i < 4; i++) {
    1b40:	02 15       	cp	r16, r2
    1b42:	13 05       	cpc	r17, r3
    1b44:	e9 f6       	brne	.-70     	; 0x1b00 <interpret+0x19c>
		translation_x += mWii_x[i];
		translation_y += mWii_y[i];
	}
	translation_x /= 4.0;
    1b46:	20 e0       	ldi	r18, 0x00	; 0
    1b48:	30 e0       	ldi	r19, 0x00	; 0
    1b4a:	40 e8       	ldi	r20, 0x80	; 128
    1b4c:	5e e3       	ldi	r21, 0x3E	; 62
    1b4e:	c3 01       	movw	r24, r6
    1b50:	b2 01       	movw	r22, r4
    1b52:	0e 94 24 15 	call	0x2a48	; 0x2a48 <__mulsf3>
    1b56:	6a 96       	adiw	r28, 0x1a	; 26
    1b58:	6c af       	std	Y+60, r22	; 0x3c
    1b5a:	7d af       	std	Y+61, r23	; 0x3d
    1b5c:	8e af       	std	Y+62, r24	; 0x3e
    1b5e:	9f af       	std	Y+63, r25	; 0x3f
    1b60:	6a 97       	sbiw	r28, 0x1a	; 26
	translation_y /= 4.0;
    1b62:	20 e0       	ldi	r18, 0x00	; 0
    1b64:	30 e0       	ldi	r19, 0x00	; 0
    1b66:	40 e8       	ldi	r20, 0x80	; 128
    1b68:	5e e3       	ldi	r21, 0x3E	; 62
    1b6a:	25 96       	adiw	r28, 0x05	; 5
    1b6c:	6c ad       	ldd	r22, Y+60	; 0x3c
    1b6e:	7d ad       	ldd	r23, Y+61	; 0x3d
    1b70:	8e ad       	ldd	r24, Y+62	; 0x3e
    1b72:	9f ad       	ldd	r25, Y+63	; 0x3f
    1b74:	25 97       	sbiw	r28, 0x05	; 5
    1b76:	0e 94 24 15 	call	0x2a48	; 0x2a48 <__mulsf3>
    1b7a:	6e 96       	adiw	r28, 0x1e	; 30
    1b7c:	6c af       	std	Y+60, r22	; 0x3c
    1b7e:	7d af       	std	Y+61, r23	; 0x3d
    1b80:	8e af       	std	Y+62, r24	; 0x3e
    1b82:	9f af       	std	Y+63, r25	; 0x3f
    1b84:	6e 97       	sbiw	r28, 0x1e	; 30
    1b86:	35 01       	movw	r6, r10
    1b88:	84 01       	movw	r16, r8

	////////// Find mWii and star scale //////////
	float mWii_scale = 0.0, star_scale = 0.0;
    1b8a:	25 96       	adiw	r28, 0x05	; 5
    1b8c:	1c ae       	std	Y+60, r1	; 0x3c
    1b8e:	1d ae       	std	Y+61, r1	; 0x3d
    1b90:	1e ae       	std	Y+62, r1	; 0x3e
    1b92:	1f ae       	std	Y+63, r1	; 0x3f
    1b94:	25 97       	sbiw	r28, 0x05	; 5

	for (int i = 0; i < 4; i++) {
		mWii_scale += powf(mWii_x[i] - translation_x, 2.0) + powf(mWii_y[i] - translation_y, 2.0);
    1b96:	d8 01       	movw	r26, r16
    1b98:	6d 91       	ld	r22, X+
    1b9a:	7d 91       	ld	r23, X+
    1b9c:	8d 91       	ld	r24, X+
    1b9e:	9d 91       	ld	r25, X+
    1ba0:	8d 01       	movw	r16, r26
    1ba2:	6a 96       	adiw	r28, 0x1a	; 26
    1ba4:	2c ad       	ldd	r18, Y+60	; 0x3c
    1ba6:	3d ad       	ldd	r19, Y+61	; 0x3d
    1ba8:	4e ad       	ldd	r20, Y+62	; 0x3e
    1baa:	5f ad       	ldd	r21, Y+63	; 0x3f
    1bac:	6a 97       	sbiw	r28, 0x1a	; 26
    1bae:	0e 94 c6 11 	call	0x238c	; 0x238c <__subsf3>
    1bb2:	6b 01       	movw	r12, r22
    1bb4:	7c 01       	movw	r14, r24
    1bb6:	f3 01       	movw	r30, r6
    1bb8:	61 91       	ld	r22, Z+
    1bba:	71 91       	ld	r23, Z+
    1bbc:	81 91       	ld	r24, Z+
    1bbe:	91 91       	ld	r25, Z+
    1bc0:	3f 01       	movw	r6, r30
    1bc2:	6e 96       	adiw	r28, 0x1e	; 30
    1bc4:	2c ad       	ldd	r18, Y+60	; 0x3c
    1bc6:	3d ad       	ldd	r19, Y+61	; 0x3d
    1bc8:	4e ad       	ldd	r20, Y+62	; 0x3e
    1bca:	5f ad       	ldd	r21, Y+63	; 0x3f
    1bcc:	6e 97       	sbiw	r28, 0x1e	; 30
    1bce:	0e 94 c6 11 	call	0x238c	; 0x238c <__subsf3>
    1bd2:	9b 01       	movw	r18, r22
    1bd4:	ac 01       	movw	r20, r24
    1bd6:	0e 94 24 15 	call	0x2a48	; 0x2a48 <__mulsf3>
    1bda:	29 96       	adiw	r28, 0x09	; 9
    1bdc:	6c af       	std	Y+60, r22	; 0x3c
    1bde:	7d af       	std	Y+61, r23	; 0x3d
    1be0:	8e af       	std	Y+62, r24	; 0x3e
    1be2:	9f af       	std	Y+63, r25	; 0x3f
    1be4:	29 97       	sbiw	r28, 0x09	; 9
    1be6:	a7 01       	movw	r20, r14
    1be8:	96 01       	movw	r18, r12
    1bea:	c7 01       	movw	r24, r14
    1bec:	b6 01       	movw	r22, r12
    1bee:	0e 94 24 15 	call	0x2a48	; 0x2a48 <__mulsf3>
    1bf2:	9b 01       	movw	r18, r22
    1bf4:	ac 01       	movw	r20, r24
    1bf6:	29 96       	adiw	r28, 0x09	; 9
    1bf8:	6c ad       	ldd	r22, Y+60	; 0x3c
    1bfa:	7d ad       	ldd	r23, Y+61	; 0x3d
    1bfc:	8e ad       	ldd	r24, Y+62	; 0x3e
    1bfe:	9f ad       	ldd	r25, Y+63	; 0x3f
    1c00:	29 97       	sbiw	r28, 0x09	; 9
    1c02:	0e 94 c7 11 	call	0x238e	; 0x238e <__addsf3>
    1c06:	9b 01       	movw	r18, r22
    1c08:	ac 01       	movw	r20, r24
    1c0a:	25 96       	adiw	r28, 0x05	; 5
    1c0c:	6c ad       	ldd	r22, Y+60	; 0x3c
    1c0e:	7d ad       	ldd	r23, Y+61	; 0x3d
    1c10:	8e ad       	ldd	r24, Y+62	; 0x3e
    1c12:	9f ad       	ldd	r25, Y+63	; 0x3f
    1c14:	25 97       	sbiw	r28, 0x05	; 5
    1c16:	0e 94 c7 11 	call	0x238e	; 0x238e <__addsf3>
    1c1a:	25 96       	adiw	r28, 0x05	; 5
    1c1c:	6c af       	std	Y+60, r22	; 0x3c
    1c1e:	7d af       	std	Y+61, r23	; 0x3d
    1c20:	8e af       	std	Y+62, r24	; 0x3e
    1c22:	9f af       	std	Y+63, r25	; 0x3f
    1c24:	25 97       	sbiw	r28, 0x05	; 5
	translation_y /= 4.0;

	////////// Find mWii and star scale //////////
	float mWii_scale = 0.0, star_scale = 0.0;

	for (int i = 0; i < 4; i++) {
    1c26:	02 15       	cp	r16, r2
    1c28:	13 05       	cpc	r17, r3
    1c2a:	09 f0       	breq	.+2      	; 0x1c2e <interpret+0x2ca>
    1c2c:	b4 cf       	rjmp	.-152    	; 0x1b96 <interpret+0x232>
		mWii_scale += powf(mWii_x[i] - translation_x, 2.0) + powf(mWii_y[i] - translation_y, 2.0);
		star_scale += powf(CENTERED_STARS[i][0], 2.0) + powf(CENTERED_STARS[i][1], 2.0);
	}
	
	mWii_scale = powf(mWii_scale / 4.0, 0.5);
    1c2e:	20 e0       	ldi	r18, 0x00	; 0
    1c30:	30 e0       	ldi	r19, 0x00	; 0
    1c32:	40 e8       	ldi	r20, 0x80	; 128
    1c34:	5e e3       	ldi	r21, 0x3E	; 62
    1c36:	0e 94 24 15 	call	0x2a48	; 0x2a48 <__mulsf3>
    1c3a:	20 e0       	ldi	r18, 0x00	; 0
    1c3c:	30 e0       	ldi	r19, 0x00	; 0
    1c3e:	40 e0       	ldi	r20, 0x00	; 0
    1c40:	5f e3       	ldi	r21, 0x3F	; 63
    1c42:	0e 94 91 15 	call	0x2b22	; 0x2b22 <pow>
    1c46:	e6 2e       	mov	r14, r22
    1c48:	f7 2e       	mov	r15, r23
    1c4a:	08 2f       	mov	r16, r24
    1c4c:	19 2f       	mov	r17, r25
    1c4e:	2e 01       	movw	r4, r28
    1c50:	f1 e2       	ldi	r31, 0x21	; 33
    1c52:	4f 0e       	add	r4, r31
    1c54:	51 1c       	adc	r5, r1
    1c56:	9e 01       	movw	r18, r28
    1c58:	2f 5c       	subi	r18, 0xCF	; 207
    1c5a:	3f 4f       	sbci	r19, 0xFF	; 255
    1c5c:	a2 96       	adiw	r28, 0x22	; 34
    1c5e:	3f af       	std	Y+63, r19	; 0x3f
    1c60:	2e af       	std	Y+62, r18	; 0x3e
    1c62:	a2 97       	sbiw	r28, 0x22	; 34
    1c64:	69 01       	movw	r12, r18
    1c66:	32 01       	movw	r6, r4
	star_scale = powf(star_scale / 4.0, 0.5);

	// Scale points to uniform scale (0 to 1)
	float mx[4], my[4];
	for (int i = 0; i < 4; i++) {
		mx[i] = (mWii_x[i] - translation_x) / mWii_scale;
    1c68:	d4 01       	movw	r26, r8
    1c6a:	6d 91       	ld	r22, X+
    1c6c:	7d 91       	ld	r23, X+
    1c6e:	8d 91       	ld	r24, X+
    1c70:	9d 91       	ld	r25, X+
    1c72:	4d 01       	movw	r8, r26
    1c74:	6a 96       	adiw	r28, 0x1a	; 26
    1c76:	2c ad       	ldd	r18, Y+60	; 0x3c
    1c78:	3d ad       	ldd	r19, Y+61	; 0x3d
    1c7a:	4e ad       	ldd	r20, Y+62	; 0x3e
    1c7c:	5f ad       	ldd	r21, Y+63	; 0x3f
    1c7e:	6a 97       	sbiw	r28, 0x1a	; 26
    1c80:	0e 94 c6 11 	call	0x238c	; 0x238c <__subsf3>
    1c84:	2e 2d       	mov	r18, r14
    1c86:	3f 2d       	mov	r19, r15
    1c88:	40 2f       	mov	r20, r16
    1c8a:	51 2f       	mov	r21, r17
    1c8c:	0e 94 af 12 	call	0x255e	; 0x255e <__divsf3>
    1c90:	f3 01       	movw	r30, r6
    1c92:	61 93       	st	Z+, r22
    1c94:	71 93       	st	Z+, r23
    1c96:	81 93       	st	Z+, r24
    1c98:	91 93       	st	Z+, r25
    1c9a:	3f 01       	movw	r6, r30
		my[i] = (mWii_y[i] - translation_y) / mWii_scale;
    1c9c:	d5 01       	movw	r26, r10
    1c9e:	6d 91       	ld	r22, X+
    1ca0:	7d 91       	ld	r23, X+
    1ca2:	8d 91       	ld	r24, X+
    1ca4:	9d 91       	ld	r25, X+
    1ca6:	5d 01       	movw	r10, r26
    1ca8:	6e 96       	adiw	r28, 0x1e	; 30
    1caa:	2c ad       	ldd	r18, Y+60	; 0x3c
    1cac:	3d ad       	ldd	r19, Y+61	; 0x3d
    1cae:	4e ad       	ldd	r20, Y+62	; 0x3e
    1cb0:	5f ad       	ldd	r21, Y+63	; 0x3f
    1cb2:	6e 97       	sbiw	r28, 0x1e	; 30
    1cb4:	0e 94 c6 11 	call	0x238c	; 0x238c <__subsf3>
    1cb8:	2e 2d       	mov	r18, r14
    1cba:	3f 2d       	mov	r19, r15
    1cbc:	40 2f       	mov	r20, r16
    1cbe:	51 2f       	mov	r21, r17
    1cc0:	0e 94 af 12 	call	0x255e	; 0x255e <__divsf3>
    1cc4:	f6 01       	movw	r30, r12
    1cc6:	61 93       	st	Z+, r22
    1cc8:	71 93       	st	Z+, r23
    1cca:	81 93       	st	Z+, r24
    1ccc:	91 93       	st	Z+, r25
    1cce:	6f 01       	movw	r12, r30
	mWii_scale = powf(mWii_scale / 4.0, 0.5);
	star_scale = powf(star_scale / 4.0, 0.5);

	// Scale points to uniform scale (0 to 1)
	float mx[4], my[4];
	for (int i = 0; i < 4; i++) {
    1cd0:	82 14       	cp	r8, r2
    1cd2:	93 04       	cpc	r9, r3
    1cd4:	49 f6       	brne	.-110    	; 0x1c68 <interpret+0x304>
    1cd6:	27 96       	adiw	r28, 0x07	; 7
    1cd8:	1f ae       	std	Y+63, r1	; 0x3f
    1cda:	1e ae       	std	Y+62, r1	; 0x3e
    1cdc:	27 97       	sbiw	r28, 0x07	; 7
    1cde:	21 e0       	ldi	r18, 0x01	; 1
    1ce0:	30 e0       	ldi	r19, 0x00	; 0
    1ce2:	a4 96       	adiw	r28, 0x24	; 36
    1ce4:	3f af       	std	Y+63, r19	; 0x3f
    1ce6:	2e af       	std	Y+62, r18	; 0x3e
    1ce8:	a4 97       	sbiw	r28, 0x24	; 36
    1cea:	80 e0       	ldi	r24, 0x00	; 0
    1cec:	90 e0       	ldi	r25, 0x00	; 0
    1cee:	2a 96       	adiw	r28, 0x0a	; 10
    1cf0:	1f ae       	std	Y+63, r1	; 0x3f
    1cf2:	2a 97       	sbiw	r28, 0x0a	; 10
    1cf4:	2e 96       	adiw	r28, 0x0e	; 14
    1cf6:	1f ae       	std	Y+63, r1	; 0x3f
    1cf8:	2e 97       	sbiw	r28, 0x0e	; 14
    1cfa:	61 2c       	mov	r6, r1
    1cfc:	71 2c       	mov	r7, r1
    1cfe:	12 01       	movw	r2, r4

	// Get max distance indices
	float max_distance = 0;
	int indices[2] = {0, 1};
	for (int i = 0; i < 3; i++) {
		for (int j = i + 1; j < 4; j++) {
    1d00:	ac 01       	movw	r20, r24
    1d02:	4f 5f       	subi	r20, 0xFF	; 255
    1d04:	5f 4f       	sbci	r21, 0xFF	; 255
    1d06:	a0 96       	adiw	r28, 0x20	; 32
    1d08:	5f af       	std	Y+63, r21	; 0x3f
    1d0a:	4e af       	std	Y+62, r20	; 0x3e
    1d0c:	a0 97       	sbiw	r28, 0x20	; 32
    1d0e:	44 30       	cpi	r20, 0x04	; 4
    1d10:	51 05       	cpc	r21, r1
    1d12:	0c f0       	brlt	.+2      	; 0x1d16 <interpret+0x3b2>
    1d14:	75 c2       	rjmp	.+1258   	; 0x2200 <interpret+0x89c>
			// Get distance between points
			float distance = powf(powf(mx[i] - mx[j], 2.0) + powf(my[i] - my[j], 2.0), 0.5);
    1d16:	d1 01       	movw	r26, r2
    1d18:	2d 91       	ld	r18, X+
    1d1a:	3d 91       	ld	r19, X+
    1d1c:	4d 91       	ld	r20, X+
    1d1e:	5d 91       	ld	r21, X+
    1d20:	4d 01       	movw	r8, r26
    1d22:	62 96       	adiw	r28, 0x12	; 18
    1d24:	2c af       	std	Y+60, r18	; 0x3c
    1d26:	3d af       	std	Y+61, r19	; 0x3d
    1d28:	4e af       	std	Y+62, r20	; 0x3e
    1d2a:	5f af       	std	Y+63, r21	; 0x3f
    1d2c:	62 97       	sbiw	r28, 0x12	; 18
    1d2e:	a2 96       	adiw	r28, 0x22	; 34
    1d30:	ae ac       	ldd	r10, Y+62	; 0x3e
    1d32:	bf ac       	ldd	r11, Y+63	; 0x3f
    1d34:	a2 97       	sbiw	r28, 0x22	; 34
    1d36:	d5 01       	movw	r26, r10
    1d38:	2d 91       	ld	r18, X+
    1d3a:	3d 91       	ld	r19, X+
    1d3c:	4d 91       	ld	r20, X+
    1d3e:	5d 91       	ld	r21, X+
    1d40:	5d 01       	movw	r10, r26
    1d42:	66 96       	adiw	r28, 0x16	; 22
    1d44:	2c af       	std	Y+60, r18	; 0x3c
    1d46:	3d af       	std	Y+61, r19	; 0x3d
    1d48:	4e af       	std	Y+62, r20	; 0x3e
    1d4a:	5f af       	std	Y+63, r21	; 0x3f
    1d4c:	66 97       	sbiw	r28, 0x16	; 22
    1d4e:	a0 96       	adiw	r28, 0x20	; 32
    1d50:	4e ac       	ldd	r4, Y+62	; 0x3e
    1d52:	5f ac       	ldd	r5, Y+63	; 0x3f
    1d54:	a0 97       	sbiw	r28, 0x20	; 32
			// Compare to max distance
			if (distance > max_distance) {
    1d56:	a5 96       	adiw	r28, 0x25	; 37
    1d58:	8f af       	std	Y+63, r24	; 0x3f
    1d5a:	a5 97       	sbiw	r28, 0x25	; 37
    1d5c:	a6 96       	adiw	r28, 0x26	; 38
    1d5e:	9f af       	std	Y+63, r25	; 0x3f
    1d60:	a6 97       	sbiw	r28, 0x26	; 38
	float max_distance = 0;
	int indices[2] = {0, 1};
	for (int i = 0; i < 3; i++) {
		for (int j = i + 1; j < 4; j++) {
			// Get distance between points
			float distance = powf(powf(mx[i] - mx[j], 2.0) + powf(my[i] - my[j], 2.0), 0.5);
    1d62:	f4 01       	movw	r30, r8
    1d64:	21 91       	ld	r18, Z+
    1d66:	31 91       	ld	r19, Z+
    1d68:	41 91       	ld	r20, Z+
    1d6a:	51 91       	ld	r21, Z+
    1d6c:	4f 01       	movw	r8, r30
    1d6e:	62 96       	adiw	r28, 0x12	; 18
    1d70:	6c ad       	ldd	r22, Y+60	; 0x3c
    1d72:	7d ad       	ldd	r23, Y+61	; 0x3d
    1d74:	8e ad       	ldd	r24, Y+62	; 0x3e
    1d76:	9f ad       	ldd	r25, Y+63	; 0x3f
    1d78:	62 97       	sbiw	r28, 0x12	; 18
    1d7a:	0e 94 c6 11 	call	0x238c	; 0x238c <__subsf3>
    1d7e:	6b 01       	movw	r12, r22
    1d80:	7c 01       	movw	r14, r24
    1d82:	d5 01       	movw	r26, r10
    1d84:	2d 91       	ld	r18, X+
    1d86:	3d 91       	ld	r19, X+
    1d88:	4d 91       	ld	r20, X+
    1d8a:	5d 91       	ld	r21, X+
    1d8c:	5d 01       	movw	r10, r26
    1d8e:	66 96       	adiw	r28, 0x16	; 22
    1d90:	6c ad       	ldd	r22, Y+60	; 0x3c
    1d92:	7d ad       	ldd	r23, Y+61	; 0x3d
    1d94:	8e ad       	ldd	r24, Y+62	; 0x3e
    1d96:	9f ad       	ldd	r25, Y+63	; 0x3f
    1d98:	66 97       	sbiw	r28, 0x16	; 22
    1d9a:	0e 94 c6 11 	call	0x238c	; 0x238c <__subsf3>
    1d9e:	9b 01       	movw	r18, r22
    1da0:	ac 01       	movw	r20, r24
    1da2:	0e 94 24 15 	call	0x2a48	; 0x2a48 <__mulsf3>
    1da6:	25 96       	adiw	r28, 0x05	; 5
    1da8:	6c af       	std	Y+60, r22	; 0x3c
    1daa:	7d af       	std	Y+61, r23	; 0x3d
    1dac:	8e af       	std	Y+62, r24	; 0x3e
    1dae:	9f af       	std	Y+63, r25	; 0x3f
    1db0:	25 97       	sbiw	r28, 0x05	; 5
    1db2:	a7 01       	movw	r20, r14
    1db4:	96 01       	movw	r18, r12
    1db6:	c7 01       	movw	r24, r14
    1db8:	b6 01       	movw	r22, r12
    1dba:	0e 94 24 15 	call	0x2a48	; 0x2a48 <__mulsf3>
    1dbe:	9b 01       	movw	r18, r22
    1dc0:	ac 01       	movw	r20, r24
    1dc2:	25 96       	adiw	r28, 0x05	; 5
    1dc4:	6c ad       	ldd	r22, Y+60	; 0x3c
    1dc6:	7d ad       	ldd	r23, Y+61	; 0x3d
    1dc8:	8e ad       	ldd	r24, Y+62	; 0x3e
    1dca:	9f ad       	ldd	r25, Y+63	; 0x3f
    1dcc:	25 97       	sbiw	r28, 0x05	; 5
    1dce:	0e 94 c7 11 	call	0x238e	; 0x238e <__addsf3>
    1dd2:	20 e0       	ldi	r18, 0x00	; 0
    1dd4:	30 e0       	ldi	r19, 0x00	; 0
    1dd6:	40 e0       	ldi	r20, 0x00	; 0
    1dd8:	5f e3       	ldi	r21, 0x3F	; 63
    1dda:	0e 94 91 15 	call	0x2b22	; 0x2b22 <pow>
    1dde:	e6 2e       	mov	r14, r22
    1de0:	f7 2e       	mov	r15, r23
    1de2:	08 2f       	mov	r16, r24
    1de4:	19 2f       	mov	r17, r25
			// Compare to max distance
			if (distance > max_distance) {
    1de6:	2a 96       	adiw	r28, 0x0a	; 10
    1de8:	2f ad       	ldd	r18, Y+63	; 0x3f
    1dea:	2a 97       	sbiw	r28, 0x0a	; 10
    1dec:	2e 96       	adiw	r28, 0x0e	; 14
    1dee:	3f ad       	ldd	r19, Y+63	; 0x3f
    1df0:	2e 97       	sbiw	r28, 0x0e	; 14
    1df2:	46 2d       	mov	r20, r6
    1df4:	57 2d       	mov	r21, r7
    1df6:	0e 94 a9 14 	call	0x2952	; 0x2952 <__gesf2>
    1dfa:	18 16       	cp	r1, r24
    1dfc:	c4 f4       	brge	.+48     	; 0x1e2e <interpret+0x4ca>
    1dfe:	a4 96       	adiw	r28, 0x24	; 36
    1e00:	5f ae       	std	Y+63, r5	; 0x3f
    1e02:	4e ae       	std	Y+62, r4	; 0x3e
    1e04:	a4 97       	sbiw	r28, 0x24	; 36
    1e06:	a5 96       	adiw	r28, 0x25	; 37
    1e08:	bf ad       	ldd	r27, Y+63	; 0x3f
    1e0a:	a5 97       	sbiw	r28, 0x25	; 37
    1e0c:	26 96       	adiw	r28, 0x06	; 6
    1e0e:	bf af       	std	Y+63, r27	; 0x3f
    1e10:	26 97       	sbiw	r28, 0x06	; 6
    1e12:	a6 96       	adiw	r28, 0x26	; 38
    1e14:	ef ad       	ldd	r30, Y+63	; 0x3f
    1e16:	a6 97       	sbiw	r28, 0x26	; 38
    1e18:	27 96       	adiw	r28, 0x07	; 7
    1e1a:	ef af       	std	Y+63, r30	; 0x3f
    1e1c:	27 97       	sbiw	r28, 0x07	; 7
				// If greater, update max distance indices
				indices[0] = i;
				indices[1] = j;
				max_distance = distance;
    1e1e:	2a 96       	adiw	r28, 0x0a	; 10
    1e20:	ef ae       	std	Y+63, r14	; 0x3f
    1e22:	2a 97       	sbiw	r28, 0x0a	; 10
    1e24:	2e 96       	adiw	r28, 0x0e	; 14
    1e26:	ff ae       	std	Y+63, r15	; 0x3f
    1e28:	2e 97       	sbiw	r28, 0x0e	; 14
    1e2a:	60 2e       	mov	r6, r16
    1e2c:	71 2e       	mov	r7, r17

	// Get max distance indices
	float max_distance = 0;
	int indices[2] = {0, 1};
	for (int i = 0; i < 3; i++) {
		for (int j = i + 1; j < 4; j++) {
    1e2e:	ff ef       	ldi	r31, 0xFF	; 255
    1e30:	4f 1a       	sub	r4, r31
    1e32:	5f 0a       	sbc	r5, r31
    1e34:	24 e0       	ldi	r18, 0x04	; 4
    1e36:	42 16       	cp	r4, r18
    1e38:	51 04       	cpc	r5, r1
    1e3a:	09 f0       	breq	.+2      	; 0x1e3e <interpret+0x4da>
    1e3c:	92 cf       	rjmp	.-220    	; 0x1d62 <interpret+0x3fe>
    1e3e:	34 e0       	ldi	r19, 0x04	; 4
    1e40:	23 0e       	add	r2, r19
    1e42:	31 1c       	adc	r3, r1
    1e44:	a2 96       	adiw	r28, 0x22	; 34
    1e46:	4e ad       	ldd	r20, Y+62	; 0x3e
    1e48:	5f ad       	ldd	r21, Y+63	; 0x3f
    1e4a:	a2 97       	sbiw	r28, 0x22	; 34
    1e4c:	4c 5f       	subi	r20, 0xFC	; 252
    1e4e:	5f 4f       	sbci	r21, 0xFF	; 255
    1e50:	a2 96       	adiw	r28, 0x22	; 34
    1e52:	5f af       	std	Y+63, r21	; 0x3f
    1e54:	4e af       	std	Y+62, r20	; 0x3e
    1e56:	a2 97       	sbiw	r28, 0x22	; 34
	////////// Sort mWii point indices based on distance from origin //////////

	// Get max distance indices
	float max_distance = 0;
	int indices[2] = {0, 1};
	for (int i = 0; i < 3; i++) {
    1e58:	a0 96       	adiw	r28, 0x20	; 32
    1e5a:	8e ad       	ldd	r24, Y+62	; 0x3e
    1e5c:	9f ad       	ldd	r25, Y+63	; 0x3f
    1e5e:	a0 97       	sbiw	r28, 0x20	; 32
    1e60:	83 30       	cpi	r24, 0x03	; 3
    1e62:	91 05       	cpc	r25, r1
    1e64:	09 f0       	breq	.+2      	; 0x1e68 <interpret+0x504>
    1e66:	4c cf       	rjmp	.-360    	; 0x1d00 <interpret+0x39c>
    1e68:	27 96       	adiw	r28, 0x07	; 7
    1e6a:	2e ac       	ldd	r2, Y+62	; 0x3e
    1e6c:	3f ac       	ldd	r3, Y+63	; 0x3f
    1e6e:	27 97       	sbiw	r28, 0x07	; 7
    1e70:	a4 96       	adiw	r28, 0x24	; 36
    1e72:	6e ac       	ldd	r6, Y+62	; 0x3e
    1e74:	7f ac       	ldd	r7, Y+63	; 0x3f
    1e76:	a4 97       	sbiw	r28, 0x24	; 36

	// Find which max index has the shortest distance to one of the other two points
	float min_distance = FLT_MAX;
	// Index of top star that we're looking for
	int top_index = indices[0];
	for (int i = 0; i < 4; i++) {
    1e78:	00 e0       	ldi	r16, 0x00	; 0
    1e7a:	10 e0       	ldi	r17, 0x00	; 0
		// Looking at other two points
		if (i != indices[0] && i != indices[1]) {
    1e7c:	20 16       	cp	r2, r16
    1e7e:	31 06       	cpc	r3, r17
    1e80:	09 f4       	brne	.+2      	; 0x1e84 <interpret+0x520>
    1e82:	da c0       	rjmp	.+436    	; 0x2038 <interpret+0x6d4>
    1e84:	60 16       	cp	r6, r16
    1e86:	71 06       	cpc	r7, r17
    1e88:	09 f4       	brne	.+2      	; 0x1e8c <interpret+0x528>
    1e8a:	d6 c0       	rjmp	.+428    	; 0x2038 <interpret+0x6d4>
			// Get distance to first max distance point
			float distance = powf(powf(mx[indices[0]] - mx[i], 2.0) + powf(my[indices[0]] - my[i], 2.0), 0.5);
    1e8c:	00 0f       	add	r16, r16
    1e8e:	11 1f       	adc	r17, r17
    1e90:	00 0f       	add	r16, r16
    1e92:	11 1f       	adc	r17, r17
    1e94:	81 e0       	ldi	r24, 0x01	; 1
    1e96:	90 e0       	ldi	r25, 0x00	; 0
    1e98:	8c 0f       	add	r24, r28
    1e9a:	9d 1f       	adc	r25, r29
    1e9c:	08 0f       	add	r16, r24
    1e9e:	19 1f       	adc	r17, r25
    1ea0:	d8 01       	movw	r26, r16
    1ea2:	90 96       	adiw	r26, 0x20	; 32
    1ea4:	2d 91       	ld	r18, X+
    1ea6:	3d 91       	ld	r19, X+
    1ea8:	4d 91       	ld	r20, X+
    1eaa:	5c 91       	ld	r21, X
    1eac:	93 97       	sbiw	r26, 0x23	; 35
    1eae:	25 96       	adiw	r28, 0x05	; 5
    1eb0:	2c af       	std	Y+60, r18	; 0x3c
    1eb2:	3d af       	std	Y+61, r19	; 0x3d
    1eb4:	4e af       	std	Y+62, r20	; 0x3e
    1eb6:	5f af       	std	Y+63, r21	; 0x3f
    1eb8:	25 97       	sbiw	r28, 0x05	; 5
    1eba:	71 01       	movw	r14, r2
    1ebc:	ee 0c       	add	r14, r14
    1ebe:	ff 1c       	adc	r15, r15
    1ec0:	ee 0c       	add	r14, r14
    1ec2:	ff 1c       	adc	r15, r15
    1ec4:	e8 0e       	add	r14, r24
    1ec6:	f9 1e       	adc	r15, r25
    1ec8:	f7 01       	movw	r30, r14
    1eca:	60 a1       	ldd	r22, Z+32	; 0x20
    1ecc:	71 a1       	ldd	r23, Z+33	; 0x21
    1ece:	82 a1       	ldd	r24, Z+34	; 0x22
    1ed0:	93 a1       	ldd	r25, Z+35	; 0x23
    1ed2:	0e 94 c6 11 	call	0x238c	; 0x238c <__subsf3>
    1ed6:	2d 96       	adiw	r28, 0x0d	; 13
    1ed8:	6c af       	std	Y+60, r22	; 0x3c
    1eda:	7d af       	std	Y+61, r23	; 0x3d
    1edc:	8e af       	std	Y+62, r24	; 0x3e
    1ede:	9f af       	std	Y+63, r25	; 0x3f
    1ee0:	2d 97       	sbiw	r28, 0x0d	; 13
    1ee2:	d8 01       	movw	r26, r16
    1ee4:	d0 96       	adiw	r26, 0x30	; 48
    1ee6:	8d 90       	ld	r8, X+
    1ee8:	9d 90       	ld	r9, X+
    1eea:	ad 90       	ld	r10, X+
    1eec:	bc 90       	ld	r11, X
    1eee:	d3 97       	sbiw	r26, 0x33	; 51
    1ef0:	a5 01       	movw	r20, r10
    1ef2:	94 01       	movw	r18, r8
    1ef4:	f7 01       	movw	r30, r14
    1ef6:	60 a9       	ldd	r22, Z+48	; 0x30
    1ef8:	71 a9       	ldd	r23, Z+49	; 0x31
    1efa:	82 a9       	ldd	r24, Z+50	; 0x32
    1efc:	93 a9       	ldd	r25, Z+51	; 0x33
    1efe:	0e 94 c6 11 	call	0x238c	; 0x238c <__subsf3>
    1f02:	6b 01       	movw	r12, r22
    1f04:	7c 01       	movw	r14, r24
    1f06:	2d 96       	adiw	r28, 0x0d	; 13
    1f08:	2c ad       	ldd	r18, Y+60	; 0x3c
    1f0a:	3d ad       	ldd	r19, Y+61	; 0x3d
    1f0c:	4e ad       	ldd	r20, Y+62	; 0x3e
    1f0e:	5f ad       	ldd	r21, Y+63	; 0x3f
    1f10:	2d 97       	sbiw	r28, 0x0d	; 13
    1f12:	ca 01       	movw	r24, r20
    1f14:	b9 01       	movw	r22, r18
    1f16:	0e 94 24 15 	call	0x2a48	; 0x2a48 <__mulsf3>
    1f1a:	2d 96       	adiw	r28, 0x0d	; 13
    1f1c:	6c af       	std	Y+60, r22	; 0x3c
    1f1e:	7d af       	std	Y+61, r23	; 0x3d
    1f20:	8e af       	std	Y+62, r24	; 0x3e
    1f22:	9f af       	std	Y+63, r25	; 0x3f
    1f24:	2d 97       	sbiw	r28, 0x0d	; 13
    1f26:	a7 01       	movw	r20, r14
    1f28:	96 01       	movw	r18, r12
    1f2a:	c7 01       	movw	r24, r14
    1f2c:	b6 01       	movw	r22, r12
    1f2e:	0e 94 24 15 	call	0x2a48	; 0x2a48 <__mulsf3>
    1f32:	9b 01       	movw	r18, r22
    1f34:	ac 01       	movw	r20, r24
    1f36:	2d 96       	adiw	r28, 0x0d	; 13
    1f38:	6c ad       	ldd	r22, Y+60	; 0x3c
    1f3a:	7d ad       	ldd	r23, Y+61	; 0x3d
    1f3c:	8e ad       	ldd	r24, Y+62	; 0x3e
    1f3e:	9f ad       	ldd	r25, Y+63	; 0x3f
    1f40:	2d 97       	sbiw	r28, 0x0d	; 13
    1f42:	0e 94 c7 11 	call	0x238e	; 0x238e <__addsf3>
    1f46:	20 e0       	ldi	r18, 0x00	; 0
    1f48:	30 e0       	ldi	r19, 0x00	; 0
    1f4a:	40 e0       	ldi	r20, 0x00	; 0
    1f4c:	5f e3       	ldi	r21, 0x3F	; 63
    1f4e:	0e 94 91 15 	call	0x2b22	; 0x2b22 <pow>
    1f52:	2d 96       	adiw	r28, 0x0d	; 13
    1f54:	6c af       	std	Y+60, r22	; 0x3c
    1f56:	7d af       	std	Y+61, r23	; 0x3d
    1f58:	8e af       	std	Y+62, r24	; 0x3e
    1f5a:	9f af       	std	Y+63, r25	; 0x3f
    1f5c:	2d 97       	sbiw	r28, 0x0d	; 13
			min_distance = distance;

			// Get distance to other max distance point
			distance = powf(powf(mx[indices[1]] - mx[i], 2.0) + powf(my[indices[1]] - my[i], 2.0), 0.5);
    1f5e:	83 01       	movw	r16, r6
    1f60:	00 0f       	add	r16, r16
    1f62:	11 1f       	adc	r17, r17
    1f64:	00 0f       	add	r16, r16
    1f66:	11 1f       	adc	r17, r17
    1f68:	21 e0       	ldi	r18, 0x01	; 1
    1f6a:	30 e0       	ldi	r19, 0x00	; 0
    1f6c:	2c 0f       	add	r18, r28
    1f6e:	3d 1f       	adc	r19, r29
    1f70:	02 0f       	add	r16, r18
    1f72:	13 1f       	adc	r17, r19
    1f74:	25 96       	adiw	r28, 0x05	; 5
    1f76:	2c ad       	ldd	r18, Y+60	; 0x3c
    1f78:	3d ad       	ldd	r19, Y+61	; 0x3d
    1f7a:	4e ad       	ldd	r20, Y+62	; 0x3e
    1f7c:	5f ad       	ldd	r21, Y+63	; 0x3f
    1f7e:	25 97       	sbiw	r28, 0x05	; 5
    1f80:	d8 01       	movw	r26, r16
    1f82:	90 96       	adiw	r26, 0x20	; 32
    1f84:	6d 91       	ld	r22, X+
    1f86:	7d 91       	ld	r23, X+
    1f88:	8d 91       	ld	r24, X+
    1f8a:	9c 91       	ld	r25, X
    1f8c:	93 97       	sbiw	r26, 0x23	; 35
    1f8e:	0e 94 c6 11 	call	0x238c	; 0x238c <__subsf3>
    1f92:	25 96       	adiw	r28, 0x05	; 5
    1f94:	6c af       	std	Y+60, r22	; 0x3c
    1f96:	7d af       	std	Y+61, r23	; 0x3d
    1f98:	8e af       	std	Y+62, r24	; 0x3e
    1f9a:	9f af       	std	Y+63, r25	; 0x3f
    1f9c:	25 97       	sbiw	r28, 0x05	; 5
    1f9e:	a5 01       	movw	r20, r10
    1fa0:	94 01       	movw	r18, r8
    1fa2:	f8 01       	movw	r30, r16
    1fa4:	60 a9       	ldd	r22, Z+48	; 0x30
    1fa6:	71 a9       	ldd	r23, Z+49	; 0x31
    1fa8:	82 a9       	ldd	r24, Z+50	; 0x32
    1faa:	93 a9       	ldd	r25, Z+51	; 0x33
    1fac:	0e 94 c6 11 	call	0x238c	; 0x238c <__subsf3>
    1fb0:	6b 01       	movw	r12, r22
    1fb2:	7c 01       	movw	r14, r24
    1fb4:	25 96       	adiw	r28, 0x05	; 5
    1fb6:	2c ad       	ldd	r18, Y+60	; 0x3c
    1fb8:	3d ad       	ldd	r19, Y+61	; 0x3d
    1fba:	4e ad       	ldd	r20, Y+62	; 0x3e
    1fbc:	5f ad       	ldd	r21, Y+63	; 0x3f
    1fbe:	25 97       	sbiw	r28, 0x05	; 5
    1fc0:	ca 01       	movw	r24, r20
    1fc2:	b9 01       	movw	r22, r18
    1fc4:	0e 94 24 15 	call	0x2a48	; 0x2a48 <__mulsf3>
    1fc8:	4b 01       	movw	r8, r22
    1fca:	5c 01       	movw	r10, r24
    1fcc:	a7 01       	movw	r20, r14
    1fce:	96 01       	movw	r18, r12
    1fd0:	c7 01       	movw	r24, r14
    1fd2:	b6 01       	movw	r22, r12
    1fd4:	0e 94 24 15 	call	0x2a48	; 0x2a48 <__mulsf3>
    1fd8:	9b 01       	movw	r18, r22
    1fda:	ac 01       	movw	r20, r24
    1fdc:	c5 01       	movw	r24, r10
    1fde:	b4 01       	movw	r22, r8
    1fe0:	0e 94 c7 11 	call	0x238e	; 0x238e <__addsf3>
    1fe4:	20 e0       	ldi	r18, 0x00	; 0
    1fe6:	30 e0       	ldi	r19, 0x00	; 0
    1fe8:	40 e0       	ldi	r20, 0x00	; 0
    1fea:	5f e3       	ldi	r21, 0x3F	; 63
    1fec:	0e 94 91 15 	call	0x2b22	; 0x2b22 <pow>
    1ff0:	9b 01       	movw	r18, r22
    1ff2:	ac 01       	movw	r20, r24
			// If distance is lower than min distance, set as the new top index
			if (distance < min_distance) {
    1ff4:	2d 96       	adiw	r28, 0x0d	; 13
    1ff6:	6c ad       	ldd	r22, Y+60	; 0x3c
    1ff8:	7d ad       	ldd	r23, Y+61	; 0x3d
    1ffa:	8e ad       	ldd	r24, Y+62	; 0x3e
    1ffc:	9f ad       	ldd	r25, Y+63	; 0x3f
    1ffe:	2d 97       	sbiw	r28, 0x0d	; 13
    2000:	0e 94 a9 14 	call	0x2952	; 0x2952 <__gesf2>
    2004:	18 16       	cp	r1, r24
    2006:	3c f5       	brge	.+78     	; 0x2056 <interpret+0x6f2>
		}
	}

	// Determine bottom star index
	int bottom_index;
	if (indices[0] == top_index) {
    2008:	26 14       	cp	r2, r6
    200a:	37 04       	cpc	r3, r7
    200c:	e1 f0       	breq	.+56     	; 0x2046 <interpret+0x6e2>
    200e:	a3 96       	adiw	r28, 0x23	; 35
    2010:	9f ad       	ldd	r25, Y+63	; 0x3f
    2012:	a3 97       	sbiw	r28, 0x23	; 35
    2014:	a4 96       	adiw	r28, 0x24	; 36
    2016:	8f ad       	ldd	r24, Y+63	; 0x3f
    2018:	a4 97       	sbiw	r28, 0x24	; 36
    201a:	27 96       	adiw	r28, 0x07	; 7
    201c:	2e ad       	ldd	r18, Y+62	; 0x3e
    201e:	3f ad       	ldd	r19, Y+63	; 0x3f
    2020:	27 97       	sbiw	r28, 0x07	; 7
    2022:	a4 96       	adiw	r28, 0x24	; 36
    2024:	3f af       	std	Y+63, r19	; 0x3f
    2026:	2e af       	std	Y+62, r18	; 0x3e
    2028:	a4 97       	sbiw	r28, 0x24	; 36
    202a:	26 96       	adiw	r28, 0x06	; 6
    202c:	9f af       	std	Y+63, r25	; 0x3f
    202e:	26 97       	sbiw	r28, 0x06	; 6
    2030:	27 96       	adiw	r28, 0x07	; 7
    2032:	8f af       	std	Y+63, r24	; 0x3f
    2034:	27 97       	sbiw	r28, 0x07	; 7
    2036:	0f c0       	rjmp	.+30     	; 0x2056 <interpret+0x6f2>

	// Find which max index has the shortest distance to one of the other two points
	float min_distance = FLT_MAX;
	// Index of top star that we're looking for
	int top_index = indices[0];
	for (int i = 0; i < 4; i++) {
    2038:	0f 5f       	subi	r16, 0xFF	; 255
    203a:	1f 4f       	sbci	r17, 0xFF	; 255
    203c:	04 30       	cpi	r16, 0x04	; 4
    203e:	11 05       	cpc	r17, r1
    2040:	09 f0       	breq	.+2      	; 0x2044 <interpret+0x6e0>
    2042:	1c cf       	rjmp	.-456    	; 0x1e7c <interpret+0x518>
    2044:	08 c0       	rjmp	.+16     	; 0x2056 <interpret+0x6f2>
    2046:	a4 96       	adiw	r28, 0x24	; 36
    2048:	4e ad       	ldd	r20, Y+62	; 0x3e
    204a:	5f ad       	ldd	r21, Y+63	; 0x3f
    204c:	a4 97       	sbiw	r28, 0x24	; 36
    204e:	27 96       	adiw	r28, 0x07	; 7
    2050:	5f af       	std	Y+63, r21	; 0x3f
    2052:	4e af       	std	Y+62, r20	; 0x3e
    2054:	27 97       	sbiw	r28, 0x07	; 7
		bottom_index = indices[0];
	}

	////////// Determine mWii rotation //////////
	// determine rotation
	float delx = (mx[top_index] - mx[bottom_index]);
    2056:	27 96       	adiw	r28, 0x07	; 7
    2058:	0e ad       	ldd	r16, Y+62	; 0x3e
    205a:	1f ad       	ldd	r17, Y+63	; 0x3f
    205c:	27 97       	sbiw	r28, 0x07	; 7
    205e:	00 0f       	add	r16, r16
    2060:	11 1f       	adc	r17, r17
    2062:	00 0f       	add	r16, r16
    2064:	11 1f       	adc	r17, r17
    2066:	81 e0       	ldi	r24, 0x01	; 1
    2068:	90 e0       	ldi	r25, 0x00	; 0
    206a:	8c 0f       	add	r24, r28
    206c:	9d 1f       	adc	r25, r29
    206e:	08 0f       	add	r16, r24
    2070:	19 1f       	adc	r17, r25
    2072:	a4 96       	adiw	r28, 0x24	; 36
    2074:	ee ac       	ldd	r14, Y+62	; 0x3e
    2076:	ff ac       	ldd	r15, Y+63	; 0x3f
    2078:	a4 97       	sbiw	r28, 0x24	; 36
    207a:	ee 0c       	add	r14, r14
    207c:	ff 1c       	adc	r15, r15
    207e:	ee 0c       	add	r14, r14
    2080:	ff 1c       	adc	r15, r15
    2082:	e8 0e       	add	r14, r24
    2084:	f9 1e       	adc	r15, r25
    2086:	d7 01       	movw	r26, r14
    2088:	90 96       	adiw	r26, 0x20	; 32
    208a:	2d 91       	ld	r18, X+
    208c:	3d 91       	ld	r19, X+
    208e:	4d 91       	ld	r20, X+
    2090:	5c 91       	ld	r21, X
    2092:	93 97       	sbiw	r26, 0x23	; 35
    2094:	f8 01       	movw	r30, r16
    2096:	60 a1       	ldd	r22, Z+32	; 0x20
    2098:	71 a1       	ldd	r23, Z+33	; 0x21
    209a:	82 a1       	ldd	r24, Z+34	; 0x22
    209c:	93 a1       	ldd	r25, Z+35	; 0x23
    209e:	0e 94 c6 11 	call	0x238c	; 0x238c <__subsf3>
    20a2:	4b 01       	movw	r8, r22
    20a4:	5c 01       	movw	r10, r24
	float dely = (my[top_index] - my[bottom_index]);
    20a6:	d7 01       	movw	r26, r14
    20a8:	d0 96       	adiw	r26, 0x30	; 48
    20aa:	2d 91       	ld	r18, X+
    20ac:	3d 91       	ld	r19, X+
    20ae:	4d 91       	ld	r20, X+
    20b0:	5c 91       	ld	r21, X
    20b2:	d3 97       	sbiw	r26, 0x33	; 51
    20b4:	f8 01       	movw	r30, r16
    20b6:	60 a9       	ldd	r22, Z+48	; 0x30
    20b8:	71 a9       	ldd	r23, Z+49	; 0x31
    20ba:	82 a9       	ldd	r24, Z+50	; 0x32
    20bc:	93 a9       	ldd	r25, Z+51	; 0x33
    20be:	0e 94 c6 11 	call	0x238c	; 0x238c <__subsf3>
	robot->o = atan2f(dely, delx); //find rotation from y axis
    20c2:	a5 01       	movw	r20, r10
    20c4:	94 01       	movw	r18, r8
    20c6:	0e 94 46 12 	call	0x248c	; 0x248c <atan2>
    20ca:	2b 01       	movw	r4, r22
    20cc:	3c 01       	movw	r6, r24


	////////// Use rotation to translate points into new xy frame //////////
	// Rotate original mWii points around the origin
	float s = sinf(2.0 * PI - robot->o);
    20ce:	9b 01       	movw	r18, r22
    20d0:	ac 01       	movw	r20, r24
    20d2:	6b ed       	ldi	r22, 0xDB	; 219
    20d4:	7f e0       	ldi	r23, 0x0F	; 15
    20d6:	89 ec       	ldi	r24, 0xC9	; 201
    20d8:	90 e4       	ldi	r25, 0x40	; 64
    20da:	0e 94 c6 11 	call	0x238c	; 0x238c <__subsf3>
    20de:	4b 01       	movw	r8, r22
    20e0:	5c 01       	movw	r10, r24
    20e2:	0e 94 e1 15 	call	0x2bc2	; 0x2bc2 <sin>
    20e6:	6b 01       	movw	r12, r22
    20e8:	7c 01       	movw	r14, r24
	float c = cosf(2.0 * PI - robot->o);
    20ea:	c5 01       	movw	r24, r10
    20ec:	b4 01       	movw	r22, r8
    20ee:	0e 94 aa 12 	call	0x2554	; 0x2554 <cos>
    20f2:	4b 01       	movw	r8, r22
    20f4:	5c 01       	movw	r10, r24

	float ox = translation_x;
	float oy = translation_y;

	// Rotate points around origin into new xy frame
	translation_x = ox * c - oy * s;
    20f6:	9b 01       	movw	r18, r22
    20f8:	ac 01       	movw	r20, r24
    20fa:	6a 96       	adiw	r28, 0x1a	; 26
    20fc:	6c ad       	ldd	r22, Y+60	; 0x3c
    20fe:	7d ad       	ldd	r23, Y+61	; 0x3d
    2100:	8e ad       	ldd	r24, Y+62	; 0x3e
    2102:	9f ad       	ldd	r25, Y+63	; 0x3f
    2104:	6a 97       	sbiw	r28, 0x1a	; 26
    2106:	0e 94 24 15 	call	0x2a48	; 0x2a48 <__mulsf3>
    210a:	25 96       	adiw	r28, 0x05	; 5
    210c:	6c af       	std	Y+60, r22	; 0x3c
    210e:	7d af       	std	Y+61, r23	; 0x3d
    2110:	8e af       	std	Y+62, r24	; 0x3e
    2112:	9f af       	std	Y+63, r25	; 0x3f
    2114:	25 97       	sbiw	r28, 0x05	; 5
    2116:	a7 01       	movw	r20, r14
    2118:	96 01       	movw	r18, r12
    211a:	6e 96       	adiw	r28, 0x1e	; 30
    211c:	6c ad       	ldd	r22, Y+60	; 0x3c
    211e:	7d ad       	ldd	r23, Y+61	; 0x3d
    2120:	8e ad       	ldd	r24, Y+62	; 0x3e
    2122:	9f ad       	ldd	r25, Y+63	; 0x3f
    2124:	6e 97       	sbiw	r28, 0x1e	; 30
    2126:	0e 94 24 15 	call	0x2a48	; 0x2a48 <__mulsf3>
    212a:	9b 01       	movw	r18, r22
    212c:	ac 01       	movw	r20, r24
    212e:	25 96       	adiw	r28, 0x05	; 5
    2130:	6c ad       	ldd	r22, Y+60	; 0x3c
    2132:	7d ad       	ldd	r23, Y+61	; 0x3d
    2134:	8e ad       	ldd	r24, Y+62	; 0x3e
    2136:	9f ad       	ldd	r25, Y+63	; 0x3f
    2138:	25 97       	sbiw	r28, 0x05	; 5
    213a:	0e 94 c6 11 	call	0x238c	; 0x238c <__subsf3>
    213e:	9b 01       	movw	r18, r22
    2140:	ac 01       	movw	r20, r24
	translation_y = oy * c + ox * s;

	// Set robot x and y locations in pixels
	robot->x = -translation_x - CENTER_OFFSET_X;
    2142:	60 e0       	ldi	r22, 0x00	; 0
    2144:	70 e0       	ldi	r23, 0x00	; 0
    2146:	80 e5       	ldi	r24, 0x50	; 80
    2148:	92 e4       	ldi	r25, 0x42	; 66
    214a:	0e 94 c6 11 	call	0x238c	; 0x238c <__subsf3>
    214e:	a8 96       	adiw	r28, 0x28	; 40
    2150:	ae ad       	ldd	r26, Y+62	; 0x3e
    2152:	bf ad       	ldd	r27, Y+63	; 0x3f
    2154:	a8 97       	sbiw	r28, 0x28	; 40
    2156:	11 96       	adiw	r26, 0x01	; 1
    2158:	6d 93       	st	X+, r22
    215a:	7d 93       	st	X+, r23
    215c:	8d 93       	st	X+, r24
    215e:	9c 93       	st	X, r25
    2160:	14 97       	sbiw	r26, 0x04	; 4
	float ox = translation_x;
	float oy = translation_y;

	// Rotate points around origin into new xy frame
	translation_x = ox * c - oy * s;
	translation_y = oy * c + ox * s;
    2162:	a5 01       	movw	r20, r10
    2164:	94 01       	movw	r18, r8
    2166:	6e 96       	adiw	r28, 0x1e	; 30
    2168:	6c ad       	ldd	r22, Y+60	; 0x3c
    216a:	7d ad       	ldd	r23, Y+61	; 0x3d
    216c:	8e ad       	ldd	r24, Y+62	; 0x3e
    216e:	9f ad       	ldd	r25, Y+63	; 0x3f
    2170:	6e 97       	sbiw	r28, 0x1e	; 30
    2172:	0e 94 24 15 	call	0x2a48	; 0x2a48 <__mulsf3>
    2176:	4b 01       	movw	r8, r22
    2178:	5c 01       	movw	r10, r24
    217a:	a7 01       	movw	r20, r14
    217c:	96 01       	movw	r18, r12
    217e:	6a 96       	adiw	r28, 0x1a	; 26
    2180:	6c ad       	ldd	r22, Y+60	; 0x3c
    2182:	7d ad       	ldd	r23, Y+61	; 0x3d
    2184:	8e ad       	ldd	r24, Y+62	; 0x3e
    2186:	9f ad       	ldd	r25, Y+63	; 0x3f
    2188:	6a 97       	sbiw	r28, 0x1a	; 26
    218a:	0e 94 24 15 	call	0x2a48	; 0x2a48 <__mulsf3>
    218e:	9b 01       	movw	r18, r22
    2190:	ac 01       	movw	r20, r24
    2192:	c5 01       	movw	r24, r10
    2194:	b4 01       	movw	r22, r8
    2196:	0e 94 c7 11 	call	0x238e	; 0x238e <__addsf3>

	// Set robot x and y locations in pixels
	robot->x = -translation_x - CENTER_OFFSET_X;
	robot->y = -translation_y - CENTER_OFFSET_Y;
    219a:	90 58       	subi	r25, 0x80	; 128
    219c:	20 e0       	ldi	r18, 0x00	; 0
    219e:	30 e0       	ldi	r19, 0x00	; 0
    21a0:	43 e5       	ldi	r20, 0x53	; 83
    21a2:	53 e4       	ldi	r21, 0x43	; 67
    21a4:	0e 94 c6 11 	call	0x238c	; 0x238c <__subsf3>
    21a8:	a8 96       	adiw	r28, 0x28	; 40
    21aa:	ee ad       	ldd	r30, Y+62	; 0x3e
    21ac:	ff ad       	ldd	r31, Y+63	; 0x3f
    21ae:	a8 97       	sbiw	r28, 0x28	; 40
    21b0:	65 83       	std	Z+5, r22	; 0x05
    21b2:	76 83       	std	Z+6, r23	; 0x06
    21b4:	87 83       	std	Z+7, r24	; 0x07
    21b6:	90 87       	std	Z+8, r25	; 0x08
	robot->o = -robot->o;
    21b8:	d3 01       	movw	r26, r6
    21ba:	c2 01       	movw	r24, r4
    21bc:	b0 58       	subi	r27, 0x80	; 128
    21be:	81 87       	std	Z+9, r24	; 0x09
    21c0:	92 87       	std	Z+10, r25	; 0x0a
    21c2:	a3 87       	std	Z+11, r26	; 0x0b
    21c4:	b4 87       	std	Z+12, r27	; 0x0c

	// Print data
	print_data(mWii_x, mWii_y, ox, oy, top_index, bottom_index, robot);
    21c6:	4f 01       	movw	r8, r30
    21c8:	a4 96       	adiw	r28, 0x24	; 36
    21ca:	ae ac       	ldd	r10, Y+62	; 0x3e
    21cc:	bf ac       	ldd	r11, Y+63	; 0x3f
    21ce:	a4 97       	sbiw	r28, 0x24	; 36
    21d0:	27 96       	adiw	r28, 0x07	; 7
    21d2:	ce ac       	ldd	r12, Y+62	; 0x3e
    21d4:	df ac       	ldd	r13, Y+63	; 0x3f
    21d6:	27 97       	sbiw	r28, 0x07	; 7
    21d8:	6e 96       	adiw	r28, 0x1e	; 30
    21da:	ec ac       	ldd	r14, Y+60	; 0x3c
    21dc:	fd ac       	ldd	r15, Y+61	; 0x3d
    21de:	0e ad       	ldd	r16, Y+62	; 0x3e
    21e0:	1f ad       	ldd	r17, Y+63	; 0x3f
    21e2:	6e 97       	sbiw	r28, 0x1e	; 30
    21e4:	6a 96       	adiw	r28, 0x1a	; 26
    21e6:	2c ad       	ldd	r18, Y+60	; 0x3c
    21e8:	3d ad       	ldd	r19, Y+61	; 0x3d
    21ea:	4e ad       	ldd	r20, Y+62	; 0x3e
    21ec:	5f ad       	ldd	r21, Y+63	; 0x3f
    21ee:	6a 97       	sbiw	r28, 0x1a	; 26
    21f0:	be 01       	movw	r22, r28
    21f2:	6f 5e       	subi	r22, 0xEF	; 239
    21f4:	7f 4f       	sbci	r23, 0xFF	; 255
    21f6:	ce 01       	movw	r24, r28
    21f8:	01 96       	adiw	r24, 0x01	; 1
    21fa:	0e 94 49 0b 	call	0x1692	; 0x1692 <print_data>
    21fe:	12 c0       	rjmp	.+36     	; 0x2224 <interpret+0x8c0>
    2200:	f4 e0       	ldi	r31, 0x04	; 4
    2202:	2f 0e       	add	r2, r31
    2204:	31 1c       	adc	r3, r1
    2206:	a2 96       	adiw	r28, 0x22	; 34
    2208:	2e ad       	ldd	r18, Y+62	; 0x3e
    220a:	3f ad       	ldd	r19, Y+63	; 0x3f
    220c:	a2 97       	sbiw	r28, 0x22	; 34
    220e:	2c 5f       	subi	r18, 0xFC	; 252
    2210:	3f 4f       	sbci	r19, 0xFF	; 255
    2212:	a2 96       	adiw	r28, 0x22	; 34
    2214:	3f af       	std	Y+63, r19	; 0x3f
    2216:	2e af       	std	Y+62, r18	; 0x3e
    2218:	a2 97       	sbiw	r28, 0x22	; 34
	////////// Sort mWii point indices based on distance from origin //////////

	// Get max distance indices
	float max_distance = 0;
	int indices[2] = {0, 1};
	for (int i = 0; i < 3; i++) {
    221a:	a0 96       	adiw	r28, 0x20	; 32
    221c:	8e ad       	ldd	r24, Y+62	; 0x3e
    221e:	9f ad       	ldd	r25, Y+63	; 0x3f
    2220:	a0 97       	sbiw	r28, 0x20	; 32
    2222:	6e cd       	rjmp	.-1316   	; 0x1d00 <interpret+0x39c>
	robot->y = -translation_y - CENTER_OFFSET_Y;
	robot->o = -robot->o;

	// Print data
	print_data(mWii_x, mWii_y, ox, oy, top_index, bottom_index, robot);
}
    2224:	c9 59       	subi	r28, 0x99	; 153
    2226:	df 4f       	sbci	r29, 0xFF	; 255
    2228:	0f b6       	in	r0, 0x3f	; 63
    222a:	f8 94       	cli
    222c:	de bf       	out	0x3e, r29	; 62
    222e:	0f be       	out	0x3f, r0	; 63
    2230:	cd bf       	out	0x3d, r28	; 61
    2232:	df 91       	pop	r29
    2234:	cf 91       	pop	r28
    2236:	1f 91       	pop	r17
    2238:	0f 91       	pop	r16
    223a:	ff 90       	pop	r15
    223c:	ef 90       	pop	r14
    223e:	df 90       	pop	r13
    2240:	cf 90       	pop	r12
    2242:	bf 90       	pop	r11
    2244:	af 90       	pop	r10
    2246:	9f 90       	pop	r9
    2248:	8f 90       	pop	r8
    224a:	7f 90       	pop	r7
    224c:	6f 90       	pop	r6
    224e:	5f 90       	pop	r5
    2250:	4f 90       	pop	r4
    2252:	3f 90       	pop	r3
    2254:	2f 90       	pop	r2
    2256:	08 95       	ret

00002258 <step_to_goal>:
#include "score.h"

bool step_to_goal(Robot* robot) {
    2258:	8f 92       	push	r8
    225a:	9f 92       	push	r9
    225c:	af 92       	push	r10
    225e:	bf 92       	push	r11
    2260:	cf 92       	push	r12
    2262:	df 92       	push	r13
    2264:	ef 92       	push	r14
    2266:	ff 92       	push	r15
    2268:	0f 93       	push	r16
    226a:	1f 93       	push	r17
    226c:	cf 93       	push	r28
    226e:	df 93       	push	r29
    2270:	cd b7       	in	r28, 0x3d	; 61
    2272:	de b7       	in	r29, 0x3e	; 62
    2274:	68 97       	sbiw	r28, 0x18	; 24
    2276:	0f b6       	in	r0, 0x3f	; 63
    2278:	f8 94       	cli
    227a:	de bf       	out	0x3e, r29	; 62
    227c:	0f be       	out	0x3f, r0	; 63
    227e:	cd bf       	out	0x3d, r28	; 61
    2280:	7c 01       	movw	r14, r24
	unsigned int star_array[12];
	// Get mWii array
	m_wii_read(star_array);
    2282:	ce 01       	movw	r24, r28
    2284:	01 96       	adiw	r24, 0x01	; 1
    2286:	0e 94 6f 08 	call	0x10de	; 0x10de <m_wii_read>
	// Get robot location and orientation
	interpret(robot, star_array);
    228a:	be 01       	movw	r22, r28
    228c:	6f 5f       	subi	r22, 0xFF	; 255
    228e:	7f 4f       	sbci	r23, 0xFF	; 255
    2290:	c7 01       	movw	r24, r14
    2292:	0e 94 b2 0c 	call	0x1964	; 0x1964 <interpret>
	// Wait
	if (facing_goal(robot, OPPONENT_X, OPPONENT_Y)) {
    2296:	00 e0       	ldi	r16, 0x00	; 0
    2298:	10 e0       	ldi	r17, 0x00	; 0
    229a:	25 e7       	ldi	r18, 0x75	; 117
    229c:	33 ec       	ldi	r19, 0xC3	; 195
    229e:	40 e0       	ldi	r20, 0x00	; 0
    22a0:	50 e0       	ldi	r21, 0x00	; 0
    22a2:	ba 01       	movw	r22, r20
    22a4:	c7 01       	movw	r24, r14
    22a6:	0e 94 35 03 	call	0x66a	; 0x66a <facing_goal>
    22aa:	88 23       	and	r24, r24
    22ac:	39 f0       	breq	.+14     	; 0x22bc <step_to_goal+0x64>
	m_green(ON);
    22ae:	6a 9a       	sbi	0x0d, 2	; 13
    22b0:	72 98       	cbi	0x0e, 2	; 14
		turn(0); // drive forward
    22b2:	80 e0       	ldi	r24, 0x00	; 0
    22b4:	90 e0       	ldi	r25, 0x00	; 0
    22b6:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <turn>
    22ba:	07 c0       	rjmp	.+14     	; 0x22ca <step_to_goal+0x72>
	} else {
		m_green(OFF);
    22bc:	6a 9a       	sbi	0x0d, 2	; 13
    22be:	72 9a       	sbi	0x0e, 2	; 14
		turn_in_place(true, 100);
    22c0:	64 e6       	ldi	r22, 0x64	; 100
    22c2:	70 e0       	ldi	r23, 0x00	; 0
    22c4:	81 e0       	ldi	r24, 0x01	; 1
    22c6:	0e 94 bd 02 	call	0x57a	; 0x57a <turn_in_place>
	}
	/*turn(drive_to_goal(robot, OPPONENT_X, OPPONENT_Y));*/
	float dist = powf(powf(OPPONENT_X - robot->x, 2.0) + powf(OPPONENT_Y - robot->y, 2.0), 0.5);
    22ca:	f7 01       	movw	r30, r14
    22cc:	21 81       	ldd	r18, Z+1	; 0x01
    22ce:	32 81       	ldd	r19, Z+2	; 0x02
    22d0:	43 81       	ldd	r20, Z+3	; 0x03
    22d2:	54 81       	ldd	r21, Z+4	; 0x04
    22d4:	60 e0       	ldi	r22, 0x00	; 0
    22d6:	70 e0       	ldi	r23, 0x00	; 0
    22d8:	cb 01       	movw	r24, r22
    22da:	0e 94 c6 11 	call	0x238c	; 0x238c <__subsf3>
    22de:	4b 01       	movw	r8, r22
    22e0:	5c 01       	movw	r10, r24
    22e2:	f7 01       	movw	r30, r14
    22e4:	25 81       	ldd	r18, Z+5	; 0x05
    22e6:	36 81       	ldd	r19, Z+6	; 0x06
    22e8:	47 81       	ldd	r20, Z+7	; 0x07
    22ea:	50 85       	ldd	r21, Z+8	; 0x08
    22ec:	60 e0       	ldi	r22, 0x00	; 0
    22ee:	70 e0       	ldi	r23, 0x00	; 0
    22f0:	85 e7       	ldi	r24, 0x75	; 117
    22f2:	93 ec       	ldi	r25, 0xC3	; 195
    22f4:	0e 94 c6 11 	call	0x238c	; 0x238c <__subsf3>
    22f8:	6b 01       	movw	r12, r22
    22fa:	7c 01       	movw	r14, r24
    22fc:	a5 01       	movw	r20, r10
    22fe:	94 01       	movw	r18, r8
    2300:	c5 01       	movw	r24, r10
    2302:	b4 01       	movw	r22, r8
    2304:	0e 94 24 15 	call	0x2a48	; 0x2a48 <__mulsf3>
    2308:	4b 01       	movw	r8, r22
    230a:	5c 01       	movw	r10, r24
    230c:	a7 01       	movw	r20, r14
    230e:	96 01       	movw	r18, r12
    2310:	c7 01       	movw	r24, r14
    2312:	b6 01       	movw	r22, r12
    2314:	0e 94 24 15 	call	0x2a48	; 0x2a48 <__mulsf3>
    2318:	9b 01       	movw	r18, r22
    231a:	ac 01       	movw	r20, r24
    231c:	c5 01       	movw	r24, r10
    231e:	b4 01       	movw	r22, r8
    2320:	0e 94 c7 11 	call	0x238e	; 0x238e <__addsf3>
    2324:	20 e0       	ldi	r18, 0x00	; 0
    2326:	30 e0       	ldi	r19, 0x00	; 0
    2328:	40 e0       	ldi	r20, 0x00	; 0
    232a:	5f e3       	ldi	r21, 0x3F	; 63
    232c:	0e 94 91 15 	call	0x2b22	; 0x2b22 <pow>
    2330:	6b 01       	movw	r12, r22
    2332:	7c 01       	movw	r14, r24
	m_usb_tx_string("Distance: ");
    2334:	8e ec       	ldi	r24, 0xCE	; 206
    2336:	92 e0       	ldi	r25, 0x02	; 2
    2338:	0e 94 c7 06 	call	0xd8e	; 0xd8e <print_P>
	m_usb_tx_int(dist);
    233c:	c7 01       	movw	r24, r14
    233e:	b6 01       	movw	r22, r12
    2340:	0e 94 5b 13 	call	0x26b6	; 0x26b6 <__fixsfsi>
    2344:	cb 01       	movw	r24, r22
    2346:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <m_usb_tx_int>
	m_usb_tx_char(13);
    234a:	8d e0       	ldi	r24, 0x0D	; 13
    234c:	0e 94 ab 04 	call	0x956	; 0x956 <m_usb_tx_char>
	// if ( abs(OPPONENT_Y - robot->y) > 15 || abs(OPPONENT_X - robot->x) > 30) {
	if (dist < 20) {
    2350:	20 e0       	ldi	r18, 0x00	; 0
    2352:	30 e0       	ldi	r19, 0x00	; 0
    2354:	40 ea       	ldi	r20, 0xA0	; 160
    2356:	51 e4       	ldi	r21, 0x41	; 65
    2358:	c7 01       	movw	r24, r14
    235a:	b6 01       	movw	r22, r12
    235c:	0e 94 a5 12 	call	0x254a	; 0x254a <__cmpsf2>
		// you're in the goal
		//motor_stop();
		return true;
	}
	 return false;
 }
    2360:	88 1f       	adc	r24, r24
    2362:	88 27       	eor	r24, r24
    2364:	88 1f       	adc	r24, r24
    2366:	68 96       	adiw	r28, 0x18	; 24
    2368:	0f b6       	in	r0, 0x3f	; 63
    236a:	f8 94       	cli
    236c:	de bf       	out	0x3e, r29	; 62
    236e:	0f be       	out	0x3f, r0	; 63
    2370:	cd bf       	out	0x3d, r28	; 61
    2372:	df 91       	pop	r29
    2374:	cf 91       	pop	r28
    2376:	1f 91       	pop	r17
    2378:	0f 91       	pop	r16
    237a:	ff 90       	pop	r15
    237c:	ef 90       	pop	r14
    237e:	df 90       	pop	r13
    2380:	cf 90       	pop	r12
    2382:	bf 90       	pop	r11
    2384:	af 90       	pop	r10
    2386:	9f 90       	pop	r9
    2388:	8f 90       	pop	r8
    238a:	08 95       	ret

0000238c <__subsf3>:
    238c:	50 58       	subi	r21, 0x80	; 128

0000238e <__addsf3>:
    238e:	bb 27       	eor	r27, r27
    2390:	aa 27       	eor	r26, r26
    2392:	0e 94 de 11 	call	0x23bc	; 0x23bc <__addsf3x>
    2396:	0c 94 5b 14 	jmp	0x28b6	; 0x28b6 <__fp_round>
    239a:	0e 94 22 14 	call	0x2844	; 0x2844 <__fp_pscA>
    239e:	38 f0       	brcs	.+14     	; 0x23ae <__addsf3+0x20>
    23a0:	0e 94 29 14 	call	0x2852	; 0x2852 <__fp_pscB>
    23a4:	20 f0       	brcs	.+8      	; 0x23ae <__addsf3+0x20>
    23a6:	39 f4       	brne	.+14     	; 0x23b6 <__addsf3+0x28>
    23a8:	9f 3f       	cpi	r25, 0xFF	; 255
    23aa:	19 f4       	brne	.+6      	; 0x23b2 <__addsf3+0x24>
    23ac:	26 f4       	brtc	.+8      	; 0x23b6 <__addsf3+0x28>
    23ae:	0c 94 f8 13 	jmp	0x27f0	; 0x27f0 <__fp_nan>
    23b2:	0e f4       	brtc	.+2      	; 0x23b6 <__addsf3+0x28>
    23b4:	e0 95       	com	r30
    23b6:	e7 fb       	bst	r30, 7
    23b8:	0c 94 f2 13 	jmp	0x27e4	; 0x27e4 <__fp_inf>

000023bc <__addsf3x>:
    23bc:	e9 2f       	mov	r30, r25
    23be:	0e 94 80 14 	call	0x2900	; 0x2900 <__fp_split3>
    23c2:	58 f3       	brcs	.-42     	; 0x239a <__addsf3+0xc>
    23c4:	ba 17       	cp	r27, r26
    23c6:	62 07       	cpc	r22, r18
    23c8:	73 07       	cpc	r23, r19
    23ca:	84 07       	cpc	r24, r20
    23cc:	95 07       	cpc	r25, r21
    23ce:	20 f0       	brcs	.+8      	; 0x23d8 <__addsf3x+0x1c>
    23d0:	79 f4       	brne	.+30     	; 0x23f0 <__addsf3x+0x34>
    23d2:	a6 f5       	brtc	.+104    	; 0x243c <__addsf3x+0x80>
    23d4:	0c 94 a2 14 	jmp	0x2944	; 0x2944 <__fp_zero>
    23d8:	0e f4       	brtc	.+2      	; 0x23dc <__addsf3x+0x20>
    23da:	e0 95       	com	r30
    23dc:	0b 2e       	mov	r0, r27
    23de:	ba 2f       	mov	r27, r26
    23e0:	a0 2d       	mov	r26, r0
    23e2:	0b 01       	movw	r0, r22
    23e4:	b9 01       	movw	r22, r18
    23e6:	90 01       	movw	r18, r0
    23e8:	0c 01       	movw	r0, r24
    23ea:	ca 01       	movw	r24, r20
    23ec:	a0 01       	movw	r20, r0
    23ee:	11 24       	eor	r1, r1
    23f0:	ff 27       	eor	r31, r31
    23f2:	59 1b       	sub	r21, r25
    23f4:	99 f0       	breq	.+38     	; 0x241c <__addsf3x+0x60>
    23f6:	59 3f       	cpi	r21, 0xF9	; 249
    23f8:	50 f4       	brcc	.+20     	; 0x240e <__addsf3x+0x52>
    23fa:	50 3e       	cpi	r21, 0xE0	; 224
    23fc:	68 f1       	brcs	.+90     	; 0x2458 <__addsf3x+0x9c>
    23fe:	1a 16       	cp	r1, r26
    2400:	f0 40       	sbci	r31, 0x00	; 0
    2402:	a2 2f       	mov	r26, r18
    2404:	23 2f       	mov	r18, r19
    2406:	34 2f       	mov	r19, r20
    2408:	44 27       	eor	r20, r20
    240a:	58 5f       	subi	r21, 0xF8	; 248
    240c:	f3 cf       	rjmp	.-26     	; 0x23f4 <__addsf3x+0x38>
    240e:	46 95       	lsr	r20
    2410:	37 95       	ror	r19
    2412:	27 95       	ror	r18
    2414:	a7 95       	ror	r26
    2416:	f0 40       	sbci	r31, 0x00	; 0
    2418:	53 95       	inc	r21
    241a:	c9 f7       	brne	.-14     	; 0x240e <__addsf3x+0x52>
    241c:	7e f4       	brtc	.+30     	; 0x243c <__addsf3x+0x80>
    241e:	1f 16       	cp	r1, r31
    2420:	ba 0b       	sbc	r27, r26
    2422:	62 0b       	sbc	r22, r18
    2424:	73 0b       	sbc	r23, r19
    2426:	84 0b       	sbc	r24, r20
    2428:	ba f0       	brmi	.+46     	; 0x2458 <__addsf3x+0x9c>
    242a:	91 50       	subi	r25, 0x01	; 1
    242c:	a1 f0       	breq	.+40     	; 0x2456 <__addsf3x+0x9a>
    242e:	ff 0f       	add	r31, r31
    2430:	bb 1f       	adc	r27, r27
    2432:	66 1f       	adc	r22, r22
    2434:	77 1f       	adc	r23, r23
    2436:	88 1f       	adc	r24, r24
    2438:	c2 f7       	brpl	.-16     	; 0x242a <__addsf3x+0x6e>
    243a:	0e c0       	rjmp	.+28     	; 0x2458 <__addsf3x+0x9c>
    243c:	ba 0f       	add	r27, r26
    243e:	62 1f       	adc	r22, r18
    2440:	73 1f       	adc	r23, r19
    2442:	84 1f       	adc	r24, r20
    2444:	48 f4       	brcc	.+18     	; 0x2458 <__addsf3x+0x9c>
    2446:	87 95       	ror	r24
    2448:	77 95       	ror	r23
    244a:	67 95       	ror	r22
    244c:	b7 95       	ror	r27
    244e:	f7 95       	ror	r31
    2450:	9e 3f       	cpi	r25, 0xFE	; 254
    2452:	08 f0       	brcs	.+2      	; 0x2456 <__addsf3x+0x9a>
    2454:	b0 cf       	rjmp	.-160    	; 0x23b6 <__addsf3+0x28>
    2456:	93 95       	inc	r25
    2458:	88 0f       	add	r24, r24
    245a:	08 f0       	brcs	.+2      	; 0x245e <__addsf3x+0xa2>
    245c:	99 27       	eor	r25, r25
    245e:	ee 0f       	add	r30, r30
    2460:	97 95       	ror	r25
    2462:	87 95       	ror	r24
    2464:	08 95       	ret
    2466:	0e 94 22 14 	call	0x2844	; 0x2844 <__fp_pscA>
    246a:	60 f0       	brcs	.+24     	; 0x2484 <__addsf3x+0xc8>
    246c:	80 e8       	ldi	r24, 0x80	; 128
    246e:	91 e0       	ldi	r25, 0x01	; 1
    2470:	09 f4       	brne	.+2      	; 0x2474 <__addsf3x+0xb8>
    2472:	9e ef       	ldi	r25, 0xFE	; 254
    2474:	0e 94 29 14 	call	0x2852	; 0x2852 <__fp_pscB>
    2478:	28 f0       	brcs	.+10     	; 0x2484 <__addsf3x+0xc8>
    247a:	40 e8       	ldi	r20, 0x80	; 128
    247c:	51 e0       	ldi	r21, 0x01	; 1
    247e:	71 f4       	brne	.+28     	; 0x249c <atan2+0x10>
    2480:	5e ef       	ldi	r21, 0xFE	; 254
    2482:	0c c0       	rjmp	.+24     	; 0x249c <atan2+0x10>
    2484:	0c 94 f8 13 	jmp	0x27f0	; 0x27f0 <__fp_nan>
    2488:	0c 94 a2 14 	jmp	0x2944	; 0x2944 <__fp_zero>

0000248c <atan2>:
    248c:	e9 2f       	mov	r30, r25
    248e:	e0 78       	andi	r30, 0x80	; 128
    2490:	0e 94 80 14 	call	0x2900	; 0x2900 <__fp_split3>
    2494:	40 f3       	brcs	.-48     	; 0x2466 <__addsf3x+0xaa>
    2496:	09 2e       	mov	r0, r25
    2498:	05 2a       	or	r0, r21
    249a:	b1 f3       	breq	.-20     	; 0x2488 <__addsf3x+0xcc>
    249c:	26 17       	cp	r18, r22
    249e:	37 07       	cpc	r19, r23
    24a0:	48 07       	cpc	r20, r24
    24a2:	59 07       	cpc	r21, r25
    24a4:	38 f0       	brcs	.+14     	; 0x24b4 <atan2+0x28>
    24a6:	0e 2e       	mov	r0, r30
    24a8:	07 f8       	bld	r0, 7
    24aa:	e0 25       	eor	r30, r0
    24ac:	69 f0       	breq	.+26     	; 0x24c8 <atan2+0x3c>
    24ae:	e0 25       	eor	r30, r0
    24b0:	e0 64       	ori	r30, 0x40	; 64
    24b2:	0a c0       	rjmp	.+20     	; 0x24c8 <atan2+0x3c>
    24b4:	ef 63       	ori	r30, 0x3F	; 63
    24b6:	07 f8       	bld	r0, 7
    24b8:	00 94       	com	r0
    24ba:	07 fa       	bst	r0, 7
    24bc:	db 01       	movw	r26, r22
    24be:	b9 01       	movw	r22, r18
    24c0:	9d 01       	movw	r18, r26
    24c2:	dc 01       	movw	r26, r24
    24c4:	ca 01       	movw	r24, r20
    24c6:	ad 01       	movw	r20, r26
    24c8:	ef 93       	push	r30
    24ca:	0e 94 c6 12 	call	0x258c	; 0x258c <__divsf3_pse>
    24ce:	0e 94 5b 14 	call	0x28b6	; 0x28b6 <__fp_round>
    24d2:	0e 94 76 12 	call	0x24ec	; 0x24ec <atan>
    24d6:	5f 91       	pop	r21
    24d8:	55 23       	and	r21, r21
    24da:	39 f0       	breq	.+14     	; 0x24ea <atan2+0x5e>
    24dc:	2b ed       	ldi	r18, 0xDB	; 219
    24de:	3f e0       	ldi	r19, 0x0F	; 15
    24e0:	49 e4       	ldi	r20, 0x49	; 73
    24e2:	50 fd       	sbrc	r21, 0
    24e4:	49 ec       	ldi	r20, 0xC9	; 201
    24e6:	0c 94 c7 11 	jmp	0x238e	; 0x238e <__addsf3>
    24ea:	08 95       	ret

000024ec <atan>:
    24ec:	df 93       	push	r29
    24ee:	dd 27       	eor	r29, r29
    24f0:	b9 2f       	mov	r27, r25
    24f2:	bf 77       	andi	r27, 0x7F	; 127
    24f4:	40 e8       	ldi	r20, 0x80	; 128
    24f6:	5f e3       	ldi	r21, 0x3F	; 63
    24f8:	16 16       	cp	r1, r22
    24fa:	17 06       	cpc	r1, r23
    24fc:	48 07       	cpc	r20, r24
    24fe:	5b 07       	cpc	r21, r27
    2500:	18 f4       	brcc	.+6      	; 0x2508 <atan+0x1c>
    2502:	d9 2f       	mov	r29, r25
    2504:	0e 94 ae 14 	call	0x295c	; 0x295c <inverse>
    2508:	9f 93       	push	r25
    250a:	8f 93       	push	r24
    250c:	7f 93       	push	r23
    250e:	6f 93       	push	r22
    2510:	0e 94 e9 15 	call	0x2bd2	; 0x2bd2 <square>
    2514:	ec ea       	ldi	r30, 0xAC	; 172
    2516:	f0 e0       	ldi	r31, 0x00	; 0
    2518:	0e 94 fb 13 	call	0x27f6	; 0x27f6 <__fp_powser>
    251c:	0e 94 5b 14 	call	0x28b6	; 0x28b6 <__fp_round>
    2520:	2f 91       	pop	r18
    2522:	3f 91       	pop	r19
    2524:	4f 91       	pop	r20
    2526:	5f 91       	pop	r21
    2528:	0e 94 37 15 	call	0x2a6e	; 0x2a6e <__mulsf3x>
    252c:	dd 23       	and	r29, r29
    252e:	51 f0       	breq	.+20     	; 0x2544 <atan+0x58>
    2530:	90 58       	subi	r25, 0x80	; 128
    2532:	a2 ea       	ldi	r26, 0xA2	; 162
    2534:	2a ed       	ldi	r18, 0xDA	; 218
    2536:	3f e0       	ldi	r19, 0x0F	; 15
    2538:	49 ec       	ldi	r20, 0xC9	; 201
    253a:	5f e3       	ldi	r21, 0x3F	; 63
    253c:	d0 78       	andi	r29, 0x80	; 128
    253e:	5d 27       	eor	r21, r29
    2540:	0e 94 de 11 	call	0x23bc	; 0x23bc <__addsf3x>
    2544:	df 91       	pop	r29
    2546:	0c 94 5b 14 	jmp	0x28b6	; 0x28b6 <__fp_round>

0000254a <__cmpsf2>:
    254a:	0e 94 ce 13 	call	0x279c	; 0x279c <__fp_cmp>
    254e:	08 f4       	brcc	.+2      	; 0x2552 <__cmpsf2+0x8>
    2550:	81 e0       	ldi	r24, 0x01	; 1
    2552:	08 95       	ret

00002554 <cos>:
    2554:	0e 94 32 14 	call	0x2864	; 0x2864 <__fp_rempio2>
    2558:	e3 95       	inc	r30
    255a:	0c 94 6c 14 	jmp	0x28d8	; 0x28d8 <__fp_sinus>

0000255e <__divsf3>:
    255e:	0e 94 c3 12 	call	0x2586	; 0x2586 <__divsf3x>
    2562:	0c 94 5b 14 	jmp	0x28b6	; 0x28b6 <__fp_round>
    2566:	0e 94 29 14 	call	0x2852	; 0x2852 <__fp_pscB>
    256a:	58 f0       	brcs	.+22     	; 0x2582 <__divsf3+0x24>
    256c:	0e 94 22 14 	call	0x2844	; 0x2844 <__fp_pscA>
    2570:	40 f0       	brcs	.+16     	; 0x2582 <__divsf3+0x24>
    2572:	29 f4       	brne	.+10     	; 0x257e <__divsf3+0x20>
    2574:	5f 3f       	cpi	r21, 0xFF	; 255
    2576:	29 f0       	breq	.+10     	; 0x2582 <__divsf3+0x24>
    2578:	0c 94 f2 13 	jmp	0x27e4	; 0x27e4 <__fp_inf>
    257c:	51 11       	cpse	r21, r1
    257e:	0c 94 a3 14 	jmp	0x2946	; 0x2946 <__fp_szero>
    2582:	0c 94 f8 13 	jmp	0x27f0	; 0x27f0 <__fp_nan>

00002586 <__divsf3x>:
    2586:	0e 94 80 14 	call	0x2900	; 0x2900 <__fp_split3>
    258a:	68 f3       	brcs	.-38     	; 0x2566 <__divsf3+0x8>

0000258c <__divsf3_pse>:
    258c:	99 23       	and	r25, r25
    258e:	b1 f3       	breq	.-20     	; 0x257c <__divsf3+0x1e>
    2590:	55 23       	and	r21, r21
    2592:	91 f3       	breq	.-28     	; 0x2578 <__divsf3+0x1a>
    2594:	95 1b       	sub	r25, r21
    2596:	55 0b       	sbc	r21, r21
    2598:	bb 27       	eor	r27, r27
    259a:	aa 27       	eor	r26, r26
    259c:	62 17       	cp	r22, r18
    259e:	73 07       	cpc	r23, r19
    25a0:	84 07       	cpc	r24, r20
    25a2:	38 f0       	brcs	.+14     	; 0x25b2 <__divsf3_pse+0x26>
    25a4:	9f 5f       	subi	r25, 0xFF	; 255
    25a6:	5f 4f       	sbci	r21, 0xFF	; 255
    25a8:	22 0f       	add	r18, r18
    25aa:	33 1f       	adc	r19, r19
    25ac:	44 1f       	adc	r20, r20
    25ae:	aa 1f       	adc	r26, r26
    25b0:	a9 f3       	breq	.-22     	; 0x259c <__divsf3_pse+0x10>
    25b2:	35 d0       	rcall	.+106    	; 0x261e <__divsf3_pse+0x92>
    25b4:	0e 2e       	mov	r0, r30
    25b6:	3a f0       	brmi	.+14     	; 0x25c6 <__divsf3_pse+0x3a>
    25b8:	e0 e8       	ldi	r30, 0x80	; 128
    25ba:	32 d0       	rcall	.+100    	; 0x2620 <__divsf3_pse+0x94>
    25bc:	91 50       	subi	r25, 0x01	; 1
    25be:	50 40       	sbci	r21, 0x00	; 0
    25c0:	e6 95       	lsr	r30
    25c2:	00 1c       	adc	r0, r0
    25c4:	ca f7       	brpl	.-14     	; 0x25b8 <__divsf3_pse+0x2c>
    25c6:	2b d0       	rcall	.+86     	; 0x261e <__divsf3_pse+0x92>
    25c8:	fe 2f       	mov	r31, r30
    25ca:	29 d0       	rcall	.+82     	; 0x261e <__divsf3_pse+0x92>
    25cc:	66 0f       	add	r22, r22
    25ce:	77 1f       	adc	r23, r23
    25d0:	88 1f       	adc	r24, r24
    25d2:	bb 1f       	adc	r27, r27
    25d4:	26 17       	cp	r18, r22
    25d6:	37 07       	cpc	r19, r23
    25d8:	48 07       	cpc	r20, r24
    25da:	ab 07       	cpc	r26, r27
    25dc:	b0 e8       	ldi	r27, 0x80	; 128
    25de:	09 f0       	breq	.+2      	; 0x25e2 <__divsf3_pse+0x56>
    25e0:	bb 0b       	sbc	r27, r27
    25e2:	80 2d       	mov	r24, r0
    25e4:	bf 01       	movw	r22, r30
    25e6:	ff 27       	eor	r31, r31
    25e8:	93 58       	subi	r25, 0x83	; 131
    25ea:	5f 4f       	sbci	r21, 0xFF	; 255
    25ec:	3a f0       	brmi	.+14     	; 0x25fc <__divsf3_pse+0x70>
    25ee:	9e 3f       	cpi	r25, 0xFE	; 254
    25f0:	51 05       	cpc	r21, r1
    25f2:	78 f0       	brcs	.+30     	; 0x2612 <__divsf3_pse+0x86>
    25f4:	0c 94 f2 13 	jmp	0x27e4	; 0x27e4 <__fp_inf>
    25f8:	0c 94 a3 14 	jmp	0x2946	; 0x2946 <__fp_szero>
    25fc:	5f 3f       	cpi	r21, 0xFF	; 255
    25fe:	e4 f3       	brlt	.-8      	; 0x25f8 <__divsf3_pse+0x6c>
    2600:	98 3e       	cpi	r25, 0xE8	; 232
    2602:	d4 f3       	brlt	.-12     	; 0x25f8 <__divsf3_pse+0x6c>
    2604:	86 95       	lsr	r24
    2606:	77 95       	ror	r23
    2608:	67 95       	ror	r22
    260a:	b7 95       	ror	r27
    260c:	f7 95       	ror	r31
    260e:	9f 5f       	subi	r25, 0xFF	; 255
    2610:	c9 f7       	brne	.-14     	; 0x2604 <__divsf3_pse+0x78>
    2612:	88 0f       	add	r24, r24
    2614:	91 1d       	adc	r25, r1
    2616:	96 95       	lsr	r25
    2618:	87 95       	ror	r24
    261a:	97 f9       	bld	r25, 7
    261c:	08 95       	ret
    261e:	e1 e0       	ldi	r30, 0x01	; 1
    2620:	66 0f       	add	r22, r22
    2622:	77 1f       	adc	r23, r23
    2624:	88 1f       	adc	r24, r24
    2626:	bb 1f       	adc	r27, r27
    2628:	62 17       	cp	r22, r18
    262a:	73 07       	cpc	r23, r19
    262c:	84 07       	cpc	r24, r20
    262e:	ba 07       	cpc	r27, r26
    2630:	20 f0       	brcs	.+8      	; 0x263a <__divsf3_pse+0xae>
    2632:	62 1b       	sub	r22, r18
    2634:	73 0b       	sbc	r23, r19
    2636:	84 0b       	sbc	r24, r20
    2638:	ba 0b       	sbc	r27, r26
    263a:	ee 1f       	adc	r30, r30
    263c:	88 f7       	brcc	.-30     	; 0x2620 <__divsf3_pse+0x94>
    263e:	e0 95       	com	r30
    2640:	08 95       	ret
    2642:	29 f4       	brne	.+10     	; 0x264e <__divsf3_pse+0xc2>
    2644:	16 f0       	brts	.+4      	; 0x264a <__divsf3_pse+0xbe>
    2646:	0c 94 f2 13 	jmp	0x27e4	; 0x27e4 <__fp_inf>
    264a:	0c 94 a2 14 	jmp	0x2944	; 0x2944 <__fp_zero>
    264e:	0c 94 f8 13 	jmp	0x27f0	; 0x27f0 <__fp_nan>

00002652 <exp>:
    2652:	0e 94 88 14 	call	0x2910	; 0x2910 <__fp_splitA>
    2656:	a8 f3       	brcs	.-22     	; 0x2642 <__divsf3_pse+0xb6>
    2658:	96 38       	cpi	r25, 0x86	; 134
    265a:	a0 f7       	brcc	.-24     	; 0x2644 <__divsf3_pse+0xb8>
    265c:	07 f8       	bld	r0, 7
    265e:	0f 92       	push	r0
    2660:	e8 94       	clt
    2662:	2b e3       	ldi	r18, 0x3B	; 59
    2664:	3a ea       	ldi	r19, 0xAA	; 170
    2666:	48 eb       	ldi	r20, 0xB8	; 184
    2668:	5f e7       	ldi	r21, 0x7F	; 127
    266a:	0e 94 3a 15 	call	0x2a74	; 0x2a74 <__mulsf3_pse>
    266e:	0f 92       	push	r0
    2670:	0f 92       	push	r0
    2672:	0f 92       	push	r0
    2674:	4d b7       	in	r20, 0x3d	; 61
    2676:	5e b7       	in	r21, 0x3e	; 62
    2678:	0f 92       	push	r0
    267a:	0e 94 f0 14 	call	0x29e0	; 0x29e0 <modf>
    267e:	e9 ed       	ldi	r30, 0xD9	; 217
    2680:	f0 e0       	ldi	r31, 0x00	; 0
    2682:	0e 94 fb 13 	call	0x27f6	; 0x27f6 <__fp_powser>
    2686:	4f 91       	pop	r20
    2688:	5f 91       	pop	r21
    268a:	ef 91       	pop	r30
    268c:	ff 91       	pop	r31
    268e:	e5 95       	asr	r30
    2690:	ee 1f       	adc	r30, r30
    2692:	ff 1f       	adc	r31, r31
    2694:	49 f0       	breq	.+18     	; 0x26a8 <exp+0x56>
    2696:	fe 57       	subi	r31, 0x7E	; 126
    2698:	e0 68       	ori	r30, 0x80	; 128
    269a:	44 27       	eor	r20, r20
    269c:	ee 0f       	add	r30, r30
    269e:	44 1f       	adc	r20, r20
    26a0:	fa 95       	dec	r31
    26a2:	e1 f7       	brne	.-8      	; 0x269c <exp+0x4a>
    26a4:	41 95       	neg	r20
    26a6:	55 0b       	sbc	r21, r21
    26a8:	0e 94 ba 14 	call	0x2974	; 0x2974 <ldexp>
    26ac:	0f 90       	pop	r0
    26ae:	07 fe       	sbrs	r0, 7
    26b0:	0c 94 ae 14 	jmp	0x295c	; 0x295c <inverse>
    26b4:	08 95       	ret

000026b6 <__fixsfsi>:
    26b6:	0e 94 62 13 	call	0x26c4	; 0x26c4 <__fixunssfsi>
    26ba:	68 94       	set
    26bc:	b1 11       	cpse	r27, r1
    26be:	0c 94 a3 14 	jmp	0x2946	; 0x2946 <__fp_szero>
    26c2:	08 95       	ret

000026c4 <__fixunssfsi>:
    26c4:	0e 94 88 14 	call	0x2910	; 0x2910 <__fp_splitA>
    26c8:	88 f0       	brcs	.+34     	; 0x26ec <__fixunssfsi+0x28>
    26ca:	9f 57       	subi	r25, 0x7F	; 127
    26cc:	98 f0       	brcs	.+38     	; 0x26f4 <__fixunssfsi+0x30>
    26ce:	b9 2f       	mov	r27, r25
    26d0:	99 27       	eor	r25, r25
    26d2:	b7 51       	subi	r27, 0x17	; 23
    26d4:	b0 f0       	brcs	.+44     	; 0x2702 <__fixunssfsi+0x3e>
    26d6:	e1 f0       	breq	.+56     	; 0x2710 <__fixunssfsi+0x4c>
    26d8:	66 0f       	add	r22, r22
    26da:	77 1f       	adc	r23, r23
    26dc:	88 1f       	adc	r24, r24
    26de:	99 1f       	adc	r25, r25
    26e0:	1a f0       	brmi	.+6      	; 0x26e8 <__fixunssfsi+0x24>
    26e2:	ba 95       	dec	r27
    26e4:	c9 f7       	brne	.-14     	; 0x26d8 <__fixunssfsi+0x14>
    26e6:	14 c0       	rjmp	.+40     	; 0x2710 <__fixunssfsi+0x4c>
    26e8:	b1 30       	cpi	r27, 0x01	; 1
    26ea:	91 f0       	breq	.+36     	; 0x2710 <__fixunssfsi+0x4c>
    26ec:	0e 94 a2 14 	call	0x2944	; 0x2944 <__fp_zero>
    26f0:	b1 e0       	ldi	r27, 0x01	; 1
    26f2:	08 95       	ret
    26f4:	0c 94 a2 14 	jmp	0x2944	; 0x2944 <__fp_zero>
    26f8:	67 2f       	mov	r22, r23
    26fa:	78 2f       	mov	r23, r24
    26fc:	88 27       	eor	r24, r24
    26fe:	b8 5f       	subi	r27, 0xF8	; 248
    2700:	39 f0       	breq	.+14     	; 0x2710 <__fixunssfsi+0x4c>
    2702:	b9 3f       	cpi	r27, 0xF9	; 249
    2704:	cc f3       	brlt	.-14     	; 0x26f8 <__fixunssfsi+0x34>
    2706:	86 95       	lsr	r24
    2708:	77 95       	ror	r23
    270a:	67 95       	ror	r22
    270c:	b3 95       	inc	r27
    270e:	d9 f7       	brne	.-10     	; 0x2706 <__fixunssfsi+0x42>
    2710:	3e f4       	brtc	.+14     	; 0x2720 <__fixunssfsi+0x5c>
    2712:	90 95       	com	r25
    2714:	80 95       	com	r24
    2716:	70 95       	com	r23
    2718:	61 95       	neg	r22
    271a:	7f 4f       	sbci	r23, 0xFF	; 255
    271c:	8f 4f       	sbci	r24, 0xFF	; 255
    271e:	9f 4f       	sbci	r25, 0xFF	; 255
    2720:	08 95       	ret

00002722 <__floatunsisf>:
    2722:	e8 94       	clt
    2724:	09 c0       	rjmp	.+18     	; 0x2738 <__floatsisf+0x12>

00002726 <__floatsisf>:
    2726:	97 fb       	bst	r25, 7
    2728:	3e f4       	brtc	.+14     	; 0x2738 <__floatsisf+0x12>
    272a:	90 95       	com	r25
    272c:	80 95       	com	r24
    272e:	70 95       	com	r23
    2730:	61 95       	neg	r22
    2732:	7f 4f       	sbci	r23, 0xFF	; 255
    2734:	8f 4f       	sbci	r24, 0xFF	; 255
    2736:	9f 4f       	sbci	r25, 0xFF	; 255
    2738:	99 23       	and	r25, r25
    273a:	a9 f0       	breq	.+42     	; 0x2766 <__floatsisf+0x40>
    273c:	f9 2f       	mov	r31, r25
    273e:	96 e9       	ldi	r25, 0x96	; 150
    2740:	bb 27       	eor	r27, r27
    2742:	93 95       	inc	r25
    2744:	f6 95       	lsr	r31
    2746:	87 95       	ror	r24
    2748:	77 95       	ror	r23
    274a:	67 95       	ror	r22
    274c:	b7 95       	ror	r27
    274e:	f1 11       	cpse	r31, r1
    2750:	f8 cf       	rjmp	.-16     	; 0x2742 <__floatsisf+0x1c>
    2752:	fa f4       	brpl	.+62     	; 0x2792 <__floatsisf+0x6c>
    2754:	bb 0f       	add	r27, r27
    2756:	11 f4       	brne	.+4      	; 0x275c <__floatsisf+0x36>
    2758:	60 ff       	sbrs	r22, 0
    275a:	1b c0       	rjmp	.+54     	; 0x2792 <__floatsisf+0x6c>
    275c:	6f 5f       	subi	r22, 0xFF	; 255
    275e:	7f 4f       	sbci	r23, 0xFF	; 255
    2760:	8f 4f       	sbci	r24, 0xFF	; 255
    2762:	9f 4f       	sbci	r25, 0xFF	; 255
    2764:	16 c0       	rjmp	.+44     	; 0x2792 <__floatsisf+0x6c>
    2766:	88 23       	and	r24, r24
    2768:	11 f0       	breq	.+4      	; 0x276e <__floatsisf+0x48>
    276a:	96 e9       	ldi	r25, 0x96	; 150
    276c:	11 c0       	rjmp	.+34     	; 0x2790 <__floatsisf+0x6a>
    276e:	77 23       	and	r23, r23
    2770:	21 f0       	breq	.+8      	; 0x277a <__floatsisf+0x54>
    2772:	9e e8       	ldi	r25, 0x8E	; 142
    2774:	87 2f       	mov	r24, r23
    2776:	76 2f       	mov	r23, r22
    2778:	05 c0       	rjmp	.+10     	; 0x2784 <__floatsisf+0x5e>
    277a:	66 23       	and	r22, r22
    277c:	71 f0       	breq	.+28     	; 0x279a <__floatsisf+0x74>
    277e:	96 e8       	ldi	r25, 0x86	; 134
    2780:	86 2f       	mov	r24, r22
    2782:	70 e0       	ldi	r23, 0x00	; 0
    2784:	60 e0       	ldi	r22, 0x00	; 0
    2786:	2a f0       	brmi	.+10     	; 0x2792 <__floatsisf+0x6c>
    2788:	9a 95       	dec	r25
    278a:	66 0f       	add	r22, r22
    278c:	77 1f       	adc	r23, r23
    278e:	88 1f       	adc	r24, r24
    2790:	da f7       	brpl	.-10     	; 0x2788 <__floatsisf+0x62>
    2792:	88 0f       	add	r24, r24
    2794:	96 95       	lsr	r25
    2796:	87 95       	ror	r24
    2798:	97 f9       	bld	r25, 7
    279a:	08 95       	ret

0000279c <__fp_cmp>:
    279c:	99 0f       	add	r25, r25
    279e:	00 08       	sbc	r0, r0
    27a0:	55 0f       	add	r21, r21
    27a2:	aa 0b       	sbc	r26, r26
    27a4:	e0 e8       	ldi	r30, 0x80	; 128
    27a6:	fe ef       	ldi	r31, 0xFE	; 254
    27a8:	16 16       	cp	r1, r22
    27aa:	17 06       	cpc	r1, r23
    27ac:	e8 07       	cpc	r30, r24
    27ae:	f9 07       	cpc	r31, r25
    27b0:	c0 f0       	brcs	.+48     	; 0x27e2 <__fp_cmp+0x46>
    27b2:	12 16       	cp	r1, r18
    27b4:	13 06       	cpc	r1, r19
    27b6:	e4 07       	cpc	r30, r20
    27b8:	f5 07       	cpc	r31, r21
    27ba:	98 f0       	brcs	.+38     	; 0x27e2 <__fp_cmp+0x46>
    27bc:	62 1b       	sub	r22, r18
    27be:	73 0b       	sbc	r23, r19
    27c0:	84 0b       	sbc	r24, r20
    27c2:	95 0b       	sbc	r25, r21
    27c4:	39 f4       	brne	.+14     	; 0x27d4 <__fp_cmp+0x38>
    27c6:	0a 26       	eor	r0, r26
    27c8:	61 f0       	breq	.+24     	; 0x27e2 <__fp_cmp+0x46>
    27ca:	23 2b       	or	r18, r19
    27cc:	24 2b       	or	r18, r20
    27ce:	25 2b       	or	r18, r21
    27d0:	21 f4       	brne	.+8      	; 0x27da <__fp_cmp+0x3e>
    27d2:	08 95       	ret
    27d4:	0a 26       	eor	r0, r26
    27d6:	09 f4       	brne	.+2      	; 0x27da <__fp_cmp+0x3e>
    27d8:	a1 40       	sbci	r26, 0x01	; 1
    27da:	a6 95       	lsr	r26
    27dc:	8f ef       	ldi	r24, 0xFF	; 255
    27de:	81 1d       	adc	r24, r1
    27e0:	81 1d       	adc	r24, r1
    27e2:	08 95       	ret

000027e4 <__fp_inf>:
    27e4:	97 f9       	bld	r25, 7
    27e6:	9f 67       	ori	r25, 0x7F	; 127
    27e8:	80 e8       	ldi	r24, 0x80	; 128
    27ea:	70 e0       	ldi	r23, 0x00	; 0
    27ec:	60 e0       	ldi	r22, 0x00	; 0
    27ee:	08 95       	ret

000027f0 <__fp_nan>:
    27f0:	9f ef       	ldi	r25, 0xFF	; 255
    27f2:	80 ec       	ldi	r24, 0xC0	; 192
    27f4:	08 95       	ret

000027f6 <__fp_powser>:
    27f6:	df 93       	push	r29
    27f8:	cf 93       	push	r28
    27fa:	1f 93       	push	r17
    27fc:	0f 93       	push	r16
    27fe:	ff 92       	push	r15
    2800:	ef 92       	push	r14
    2802:	df 92       	push	r13
    2804:	7b 01       	movw	r14, r22
    2806:	8c 01       	movw	r16, r24
    2808:	68 94       	set
    280a:	06 c0       	rjmp	.+12     	; 0x2818 <__fp_powser+0x22>
    280c:	da 2e       	mov	r13, r26
    280e:	ef 01       	movw	r28, r30
    2810:	0e 94 37 15 	call	0x2a6e	; 0x2a6e <__mulsf3x>
    2814:	fe 01       	movw	r30, r28
    2816:	e8 94       	clt
    2818:	a5 91       	lpm	r26, Z+
    281a:	25 91       	lpm	r18, Z+
    281c:	35 91       	lpm	r19, Z+
    281e:	45 91       	lpm	r20, Z+
    2820:	55 91       	lpm	r21, Z+
    2822:	a6 f3       	brts	.-24     	; 0x280c <__fp_powser+0x16>
    2824:	ef 01       	movw	r28, r30
    2826:	0e 94 de 11 	call	0x23bc	; 0x23bc <__addsf3x>
    282a:	fe 01       	movw	r30, r28
    282c:	97 01       	movw	r18, r14
    282e:	a8 01       	movw	r20, r16
    2830:	da 94       	dec	r13
    2832:	69 f7       	brne	.-38     	; 0x280e <__fp_powser+0x18>
    2834:	df 90       	pop	r13
    2836:	ef 90       	pop	r14
    2838:	ff 90       	pop	r15
    283a:	0f 91       	pop	r16
    283c:	1f 91       	pop	r17
    283e:	cf 91       	pop	r28
    2840:	df 91       	pop	r29
    2842:	08 95       	ret

00002844 <__fp_pscA>:
    2844:	00 24       	eor	r0, r0
    2846:	0a 94       	dec	r0
    2848:	16 16       	cp	r1, r22
    284a:	17 06       	cpc	r1, r23
    284c:	18 06       	cpc	r1, r24
    284e:	09 06       	cpc	r0, r25
    2850:	08 95       	ret

00002852 <__fp_pscB>:
    2852:	00 24       	eor	r0, r0
    2854:	0a 94       	dec	r0
    2856:	12 16       	cp	r1, r18
    2858:	13 06       	cpc	r1, r19
    285a:	14 06       	cpc	r1, r20
    285c:	05 06       	cpc	r0, r21
    285e:	08 95       	ret
    2860:	0c 94 f8 13 	jmp	0x27f0	; 0x27f0 <__fp_nan>

00002864 <__fp_rempio2>:
    2864:	0e 94 88 14 	call	0x2910	; 0x2910 <__fp_splitA>
    2868:	d8 f3       	brcs	.-10     	; 0x2860 <__fp_pscB+0xe>
    286a:	e8 94       	clt
    286c:	e0 e0       	ldi	r30, 0x00	; 0
    286e:	bb 27       	eor	r27, r27
    2870:	9f 57       	subi	r25, 0x7F	; 127
    2872:	f0 f0       	brcs	.+60     	; 0x28b0 <__fp_rempio2+0x4c>
    2874:	2a ed       	ldi	r18, 0xDA	; 218
    2876:	3f e0       	ldi	r19, 0x0F	; 15
    2878:	49 ec       	ldi	r20, 0xC9	; 201
    287a:	06 c0       	rjmp	.+12     	; 0x2888 <__fp_rempio2+0x24>
    287c:	ee 0f       	add	r30, r30
    287e:	bb 0f       	add	r27, r27
    2880:	66 1f       	adc	r22, r22
    2882:	77 1f       	adc	r23, r23
    2884:	88 1f       	adc	r24, r24
    2886:	28 f0       	brcs	.+10     	; 0x2892 <__fp_rempio2+0x2e>
    2888:	b2 3a       	cpi	r27, 0xA2	; 162
    288a:	62 07       	cpc	r22, r18
    288c:	73 07       	cpc	r23, r19
    288e:	84 07       	cpc	r24, r20
    2890:	28 f0       	brcs	.+10     	; 0x289c <__fp_rempio2+0x38>
    2892:	b2 5a       	subi	r27, 0xA2	; 162
    2894:	62 0b       	sbc	r22, r18
    2896:	73 0b       	sbc	r23, r19
    2898:	84 0b       	sbc	r24, r20
    289a:	e3 95       	inc	r30
    289c:	9a 95       	dec	r25
    289e:	72 f7       	brpl	.-36     	; 0x287c <__fp_rempio2+0x18>
    28a0:	80 38       	cpi	r24, 0x80	; 128
    28a2:	30 f4       	brcc	.+12     	; 0x28b0 <__fp_rempio2+0x4c>
    28a4:	9a 95       	dec	r25
    28a6:	bb 0f       	add	r27, r27
    28a8:	66 1f       	adc	r22, r22
    28aa:	77 1f       	adc	r23, r23
    28ac:	88 1f       	adc	r24, r24
    28ae:	d2 f7       	brpl	.-12     	; 0x28a4 <__fp_rempio2+0x40>
    28b0:	90 48       	sbci	r25, 0x80	; 128
    28b2:	0c 94 ef 15 	jmp	0x2bde	; 0x2bde <__fp_mpack_finite>

000028b6 <__fp_round>:
    28b6:	09 2e       	mov	r0, r25
    28b8:	03 94       	inc	r0
    28ba:	00 0c       	add	r0, r0
    28bc:	11 f4       	brne	.+4      	; 0x28c2 <__fp_round+0xc>
    28be:	88 23       	and	r24, r24
    28c0:	52 f0       	brmi	.+20     	; 0x28d6 <__fp_round+0x20>
    28c2:	bb 0f       	add	r27, r27
    28c4:	40 f4       	brcc	.+16     	; 0x28d6 <__fp_round+0x20>
    28c6:	bf 2b       	or	r27, r31
    28c8:	11 f4       	brne	.+4      	; 0x28ce <__fp_round+0x18>
    28ca:	60 ff       	sbrs	r22, 0
    28cc:	04 c0       	rjmp	.+8      	; 0x28d6 <__fp_round+0x20>
    28ce:	6f 5f       	subi	r22, 0xFF	; 255
    28d0:	7f 4f       	sbci	r23, 0xFF	; 255
    28d2:	8f 4f       	sbci	r24, 0xFF	; 255
    28d4:	9f 4f       	sbci	r25, 0xFF	; 255
    28d6:	08 95       	ret

000028d8 <__fp_sinus>:
    28d8:	ef 93       	push	r30
    28da:	e0 ff       	sbrs	r30, 0
    28dc:	07 c0       	rjmp	.+14     	; 0x28ec <__fp_sinus+0x14>
    28de:	a2 ea       	ldi	r26, 0xA2	; 162
    28e0:	2a ed       	ldi	r18, 0xDA	; 218
    28e2:	3f e0       	ldi	r19, 0x0F	; 15
    28e4:	49 ec       	ldi	r20, 0xC9	; 201
    28e6:	5f eb       	ldi	r21, 0xBF	; 191
    28e8:	0e 94 de 11 	call	0x23bc	; 0x23bc <__addsf3x>
    28ec:	0e 94 5b 14 	call	0x28b6	; 0x28b6 <__fp_round>
    28f0:	0f 90       	pop	r0
    28f2:	03 94       	inc	r0
    28f4:	01 fc       	sbrc	r0, 1
    28f6:	90 58       	subi	r25, 0x80	; 128
    28f8:	e1 e0       	ldi	r30, 0x01	; 1
    28fa:	f1 e0       	ldi	r31, 0x01	; 1
    28fc:	0c 94 fb 15 	jmp	0x2bf6	; 0x2bf6 <__fp_powsodd>

00002900 <__fp_split3>:
    2900:	57 fd       	sbrc	r21, 7
    2902:	90 58       	subi	r25, 0x80	; 128
    2904:	44 0f       	add	r20, r20
    2906:	55 1f       	adc	r21, r21
    2908:	59 f0       	breq	.+22     	; 0x2920 <__fp_splitA+0x10>
    290a:	5f 3f       	cpi	r21, 0xFF	; 255
    290c:	71 f0       	breq	.+28     	; 0x292a <__fp_splitA+0x1a>
    290e:	47 95       	ror	r20

00002910 <__fp_splitA>:
    2910:	88 0f       	add	r24, r24
    2912:	97 fb       	bst	r25, 7
    2914:	99 1f       	adc	r25, r25
    2916:	61 f0       	breq	.+24     	; 0x2930 <__fp_splitA+0x20>
    2918:	9f 3f       	cpi	r25, 0xFF	; 255
    291a:	79 f0       	breq	.+30     	; 0x293a <__fp_splitA+0x2a>
    291c:	87 95       	ror	r24
    291e:	08 95       	ret
    2920:	12 16       	cp	r1, r18
    2922:	13 06       	cpc	r1, r19
    2924:	14 06       	cpc	r1, r20
    2926:	55 1f       	adc	r21, r21
    2928:	f2 cf       	rjmp	.-28     	; 0x290e <__fp_split3+0xe>
    292a:	46 95       	lsr	r20
    292c:	f1 df       	rcall	.-30     	; 0x2910 <__fp_splitA>
    292e:	08 c0       	rjmp	.+16     	; 0x2940 <__fp_splitA+0x30>
    2930:	16 16       	cp	r1, r22
    2932:	17 06       	cpc	r1, r23
    2934:	18 06       	cpc	r1, r24
    2936:	99 1f       	adc	r25, r25
    2938:	f1 cf       	rjmp	.-30     	; 0x291c <__fp_splitA+0xc>
    293a:	86 95       	lsr	r24
    293c:	71 05       	cpc	r23, r1
    293e:	61 05       	cpc	r22, r1
    2940:	08 94       	sec
    2942:	08 95       	ret

00002944 <__fp_zero>:
    2944:	e8 94       	clt

00002946 <__fp_szero>:
    2946:	bb 27       	eor	r27, r27
    2948:	66 27       	eor	r22, r22
    294a:	77 27       	eor	r23, r23
    294c:	cb 01       	movw	r24, r22
    294e:	97 f9       	bld	r25, 7
    2950:	08 95       	ret

00002952 <__gesf2>:
    2952:	0e 94 ce 13 	call	0x279c	; 0x279c <__fp_cmp>
    2956:	08 f4       	brcc	.+2      	; 0x295a <__gesf2+0x8>
    2958:	8f ef       	ldi	r24, 0xFF	; 255
    295a:	08 95       	ret

0000295c <inverse>:
    295c:	9b 01       	movw	r18, r22
    295e:	ac 01       	movw	r20, r24
    2960:	60 e0       	ldi	r22, 0x00	; 0
    2962:	70 e0       	ldi	r23, 0x00	; 0
    2964:	80 e8       	ldi	r24, 0x80	; 128
    2966:	9f e3       	ldi	r25, 0x3F	; 63
    2968:	0c 94 af 12 	jmp	0x255e	; 0x255e <__divsf3>
    296c:	0c 94 f2 13 	jmp	0x27e4	; 0x27e4 <__fp_inf>
    2970:	0c 94 ed 15 	jmp	0x2bda	; 0x2bda <__fp_mpack>

00002974 <ldexp>:
    2974:	0e 94 88 14 	call	0x2910	; 0x2910 <__fp_splitA>
    2978:	d8 f3       	brcs	.-10     	; 0x2970 <inverse+0x14>
    297a:	99 23       	and	r25, r25
    297c:	c9 f3       	breq	.-14     	; 0x2970 <inverse+0x14>
    297e:	94 0f       	add	r25, r20
    2980:	51 1d       	adc	r21, r1
    2982:	a3 f3       	brvs	.-24     	; 0x296c <inverse+0x10>
    2984:	91 50       	subi	r25, 0x01	; 1
    2986:	50 40       	sbci	r21, 0x00	; 0
    2988:	94 f0       	brlt	.+36     	; 0x29ae <ldexp+0x3a>
    298a:	59 f0       	breq	.+22     	; 0x29a2 <ldexp+0x2e>
    298c:	88 23       	and	r24, r24
    298e:	32 f0       	brmi	.+12     	; 0x299c <ldexp+0x28>
    2990:	66 0f       	add	r22, r22
    2992:	77 1f       	adc	r23, r23
    2994:	88 1f       	adc	r24, r24
    2996:	91 50       	subi	r25, 0x01	; 1
    2998:	50 40       	sbci	r21, 0x00	; 0
    299a:	c1 f7       	brne	.-16     	; 0x298c <ldexp+0x18>
    299c:	9e 3f       	cpi	r25, 0xFE	; 254
    299e:	51 05       	cpc	r21, r1
    29a0:	2c f7       	brge	.-54     	; 0x296c <inverse+0x10>
    29a2:	88 0f       	add	r24, r24
    29a4:	91 1d       	adc	r25, r1
    29a6:	96 95       	lsr	r25
    29a8:	87 95       	ror	r24
    29aa:	97 f9       	bld	r25, 7
    29ac:	08 95       	ret
    29ae:	5f 3f       	cpi	r21, 0xFF	; 255
    29b0:	ac f0       	brlt	.+42     	; 0x29dc <ldexp+0x68>
    29b2:	98 3e       	cpi	r25, 0xE8	; 232
    29b4:	9c f0       	brlt	.+38     	; 0x29dc <ldexp+0x68>
    29b6:	bb 27       	eor	r27, r27
    29b8:	86 95       	lsr	r24
    29ba:	77 95       	ror	r23
    29bc:	67 95       	ror	r22
    29be:	b7 95       	ror	r27
    29c0:	08 f4       	brcc	.+2      	; 0x29c4 <ldexp+0x50>
    29c2:	b1 60       	ori	r27, 0x01	; 1
    29c4:	93 95       	inc	r25
    29c6:	c1 f7       	brne	.-16     	; 0x29b8 <ldexp+0x44>
    29c8:	bb 0f       	add	r27, r27
    29ca:	58 f7       	brcc	.-42     	; 0x29a2 <ldexp+0x2e>
    29cc:	11 f4       	brne	.+4      	; 0x29d2 <ldexp+0x5e>
    29ce:	60 ff       	sbrs	r22, 0
    29d0:	e8 cf       	rjmp	.-48     	; 0x29a2 <ldexp+0x2e>
    29d2:	6f 5f       	subi	r22, 0xFF	; 255
    29d4:	7f 4f       	sbci	r23, 0xFF	; 255
    29d6:	8f 4f       	sbci	r24, 0xFF	; 255
    29d8:	9f 4f       	sbci	r25, 0xFF	; 255
    29da:	e3 cf       	rjmp	.-58     	; 0x29a2 <ldexp+0x2e>
    29dc:	0c 94 a3 14 	jmp	0x2946	; 0x2946 <__fp_szero>

000029e0 <modf>:
    29e0:	fa 01       	movw	r30, r20
    29e2:	dc 01       	movw	r26, r24
    29e4:	aa 0f       	add	r26, r26
    29e6:	bb 1f       	adc	r27, r27
    29e8:	9b 01       	movw	r18, r22
    29ea:	ac 01       	movw	r20, r24
    29ec:	bf 57       	subi	r27, 0x7F	; 127
    29ee:	28 f4       	brcc	.+10     	; 0x29fa <modf+0x1a>
    29f0:	22 27       	eor	r18, r18
    29f2:	33 27       	eor	r19, r19
    29f4:	44 27       	eor	r20, r20
    29f6:	50 78       	andi	r21, 0x80	; 128
    29f8:	20 c0       	rjmp	.+64     	; 0x2a3a <modf+0x5a>
    29fa:	b7 51       	subi	r27, 0x17	; 23
    29fc:	90 f4       	brcc	.+36     	; 0x2a22 <modf+0x42>
    29fe:	ab 2f       	mov	r26, r27
    2a00:	00 24       	eor	r0, r0
    2a02:	46 95       	lsr	r20
    2a04:	37 95       	ror	r19
    2a06:	27 95       	ror	r18
    2a08:	01 1c       	adc	r0, r1
    2a0a:	a3 95       	inc	r26
    2a0c:	d2 f3       	brmi	.-12     	; 0x2a02 <modf+0x22>
    2a0e:	00 20       	and	r0, r0
    2a10:	71 f0       	breq	.+28     	; 0x2a2e <modf+0x4e>
    2a12:	22 0f       	add	r18, r18
    2a14:	33 1f       	adc	r19, r19
    2a16:	44 1f       	adc	r20, r20
    2a18:	b3 95       	inc	r27
    2a1a:	da f3       	brmi	.-10     	; 0x2a12 <modf+0x32>
    2a1c:	0e d0       	rcall	.+28     	; 0x2a3a <modf+0x5a>
    2a1e:	0c 94 c6 11 	jmp	0x238c	; 0x238c <__subsf3>
    2a22:	61 30       	cpi	r22, 0x01	; 1
    2a24:	71 05       	cpc	r23, r1
    2a26:	a0 e8       	ldi	r26, 0x80	; 128
    2a28:	8a 07       	cpc	r24, r26
    2a2a:	b9 46       	sbci	r27, 0x69	; 105
    2a2c:	30 f4       	brcc	.+12     	; 0x2a3a <modf+0x5a>
    2a2e:	9b 01       	movw	r18, r22
    2a30:	ac 01       	movw	r20, r24
    2a32:	66 27       	eor	r22, r22
    2a34:	77 27       	eor	r23, r23
    2a36:	88 27       	eor	r24, r24
    2a38:	90 78       	andi	r25, 0x80	; 128
    2a3a:	30 96       	adiw	r30, 0x00	; 0
    2a3c:	21 f0       	breq	.+8      	; 0x2a46 <modf+0x66>
    2a3e:	20 83       	st	Z, r18
    2a40:	31 83       	std	Z+1, r19	; 0x01
    2a42:	42 83       	std	Z+2, r20	; 0x02
    2a44:	53 83       	std	Z+3, r21	; 0x03
    2a46:	08 95       	ret

00002a48 <__mulsf3>:
    2a48:	0e 94 37 15 	call	0x2a6e	; 0x2a6e <__mulsf3x>
    2a4c:	0c 94 5b 14 	jmp	0x28b6	; 0x28b6 <__fp_round>
    2a50:	0e 94 22 14 	call	0x2844	; 0x2844 <__fp_pscA>
    2a54:	38 f0       	brcs	.+14     	; 0x2a64 <__mulsf3+0x1c>
    2a56:	0e 94 29 14 	call	0x2852	; 0x2852 <__fp_pscB>
    2a5a:	20 f0       	brcs	.+8      	; 0x2a64 <__mulsf3+0x1c>
    2a5c:	95 23       	and	r25, r21
    2a5e:	11 f0       	breq	.+4      	; 0x2a64 <__mulsf3+0x1c>
    2a60:	0c 94 f2 13 	jmp	0x27e4	; 0x27e4 <__fp_inf>
    2a64:	0c 94 f8 13 	jmp	0x27f0	; 0x27f0 <__fp_nan>
    2a68:	11 24       	eor	r1, r1
    2a6a:	0c 94 a3 14 	jmp	0x2946	; 0x2946 <__fp_szero>

00002a6e <__mulsf3x>:
    2a6e:	0e 94 80 14 	call	0x2900	; 0x2900 <__fp_split3>
    2a72:	70 f3       	brcs	.-36     	; 0x2a50 <__mulsf3+0x8>

00002a74 <__mulsf3_pse>:
    2a74:	95 9f       	mul	r25, r21
    2a76:	c1 f3       	breq	.-16     	; 0x2a68 <__mulsf3+0x20>
    2a78:	95 0f       	add	r25, r21
    2a7a:	50 e0       	ldi	r21, 0x00	; 0
    2a7c:	55 1f       	adc	r21, r21
    2a7e:	62 9f       	mul	r22, r18
    2a80:	f0 01       	movw	r30, r0
    2a82:	72 9f       	mul	r23, r18
    2a84:	bb 27       	eor	r27, r27
    2a86:	f0 0d       	add	r31, r0
    2a88:	b1 1d       	adc	r27, r1
    2a8a:	63 9f       	mul	r22, r19
    2a8c:	aa 27       	eor	r26, r26
    2a8e:	f0 0d       	add	r31, r0
    2a90:	b1 1d       	adc	r27, r1
    2a92:	aa 1f       	adc	r26, r26
    2a94:	64 9f       	mul	r22, r20
    2a96:	66 27       	eor	r22, r22
    2a98:	b0 0d       	add	r27, r0
    2a9a:	a1 1d       	adc	r26, r1
    2a9c:	66 1f       	adc	r22, r22
    2a9e:	82 9f       	mul	r24, r18
    2aa0:	22 27       	eor	r18, r18
    2aa2:	b0 0d       	add	r27, r0
    2aa4:	a1 1d       	adc	r26, r1
    2aa6:	62 1f       	adc	r22, r18
    2aa8:	73 9f       	mul	r23, r19
    2aaa:	b0 0d       	add	r27, r0
    2aac:	a1 1d       	adc	r26, r1
    2aae:	62 1f       	adc	r22, r18
    2ab0:	83 9f       	mul	r24, r19
    2ab2:	a0 0d       	add	r26, r0
    2ab4:	61 1d       	adc	r22, r1
    2ab6:	22 1f       	adc	r18, r18
    2ab8:	74 9f       	mul	r23, r20
    2aba:	33 27       	eor	r19, r19
    2abc:	a0 0d       	add	r26, r0
    2abe:	61 1d       	adc	r22, r1
    2ac0:	23 1f       	adc	r18, r19
    2ac2:	84 9f       	mul	r24, r20
    2ac4:	60 0d       	add	r22, r0
    2ac6:	21 1d       	adc	r18, r1
    2ac8:	82 2f       	mov	r24, r18
    2aca:	76 2f       	mov	r23, r22
    2acc:	6a 2f       	mov	r22, r26
    2ace:	11 24       	eor	r1, r1
    2ad0:	9f 57       	subi	r25, 0x7F	; 127
    2ad2:	50 40       	sbci	r21, 0x00	; 0
    2ad4:	9a f0       	brmi	.+38     	; 0x2afc <__mulsf3_pse+0x88>
    2ad6:	f1 f0       	breq	.+60     	; 0x2b14 <__mulsf3_pse+0xa0>
    2ad8:	88 23       	and	r24, r24
    2ada:	4a f0       	brmi	.+18     	; 0x2aee <__mulsf3_pse+0x7a>
    2adc:	ee 0f       	add	r30, r30
    2ade:	ff 1f       	adc	r31, r31
    2ae0:	bb 1f       	adc	r27, r27
    2ae2:	66 1f       	adc	r22, r22
    2ae4:	77 1f       	adc	r23, r23
    2ae6:	88 1f       	adc	r24, r24
    2ae8:	91 50       	subi	r25, 0x01	; 1
    2aea:	50 40       	sbci	r21, 0x00	; 0
    2aec:	a9 f7       	brne	.-22     	; 0x2ad8 <__mulsf3_pse+0x64>
    2aee:	9e 3f       	cpi	r25, 0xFE	; 254
    2af0:	51 05       	cpc	r21, r1
    2af2:	80 f0       	brcs	.+32     	; 0x2b14 <__mulsf3_pse+0xa0>
    2af4:	0c 94 f2 13 	jmp	0x27e4	; 0x27e4 <__fp_inf>
    2af8:	0c 94 a3 14 	jmp	0x2946	; 0x2946 <__fp_szero>
    2afc:	5f 3f       	cpi	r21, 0xFF	; 255
    2afe:	e4 f3       	brlt	.-8      	; 0x2af8 <__mulsf3_pse+0x84>
    2b00:	98 3e       	cpi	r25, 0xE8	; 232
    2b02:	d4 f3       	brlt	.-12     	; 0x2af8 <__mulsf3_pse+0x84>
    2b04:	86 95       	lsr	r24
    2b06:	77 95       	ror	r23
    2b08:	67 95       	ror	r22
    2b0a:	b7 95       	ror	r27
    2b0c:	f7 95       	ror	r31
    2b0e:	e7 95       	ror	r30
    2b10:	9f 5f       	subi	r25, 0xFF	; 255
    2b12:	c1 f7       	brne	.-16     	; 0x2b04 <__mulsf3_pse+0x90>
    2b14:	fe 2b       	or	r31, r30
    2b16:	88 0f       	add	r24, r24
    2b18:	91 1d       	adc	r25, r1
    2b1a:	96 95       	lsr	r25
    2b1c:	87 95       	ror	r24
    2b1e:	97 f9       	bld	r25, 7
    2b20:	08 95       	ret

00002b22 <pow>:
    2b22:	fa 01       	movw	r30, r20
    2b24:	ee 0f       	add	r30, r30
    2b26:	ff 1f       	adc	r31, r31
    2b28:	30 96       	adiw	r30, 0x00	; 0
    2b2a:	21 05       	cpc	r18, r1
    2b2c:	31 05       	cpc	r19, r1
    2b2e:	a1 f1       	breq	.+104    	; 0x2b98 <pow+0x76>
    2b30:	61 15       	cp	r22, r1
    2b32:	71 05       	cpc	r23, r1
    2b34:	61 f4       	brne	.+24     	; 0x2b4e <pow+0x2c>
    2b36:	80 38       	cpi	r24, 0x80	; 128
    2b38:	bf e3       	ldi	r27, 0x3F	; 63
    2b3a:	9b 07       	cpc	r25, r27
    2b3c:	49 f1       	breq	.+82     	; 0x2b90 <pow+0x6e>
    2b3e:	68 94       	set
    2b40:	90 38       	cpi	r25, 0x80	; 128
    2b42:	81 05       	cpc	r24, r1
    2b44:	61 f0       	breq	.+24     	; 0x2b5e <pow+0x3c>
    2b46:	80 38       	cpi	r24, 0x80	; 128
    2b48:	bf ef       	ldi	r27, 0xFF	; 255
    2b4a:	9b 07       	cpc	r25, r27
    2b4c:	41 f0       	breq	.+16     	; 0x2b5e <pow+0x3c>
    2b4e:	99 23       	and	r25, r25
    2b50:	4a f5       	brpl	.+82     	; 0x2ba4 <pow+0x82>
    2b52:	ff 3f       	cpi	r31, 0xFF	; 255
    2b54:	e1 05       	cpc	r30, r1
    2b56:	31 05       	cpc	r19, r1
    2b58:	21 05       	cpc	r18, r1
    2b5a:	19 f1       	breq	.+70     	; 0x2ba2 <pow+0x80>
    2b5c:	e8 94       	clt
    2b5e:	08 94       	sec
    2b60:	e7 95       	ror	r30
    2b62:	d9 01       	movw	r26, r18
    2b64:	aa 23       	and	r26, r26
    2b66:	29 f4       	brne	.+10     	; 0x2b72 <pow+0x50>
    2b68:	ab 2f       	mov	r26, r27
    2b6a:	be 2f       	mov	r27, r30
    2b6c:	f8 5f       	subi	r31, 0xF8	; 248
    2b6e:	d0 f3       	brcs	.-12     	; 0x2b64 <pow+0x42>
    2b70:	10 c0       	rjmp	.+32     	; 0x2b92 <pow+0x70>
    2b72:	ff 5f       	subi	r31, 0xFF	; 255
    2b74:	70 f4       	brcc	.+28     	; 0x2b92 <pow+0x70>
    2b76:	a6 95       	lsr	r26
    2b78:	e0 f7       	brcc	.-8      	; 0x2b72 <pow+0x50>
    2b7a:	f7 39       	cpi	r31, 0x97	; 151
    2b7c:	50 f0       	brcs	.+20     	; 0x2b92 <pow+0x70>
    2b7e:	19 f0       	breq	.+6      	; 0x2b86 <pow+0x64>
    2b80:	ff 3a       	cpi	r31, 0xAF	; 175
    2b82:	38 f4       	brcc	.+14     	; 0x2b92 <pow+0x70>
    2b84:	9f 77       	andi	r25, 0x7F	; 127
    2b86:	9f 93       	push	r25
    2b88:	0d d0       	rcall	.+26     	; 0x2ba4 <pow+0x82>
    2b8a:	0f 90       	pop	r0
    2b8c:	07 fc       	sbrc	r0, 7
    2b8e:	90 58       	subi	r25, 0x80	; 128
    2b90:	08 95       	ret
    2b92:	46 f0       	brts	.+16     	; 0x2ba4 <pow+0x82>
    2b94:	0c 94 f8 13 	jmp	0x27f0	; 0x27f0 <__fp_nan>
    2b98:	60 e0       	ldi	r22, 0x00	; 0
    2b9a:	70 e0       	ldi	r23, 0x00	; 0
    2b9c:	80 e8       	ldi	r24, 0x80	; 128
    2b9e:	9f e3       	ldi	r25, 0x3F	; 63
    2ba0:	08 95       	ret
    2ba2:	4f e7       	ldi	r20, 0x7F	; 127
    2ba4:	9f 77       	andi	r25, 0x7F	; 127
    2ba6:	5f 93       	push	r21
    2ba8:	4f 93       	push	r20
    2baa:	3f 93       	push	r19
    2bac:	2f 93       	push	r18
    2bae:	0e 94 17 16 	call	0x2c2e	; 0x2c2e <log>
    2bb2:	2f 91       	pop	r18
    2bb4:	3f 91       	pop	r19
    2bb6:	4f 91       	pop	r20
    2bb8:	5f 91       	pop	r21
    2bba:	0e 94 24 15 	call	0x2a48	; 0x2a48 <__mulsf3>
    2bbe:	0c 94 29 13 	jmp	0x2652	; 0x2652 <exp>

00002bc2 <sin>:
    2bc2:	9f 93       	push	r25
    2bc4:	0e 94 32 14 	call	0x2864	; 0x2864 <__fp_rempio2>
    2bc8:	0f 90       	pop	r0
    2bca:	07 fc       	sbrc	r0, 7
    2bcc:	ee 5f       	subi	r30, 0xFE	; 254
    2bce:	0c 94 6c 14 	jmp	0x28d8	; 0x28d8 <__fp_sinus>

00002bd2 <square>:
    2bd2:	9b 01       	movw	r18, r22
    2bd4:	ac 01       	movw	r20, r24
    2bd6:	0c 94 24 15 	jmp	0x2a48	; 0x2a48 <__mulsf3>

00002bda <__fp_mpack>:
    2bda:	9f 3f       	cpi	r25, 0xFF	; 255
    2bdc:	31 f0       	breq	.+12     	; 0x2bea <__fp_mpack_finite+0xc>

00002bde <__fp_mpack_finite>:
    2bde:	91 50       	subi	r25, 0x01	; 1
    2be0:	20 f4       	brcc	.+8      	; 0x2bea <__fp_mpack_finite+0xc>
    2be2:	87 95       	ror	r24
    2be4:	77 95       	ror	r23
    2be6:	67 95       	ror	r22
    2be8:	b7 95       	ror	r27
    2bea:	88 0f       	add	r24, r24
    2bec:	91 1d       	adc	r25, r1
    2bee:	96 95       	lsr	r25
    2bf0:	87 95       	ror	r24
    2bf2:	97 f9       	bld	r25, 7
    2bf4:	08 95       	ret

00002bf6 <__fp_powsodd>:
    2bf6:	9f 93       	push	r25
    2bf8:	8f 93       	push	r24
    2bfa:	7f 93       	push	r23
    2bfc:	6f 93       	push	r22
    2bfe:	ff 93       	push	r31
    2c00:	ef 93       	push	r30
    2c02:	9b 01       	movw	r18, r22
    2c04:	ac 01       	movw	r20, r24
    2c06:	0e 94 24 15 	call	0x2a48	; 0x2a48 <__mulsf3>
    2c0a:	ef 91       	pop	r30
    2c0c:	ff 91       	pop	r31
    2c0e:	0e 94 fb 13 	call	0x27f6	; 0x27f6 <__fp_powser>
    2c12:	2f 91       	pop	r18
    2c14:	3f 91       	pop	r19
    2c16:	4f 91       	pop	r20
    2c18:	5f 91       	pop	r21
    2c1a:	0c 94 24 15 	jmp	0x2a48	; 0x2a48 <__mulsf3>
    2c1e:	16 f0       	brts	.+4      	; 0x2c24 <__fp_powsodd+0x2e>
    2c20:	0c 94 ed 15 	jmp	0x2bda	; 0x2bda <__fp_mpack>
    2c24:	0c 94 f8 13 	jmp	0x27f0	; 0x27f0 <__fp_nan>
    2c28:	68 94       	set
    2c2a:	0c 94 f2 13 	jmp	0x27e4	; 0x27e4 <__fp_inf>

00002c2e <log>:
    2c2e:	0e 94 88 14 	call	0x2910	; 0x2910 <__fp_splitA>
    2c32:	a8 f3       	brcs	.-22     	; 0x2c1e <__fp_powsodd+0x28>
    2c34:	99 23       	and	r25, r25
    2c36:	c1 f3       	breq	.-16     	; 0x2c28 <__fp_powsodd+0x32>
    2c38:	ae f3       	brts	.-22     	; 0x2c24 <__fp_powsodd+0x2e>
    2c3a:	df 93       	push	r29
    2c3c:	cf 93       	push	r28
    2c3e:	1f 93       	push	r17
    2c40:	0f 93       	push	r16
    2c42:	ff 92       	push	r15
    2c44:	c9 2f       	mov	r28, r25
    2c46:	dd 27       	eor	r29, r29
    2c48:	88 23       	and	r24, r24
    2c4a:	2a f0       	brmi	.+10     	; 0x2c56 <log+0x28>
    2c4c:	21 97       	sbiw	r28, 0x01	; 1
    2c4e:	66 0f       	add	r22, r22
    2c50:	77 1f       	adc	r23, r23
    2c52:	88 1f       	adc	r24, r24
    2c54:	da f7       	brpl	.-10     	; 0x2c4c <log+0x1e>
    2c56:	20 e0       	ldi	r18, 0x00	; 0
    2c58:	30 e0       	ldi	r19, 0x00	; 0
    2c5a:	40 e8       	ldi	r20, 0x80	; 128
    2c5c:	5f eb       	ldi	r21, 0xBF	; 191
    2c5e:	9f e3       	ldi	r25, 0x3F	; 63
    2c60:	88 39       	cpi	r24, 0x98	; 152
    2c62:	20 f0       	brcs	.+8      	; 0x2c6c <log+0x3e>
    2c64:	80 3e       	cpi	r24, 0xE0	; 224
    2c66:	38 f0       	brcs	.+14     	; 0x2c76 <log+0x48>
    2c68:	21 96       	adiw	r28, 0x01	; 1
    2c6a:	8f 77       	andi	r24, 0x7F	; 127
    2c6c:	0e 94 c7 11 	call	0x238e	; 0x238e <__addsf3>
    2c70:	ef e1       	ldi	r30, 0x1F	; 31
    2c72:	f1 e0       	ldi	r31, 0x01	; 1
    2c74:	04 c0       	rjmp	.+8      	; 0x2c7e <log+0x50>
    2c76:	0e 94 c7 11 	call	0x238e	; 0x238e <__addsf3>
    2c7a:	ec e4       	ldi	r30, 0x4C	; 76
    2c7c:	f1 e0       	ldi	r31, 0x01	; 1
    2c7e:	0e 94 fb 13 	call	0x27f6	; 0x27f6 <__fp_powser>
    2c82:	8b 01       	movw	r16, r22
    2c84:	be 01       	movw	r22, r28
    2c86:	ec 01       	movw	r28, r24
    2c88:	fb 2e       	mov	r15, r27
    2c8a:	6f 57       	subi	r22, 0x7F	; 127
    2c8c:	71 09       	sbc	r23, r1
    2c8e:	75 95       	asr	r23
    2c90:	77 1f       	adc	r23, r23
    2c92:	88 0b       	sbc	r24, r24
    2c94:	99 0b       	sbc	r25, r25
    2c96:	0e 94 93 13 	call	0x2726	; 0x2726 <__floatsisf>
    2c9a:	28 e1       	ldi	r18, 0x18	; 24
    2c9c:	32 e7       	ldi	r19, 0x72	; 114
    2c9e:	41 e3       	ldi	r20, 0x31	; 49
    2ca0:	5f e3       	ldi	r21, 0x3F	; 63
    2ca2:	0e 94 37 15 	call	0x2a6e	; 0x2a6e <__mulsf3x>
    2ca6:	af 2d       	mov	r26, r15
    2ca8:	98 01       	movw	r18, r16
    2caa:	ae 01       	movw	r20, r28
    2cac:	ff 90       	pop	r15
    2cae:	0f 91       	pop	r16
    2cb0:	1f 91       	pop	r17
    2cb2:	cf 91       	pop	r28
    2cb4:	df 91       	pop	r29
    2cb6:	0e 94 de 11 	call	0x23bc	; 0x23bc <__addsf3x>
    2cba:	0c 94 5b 14 	jmp	0x28b6	; 0x28b6 <__fp_round>

00002cbe <__divmodhi4>:
    2cbe:	97 fb       	bst	r25, 7
    2cc0:	07 2e       	mov	r0, r23
    2cc2:	16 f4       	brtc	.+4      	; 0x2cc8 <__divmodhi4+0xa>
    2cc4:	00 94       	com	r0
    2cc6:	07 d0       	rcall	.+14     	; 0x2cd6 <__divmodhi4_neg1>
    2cc8:	77 fd       	sbrc	r23, 7
    2cca:	09 d0       	rcall	.+18     	; 0x2cde <__divmodhi4_neg2>
    2ccc:	0e 94 73 16 	call	0x2ce6	; 0x2ce6 <__udivmodhi4>
    2cd0:	07 fc       	sbrc	r0, 7
    2cd2:	05 d0       	rcall	.+10     	; 0x2cde <__divmodhi4_neg2>
    2cd4:	3e f4       	brtc	.+14     	; 0x2ce4 <__divmodhi4_exit>

00002cd6 <__divmodhi4_neg1>:
    2cd6:	90 95       	com	r25
    2cd8:	81 95       	neg	r24
    2cda:	9f 4f       	sbci	r25, 0xFF	; 255
    2cdc:	08 95       	ret

00002cde <__divmodhi4_neg2>:
    2cde:	70 95       	com	r23
    2ce0:	61 95       	neg	r22
    2ce2:	7f 4f       	sbci	r23, 0xFF	; 255

00002ce4 <__divmodhi4_exit>:
    2ce4:	08 95       	ret

00002ce6 <__udivmodhi4>:
    2ce6:	aa 1b       	sub	r26, r26
    2ce8:	bb 1b       	sub	r27, r27
    2cea:	51 e1       	ldi	r21, 0x11	; 17
    2cec:	07 c0       	rjmp	.+14     	; 0x2cfc <__udivmodhi4_ep>

00002cee <__udivmodhi4_loop>:
    2cee:	aa 1f       	adc	r26, r26
    2cf0:	bb 1f       	adc	r27, r27
    2cf2:	a6 17       	cp	r26, r22
    2cf4:	b7 07       	cpc	r27, r23
    2cf6:	10 f0       	brcs	.+4      	; 0x2cfc <__udivmodhi4_ep>
    2cf8:	a6 1b       	sub	r26, r22
    2cfa:	b7 0b       	sbc	r27, r23

00002cfc <__udivmodhi4_ep>:
    2cfc:	88 1f       	adc	r24, r24
    2cfe:	99 1f       	adc	r25, r25
    2d00:	5a 95       	dec	r21
    2d02:	a9 f7       	brne	.-22     	; 0x2cee <__udivmodhi4_loop>
    2d04:	80 95       	com	r24
    2d06:	90 95       	com	r25
    2d08:	bc 01       	movw	r22, r24
    2d0a:	cd 01       	movw	r24, r26
    2d0c:	08 95       	ret

00002d0e <__itoa_ncheck>:
    2d0e:	bb 27       	eor	r27, r27
    2d10:	4a 30       	cpi	r20, 0x0A	; 10
    2d12:	31 f4       	brne	.+12     	; 0x2d20 <__itoa_ncheck+0x12>
    2d14:	99 23       	and	r25, r25
    2d16:	22 f4       	brpl	.+8      	; 0x2d20 <__itoa_ncheck+0x12>
    2d18:	bd e2       	ldi	r27, 0x2D	; 45
    2d1a:	90 95       	com	r25
    2d1c:	81 95       	neg	r24
    2d1e:	9f 4f       	sbci	r25, 0xFF	; 255
    2d20:	0c 94 93 16 	jmp	0x2d26	; 0x2d26 <__utoa_common>

00002d24 <__utoa_ncheck>:
    2d24:	bb 27       	eor	r27, r27

00002d26 <__utoa_common>:
    2d26:	fb 01       	movw	r30, r22
    2d28:	55 27       	eor	r21, r21
    2d2a:	aa 27       	eor	r26, r26
    2d2c:	88 0f       	add	r24, r24
    2d2e:	99 1f       	adc	r25, r25
    2d30:	aa 1f       	adc	r26, r26
    2d32:	a4 17       	cp	r26, r20
    2d34:	10 f0       	brcs	.+4      	; 0x2d3a <__utoa_common+0x14>
    2d36:	a4 1b       	sub	r26, r20
    2d38:	83 95       	inc	r24
    2d3a:	50 51       	subi	r21, 0x10	; 16
    2d3c:	b9 f7       	brne	.-18     	; 0x2d2c <__utoa_common+0x6>
    2d3e:	a0 5d       	subi	r26, 0xD0	; 208
    2d40:	aa 33       	cpi	r26, 0x3A	; 58
    2d42:	08 f0       	brcs	.+2      	; 0x2d46 <__utoa_common+0x20>
    2d44:	a9 5d       	subi	r26, 0xD9	; 217
    2d46:	a1 93       	st	Z+, r26
    2d48:	00 97       	sbiw	r24, 0x00	; 0
    2d4a:	79 f7       	brne	.-34     	; 0x2d2a <__utoa_common+0x4>
    2d4c:	b1 11       	cpse	r27, r1
    2d4e:	b1 93       	st	Z+, r27
    2d50:	11 92       	st	Z+, r1
    2d52:	cb 01       	movw	r24, r22
    2d54:	0c 94 ac 16 	jmp	0x2d58	; 0x2d58 <strrev>

00002d58 <strrev>:
    2d58:	dc 01       	movw	r26, r24
    2d5a:	fc 01       	movw	r30, r24
    2d5c:	67 2f       	mov	r22, r23
    2d5e:	71 91       	ld	r23, Z+
    2d60:	77 23       	and	r23, r23
    2d62:	e1 f7       	brne	.-8      	; 0x2d5c <strrev+0x4>
    2d64:	32 97       	sbiw	r30, 0x02	; 2
    2d66:	04 c0       	rjmp	.+8      	; 0x2d70 <strrev+0x18>
    2d68:	7c 91       	ld	r23, X
    2d6a:	6d 93       	st	X+, r22
    2d6c:	70 83       	st	Z, r23
    2d6e:	62 91       	ld	r22, -Z
    2d70:	ae 17       	cp	r26, r30
    2d72:	bf 07       	cpc	r27, r31
    2d74:	c8 f3       	brcs	.-14     	; 0x2d68 <strrev+0x10>
    2d76:	08 95       	ret

00002d78 <_exit>:
    2d78:	f8 94       	cli

00002d7a <__stop_program>:
    2d7a:	ff cf       	rjmp	.-2      	; 0x2d7a <__stop_program>
