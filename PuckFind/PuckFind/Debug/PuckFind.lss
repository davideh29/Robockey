
PuckFind.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  00002646  000026da  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002646  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000010  00800108  00800108  000026e2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000026e2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002714  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002b8  00000000  00000000  00002754  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000039d1  00000000  00000000  00002a0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000018b6  00000000  00000000  000063dd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000246a  00000000  00000000  00007c93  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000007f0  00000000  00000000  0000a100  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000cd3  00000000  00000000  0000a8f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003263  00000000  00000000  0000b5c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002a8  00000000  00000000  0000e826  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 67 01 	jmp	0x2ce	; 0x2ce <__ctors_end>
       4:	0c 94 84 01 	jmp	0x308	; 0x308 <__bad_interrupt>
       8:	0c 94 84 01 	jmp	0x308	; 0x308 <__bad_interrupt>
       c:	0c 94 12 0e 	jmp	0x1c24	; 0x1c24 <__vector_3>
      10:	0c 94 84 01 	jmp	0x308	; 0x308 <__bad_interrupt>
      14:	0c 94 84 01 	jmp	0x308	; 0x308 <__bad_interrupt>
      18:	0c 94 84 01 	jmp	0x308	; 0x308 <__bad_interrupt>
      1c:	0c 94 84 01 	jmp	0x308	; 0x308 <__bad_interrupt>
      20:	0c 94 84 01 	jmp	0x308	; 0x308 <__bad_interrupt>
      24:	0c 94 84 01 	jmp	0x308	; 0x308 <__bad_interrupt>
      28:	0c 94 f4 03 	jmp	0x7e8	; 0x7e8 <__vector_10>
      2c:	0c 94 32 04 	jmp	0x864	; 0x864 <__vector_11>
      30:	0c 94 84 01 	jmp	0x308	; 0x308 <__bad_interrupt>
      34:	0c 94 84 01 	jmp	0x308	; 0x308 <__bad_interrupt>
      38:	0c 94 84 01 	jmp	0x308	; 0x308 <__bad_interrupt>
      3c:	0c 94 84 01 	jmp	0x308	; 0x308 <__bad_interrupt>
      40:	0c 94 84 01 	jmp	0x308	; 0x308 <__bad_interrupt>
      44:	0c 94 84 01 	jmp	0x308	; 0x308 <__bad_interrupt>
      48:	0c 94 84 01 	jmp	0x308	; 0x308 <__bad_interrupt>
      4c:	0c 94 84 01 	jmp	0x308	; 0x308 <__bad_interrupt>
      50:	0c 94 84 01 	jmp	0x308	; 0x308 <__bad_interrupt>
      54:	0c 94 84 01 	jmp	0x308	; 0x308 <__bad_interrupt>
      58:	0c 94 84 01 	jmp	0x308	; 0x308 <__bad_interrupt>
      5c:	0c 94 84 01 	jmp	0x308	; 0x308 <__bad_interrupt>
      60:	0c 94 84 01 	jmp	0x308	; 0x308 <__bad_interrupt>
      64:	0c 94 84 01 	jmp	0x308	; 0x308 <__bad_interrupt>
      68:	0c 94 84 01 	jmp	0x308	; 0x308 <__bad_interrupt>
      6c:	0c 94 84 01 	jmp	0x308	; 0x308 <__bad_interrupt>
      70:	0c 94 84 01 	jmp	0x308	; 0x308 <__bad_interrupt>
      74:	0c 94 84 01 	jmp	0x308	; 0x308 <__bad_interrupt>
      78:	0c 94 84 01 	jmp	0x308	; 0x308 <__bad_interrupt>
      7c:	0c 94 84 01 	jmp	0x308	; 0x308 <__bad_interrupt>
      80:	0c 94 84 01 	jmp	0x308	; 0x308 <__bad_interrupt>
      84:	0c 94 84 01 	jmp	0x308	; 0x308 <__bad_interrupt>
      88:	0c 94 84 01 	jmp	0x308	; 0x308 <__bad_interrupt>
      8c:	0c 94 84 01 	jmp	0x308	; 0x308 <__bad_interrupt>
      90:	0c 94 84 01 	jmp	0x308	; 0x308 <__bad_interrupt>
      94:	0c 94 84 01 	jmp	0x308	; 0x308 <__bad_interrupt>
      98:	0c 94 84 01 	jmp	0x308	; 0x308 <__bad_interrupt>
      9c:	0c 94 84 01 	jmp	0x308	; 0x308 <__bad_interrupt>
      a0:	0c 94 84 01 	jmp	0x308	; 0x308 <__bad_interrupt>
      a4:	0c 94 84 01 	jmp	0x308	; 0x308 <__bad_interrupt>
      a8:	0c 94 84 01 	jmp	0x308	; 0x308 <__bad_interrupt>
      ac:	08 4a       	sbci	r16, 0xA8	; 168
      ae:	d7 3b       	cpi	r29, 0xB7	; 183
      b0:	3b ce       	rjmp	.-906    	; 0xfffffd28 <__eeprom_end+0xff7efd28>
      b2:	01 6e       	ori	r16, 0xE1	; 225
      b4:	84 bc       	out	0x24, r8	; 36
      b6:	bf fd       	.word	0xfdbf	; ????
      b8:	c1 2f       	mov	r28, r17
      ba:	3d 6c       	ori	r19, 0xCD	; 205
      bc:	74 31       	cpi	r23, 0x14	; 20
      be:	9a bd       	out	0x2a, r25	; 42
      c0:	56 83       	std	Z+6, r21	; 0x06
      c2:	3d da       	rcall	.-2950   	; 0xfffff53e <__eeprom_end+0xff7ef53e>
      c4:	3d 00       	.word	0x003d	; ????
      c6:	c7 7f       	andi	r28, 0xF7	; 247
      c8:	11 be       	out	0x31, r1	; 49
      ca:	d9 e4       	ldi	r29, 0x49	; 73
      cc:	bb 4c       	sbci	r27, 0xCB	; 203
      ce:	3e 91       	ld	r19, -X
      d0:	6b aa       	std	Y+51, r6	; 0x33
      d2:	aa be       	out	0x3a, r10	; 58
      d4:	00 00       	nop
      d6:	00 80       	ld	r0, Z
      d8:	3f 05       	cpc	r19, r15
      da:	a8 4c       	sbci	r26, 0xC8	; 200
      dc:	cd b2       	in	r12, 0x1d	; 29
      de:	d4 4e       	sbci	r29, 0xE4	; 228
      e0:	b9 38       	cpi	r27, 0x89	; 137
      e2:	36 a9       	ldd	r19, Z+54	; 0x36
      e4:	02 0c       	add	r0, r2
      e6:	50 b9       	out	0x00, r21	; 0
      e8:	91 86       	std	Z+9, r9	; 0x09
      ea:	88 08       	sbc	r8, r8
      ec:	3c a6       	std	Y+44, r3	; 0x2c
      ee:	aa aa       	std	Y+50, r10	; 0x32
      f0:	2a be       	out	0x3a, r2	; 58
      f2:	00 00       	nop
      f4:	00 80       	ld	r0, Z
      f6:	3f 07       	cpc	r19, r31
      f8:	63 42       	sbci	r22, 0x23	; 35
      fa:	36 b7       	in	r19, 0x36	; 54
      fc:	9b d8       	rcall	.-3786   	; 0xfffff234 <__eeprom_end+0xff7ef234>
      fe:	a7 1a       	sub	r10, r23
     100:	39 68       	ori	r19, 0x89	; 137
     102:	56 18       	sub	r5, r6
     104:	ae ba       	out	0x1e, r10	; 30
     106:	ab 55       	subi	r26, 0x5B	; 91
     108:	8c 1d       	adc	r24, r12
     10a:	3c b7       	in	r19, 0x3c	; 60
     10c:	cc 57       	subi	r28, 0x7C	; 124
     10e:	63 bd       	out	0x23, r22	; 35
     110:	6d ed       	ldi	r22, 0xDD	; 221
     112:	fd 75       	andi	r31, 0x5D	; 93
     114:	3e f6       	brtc	.-114    	; 0xa4 <__SREG__+0x65>
     116:	17 72       	andi	r17, 0x27	; 39
     118:	31 bf       	out	0x31, r19	; 49
     11a:	00 00       	nop
     11c:	00 80       	ld	r0, Z
     11e:	3f 08       	sbc	r3, r15
     120:	00 00       	nop
     122:	00 be       	out	0x30, r0	; 48
     124:	92 24       	eor	r9, r2
     126:	49 12       	cpse	r4, r25
     128:	3e ab       	std	Y+54, r19	; 0x36
     12a:	aa aa       	std	Y+50, r10	; 0x32
     12c:	2a be       	out	0x3a, r2	; 58
     12e:	cd cc       	rjmp	.-1638   	; 0xfffffaca <__eeprom_end+0xff7efaca>
     130:	cc 4c       	sbci	r28, 0xCC	; 204
     132:	3e 00       	.word	0x003e	; ????
     134:	00 00       	nop
     136:	80 be       	out	0x30, r8	; 48
     138:	ab aa       	std	Y+51, r10	; 0x33
     13a:	aa aa       	std	Y+50, r10	; 0x32
     13c:	3e 00       	.word	0x003e	; ????
     13e:	00 00       	nop
     140:	00 bf       	out	0x30, r16	; 48
     142:	00 00       	nop
     144:	00 80       	ld	r0, Z
     146:	3f 00       	.word	0x003f	; ????
     148:	00 00       	nop
     14a:	00 00       	nop
     14c:	08 41       	sbci	r16, 0x18	; 24
     14e:	78 d3       	rcall	.+1776   	; 0x840 <__vector_10+0x58>
     150:	bb 43       	sbci	r27, 0x3B	; 59
     152:	87 d1       	rcall	.+782    	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
     154:	13 3d       	cpi	r17, 0xD3	; 211
     156:	19 0e       	add	r1, r25
     158:	3c c3       	rjmp	.+1656   	; 0x7d2 <m_usb_tx_char+0xa0>
     15a:	bd 42       	sbci	r27, 0x2D	; 45
     15c:	82 ad       	ldd	r24, Z+58	; 0x3a
     15e:	2b 3e       	cpi	r18, 0xEB	; 235
     160:	68 ec       	ldi	r22, 0xC8	; 200
     162:	82 76       	andi	r24, 0x62	; 98
     164:	be d9       	rcall	.-3204   	; 0xfffff4e2 <__eeprom_end+0xff7ef4e2>
     166:	8f e1       	ldi	r24, 0x1F	; 31
     168:	a9 3e       	cpi	r26, 0xE9	; 233
     16a:	4c 80       	ldd	r4, Y+4	; 0x04
     16c:	ef ff       	.word	0xffef	; ????
     16e:	be 01       	movw	r22, r28
     170:	c4 ff       	sbrs	r28, 4
     172:	7f 3f       	cpi	r23, 0xFF	; 255
     174:	00 00       	nop
     176:	00 00       	nop
	...

0000017a <__trampolines_end>:
     17a:	00 01       	movw	r0, r0
     17c:	00 00       	nop
     17e:	11 02       	muls	r17, r17
     180:	12 00       	.word	0x0012	; ????
     182:	02 00       	.word	0x0002	; ????
     184:	00 ce       	rjmp	.-1024   	; 0xfffffd86 <__eeprom_end+0xff7efd86>
     186:	01 43       	sbci	r16, 0x31	; 49
     188:	00 03       	mulsu	r16, r16
     18a:	00 00       	nop
     18c:	ca 01       	movw	r24, r20
     18e:	04 01       	movw	r0, r8
     190:	03 09       	sbc	r16, r3
     192:	04 b6       	in	r0, 0x34	; 52
     194:	01 12       	cpse	r0, r17
     196:	02 03       	mulsu	r16, r18
     198:	09 04       	cpc	r0, r9
     19a:	ae 01       	movw	r20, r28
     19c:	06 03       	mulsu	r16, r22
     19e:	03 09       	sbc	r16, r3
     1a0:	04 a4       	ldd	r0, Z+44	; 0x2c
     1a2:	01 08       	sbc	r0, r1

000001a4 <string3>:
     1a4:	08 03 34 00 31 00 30 00 00 00                       ..4.1.0...

000001ae <string2>:
     1ae:	06 03 4d 00 32 00 00 00                             ..M.2...

000001b6 <string1>:
     1b6:	12 03 4a 00 2e 00 20 00 46 00 69 00 65 00 6e 00     ..J... .F.i.e.n.
     1c6:	65 00 00 00                                         e...

000001ca <string0>:
     1ca:	04 03 09 04                                         ....

000001ce <config1_descriptor>:
     1ce:	09 02 43 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..C.....2.......
     1de:	01 00 05 24 00 10 01 05 24 01 01 01 04 24 02 06     ...$....$....$..
     1ee:	05 24 06 00 01 07 05 82 03 10 00 40 09 04 01 00     .$.........@....
     1fe:	02 0a 00 00 00 07 05 03 02 40 00 00 07 05 84 02     .........@......
     20e:	40 00 00                                            @..

00000211 <device_descriptor>:
     211:	12 01 00 02 02 00 00 10 c0 16 7a 04 00 01 01 02     ..........z.....
     221:	03 01                                               ..

00000223 <endpoint_config_table>:
     223:	00 01 c1 12 01 80 36 01 81 36                       ......6..6

0000022d <__c.2049>:
     22d:	20 20 20 2d 2d 2d 20 20 20 52 68 6f 3a 20 00           ---   Rho: .

0000023c <__c.2047>:
     23c:	20 20 20 2d 2d 2d 20 20 20 54 68 65 74 61 3a 20        ---   Theta: 
	...

0000024d <__c.2045>:
     24d:	20 29 00                                             ).

00000250 <__c.2043>:
     250:	2c 20 00                                            , .

00000253 <__c.2041>:
     253:	28 20 00                                            ( .

00000256 <__c.2039>:
     256:	20 20 20 2d 2d 2d 20 20 20 4e 65 77 20 66 72 61        ---   New fra
     266:	6d 65 3a 20 00                                      me: .

0000026b <__c.2037>:
     26b:	20 29 00                                             ).

0000026e <__c.2035>:
     26e:	2c 20 00                                            , .

00000271 <__c.2033>:
     271:	28 20 00                                            ( .

00000274 <__c.2031>:
     274:	20 20 20 2d 2d 2d 20 20 20 54 72 61 6e 73 6c 61        ---   Transla
     284:	74 69 6f 6e 3a 20 00                                tion: .

0000028b <__c.2029>:
     28b:	42 6f 74 74 6f 6d 20 49 6e 64 65 78 3a 20 00        Bottom Index: .

0000029a <__c.2027>:
     29a:	20 20 20 20 2d 2d 2d 2d 2d 2d 20 20 20 20 00            ------    .

000002a9 <__c.2025>:
     2a9:	54 6f 70 20 49 6e 64 65 78 3a 20 00                 Top Index: .

000002b5 <__c.2020>:
     2b5:	20 20 20 2d 2d 2d 20 20 20 00                          ---   .

000002bf <__c.2018>:
     2bf:	20 29 00                                             ).

000002c2 <__c.2016>:
     2c2:	2c 20 00                                            , .

000002c5 <__c.2014>:
     2c5:	28 20 00                                            ( .

000002c8 <__c.2011>:
     2c8:	20 2d 2d 2d 20 00                                    --- .

000002ce <__ctors_end>:
     2ce:	11 24       	eor	r1, r1
     2d0:	1f be       	out	0x3f, r1	; 63
     2d2:	cf ef       	ldi	r28, 0xFF	; 255
     2d4:	da e0       	ldi	r29, 0x0A	; 10
     2d6:	de bf       	out	0x3e, r29	; 62
     2d8:	cd bf       	out	0x3d, r28	; 61

000002da <__do_copy_data>:
     2da:	11 e0       	ldi	r17, 0x01	; 1
     2dc:	a0 e0       	ldi	r26, 0x00	; 0
     2de:	b1 e0       	ldi	r27, 0x01	; 1
     2e0:	e6 e4       	ldi	r30, 0x46	; 70
     2e2:	f6 e2       	ldi	r31, 0x26	; 38
     2e4:	02 c0       	rjmp	.+4      	; 0x2ea <__do_copy_data+0x10>
     2e6:	05 90       	lpm	r0, Z+
     2e8:	0d 92       	st	X+, r0
     2ea:	a8 30       	cpi	r26, 0x08	; 8
     2ec:	b1 07       	cpc	r27, r17
     2ee:	d9 f7       	brne	.-10     	; 0x2e6 <__do_copy_data+0xc>

000002f0 <__do_clear_bss>:
     2f0:	21 e0       	ldi	r18, 0x01	; 1
     2f2:	a8 e0       	ldi	r26, 0x08	; 8
     2f4:	b1 e0       	ldi	r27, 0x01	; 1
     2f6:	01 c0       	rjmp	.+2      	; 0x2fa <.do_clear_bss_start>

000002f8 <.do_clear_bss_loop>:
     2f8:	1d 92       	st	X+, r1

000002fa <.do_clear_bss_start>:
     2fa:	a8 31       	cpi	r26, 0x18	; 24
     2fc:	b2 07       	cpc	r27, r18
     2fe:	e1 f7       	brne	.-8      	; 0x2f8 <.do_clear_bss_loop>
     300:	0e 94 91 01 	call	0x322	; 0x322 <main>
     304:	0c 94 21 13 	jmp	0x2642	; 0x2642 <_exit>

00000308 <__bad_interrupt>:
     308:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000030c <color_init>:

 #include "robockey.h"

 void color_init() {
	// Set pins D2&3 as output
	set(DDRD, 2);
     30c:	52 9a       	sbi	0x0a, 2	; 10
	set(DDRD, 3);
     30e:	53 9a       	sbi	0x0a, 3	; 10
     310:	08 95       	ret

00000312 <color_set>:
 }

 void color_set(bool red) {
	if (red) {
     312:	88 23       	and	r24, r24
     314:	19 f0       	breq	.+6      	; 0x31c <color_set+0xa>
		// Testing LED
		set(PORTD, 2);
     316:	5a 9a       	sbi	0x0b, 2	; 11
		clear(PORTD, 3);
     318:	5b 98       	cbi	0x0b, 3	; 11
     31a:	08 95       	ret
	} else {
		// Testing LED
		clear(PORTD, 2);
     31c:	5a 98       	cbi	0x0b, 2	; 11
		set(PORTD, 3);
     31e:	5b 9a       	sbi	0x0b, 3	; 11
     320:	08 95       	ret

00000322 <main>:
	}
 }

int main(void){
     322:	cf 93       	push	r28
     324:	df 93       	push	r29
     326:	cd b7       	in	r28, 0x3d	; 61
     328:	de b7       	in	r29, 0x3e	; 62
     32a:	a5 97       	sbiw	r28, 0x25	; 37
     32c:	0f b6       	in	r0, 0x3f	; 63
     32e:	f8 94       	cli
     330:	de bf       	out	0x3e, r29	; 62
     332:	0f be       	out	0x3f, r0	; 63
     334:	cd bf       	out	0x3d, r28	; 61
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     336:	2f eb       	ldi	r18, 0xBF	; 191
     338:	87 e2       	ldi	r24, 0x27	; 39
     33a:	99 e0       	ldi	r25, 0x09	; 9
     33c:	21 50       	subi	r18, 0x01	; 1
     33e:	80 40       	sbci	r24, 0x00	; 0
     340:	90 40       	sbci	r25, 0x00	; 0
     342:	e1 f7       	brne	.-8      	; 0x33c <main+0x1a>
     344:	00 c0       	rjmp	.+0      	; 0x346 <main+0x24>
     346:	00 00       	nop
	m_wait(3000);
	// System prescaler
	m_clockdivide(3);
     348:	e1 e6       	ldi	r30, 0x61	; 97
     34a:	f0 e0       	ldi	r31, 0x00	; 0
     34c:	80 e8       	ldi	r24, 0x80	; 128
     34e:	80 83       	st	Z, r24
     350:	83 e0       	ldi	r24, 0x03	; 3
     352:	80 83       	st	Z, r24
	color_init();
     354:	0e 94 86 01 	call	0x30c	; 0x30c <color_init>
	color_set(false);
     358:	80 e0       	ldi	r24, 0x00	; 0
     35a:	0e 94 89 01 	call	0x312	; 0x312 <color_set>
	// Initialize usb
	m_usb_init();
     35e:	0e 94 7d 03 	call	0x6fa	; 0x6fa <m_usb_init>
	if (!m_usb_isconnected()) {
     362:	0e 94 96 03 	call	0x72c	; 0x72c <m_usb_isconnected>
		//m_green(ON);
	}
	// m_green(OFF);
	// Initialize motor
	motor_init();
     366:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <motor_init>
	//Initialize m_wii
	char wiiOpen = 0;
	while(wiiOpen == 0) {
		wiiOpen = m_wii_open();
     36a:	0e 94 3c 06 	call	0xc78	; 0xc78 <m_wii_open>
		m_red(ON);
     36e:	6e 9a       	sbi	0x0d, 6	; 13
     370:	76 98       	cbi	0x0e, 6	; 14
	// m_green(OFF);
	// Initialize motor
	motor_init();
	//Initialize m_wii
	char wiiOpen = 0;
	while(wiiOpen == 0) {
     372:	88 23       	and	r24, r24
     374:	d1 f3       	breq	.-12     	; 0x36a <main+0x48>
		wiiOpen = m_wii_open();
		m_red(ON);
		//return 0;
	}
	m_red(OFF);
     376:	6e 9a       	sbi	0x0d, 6	; 13
     378:	76 9a       	sbi	0x0e, 6	; 14
	
	Robot robot;	// Robot variable
	init_robot(&robot);
     37a:	ce 01       	movw	r24, r28
     37c:	01 96       	adiw	r24, 0x01	; 1
     37e:	0e 94 14 09 	call	0x1228	; 0x1228 <init_robot>

	///// FOR TESTING WITHOUT PLAY COMMAND //////////////////
	// init_rf(1);
	active = true;
     382:	81 e0       	ldi	r24, 0x01	; 1
     384:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <active>
	/////////////////////////////////////////////////////////
	int k = 0;

	// Main loop
	while (1) {
		if (k++ >= 100) {
     388:	01 e0       	ldi	r16, 0x01	; 1
     38a:	10 e0       	ldi	r17, 0x00	; 0
			k = 0;
			if (m_wii_read(star_array)) {
				m_green(TOGGLE);
			}
			//m_wii_read(star_array);
			m_red(TOGGLE);
     38c:	68 94       	set
     38e:	dd 24       	eor	r13, r13
     390:	d6 f8       	bld	r13, 6
	int k = 0;

	// Main loop
	while (1) {
		if (k++ >= 100) {
			k = 0;
     392:	e1 2c       	mov	r14, r1
     394:	f1 2c       	mov	r15, r1
			if (m_wii_read(star_array)) {
				m_green(TOGGLE);
     396:	68 94       	set
     398:	cc 24       	eor	r12, r12
     39a:	c2 f8       	bld	r12, 2
     39c:	1d c0       	rjmp	.+58     	; 0x3d8 <main+0xb6>
	/////////////////////////////////////////////////////////
	int k = 0;

	// Main loop
	while (1) {
		if (k++ >= 100) {
     39e:	04 36       	cpi	r16, 0x64	; 100
     3a0:	11 05       	cpc	r17, r1
     3a2:	1c f4       	brge	.+6      	; 0x3aa <main+0x88>
     3a4:	0f 5f       	subi	r16, 0xFF	; 255
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	17 c0       	rjmp	.+46     	; 0x3d8 <main+0xb6>
			k = 0;
			if (m_wii_read(star_array)) {
     3aa:	ce 01       	movw	r24, r28
     3ac:	0e 96       	adiw	r24, 0x0e	; 14
     3ae:	0e 94 5d 07 	call	0xeba	; 0xeba <m_wii_read>
     3b2:	88 23       	and	r24, r24
     3b4:	21 f0       	breq	.+8      	; 0x3be <main+0x9c>
				m_green(TOGGLE);
     3b6:	6a 9a       	sbi	0x0d, 2	; 13
     3b8:	8e b1       	in	r24, 0x0e	; 14
     3ba:	8c 25       	eor	r24, r12
     3bc:	8e b9       	out	0x0e, r24	; 14
			}
			//m_wii_read(star_array);
			m_red(TOGGLE);
     3be:	6e 9a       	sbi	0x0d, 6	; 13
     3c0:	8e b1       	in	r24, 0x0e	; 14
     3c2:	8d 25       	eor	r24, r13
     3c4:	8e b9       	out	0x0e, r24	; 14
			interpret(&robot, star_array);
     3c6:	be 01       	movw	r22, r28
     3c8:	62 5f       	subi	r22, 0xF2	; 242
     3ca:	7f 4f       	sbci	r23, 0xFF	; 255
     3cc:	ce 01       	movw	r24, r28
     3ce:	01 96       	adiw	r24, 0x01	; 1
     3d0:	0e 94 25 09 	call	0x124a	; 0x124a <interpret>
	int k = 0;

	// Main loop
	while (1) {
		if (k++ >= 100) {
			k = 0;
     3d4:	0e 2d       	mov	r16, r14
     3d6:	1f 2d       	mov	r17, r15
			//m_wii_read(star_array);
			m_red(TOGGLE);
			interpret(&robot, star_array);
		}
		// Check if robot is active
		if(active){
     3d8:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <active>
     3dc:	88 23       	and	r24, r24
     3de:	f9 f2       	breq	.-66     	; 0x39e <main+0x7c>
			// move to puck 
			//if(step_to_puck()){
				//turn(0);
				// if step_to_puck returns true, it means you have the puck!
				if(step_to_goal(&robot)) {
     3e0:	ce 01       	movw	r24, r28
     3e2:	01 96       	adiw	r24, 0x01	; 1
     3e4:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <step_to_goal>
     3e8:	88 23       	and	r24, r24
     3ea:	c9 f2       	breq	.-78     	; 0x39e <main+0x7c>
					// if step_to_goal returns true, it means you scored!
					m_green(ON);
     3ec:	6a 9a       	sbi	0x0d, 2	; 13
     3ee:	72 98       	cbi	0x0e, 2	; 14
     3f0:	d6 cf       	rjmp	.-84     	; 0x39e <main+0x7c>

000003f2 <motor_init>:
#define PI 3.14159

// Initialize motor
void motor_init() {
	// Digital output pins
	set(DDRB, 1); // A-IN 1
     3f2:	21 9a       	sbi	0x04, 1	; 4
	set(DDRB, 2); // A-IN 2
     3f4:	22 9a       	sbi	0x04, 2	; 4
	set(DDRB, 3); // B-IN 1
     3f6:	23 9a       	sbi	0x04, 3	; 4
	set(DDRB, 7); // B-IN 2
     3f8:	27 9a       	sbi	0x04, 7	; 4

	set(PORTB, 1);
     3fa:	29 9a       	sbi	0x05, 1	; 5
	clear(PORTB, 2);
     3fc:	2a 98       	cbi	0x05, 2	; 5
	set(PORTB, 3);
     3fe:	2b 9a       	sbi	0x05, 3	; 5
	clear(PORTB, 7);
     400:	2f 98       	cbi	0x05, 7	; 5

	// Timer 1
	// Prescale timer clock
	clear(TCCR1B, CS12);
     402:	e1 e8       	ldi	r30, 0x81	; 129
     404:	f0 e0       	ldi	r31, 0x00	; 0
     406:	80 81       	ld	r24, Z
     408:	8b 7f       	andi	r24, 0xFB	; 251
     40a:	80 83       	st	Z, r24
	set(TCCR1B, CS11);
     40c:	80 81       	ld	r24, Z
     40e:	82 60       	ori	r24, 0x02	; 2
     410:	80 83       	st	Z, r24
	clear(TCCR1B, CS10);
     412:	80 81       	ld	r24, Z
     414:	8e 7f       	andi	r24, 0xFE	; 254
     416:	80 83       	st	Z, r24

	// Set timer mode (UP to 0x00FF, PWM mode)
	clear(TCCR1B, WGM13);
     418:	80 81       	ld	r24, Z
     41a:	8f 7e       	andi	r24, 0xEF	; 239
     41c:	80 83       	st	Z, r24
	set(TCCR1B, WGM12);
     41e:	80 81       	ld	r24, Z
     420:	88 60       	ori	r24, 0x08	; 8
     422:	80 83       	st	Z, r24
	clear(TCCR1A, WGM11);
     424:	e0 e8       	ldi	r30, 0x80	; 128
     426:	f0 e0       	ldi	r31, 0x00	; 0
     428:	80 81       	ld	r24, Z
     42a:	8d 7f       	andi	r24, 0xFD	; 253
     42c:	80 83       	st	Z, r24
	set(TCCR1A, WGM10);
     42e:	80 81       	ld	r24, Z
     430:	81 60       	ori	r24, 0x01	; 1
     432:	80 83       	st	Z, r24

	// Set Channel A compare output (Set at OCR1A, clear at rollover)
	set(TCCR1A, COM1A1);
     434:	80 81       	ld	r24, Z
     436:	80 68       	ori	r24, 0x80	; 128
     438:	80 83       	st	Z, r24
	set(TCCR1A, COM1A0);
     43a:	80 81       	ld	r24, Z
     43c:	80 64       	ori	r24, 0x40	; 64
     43e:	80 83       	st	Z, r24

	// Set Channel B compare output (Set at OCR1B, clear at rollover)
	set(TCCR1A, COM1B1);
     440:	80 81       	ld	r24, Z
     442:	80 62       	ori	r24, 0x20	; 32
     444:	80 83       	st	Z, r24
	set(TCCR1A, COM1B0);
     446:	80 81       	ld	r24, Z
     448:	80 61       	ori	r24, 0x10	; 16
     44a:	80 83       	st	Z, r24

	// Initialize OCR1A/B
	OCR1A = 0xBF;
     44c:	8f eb       	ldi	r24, 0xBF	; 191
     44e:	90 e0       	ldi	r25, 0x00	; 0
     450:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     454:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	OCR1B = 0xBF;
     458:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
     45c:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>

	// Enable B5/6 output
	set(DDRB, 6);
     460:	26 9a       	sbi	0x04, 6	; 4
	set(DDRB, 5);
     462:	25 9a       	sbi	0x04, 5	; 4
     464:	08 95       	ret

00000466 <motor_stop>:
}

// Stop motor
void motor_stop() {
	clear(PORTB, 1);
     466:	29 98       	cbi	0x05, 1	; 5
	clear(PORTB, 2);
     468:	2a 98       	cbi	0x05, 2	; 5
	clear(PORTB, 3);
     46a:	2b 98       	cbi	0x05, 3	; 5
	clear(PORTB, 7);
     46c:	2f 98       	cbi	0x05, 7	; 5
     46e:	08 95       	ret

00000470 <turn_in_place>:
}

// Turn in place - right if true or left if false
// Speed is an int between 0 and 255
void turn_in_place(bool right, int speed) {
	if (right) {
     470:	88 23       	and	r24, r24
     472:	89 f0       	breq	.+34     	; 0x496 <turn_in_place+0x26>
		OCR1A = 255 - speed;
     474:	8f ef       	ldi	r24, 0xFF	; 255
     476:	90 e0       	ldi	r25, 0x00	; 0
     478:	86 1b       	sub	r24, r22
     47a:	97 0b       	sbc	r25, r23
     47c:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     480:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
		OCR1B = 255 - speed;
     484:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
     488:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
		set(PORTB, 1);
     48c:	29 9a       	sbi	0x05, 1	; 5
		clear(PORTB, 2);
     48e:	2a 98       	cbi	0x05, 2	; 5
		clear(PORTB, 3);
     490:	2b 98       	cbi	0x05, 3	; 5
		set(PORTB, 7);
     492:	2f 9a       	sbi	0x05, 7	; 5
     494:	08 95       	ret
	} else {
		OCR1A = 255 - speed;
     496:	8f ef       	ldi	r24, 0xFF	; 255
     498:	90 e0       	ldi	r25, 0x00	; 0
     49a:	86 1b       	sub	r24, r22
     49c:	97 0b       	sbc	r25, r23
     49e:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     4a2:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
		OCR1B = 255 - speed;
     4a6:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
     4aa:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
		clear(PORTB, 1);
     4ae:	29 98       	cbi	0x05, 1	; 5
		set(PORTB, 2);
     4b0:	2a 9a       	sbi	0x05, 2	; 5
		set(PORTB, 3);
     4b2:	2b 9a       	sbi	0x05, 3	; 5
		clear(PORTB, 7);
     4b4:	2f 98       	cbi	0x05, 7	; 5
     4b6:	08 95       	ret

000004b8 <turn>:
}

// -50 to -1 left, 0 forward, 1 to 50 right
// Absolute value of input determines how "sharp" the turn is
void turn(int direction) {
	clear(PORTB, 1);
     4b8:	29 98       	cbi	0x05, 1	; 5
	set(PORTB, 2);
     4ba:	2a 9a       	sbi	0x05, 2	; 5
	clear(PORTB, 3);
     4bc:	2b 98       	cbi	0x05, 3	; 5
	set(PORTB, 7);
     4be:	2f 9a       	sbi	0x05, 7	; 5
	if (direction == 0) {
     4c0:	00 97       	sbiw	r24, 0x00	; 0
     4c2:	69 f4       	brne	.+26     	; 0x4de <turn+0x26>
		OCR1A = 0x37;
     4c4:	87 e3       	ldi	r24, 0x37	; 55
     4c6:	90 e0       	ldi	r25, 0x00	; 0
     4c8:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     4cc:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
		OCR1B = 0x3F;
     4d0:	8f e3       	ldi	r24, 0x3F	; 63
     4d2:	90 e0       	ldi	r25, 0x00	; 0
     4d4:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
     4d8:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
     4dc:	08 95       	ret
     4de:	bc 01       	movw	r22, r24
	} else if (direction > 0) {
     4e0:	18 16       	cp	r1, r24
     4e2:	19 06       	cpc	r1, r25
     4e4:	ec f4       	brge	.+58     	; 0x520 <turn+0x68>
		OCR1A = 0x00;
     4e6:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     4ea:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
		OCR1B = (int) (255.0 * (float) direction / 50.0);
     4ee:	07 2e       	mov	r0, r23
     4f0:	00 0c       	add	r0, r0
     4f2:	88 0b       	sbc	r24, r24
     4f4:	99 0b       	sbc	r25, r25
     4f6:	0e 94 e6 0f 	call	0x1fcc	; 0x1fcc <__floatsisf>
     4fa:	20 e0       	ldi	r18, 0x00	; 0
     4fc:	30 e0       	ldi	r19, 0x00	; 0
     4fe:	4f e7       	ldi	r20, 0x7F	; 127
     500:	53 e4       	ldi	r21, 0x43	; 67
     502:	0e 94 09 11 	call	0x2212	; 0x2212 <__mulsf3>
     506:	20 e0       	ldi	r18, 0x00	; 0
     508:	30 e0       	ldi	r19, 0x00	; 0
     50a:	48 e4       	ldi	r20, 0x48	; 72
     50c:	52 e4       	ldi	r21, 0x42	; 66
     50e:	0e 94 3c 0f 	call	0x1e78	; 0x1e78 <__divsf3>
     512:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <__fixsfsi>
     516:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
     51a:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
     51e:	08 95       	ret
	} else {
		OCR1A = (int) (255.0 * (float) -direction / 50.0);
     520:	71 95       	neg	r23
     522:	61 95       	neg	r22
     524:	71 09       	sbc	r23, r1
     526:	07 2e       	mov	r0, r23
     528:	00 0c       	add	r0, r0
     52a:	88 0b       	sbc	r24, r24
     52c:	99 0b       	sbc	r25, r25
     52e:	0e 94 e6 0f 	call	0x1fcc	; 0x1fcc <__floatsisf>
     532:	20 e0       	ldi	r18, 0x00	; 0
     534:	30 e0       	ldi	r19, 0x00	; 0
     536:	4f e7       	ldi	r20, 0x7F	; 127
     538:	53 e4       	ldi	r21, 0x43	; 67
     53a:	0e 94 09 11 	call	0x2212	; 0x2212 <__mulsf3>
     53e:	20 e0       	ldi	r18, 0x00	; 0
     540:	30 e0       	ldi	r19, 0x00	; 0
     542:	48 e4       	ldi	r20, 0x48	; 72
     544:	52 e4       	ldi	r21, 0x42	; 66
     546:	0e 94 3c 0f 	call	0x1e78	; 0x1e78 <__divsf3>
     54a:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <__fixsfsi>
     54e:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     552:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
		OCR1B = 0x00;
     556:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
     55a:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
     55e:	08 95       	ret

00000560 <facing_goal>:
	}
}

// Turn to face opponent's goal
bool facing_goal(Robot* robot, float opponent_x, float opponent_y) {
     560:	8f 92       	push	r8
     562:	9f 92       	push	r9
     564:	af 92       	push	r10
     566:	bf 92       	push	r11
     568:	cf 92       	push	r12
     56a:	df 92       	push	r13
     56c:	ef 92       	push	r14
     56e:	ff 92       	push	r15
     570:	0f 93       	push	r16
     572:	1f 93       	push	r17
     574:	cf 93       	push	r28
     576:	df 93       	push	r29
     578:	ec 01       	movw	r28, r24
     57a:	cb 01       	movw	r24, r22
     57c:	ba 01       	movw	r22, r20
     57e:	48 01       	movw	r8, r16
     580:	59 01       	movw	r10, r18
	float opponent_angle = atan2f((opponent_y - robot->y), opponent_x - robot->x);
     582:	29 81       	ldd	r18, Y+1	; 0x01
     584:	3a 81       	ldd	r19, Y+2	; 0x02
     586:	4b 81       	ldd	r20, Y+3	; 0x03
     588:	5c 81       	ldd	r21, Y+4	; 0x04
     58a:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <__subsf3>
     58e:	6b 01       	movw	r12, r22
     590:	7c 01       	movw	r14, r24
     592:	2d 81       	ldd	r18, Y+5	; 0x05
     594:	3e 81       	ldd	r19, Y+6	; 0x06
     596:	4f 81       	ldd	r20, Y+7	; 0x07
     598:	58 85       	ldd	r21, Y+8	; 0x08
     59a:	c5 01       	movw	r24, r10
     59c:	b4 01       	movw	r22, r8
     59e:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <__subsf3>
     5a2:	a7 01       	movw	r20, r14
     5a4:	96 01       	movw	r18, r12
     5a6:	0e 94 d3 0e 	call	0x1da6	; 0x1da6 <atan2>
     5aa:	4b 01       	movw	r8, r22
     5ac:	5c 01       	movw	r10, r24
	// Near -PI
	if (opponent_angle < high_bound && opponent_angle < PI && low_bound >= PI - error) {
		return true;
	}*/
	// Normal case
	return (robot->o > low_bound && robot->o < high_bound);
     5ae:	c9 84       	ldd	r12, Y+9	; 0x09
     5b0:	da 84       	ldd	r13, Y+10	; 0x0a
     5b2:	eb 84       	ldd	r14, Y+11	; 0x0b
     5b4:	fc 84       	ldd	r15, Y+12	; 0x0c

// Turn to face opponent's goal
bool facing_goal(Robot* robot, float opponent_x, float opponent_y) {
	float opponent_angle = atan2f((opponent_y - robot->y), opponent_x - robot->x);
	float error = PI / 18.0;
	float low_bound = opponent_angle - error;
     5b6:	29 eb       	ldi	r18, 0xB9	; 185
     5b8:	38 eb       	ldi	r19, 0xB8	; 184
     5ba:	42 e3       	ldi	r20, 0x32	; 50
     5bc:	5e e3       	ldi	r21, 0x3E	; 62
     5be:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <__subsf3>
	// Near -PI
	if (opponent_angle < high_bound && opponent_angle < PI && low_bound >= PI - error) {
		return true;
	}*/
	// Normal case
	return (robot->o > low_bound && robot->o < high_bound);
     5c2:	a7 01       	movw	r20, r14
     5c4:	96 01       	movw	r18, r12
     5c6:	0e 94 32 0f 	call	0x1e64	; 0x1e64 <__cmpsf2>
     5ca:	88 23       	and	r24, r24
     5cc:	94 f4       	brge	.+36     	; 0x5f2 <facing_goal+0x92>
// Turn to face opponent's goal
bool facing_goal(Robot* robot, float opponent_x, float opponent_y) {
	float opponent_angle = atan2f((opponent_y - robot->y), opponent_x - robot->x);
	float error = PI / 18.0;
	float low_bound = opponent_angle - error;
	float high_bound = opponent_angle + error;
     5ce:	29 eb       	ldi	r18, 0xB9	; 185
     5d0:	38 eb       	ldi	r19, 0xB8	; 184
     5d2:	42 e3       	ldi	r20, 0x32	; 50
     5d4:	5e e3       	ldi	r21, 0x3E	; 62
     5d6:	c5 01       	movw	r24, r10
     5d8:	b4 01       	movw	r22, r8
     5da:	0e 94 54 0e 	call	0x1ca8	; 0x1ca8 <__addsf3>
	// Near -PI
	if (opponent_angle < high_bound && opponent_angle < PI && low_bound >= PI - error) {
		return true;
	}*/
	// Normal case
	return (robot->o > low_bound && robot->o < high_bound);
     5de:	c1 e0       	ldi	r28, 0x01	; 1
     5e0:	a7 01       	movw	r20, r14
     5e2:	96 01       	movw	r18, r12
     5e4:	0e 94 fc 10 	call	0x21f8	; 0x21f8 <__gesf2>
     5e8:	18 16       	cp	r1, r24
     5ea:	0c f0       	brlt	.+2      	; 0x5ee <facing_goal+0x8e>
     5ec:	c0 e0       	ldi	r28, 0x00	; 0
     5ee:	8c 2f       	mov	r24, r28
     5f0:	01 c0       	rjmp	.+2      	; 0x5f4 <facing_goal+0x94>
     5f2:	80 e0       	ldi	r24, 0x00	; 0
}
     5f4:	81 70       	andi	r24, 0x01	; 1
     5f6:	df 91       	pop	r29
     5f8:	cf 91       	pop	r28
     5fa:	1f 91       	pop	r17
     5fc:	0f 91       	pop	r16
     5fe:	ff 90       	pop	r15
     600:	ef 90       	pop	r14
     602:	df 90       	pop	r13
     604:	cf 90       	pop	r12
     606:	bf 90       	pop	r11
     608:	af 90       	pop	r10
     60a:	9f 90       	pop	r9
     60c:	8f 90       	pop	r8
     60e:	08 95       	ret

00000610 <m_bus_init>:

// PUBLIC FUNCTIONS
void m_bus_init(void)
{
	// ENABLE PULLUPS
	set(PORTD,0);
     610:	58 9a       	sbi	0x0b, 0	; 11
	set(PORTD,1);
     612:	59 9a       	sbi	0x0b, 1	; 11
	set(PORTD,2);
     614:	5a 9a       	sbi	0x0b, 2	; 11
	
	// CONFIGURE THE CLOCK
	TWBR = 12;	// CLK freq = CPU clock / (16 + 2*TWBR*(4^TWPS)), 16MHz clock, TWBR=12, TWPS=00 -> 400kHz
     616:	8c e0       	ldi	r24, 0x0C	; 12
     618:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>

	// ENABLE interrupts in INT2 (D2)
	set(EICRA,ISC21); clear(EICRA,ISC20); // trigger on falling edge
     61c:	e9 e6       	ldi	r30, 0x69	; 105
     61e:	f0 e0       	ldi	r31, 0x00	; 0
     620:	80 81       	ld	r24, Z
     622:	80 62       	ori	r24, 0x20	; 32
     624:	80 83       	st	Z, r24
     626:	80 81       	ld	r24, Z
     628:	8f 7e       	andi	r24, 0xEF	; 239
     62a:	80 83       	st	Z, r24
	set(EIMSK,INT2); // demask the interrupt
     62c:	ea 9a       	sbi	0x1d, 2	; 29
	sei(); // enable global interrupts
     62e:	78 94       	sei
     630:	08 95       	ret

00000632 <m_rf_read>:
	
	return 1;
}

char m_rf_read(char* buffer, char packet_length)
{
     632:	cf 93       	push	r28
     634:	df 93       	push	r29
     636:	9c 01       	movw	r18, r24

	char bytes;
	int i;

	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
     638:	84 ea       	ldi	r24, 0xA4	; 164
     63a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
     63e:	ec eb       	ldi	r30, 0xBC	; 188
     640:	f0 e0       	ldi	r31, 0x00	; 0
     642:	90 81       	ld	r25, Z
     644:	99 23       	and	r25, r25
     646:	ec f7       	brge	.-6      	; 0x642 <m_rf_read+0x10>
	
	// ADDRESS (in Master-Receiver Mode)
	TWDR = ((MRFTWIADDR<<1)|1);
     648:	81 e5       	ldi	r24, 0x51	; 81
     64a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR = (1<<TWINT) | (1<<TWEN);
     64e:	84 e8       	ldi	r24, 0x84	; 132
     650:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){}; // wait until finished sending address
     654:	ec eb       	ldi	r30, 0xBC	; 188
     656:	f0 e0       	ldi	r31, 0x00	; 0
     658:	90 81       	ld	r25, Z
     65a:	99 23       	and	r25, r25
     65c:	ec f7       	brge	.-6      	; 0x658 <m_rf_read+0x26>
	if((TWSR & 0xF8)== 0x48){ // ACK was not received
     65e:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     662:	88 7f       	andi	r24, 0xF8	; 248
     664:	88 34       	cpi	r24, 0x48	; 72
     666:	29 f4       	brne	.+10     	; 0x672 <m_rf_read+0x40>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
     668:	84 e9       	ldi	r24, 0x94	; 148
     66a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
		return 0; // not connected/listening
     66e:	80 e0       	ldi	r24, 0x00	; 0
     670:	41 c0       	rjmp	.+130    	; 0x6f4 <m_rf_read+0xc2>
	}
	

	// (BYTES)
	TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
     672:	84 ec       	ldi	r24, 0xC4	; 196
     674:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
     678:	ec eb       	ldi	r30, 0xBC	; 188
     67a:	f0 e0       	ldi	r31, 0x00	; 0
     67c:	90 81       	ld	r25, Z
     67e:	99 23       	and	r25, r25
     680:	ec f7       	brge	.-6      	; 0x67c <m_rf_read+0x4a>
	bytes = TWDR;
     682:	40 91 bb 00 	lds	r20, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	if(bytes != packet_length){
     686:	46 13       	cpse	r20, r22
     688:	09 c0       	rjmp	.+18     	; 0x69c <m_rf_read+0x6a>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
		return 0; // indicate length mismatch
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
     68a:	84 2f       	mov	r24, r20
     68c:	90 e0       	ldi	r25, 0x00	; 0
     68e:	01 97       	sbiw	r24, 0x01	; 1
     690:	18 16       	cp	r1, r24
     692:	19 06       	cpc	r1, r25
     694:	44 f0       	brlt	.+16     	; 0x6a6 <m_rf_read+0x74>
     696:	40 e0       	ldi	r20, 0x00	; 0
     698:	50 e0       	ldi	r21, 0x00	; 0
     69a:	1a c0       	rjmp	.+52     	; 0x6d0 <m_rf_read+0x9e>
	// (BYTES)
	TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
	bytes = TWDR;
	if(bytes != packet_length){
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
     69c:	84 e9       	ldi	r24, 0x94	; 148
     69e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
		return 0; // indicate length mismatch
     6a2:	80 e0       	ldi	r24, 0x00	; 0
     6a4:	27 c0       	rjmp	.+78     	; 0x6f4 <m_rf_read+0xc2>
     6a6:	d9 01       	movw	r26, r18
     6a8:	50 e0       	ldi	r21, 0x00	; 0
     6aa:	41 50       	subi	r20, 0x01	; 1
     6ac:	51 09       	sbc	r21, r1
     6ae:	b9 01       	movw	r22, r18
     6b0:	64 0f       	add	r22, r20
     6b2:	75 1f       	adc	r23, r21
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
     6b4:	ec eb       	ldi	r30, 0xBC	; 188
     6b6:	f0 e0       	ldi	r31, 0x00	; 0
     6b8:	84 ec       	ldi	r24, 0xC4	; 196
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		buffer[i] = TWDR;
     6ba:	cb eb       	ldi	r28, 0xBB	; 187
     6bc:	d0 e0       	ldi	r29, 0x00	; 0
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
     6be:	80 83       	st	Z, r24
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
     6c0:	90 81       	ld	r25, Z
     6c2:	99 23       	and	r25, r25
     6c4:	ec f7       	brge	.-6      	; 0x6c0 <m_rf_read+0x8e>
		buffer[i] = TWDR;
     6c6:	98 81       	ld	r25, Y
     6c8:	9d 93       	st	X+, r25
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
		return 0; // indicate length mismatch
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
     6ca:	a6 17       	cp	r26, r22
     6cc:	b7 07       	cpc	r27, r23
     6ce:	b9 f7       	brne	.-18     	; 0x6be <m_rf_read+0x8c>
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		buffer[i] = TWDR;
	}
	TWCR = (1<<TWINT) | (1<<TWEN);	// clear the flag, no ACK, and wait for another byte
     6d0:	84 e8       	ldi	r24, 0x84	; 132
     6d2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
     6d6:	ec eb       	ldi	r30, 0xBC	; 188
     6d8:	f0 e0       	ldi	r31, 0x00	; 0
     6da:	90 81       	ld	r25, Z
     6dc:	99 23       	and	r25, r25
     6de:	ec f7       	brge	.-6      	; 0x6da <m_rf_read+0xa8>
	buffer[i++] = TWDR;
     6e0:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     6e4:	f9 01       	movw	r30, r18
     6e6:	e4 0f       	add	r30, r20
     6e8:	f5 1f       	adc	r31, r21
     6ea:	80 83       	st	Z, r24
	
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
     6ec:	84 e9       	ldi	r24, 0x94	; 148
     6ee:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

	return 1;
     6f2:	81 e0       	ldi	r24, 0x01	; 1
}
     6f4:	df 91       	pop	r29
     6f6:	cf 91       	pop	r28
     6f8:	08 95       	ret

000006fa <m_usb_init>:
	phex(i);
}

void m_usb_tx_hexchar(unsigned char i)
{
	phex(i);
     6fa:	81 e0       	ldi	r24, 0x01	; 1
     6fc:	80 93 d7 00 	sts	0x00D7, r24	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
     700:	80 ea       	ldi	r24, 0xA0	; 160
     702:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
     706:	82 e1       	ldi	r24, 0x12	; 18
     708:	89 bd       	out	0x29, r24	; 41
     70a:	09 b4       	in	r0, 0x29	; 41
     70c:	00 fe       	sbrs	r0, 0
     70e:	fd cf       	rjmp	.-6      	; 0x70a <m_usb_init+0x10>
     710:	80 e9       	ldi	r24, 0x90	; 144
     712:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
     716:	10 92 e0 00 	sts	0x00E0, r1	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
     71a:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <usb_configuration>
     71e:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <__data_end>
     722:	8c e0       	ldi	r24, 0x0C	; 12
     724:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
     728:	78 94       	sei
     72a:	08 95       	ret

0000072c <m_usb_isconnected>:
     72c:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <usb_configuration>
     730:	08 95       	ret

00000732 <m_usb_tx_char>:
     732:	cf 93       	push	r28
     734:	df 93       	push	r29
     736:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <usb_configuration>
     73a:	99 23       	and	r25, r25
     73c:	09 f4       	brne	.+2      	; 0x740 <m_usb_tx_char+0xe>
     73e:	4c c0       	rjmp	.+152    	; 0x7d8 <m_usb_tx_char+0xa6>
     740:	9f b7       	in	r25, 0x3f	; 63
     742:	f8 94       	cli
     744:	24 e0       	ldi	r18, 0x04	; 4
     746:	20 93 e9 00 	sts	0x00E9, r18	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
     74a:	20 91 09 01 	lds	r18, 0x0109	; 0x800109 <transmit_previous_timeout>
     74e:	22 23       	and	r18, r18
     750:	49 f0       	breq	.+18     	; 0x764 <m_usb_tx_char+0x32>
     752:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     756:	25 fd       	sbrc	r18, 5
     758:	03 c0       	rjmp	.+6      	; 0x760 <m_usb_tx_char+0x2e>
     75a:	9f bf       	out	0x3f, r25	; 63
     75c:	8f ef       	ldi	r24, 0xFF	; 255
     75e:	41 c0       	rjmp	.+130    	; 0x7e2 <m_usb_tx_char+0xb0>
     760:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <transmit_previous_timeout>
     764:	30 91 e4 00 	lds	r19, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
     768:	37 5e       	subi	r19, 0xE7	; 231
     76a:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     76e:	25 fd       	sbrc	r18, 5
     770:	24 c0       	rjmp	.+72     	; 0x7ba <m_usb_tx_char+0x88>
     772:	9f bf       	out	0x3f, r25	; 63
     774:	90 91 e4 00 	lds	r25, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
     778:	93 17       	cp	r25, r19
     77a:	81 f0       	breq	.+32     	; 0x79c <m_usb_tx_char+0x6a>
     77c:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <usb_configuration>
     780:	99 23       	and	r25, r25
     782:	61 f1       	breq	.+88     	; 0x7dc <m_usb_tx_char+0xaa>
     784:	a9 ee       	ldi	r26, 0xE9	; 233
     786:	b0 e0       	ldi	r27, 0x00	; 0
     788:	44 e0       	ldi	r20, 0x04	; 4
     78a:	e8 ee       	ldi	r30, 0xE8	; 232
     78c:	f0 e0       	ldi	r31, 0x00	; 0
     78e:	c4 ee       	ldi	r28, 0xE4	; 228
     790:	d0 e0       	ldi	r29, 0x00	; 0
     792:	0d c0       	rjmp	.+26     	; 0x7ae <m_usb_tx_char+0x7c>
     794:	9f bf       	out	0x3f, r25	; 63
     796:	98 81       	ld	r25, Y
     798:	93 13       	cpse	r25, r19
     79a:	05 c0       	rjmp	.+10     	; 0x7a6 <m_usb_tx_char+0x74>
     79c:	81 e0       	ldi	r24, 0x01	; 1
     79e:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <transmit_previous_timeout>
     7a2:	8f ef       	ldi	r24, 0xFF	; 255
     7a4:	1e c0       	rjmp	.+60     	; 0x7e2 <m_usb_tx_char+0xb0>
     7a6:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <usb_configuration>
     7aa:	99 23       	and	r25, r25
     7ac:	c9 f0       	breq	.+50     	; 0x7e0 <m_usb_tx_char+0xae>
     7ae:	9f b7       	in	r25, 0x3f	; 63
     7b0:	f8 94       	cli
     7b2:	4c 93       	st	X, r20
     7b4:	20 81       	ld	r18, Z
     7b6:	25 ff       	sbrs	r18, 5
     7b8:	ed cf       	rjmp	.-38     	; 0x794 <m_usb_tx_char+0x62>
     7ba:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     7be:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     7c2:	85 fd       	sbrc	r24, 5
     7c4:	03 c0       	rjmp	.+6      	; 0x7cc <m_usb_tx_char+0x9a>
     7c6:	8a e3       	ldi	r24, 0x3A	; 58
     7c8:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     7cc:	85 e0       	ldi	r24, 0x05	; 5
     7ce:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <transmit_flush_timer>
     7d2:	9f bf       	out	0x3f, r25	; 63
     7d4:	80 e0       	ldi	r24, 0x00	; 0
     7d6:	05 c0       	rjmp	.+10     	; 0x7e2 <m_usb_tx_char+0xb0>
     7d8:	8f ef       	ldi	r24, 0xFF	; 255
     7da:	03 c0       	rjmp	.+6      	; 0x7e2 <m_usb_tx_char+0xb0>
     7dc:	8f ef       	ldi	r24, 0xFF	; 255
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <m_usb_tx_char+0xb0>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	df 91       	pop	r29
     7e4:	cf 91       	pop	r28
     7e6:	08 95       	ret

000007e8 <__vector_10>:
     7e8:	1f 92       	push	r1
     7ea:	0f 92       	push	r0
     7ec:	0f b6       	in	r0, 0x3f	; 63
     7ee:	0f 92       	push	r0
     7f0:	11 24       	eor	r1, r1
     7f2:	8f 93       	push	r24
     7f4:	9f 93       	push	r25
     7f6:	ef 93       	push	r30
     7f8:	ff 93       	push	r31
     7fa:	e1 ee       	ldi	r30, 0xE1	; 225
     7fc:	f0 e0       	ldi	r31, 0x00	; 0
     7fe:	80 81       	ld	r24, Z
     800:	10 82       	st	Z, r1
     802:	83 ff       	sbrs	r24, 3
     804:	11 c0       	rjmp	.+34     	; 0x828 <__vector_10+0x40>
     806:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
     80a:	91 e0       	ldi	r25, 0x01	; 1
     80c:	90 93 eb 00 	sts	0x00EB, r25	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
     810:	10 92 ec 00 	sts	0x00EC, r1	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
     814:	92 e1       	ldi	r25, 0x12	; 18
     816:	90 93 ed 00 	sts	0x00ED, r25	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
     81a:	98 e0       	ldi	r25, 0x08	; 8
     81c:	90 93 f0 00 	sts	0x00F0, r25	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
     820:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <usb_configuration>
     824:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <__data_end>
     828:	82 ff       	sbrs	r24, 2
     82a:	13 c0       	rjmp	.+38     	; 0x852 <__vector_10+0x6a>
     82c:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <usb_configuration>
     830:	88 23       	and	r24, r24
     832:	79 f0       	breq	.+30     	; 0x852 <__vector_10+0x6a>
     834:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <transmit_flush_timer>
     838:	88 23       	and	r24, r24
     83a:	59 f0       	breq	.+22     	; 0x852 <__vector_10+0x6a>
     83c:	81 50       	subi	r24, 0x01	; 1
     83e:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <transmit_flush_timer>
     842:	81 11       	cpse	r24, r1
     844:	06 c0       	rjmp	.+12     	; 0x852 <__vector_10+0x6a>
     846:	84 e0       	ldi	r24, 0x04	; 4
     848:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
     84c:	8a e3       	ldi	r24, 0x3A	; 58
     84e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     852:	ff 91       	pop	r31
     854:	ef 91       	pop	r30
     856:	9f 91       	pop	r25
     858:	8f 91       	pop	r24
     85a:	0f 90       	pop	r0
     85c:	0f be       	out	0x3f, r0	; 63
     85e:	0f 90       	pop	r0
     860:	1f 90       	pop	r1
     862:	18 95       	reti

00000864 <__vector_11>:
     864:	1f 92       	push	r1
     866:	0f 92       	push	r0
     868:	0f b6       	in	r0, 0x3f	; 63
     86a:	0f 92       	push	r0
     86c:	11 24       	eor	r1, r1
     86e:	0f 93       	push	r16
     870:	1f 93       	push	r17
     872:	2f 93       	push	r18
     874:	3f 93       	push	r19
     876:	4f 93       	push	r20
     878:	5f 93       	push	r21
     87a:	6f 93       	push	r22
     87c:	7f 93       	push	r23
     87e:	8f 93       	push	r24
     880:	9f 93       	push	r25
     882:	af 93       	push	r26
     884:	bf 93       	push	r27
     886:	cf 93       	push	r28
     888:	df 93       	push	r29
     88a:	ef 93       	push	r30
     88c:	ff 93       	push	r31
     88e:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
     892:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     896:	83 ff       	sbrs	r24, 3
     898:	4c c1       	rjmp	.+664    	; 0xb32 <__stack+0x33>
     89a:	e1 ef       	ldi	r30, 0xF1	; 241
     89c:	f0 e0       	ldi	r31, 0x00	; 0
     89e:	60 81       	ld	r22, Z
     8a0:	80 81       	ld	r24, Z
     8a2:	20 81       	ld	r18, Z
     8a4:	90 81       	ld	r25, Z
     8a6:	30 e0       	ldi	r19, 0x00	; 0
     8a8:	39 2b       	or	r19, r25
     8aa:	40 81       	ld	r20, Z
     8ac:	90 81       	ld	r25, Z
     8ae:	50 e0       	ldi	r21, 0x00	; 0
     8b0:	59 2b       	or	r21, r25
     8b2:	70 81       	ld	r23, Z
     8b4:	c0 81       	ld	r28, Z
     8b6:	92 ef       	ldi	r25, 0xF2	; 242
     8b8:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     8bc:	86 30       	cpi	r24, 0x06	; 6
     8be:	09 f0       	breq	.+2      	; 0x8c2 <__vector_11+0x5e>
     8c0:	58 c0       	rjmp	.+176    	; 0x972 <__vector_11+0x10e>
     8c2:	04 c0       	rjmp	.+8      	; 0x8cc <__vector_11+0x68>
     8c4:	81 e2       	ldi	r24, 0x21	; 33
     8c6:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
     8ca:	3a c1       	rjmp	.+628    	; 0xb40 <__stack+0x41>
     8cc:	66 e0       	ldi	r22, 0x06	; 6
     8ce:	8a e7       	ldi	r24, 0x7A	; 122
     8d0:	91 e0       	ldi	r25, 0x01	; 1
     8d2:	fc 01       	movw	r30, r24
     8d4:	a5 91       	lpm	r26, Z+
     8d6:	b4 91       	lpm	r27, Z
     8d8:	2a 17       	cp	r18, r26
     8da:	3b 07       	cpc	r19, r27
     8dc:	11 f0       	breq	.+4      	; 0x8e2 <__vector_11+0x7e>
     8de:	07 96       	adiw	r24, 0x07	; 7
     8e0:	23 c0       	rjmp	.+70     	; 0x928 <__vector_11+0xc4>
     8e2:	fc 01       	movw	r30, r24
     8e4:	32 96       	adiw	r30, 0x02	; 2
     8e6:	a5 91       	lpm	r26, Z+
     8e8:	b4 91       	lpm	r27, Z
     8ea:	4a 17       	cp	r20, r26
     8ec:	5b 07       	cpc	r21, r27
     8ee:	11 f0       	breq	.+4      	; 0x8f4 <__vector_11+0x90>
     8f0:	07 96       	adiw	r24, 0x07	; 7
     8f2:	1a c0       	rjmp	.+52     	; 0x928 <__vector_11+0xc4>
     8f4:	fc 01       	movw	r30, r24
     8f6:	34 96       	adiw	r30, 0x04	; 4
     8f8:	45 91       	lpm	r20, Z+
     8fa:	54 91       	lpm	r21, Z
     8fc:	fc 01       	movw	r30, r24
     8fe:	36 96       	adiw	r30, 0x06	; 6
     900:	24 91       	lpm	r18, Z
     902:	87 2f       	mov	r24, r23
     904:	90 e0       	ldi	r25, 0x00	; 0
     906:	9c 2b       	or	r25, r28
     908:	8f 3f       	cpi	r24, 0xFF	; 255
     90a:	91 05       	cpc	r25, r1
     90c:	19 f0       	breq	.+6      	; 0x914 <__vector_11+0xb0>
     90e:	10 f0       	brcs	.+4      	; 0x914 <__vector_11+0xb0>
     910:	8f ef       	ldi	r24, 0xFF	; 255
     912:	90 e0       	ldi	r25, 0x00	; 0
     914:	82 17       	cp	r24, r18
     916:	08 f4       	brcc	.+2      	; 0x91a <__vector_11+0xb6>
     918:	28 2f       	mov	r18, r24
     91a:	a8 ee       	ldi	r26, 0xE8	; 232
     91c:	b0 e0       	ldi	r27, 0x00	; 0
     91e:	70 e1       	ldi	r23, 0x10	; 16
     920:	6e ef       	ldi	r22, 0xFE	; 254
     922:	c1 ef       	ldi	r28, 0xF1	; 241
     924:	d0 e0       	ldi	r29, 0x00	; 0
     926:	03 c0       	rjmp	.+6      	; 0x92e <__vector_11+0xca>
     928:	61 50       	subi	r22, 0x01	; 1
     92a:	99 f6       	brne	.-90     	; 0x8d2 <__vector_11+0x6e>
     92c:	cb cf       	rjmp	.-106    	; 0x8c4 <__vector_11+0x60>
     92e:	8c 91       	ld	r24, X
     930:	98 2f       	mov	r25, r24
     932:	95 70       	andi	r25, 0x05	; 5
     934:	e1 f3       	breq	.-8      	; 0x92e <__vector_11+0xca>
     936:	82 fd       	sbrc	r24, 2
     938:	03 c1       	rjmp	.+518    	; 0xb40 <__stack+0x41>
     93a:	32 2f       	mov	r19, r18
     93c:	21 31       	cpi	r18, 0x11	; 17
     93e:	08 f0       	brcs	.+2      	; 0x942 <__vector_11+0xde>
     940:	37 2f       	mov	r19, r23
     942:	33 23       	and	r19, r19
     944:	09 f4       	brne	.+2      	; 0x948 <__vector_11+0xe4>
     946:	f9 c0       	rjmp	.+498    	; 0xb3a <__stack+0x3b>
     948:	fa 01       	movw	r30, r20
     94a:	83 2f       	mov	r24, r19
     94c:	94 91       	lpm	r25, Z
     94e:	98 83       	st	Y, r25
     950:	81 50       	subi	r24, 0x01	; 1
     952:	31 96       	adiw	r30, 0x01	; 1
     954:	81 11       	cpse	r24, r1
     956:	fa cf       	rjmp	.-12     	; 0x94c <__vector_11+0xe8>
     958:	8f ef       	ldi	r24, 0xFF	; 255
     95a:	83 0f       	add	r24, r19
     95c:	90 e0       	ldi	r25, 0x00	; 0
     95e:	01 96       	adiw	r24, 0x01	; 1
     960:	48 0f       	add	r20, r24
     962:	59 1f       	adc	r21, r25
     964:	23 1b       	sub	r18, r19
     966:	6c 93       	st	X, r22
     968:	21 11       	cpse	r18, r1
     96a:	e1 cf       	rjmp	.-62     	; 0x92e <__vector_11+0xca>
     96c:	30 31       	cpi	r19, 0x10	; 16
     96e:	f9 f2       	breq	.-66     	; 0x92e <__vector_11+0xca>
     970:	e7 c0       	rjmp	.+462    	; 0xb40 <__stack+0x41>
     972:	85 30       	cpi	r24, 0x05	; 5
     974:	61 f4       	brne	.+24     	; 0x98e <__vector_11+0x12a>
     976:	8e ef       	ldi	r24, 0xFE	; 254
     978:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     97c:	e8 ee       	ldi	r30, 0xE8	; 232
     97e:	f0 e0       	ldi	r31, 0x00	; 0
     980:	80 81       	ld	r24, Z
     982:	80 ff       	sbrs	r24, 0
     984:	fd cf       	rjmp	.-6      	; 0x980 <__vector_11+0x11c>
     986:	20 68       	ori	r18, 0x80	; 128
     988:	20 93 e3 00 	sts	0x00E3, r18	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
     98c:	d9 c0       	rjmp	.+434    	; 0xb40 <__stack+0x41>
     98e:	89 30       	cpi	r24, 0x09	; 9
     990:	09 f0       	breq	.+2      	; 0x994 <__vector_11+0x130>
     992:	35 c0       	rjmp	.+106    	; 0x9fe <__vector_11+0x19a>
     994:	61 11       	cpse	r22, r1
     996:	cd c0       	rjmp	.+410    	; 0xb32 <__stack+0x33>
     998:	20 93 0b 01 	sts	0x010B, r18	; 0x80010b <usb_configuration>
     99c:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <__data_end>
     9a0:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <transmit_flush_timer>
     9a4:	8e ef       	ldi	r24, 0xFE	; 254
     9a6:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     9aa:	81 e0       	ldi	r24, 0x01	; 1
     9ac:	23 e2       	ldi	r18, 0x23	; 35
     9ae:	32 e0       	ldi	r19, 0x02	; 2
     9b0:	c9 ee       	ldi	r28, 0xE9	; 233
     9b2:	d0 e0       	ldi	r29, 0x00	; 0
     9b4:	ab ee       	ldi	r26, 0xEB	; 235
     9b6:	b0 e0       	ldi	r27, 0x00	; 0
     9b8:	0c ee       	ldi	r16, 0xEC	; 236
     9ba:	10 e0       	ldi	r17, 0x00	; 0
     9bc:	6d ee       	ldi	r22, 0xED	; 237
     9be:	70 e0       	ldi	r23, 0x00	; 0
     9c0:	88 83       	st	Y, r24
     9c2:	a9 01       	movw	r20, r18
     9c4:	4f 5f       	subi	r20, 0xFF	; 255
     9c6:	5f 4f       	sbci	r21, 0xFF	; 255
     9c8:	f9 01       	movw	r30, r18
     9ca:	94 91       	lpm	r25, Z
     9cc:	9c 93       	st	X, r25
     9ce:	99 23       	and	r25, r25
     9d0:	61 f0       	breq	.+24     	; 0x9ea <__vector_11+0x186>
     9d2:	fa 01       	movw	r30, r20
     9d4:	44 91       	lpm	r20, Z
     9d6:	f8 01       	movw	r30, r16
     9d8:	40 83       	st	Z, r20
     9da:	f9 01       	movw	r30, r18
     9dc:	32 96       	adiw	r30, 0x02	; 2
     9de:	94 91       	lpm	r25, Z
     9e0:	2d 5f       	subi	r18, 0xFD	; 253
     9e2:	3f 4f       	sbci	r19, 0xFF	; 255
     9e4:	fb 01       	movw	r30, r22
     9e6:	90 83       	st	Z, r25
     9e8:	01 c0       	rjmp	.+2      	; 0x9ec <__vector_11+0x188>
     9ea:	9a 01       	movw	r18, r20
     9ec:	8f 5f       	subi	r24, 0xFF	; 255
     9ee:	85 30       	cpi	r24, 0x05	; 5
     9f0:	39 f7       	brne	.-50     	; 0x9c0 <__vector_11+0x15c>
     9f2:	ea ee       	ldi	r30, 0xEA	; 234
     9f4:	f0 e0       	ldi	r31, 0x00	; 0
     9f6:	8e e1       	ldi	r24, 0x1E	; 30
     9f8:	80 83       	st	Z, r24
     9fa:	10 82       	st	Z, r1
     9fc:	a1 c0       	rjmp	.+322    	; 0xb40 <__stack+0x41>
     9fe:	88 30       	cpi	r24, 0x08	; 8
     a00:	81 f4       	brne	.+32     	; 0xa22 <__vector_11+0x1be>
     a02:	60 38       	cpi	r22, 0x80	; 128
     a04:	09 f0       	breq	.+2      	; 0xa08 <__vector_11+0x1a4>
     a06:	95 c0       	rjmp	.+298    	; 0xb32 <__stack+0x33>
     a08:	e8 ee       	ldi	r30, 0xE8	; 232
     a0a:	f0 e0       	ldi	r31, 0x00	; 0
     a0c:	80 81       	ld	r24, Z
     a0e:	80 ff       	sbrs	r24, 0
     a10:	fd cf       	rjmp	.-6      	; 0xa0c <__vector_11+0x1a8>
     a12:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <usb_configuration>
     a16:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     a1a:	8e ef       	ldi	r24, 0xFE	; 254
     a1c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     a20:	8f c0       	rjmp	.+286    	; 0xb40 <__stack+0x41>
     a22:	81 32       	cpi	r24, 0x21	; 33
     a24:	b9 f4       	brne	.+46     	; 0xa54 <__vector_11+0x1f0>
     a26:	61 3a       	cpi	r22, 0xA1	; 161
     a28:	09 f0       	breq	.+2      	; 0xa2c <__vector_11+0x1c8>
     a2a:	83 c0       	rjmp	.+262    	; 0xb32 <__stack+0x33>
     a2c:	e8 ee       	ldi	r30, 0xE8	; 232
     a2e:	f0 e0       	ldi	r31, 0x00	; 0
     a30:	80 81       	ld	r24, Z
     a32:	80 ff       	sbrs	r24, 0
     a34:	fd cf       	rjmp	.-6      	; 0xa30 <__vector_11+0x1cc>
     a36:	e0 e0       	ldi	r30, 0x00	; 0
     a38:	f1 e0       	ldi	r31, 0x01	; 1
     a3a:	27 e0       	ldi	r18, 0x07	; 7
     a3c:	31 e0       	ldi	r19, 0x01	; 1
     a3e:	a1 ef       	ldi	r26, 0xF1	; 241
     a40:	b0 e0       	ldi	r27, 0x00	; 0
     a42:	81 91       	ld	r24, Z+
     a44:	8c 93       	st	X, r24
     a46:	e2 17       	cp	r30, r18
     a48:	f3 07       	cpc	r31, r19
     a4a:	d9 f7       	brne	.-10     	; 0xa42 <__vector_11+0x1de>
     a4c:	8e ef       	ldi	r24, 0xFE	; 254
     a4e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     a52:	76 c0       	rjmp	.+236    	; 0xb40 <__stack+0x41>
     a54:	80 32       	cpi	r24, 0x20	; 32
     a56:	d1 f4       	brne	.+52     	; 0xa8c <__vector_11+0x228>
     a58:	61 32       	cpi	r22, 0x21	; 33
     a5a:	09 f0       	breq	.+2      	; 0xa5e <__vector_11+0x1fa>
     a5c:	6a c0       	rjmp	.+212    	; 0xb32 <__stack+0x33>
     a5e:	e8 ee       	ldi	r30, 0xE8	; 232
     a60:	f0 e0       	ldi	r31, 0x00	; 0
     a62:	80 81       	ld	r24, Z
     a64:	82 ff       	sbrs	r24, 2
     a66:	fd cf       	rjmp	.-6      	; 0xa62 <__vector_11+0x1fe>
     a68:	e0 e0       	ldi	r30, 0x00	; 0
     a6a:	f1 e0       	ldi	r31, 0x01	; 1
     a6c:	27 e0       	ldi	r18, 0x07	; 7
     a6e:	31 e0       	ldi	r19, 0x01	; 1
     a70:	a1 ef       	ldi	r26, 0xF1	; 241
     a72:	b0 e0       	ldi	r27, 0x00	; 0
     a74:	8c 91       	ld	r24, X
     a76:	81 93       	st	Z+, r24
     a78:	e2 17       	cp	r30, r18
     a7a:	f3 07       	cpc	r31, r19
     a7c:	d9 f7       	brne	.-10     	; 0xa74 <__vector_11+0x210>
     a7e:	e8 ee       	ldi	r30, 0xE8	; 232
     a80:	f0 e0       	ldi	r31, 0x00	; 0
     a82:	8b ef       	ldi	r24, 0xFB	; 251
     a84:	80 83       	st	Z, r24
     a86:	8e ef       	ldi	r24, 0xFE	; 254
     a88:	80 83       	st	Z, r24
     a8a:	5a c0       	rjmp	.+180    	; 0xb40 <__stack+0x41>
     a8c:	82 32       	cpi	r24, 0x22	; 34
     a8e:	71 f4       	brne	.+28     	; 0xaac <__vector_11+0x248>
     a90:	61 32       	cpi	r22, 0x21	; 33
     a92:	09 f0       	breq	.+2      	; 0xa96 <__vector_11+0x232>
     a94:	4e c0       	rjmp	.+156    	; 0xb32 <__stack+0x33>
     a96:	20 93 08 01 	sts	0x0108, r18	; 0x800108 <__data_end>
     a9a:	e8 ee       	ldi	r30, 0xE8	; 232
     a9c:	f0 e0       	ldi	r31, 0x00	; 0
     a9e:	80 81       	ld	r24, Z
     aa0:	80 ff       	sbrs	r24, 0
     aa2:	fd cf       	rjmp	.-6      	; 0xa9e <__vector_11+0x23a>
     aa4:	8e ef       	ldi	r24, 0xFE	; 254
     aa6:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     aaa:	4a c0       	rjmp	.+148    	; 0xb40 <__stack+0x41>
     aac:	81 11       	cpse	r24, r1
     aae:	1a c0       	rjmp	.+52     	; 0xae4 <__vector_11+0x280>
     ab0:	e8 ee       	ldi	r30, 0xE8	; 232
     ab2:	f0 e0       	ldi	r31, 0x00	; 0
     ab4:	80 81       	ld	r24, Z
     ab6:	80 ff       	sbrs	r24, 0
     ab8:	fd cf       	rjmp	.-6      	; 0xab4 <__vector_11+0x250>
     aba:	62 38       	cpi	r22, 0x82	; 130
     abc:	51 f4       	brne	.+20     	; 0xad2 <__vector_11+0x26e>
     abe:	e9 ee       	ldi	r30, 0xE9	; 233
     ac0:	f0 e0       	ldi	r31, 0x00	; 0
     ac2:	40 83       	st	Z, r20
     ac4:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
     ac8:	85 fb       	bst	r24, 5
     aca:	88 27       	eor	r24, r24
     acc:	80 f9       	bld	r24, 0
     ace:	10 82       	st	Z, r1
     ad0:	01 c0       	rjmp	.+2      	; 0xad4 <__vector_11+0x270>
     ad2:	80 e0       	ldi	r24, 0x00	; 0
     ad4:	e1 ef       	ldi	r30, 0xF1	; 241
     ad6:	f0 e0       	ldi	r31, 0x00	; 0
     ad8:	80 83       	st	Z, r24
     ada:	10 82       	st	Z, r1
     adc:	8e ef       	ldi	r24, 0xFE	; 254
     ade:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     ae2:	2e c0       	rjmp	.+92     	; 0xb40 <__stack+0x41>
     ae4:	98 2f       	mov	r25, r24
     ae6:	9d 7f       	andi	r25, 0xFD	; 253
     ae8:	91 30       	cpi	r25, 0x01	; 1
     aea:	19 f5       	brne	.+70     	; 0xb32 <__stack+0x33>
     aec:	62 30       	cpi	r22, 0x02	; 2
     aee:	09 f5       	brne	.+66     	; 0xb32 <__stack+0x33>
     af0:	23 2b       	or	r18, r19
     af2:	f9 f4       	brne	.+62     	; 0xb32 <__stack+0x33>
     af4:	4f 77       	andi	r20, 0x7F	; 127
     af6:	9f ef       	ldi	r25, 0xFF	; 255
     af8:	94 0f       	add	r25, r20
     afa:	94 30       	cpi	r25, 0x04	; 4
     afc:	d0 f4       	brcc	.+52     	; 0xb32 <__stack+0x33>
     afe:	9e ef       	ldi	r25, 0xFE	; 254
     b00:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     b04:	40 93 e9 00 	sts	0x00E9, r20	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
     b08:	83 30       	cpi	r24, 0x03	; 3
     b0a:	21 f4       	brne	.+8      	; 0xb14 <__stack+0x15>
     b0c:	81 e2       	ldi	r24, 0x21	; 33
     b0e:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
     b12:	16 c0       	rjmp	.+44     	; 0xb40 <__stack+0x41>
     b14:	89 e1       	ldi	r24, 0x19	; 25
     b16:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
     b1a:	81 e0       	ldi	r24, 0x01	; 1
     b1c:	90 e0       	ldi	r25, 0x00	; 0
     b1e:	02 c0       	rjmp	.+4      	; 0xb24 <__stack+0x25>
     b20:	88 0f       	add	r24, r24
     b22:	99 1f       	adc	r25, r25
     b24:	4a 95       	dec	r20
     b26:	e2 f7       	brpl	.-8      	; 0xb20 <__stack+0x21>
     b28:	ea ee       	ldi	r30, 0xEA	; 234
     b2a:	f0 e0       	ldi	r31, 0x00	; 0
     b2c:	80 83       	st	Z, r24
     b2e:	10 82       	st	Z, r1
     b30:	07 c0       	rjmp	.+14     	; 0xb40 <__stack+0x41>
     b32:	81 e2       	ldi	r24, 0x21	; 33
     b34:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
     b38:	03 c0       	rjmp	.+6      	; 0xb40 <__stack+0x41>
     b3a:	6c 93       	st	X, r22
     b3c:	21 11       	cpse	r18, r1
     b3e:	f7 ce       	rjmp	.-530    	; 0x92e <__vector_11+0xca>
     b40:	ff 91       	pop	r31
     b42:	ef 91       	pop	r30
     b44:	df 91       	pop	r29
     b46:	cf 91       	pop	r28
     b48:	bf 91       	pop	r27
     b4a:	af 91       	pop	r26
     b4c:	9f 91       	pop	r25
     b4e:	8f 91       	pop	r24
     b50:	7f 91       	pop	r23
     b52:	6f 91       	pop	r22
     b54:	5f 91       	pop	r21
     b56:	4f 91       	pop	r20
     b58:	3f 91       	pop	r19
     b5a:	2f 91       	pop	r18
     b5c:	1f 91       	pop	r17
     b5e:	0f 91       	pop	r16
     b60:	0f 90       	pop	r0
     b62:	0f be       	out	0x3f, r0	; 63
     b64:	0f 90       	pop	r0
     b66:	1f 90       	pop	r1
     b68:	18 95       	reti

00000b6a <print_P>:
     b6a:	0f 93       	push	r16
     b6c:	1f 93       	push	r17
     b6e:	cf 93       	push	r28
     b70:	8c 01       	movw	r16, r24
     b72:	0f 5f       	subi	r16, 0xFF	; 255
     b74:	1f 4f       	sbci	r17, 0xFF	; 255
     b76:	fc 01       	movw	r30, r24
     b78:	c4 91       	lpm	r28, Z
     b7a:	cc 23       	and	r28, r28
     b7c:	71 f0       	breq	.+28     	; 0xb9a <print_P+0x30>
     b7e:	ca 30       	cpi	r28, 0x0A	; 10
     b80:	19 f4       	brne	.+6      	; 0xb88 <print_P+0x1e>
     b82:	8d e0       	ldi	r24, 0x0D	; 13
     b84:	0e 94 99 03 	call	0x732	; 0x732 <m_usb_tx_char>
     b88:	8c 2f       	mov	r24, r28
     b8a:	0e 94 99 03 	call	0x732	; 0x732 <m_usb_tx_char>
     b8e:	f8 01       	movw	r30, r16
     b90:	c4 91       	lpm	r28, Z
     b92:	0f 5f       	subi	r16, 0xFF	; 255
     b94:	1f 4f       	sbci	r17, 0xFF	; 255
     b96:	c1 11       	cpse	r28, r1
     b98:	f2 cf       	rjmp	.-28     	; 0xb7e <print_P+0x14>
     b9a:	cf 91       	pop	r28
     b9c:	1f 91       	pop	r17
     b9e:	0f 91       	pop	r16
     ba0:	08 95       	ret

00000ba2 <m_usb_tx_int>:
}

void m_usb_tx_int(int i)
{
     ba2:	ef 92       	push	r14
     ba4:	ff 92       	push	r15
     ba6:	0f 93       	push	r16
     ba8:	1f 93       	push	r17
     baa:	cf 93       	push	r28
     bac:	df 93       	push	r29
     bae:	cd b7       	in	r28, 0x3d	; 61
     bb0:	de b7       	in	r29, 0x3e	; 62
     bb2:	27 97       	sbiw	r28, 0x07	; 7
     bb4:	0f b6       	in	r0, 0x3f	; 63
     bb6:	f8 94       	cli
     bb8:	de bf       	out	0x3e, r29	; 62
     bba:	0f be       	out	0x3f, r0	; 63
     bbc:	cd bf       	out	0x3d, r28	; 61
	char string[7] = {0,0,0,0,0,0,0};
     bbe:	8e 01       	movw	r16, r28
     bc0:	0f 5f       	subi	r16, 0xFF	; 255
     bc2:	1f 4f       	sbci	r17, 0xFF	; 255
     bc4:	27 e0       	ldi	r18, 0x07	; 7
     bc6:	f8 01       	movw	r30, r16
     bc8:	11 92       	st	Z+, r1
     bca:	2a 95       	dec	r18
     bcc:	e9 f7       	brne	.-6      	; 0xbc8 <m_usb_tx_int+0x26>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     bce:	4a e0       	ldi	r20, 0x0A	; 10
     bd0:	b8 01       	movw	r22, r16
     bd2:	0e 94 ec 12 	call	0x25d8	; 0x25d8 <__itoa_ncheck>
     bd6:	7e 01       	movw	r14, r28
     bd8:	f8 e0       	ldi	r31, 0x08	; 8
     bda:	ef 0e       	add	r14, r31
     bdc:	f1 1c       	adc	r15, r1
	itoa(i,string,10);
	for(i=0;i<7;i++){
        if(string[i]){
     bde:	f8 01       	movw	r30, r16
     be0:	81 91       	ld	r24, Z+
     be2:	8f 01       	movw	r16, r30
     be4:	81 11       	cpse	r24, r1
            m_usb_tx_char(string[i]);
     be6:	0e 94 99 03 	call	0x732	; 0x732 <m_usb_tx_char>

void m_usb_tx_int(int i)
{
	char string[7] = {0,0,0,0,0,0,0};
	itoa(i,string,10);
	for(i=0;i<7;i++){
     bea:	0e 15       	cp	r16, r14
     bec:	1f 05       	cpc	r17, r15
     bee:	b9 f7       	brne	.-18     	; 0xbde <m_usb_tx_int+0x3c>
        if(string[i]){
            m_usb_tx_char(string[i]);
        }
	}
}
     bf0:	27 96       	adiw	r28, 0x07	; 7
     bf2:	0f b6       	in	r0, 0x3f	; 63
     bf4:	f8 94       	cli
     bf6:	de bf       	out	0x3e, r29	; 62
     bf8:	0f be       	out	0x3f, r0	; 63
     bfa:	cd bf       	out	0x3d, r28	; 61
     bfc:	df 91       	pop	r29
     bfe:	cf 91       	pop	r28
     c00:	1f 91       	pop	r17
     c02:	0f 91       	pop	r16
     c04:	ff 90       	pop	r15
     c06:	ef 90       	pop	r14
     c08:	08 95       	ret

00000c0a <twi_wait>:
	}
}

unsigned char twi_wait(void)
{
	unsigned int wait=0;
     c0a:	20 e0       	ldi	r18, 0x00	; 0
     c0c:	30 e0       	ldi	r19, 0x00	; 0
	while((!(TWCR & (1<<TWINT))) && (wait++<TWI_MAX_WAIT)){};	// wait for acknowledgement that they byte was sent
     c0e:	ec eb       	ldi	r30, 0xBC	; 188
     c10:	f0 e0       	ldi	r31, 0x00	; 0
     c12:	80 81       	ld	r24, Z
     c14:	88 23       	and	r24, r24
     c16:	34 f0       	brlt	.+12     	; 0xc24 <twi_wait+0x1a>
     c18:	2f 5f       	subi	r18, 0xFF	; 255
     c1a:	3f 4f       	sbci	r19, 0xFF	; 255
     c1c:	29 3e       	cpi	r18, 0xE9	; 233
     c1e:	83 e0       	ldi	r24, 0x03	; 3
     c20:	38 07       	cpc	r19, r24
     c22:	b9 f7       	brne	.-18     	; 0xc12 <twi_wait+0x8>
	if(wait==TWI_MAX_WAIT)
     c24:	81 e0       	ldi	r24, 0x01	; 1
     c26:	28 3e       	cpi	r18, 0xE8	; 232
     c28:	33 40       	sbci	r19, 0x03	; 3
     c2a:	09 f4       	brne	.+2      	; 0xc2e <twi_wait+0x24>
     c2c:	80 e0       	ldi	r24, 0x00	; 0
	{
		return 0;					// fail
	} else {
		return 1;					// success
	}
}
     c2e:	08 95       	ret

00000c30 <send_byte>:
	return 1;	// success
}	

unsigned char send_byte(unsigned char byte)
{
	TWDR = byte;					// load the byte
     c30:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR = (1<<TWINT) | (1<<TWEN);	// send the byte
     c34:	84 e8       	ldi	r24, 0x84	; 132
     c36:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	if(twi_wait())					// timed out
     c3a:	0e 94 05 06 	call	0xc0a	; 0xc0a <twi_wait>
     c3e:	88 23       	and	r24, r24
     c40:	19 f0       	breq	.+6      	; 0xc48 <send_byte+0x18>
	{
		return (TWSR & 0xF8);		// return the status with prescaler bits masked out
     c42:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     c46:	88 7f       	andi	r24, 0xF8	; 248
	} else {
		return 0;					// comm failure
	}
}
     c48:	08 95       	ret

00000c4a <start_write>:
//
//


unsigned char start_write(unsigned char address)
{
     c4a:	cf 93       	push	r28
     c4c:	c8 2f       	mov	r28, r24
	unsigned char status;
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
     c4e:	94 ea       	ldi	r25, 0xA4	; 164
     c50:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	if(!twi_wait())
     c54:	0e 94 05 06 	call	0xc0a	; 0xc0a <twi_wait>
     c58:	88 23       	and	r24, r24
     c5a:	61 f0       	breq	.+24     	; 0xc74 <start_write+0x2a>
	{
		return 0;
	}
	
	// ADDRESS
	status = send_byte(address<<1);
     c5c:	8c 2f       	mov	r24, r28
     c5e:	88 0f       	add	r24, r24
     c60:	0e 94 18 06 	call	0xc30	; 0xc30 <send_byte>
	if(status== 0x20){ // ACK was not received - may not be connected/listening
     c64:	80 32       	cpi	r24, 0x20	; 32
     c66:	29 f4       	brne	.+10     	; 0xc72 <start_write+0x28>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
     c68:	84 e9       	ldi	r24, 0x94	; 148
     c6a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
		return 0;	// failure
     c6e:	80 e0       	ldi	r24, 0x00	; 0
     c70:	01 c0       	rjmp	.+2      	; 0xc74 <start_write+0x2a>
	}	
	return 1;	// success
     c72:	81 e0       	ldi	r24, 0x01	; 1
}	
     c74:	cf 91       	pop	r28
     c76:	08 95       	ret

00000c78 <m_wii_open>:
unsigned char twi_wait(void);
void end(void);

char m_wii_open()
{	
	m_bus_init();
     c78:	0e 94 08 03 	call	0x610	; 0x610 <m_bus_init>

	// enter configuration mode
	if(!start_write(MWIITWIADDR)){return 0;}
     c7c:	88 e5       	ldi	r24, 0x58	; 88
     c7e:	0e 94 25 06 	call	0xc4a	; 0xc4a <start_write>
     c82:	88 23       	and	r24, r24
     c84:	09 f4       	brne	.+2      	; 0xc88 <m_wii_open+0x10>
     c86:	cd c0       	rjmp	.+410    	; 0xe22 <m_wii_open+0x1aa>
	if(!send_byte(0x30)){return 0;}
     c88:	80 e3       	ldi	r24, 0x30	; 48
     c8a:	0e 94 18 06 	call	0xc30	; 0xc30 <send_byte>
     c8e:	88 23       	and	r24, r24
     c90:	09 f4       	brne	.+2      	; 0xc94 <m_wii_open+0x1c>
     c92:	c9 c0       	rjmp	.+402    	; 0xe26 <m_wii_open+0x1ae>
	if(!send_byte(0x01)){return 0;}
     c94:	81 e0       	ldi	r24, 0x01	; 1
     c96:	0e 94 18 06 	call	0xc30	; 0xc30 <send_byte>
     c9a:	88 23       	and	r24, r24
     c9c:	09 f4       	brne	.+2      	; 0xca0 <m_wii_open+0x28>
     c9e:	c5 c0       	rjmp	.+394    	; 0xe2a <m_wii_open+0x1b2>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
     ca0:	84 e9       	ldi	r24, 0x94	; 148
     ca2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     ca6:	83 ec       	ldi	r24, 0xC3	; 195
     ca8:	99 e0       	ldi	r25, 0x09	; 9
     caa:	01 97       	sbiw	r24, 0x01	; 1
     cac:	f1 f7       	brne	.-4      	; 0xcaa <m_wii_open+0x32>
     cae:	00 c0       	rjmp	.+0      	; 0xcb0 <m_wii_open+0x38>
     cb0:	00 00       	nop
	if(!send_byte(0x01)){return 0;}
	end();
	m_wait(INTERPACKET);
		
	// sensitivity setting, part 1
	if(!start_write(MWIITWIADDR)){return 0;}
     cb2:	88 e5       	ldi	r24, 0x58	; 88
     cb4:	0e 94 25 06 	call	0xc4a	; 0xc4a <start_write>
     cb8:	88 23       	and	r24, r24
     cba:	09 f4       	brne	.+2      	; 0xcbe <m_wii_open+0x46>
     cbc:	b8 c0       	rjmp	.+368    	; 0xe2e <m_wii_open+0x1b6>
	if(!send_byte(0x00)){return 0;}
     cbe:	80 e0       	ldi	r24, 0x00	; 0
     cc0:	0e 94 18 06 	call	0xc30	; 0xc30 <send_byte>
     cc4:	88 23       	and	r24, r24
     cc6:	09 f4       	brne	.+2      	; 0xcca <m_wii_open+0x52>
     cc8:	b4 c0       	rjmp	.+360    	; 0xe32 <m_wii_open+0x1ba>
	if(!send_byte(0x00)){return 0;}
     cca:	80 e0       	ldi	r24, 0x00	; 0
     ccc:	0e 94 18 06 	call	0xc30	; 0xc30 <send_byte>
     cd0:	88 23       	and	r24, r24
     cd2:	09 f4       	brne	.+2      	; 0xcd6 <m_wii_open+0x5e>
     cd4:	b0 c0       	rjmp	.+352    	; 0xe36 <m_wii_open+0x1be>
	if(!send_byte(0x00)){return 0;}
     cd6:	80 e0       	ldi	r24, 0x00	; 0
     cd8:	0e 94 18 06 	call	0xc30	; 0xc30 <send_byte>
     cdc:	88 23       	and	r24, r24
     cde:	09 f4       	brne	.+2      	; 0xce2 <m_wii_open+0x6a>
     ce0:	ac c0       	rjmp	.+344    	; 0xe3a <m_wii_open+0x1c2>
	if(!send_byte(0x00)){return 0;}
     ce2:	80 e0       	ldi	r24, 0x00	; 0
     ce4:	0e 94 18 06 	call	0xc30	; 0xc30 <send_byte>
     ce8:	88 23       	and	r24, r24
     cea:	09 f4       	brne	.+2      	; 0xcee <m_wii_open+0x76>
     cec:	a8 c0       	rjmp	.+336    	; 0xe3e <m_wii_open+0x1c6>
	if(!send_byte(0x00)){return 0;}
     cee:	80 e0       	ldi	r24, 0x00	; 0
     cf0:	0e 94 18 06 	call	0xc30	; 0xc30 <send_byte>
     cf4:	88 23       	and	r24, r24
     cf6:	09 f4       	brne	.+2      	; 0xcfa <m_wii_open+0x82>
     cf8:	a4 c0       	rjmp	.+328    	; 0xe42 <m_wii_open+0x1ca>
	if(!send_byte(0x00)){return 0;}
     cfa:	80 e0       	ldi	r24, 0x00	; 0
     cfc:	0e 94 18 06 	call	0xc30	; 0xc30 <send_byte>
     d00:	88 23       	and	r24, r24
     d02:	09 f4       	brne	.+2      	; 0xd06 <m_wii_open+0x8e>
     d04:	a0 c0       	rjmp	.+320    	; 0xe46 <m_wii_open+0x1ce>
	if(!send_byte(0x00)){return 0;}
     d06:	80 e0       	ldi	r24, 0x00	; 0
     d08:	0e 94 18 06 	call	0xc30	; 0xc30 <send_byte>
     d0c:	88 23       	and	r24, r24
     d0e:	09 f4       	brne	.+2      	; 0xd12 <m_wii_open+0x9a>
     d10:	9c c0       	rjmp	.+312    	; 0xe4a <m_wii_open+0x1d2>
	if(!send_byte(0x90)){return 0;} // p0
     d12:	80 e9       	ldi	r24, 0x90	; 144
     d14:	0e 94 18 06 	call	0xc30	; 0xc30 <send_byte>
     d18:	88 23       	and	r24, r24
     d1a:	09 f4       	brne	.+2      	; 0xd1e <m_wii_open+0xa6>
     d1c:	98 c0       	rjmp	.+304    	; 0xe4e <m_wii_open+0x1d6>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
     d1e:	84 e9       	ldi	r24, 0x94	; 148
     d20:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     d24:	83 ec       	ldi	r24, 0xC3	; 195
     d26:	99 e0       	ldi	r25, 0x09	; 9
     d28:	01 97       	sbiw	r24, 0x01	; 1
     d2a:	f1 f7       	brne	.-4      	; 0xd28 <m_wii_open+0xb0>
     d2c:	00 c0       	rjmp	.+0      	; 0xd2e <m_wii_open+0xb6>
     d2e:	00 00       	nop
	end();

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 2
	if(!start_write(MWIITWIADDR)){return 0;}
     d30:	88 e5       	ldi	r24, 0x58	; 88
     d32:	0e 94 25 06 	call	0xc4a	; 0xc4a <start_write>
     d36:	88 23       	and	r24, r24
     d38:	09 f4       	brne	.+2      	; 0xd3c <m_wii_open+0xc4>
     d3a:	8b c0       	rjmp	.+278    	; 0xe52 <m_wii_open+0x1da>
	if(!send_byte(0x07)){return 0;}
     d3c:	87 e0       	ldi	r24, 0x07	; 7
     d3e:	0e 94 18 06 	call	0xc30	; 0xc30 <send_byte>
     d42:	88 23       	and	r24, r24
     d44:	09 f4       	brne	.+2      	; 0xd48 <m_wii_open+0xd0>
     d46:	87 c0       	rjmp	.+270    	; 0xe56 <m_wii_open+0x1de>
	if(!send_byte(0x00)){return 0;}
     d48:	80 e0       	ldi	r24, 0x00	; 0
     d4a:	0e 94 18 06 	call	0xc30	; 0xc30 <send_byte>
     d4e:	88 23       	and	r24, r24
     d50:	09 f4       	brne	.+2      	; 0xd54 <m_wii_open+0xdc>
     d52:	83 c0       	rjmp	.+262    	; 0xe5a <m_wii_open+0x1e2>
	if(!send_byte(0x41)){return 0;} // p1
     d54:	81 e4       	ldi	r24, 0x41	; 65
     d56:	0e 94 18 06 	call	0xc30	; 0xc30 <send_byte>
     d5a:	88 23       	and	r24, r24
     d5c:	09 f4       	brne	.+2      	; 0xd60 <m_wii_open+0xe8>
     d5e:	7f c0       	rjmp	.+254    	; 0xe5e <m_wii_open+0x1e6>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
     d60:	84 e9       	ldi	r24, 0x94	; 148
     d62:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     d66:	83 ec       	ldi	r24, 0xC3	; 195
     d68:	99 e0       	ldi	r25, 0x09	; 9
     d6a:	01 97       	sbiw	r24, 0x01	; 1
     d6c:	f1 f7       	brne	.-4      	; 0xd6a <m_wii_open+0xf2>
     d6e:	00 c0       	rjmp	.+0      	; 0xd70 <m_wii_open+0xf8>
     d70:	00 00       	nop
	end();

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 3
	if(!start_write(MWIITWIADDR)){return 0;}
     d72:	88 e5       	ldi	r24, 0x58	; 88
     d74:	0e 94 25 06 	call	0xc4a	; 0xc4a <start_write>
     d78:	88 23       	and	r24, r24
     d7a:	09 f4       	brne	.+2      	; 0xd7e <m_wii_open+0x106>
     d7c:	72 c0       	rjmp	.+228    	; 0xe62 <m_wii_open+0x1ea>
	if(!send_byte(0x1A)){return 0;}
     d7e:	8a e1       	ldi	r24, 0x1A	; 26
     d80:	0e 94 18 06 	call	0xc30	; 0xc30 <send_byte>
     d84:	88 23       	and	r24, r24
     d86:	09 f4       	brne	.+2      	; 0xd8a <m_wii_open+0x112>
     d88:	6e c0       	rjmp	.+220    	; 0xe66 <m_wii_open+0x1ee>
	if(!send_byte(0x40)){return 0;} // p2
     d8a:	80 e4       	ldi	r24, 0x40	; 64
     d8c:	0e 94 18 06 	call	0xc30	; 0xc30 <send_byte>
     d90:	88 23       	and	r24, r24
     d92:	09 f4       	brne	.+2      	; 0xd96 <m_wii_open+0x11e>
     d94:	6a c0       	rjmp	.+212    	; 0xe6a <m_wii_open+0x1f2>
	if(!send_byte(0x00)){return 0;} // p3
     d96:	80 e0       	ldi	r24, 0x00	; 0
     d98:	0e 94 18 06 	call	0xc30	; 0xc30 <send_byte>
     d9c:	88 23       	and	r24, r24
     d9e:	09 f4       	brne	.+2      	; 0xda2 <m_wii_open+0x12a>
     da0:	66 c0       	rjmp	.+204    	; 0xe6e <m_wii_open+0x1f6>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
     da2:	84 e9       	ldi	r24, 0x94	; 148
     da4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     da8:	83 ec       	ldi	r24, 0xC3	; 195
     daa:	99 e0       	ldi	r25, 0x09	; 9
     dac:	01 97       	sbiw	r24, 0x01	; 1
     dae:	f1 f7       	brne	.-4      	; 0xdac <m_wii_open+0x134>
     db0:	00 c0       	rjmp	.+0      	; 0xdb2 <m_wii_open+0x13a>
     db2:	00 00       	nop
	end();

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
     db4:	88 e5       	ldi	r24, 0x58	; 88
     db6:	0e 94 25 06 	call	0xc4a	; 0xc4a <start_write>
     dba:	88 23       	and	r24, r24
     dbc:	09 f4       	brne	.+2      	; 0xdc0 <m_wii_open+0x148>
     dbe:	59 c0       	rjmp	.+178    	; 0xe72 <m_wii_open+0x1fa>
	if(!send_byte(0x33)){return 0;}
     dc0:	83 e3       	ldi	r24, 0x33	; 51
     dc2:	0e 94 18 06 	call	0xc30	; 0xc30 <send_byte>
     dc6:	88 23       	and	r24, r24
     dc8:	09 f4       	brne	.+2      	; 0xdcc <m_wii_open+0x154>
     dca:	55 c0       	rjmp	.+170    	; 0xe76 <m_wii_open+0x1fe>
	if(!send_byte(0x03)){return 0;}
     dcc:	83 e0       	ldi	r24, 0x03	; 3
     dce:	0e 94 18 06 	call	0xc30	; 0xc30 <send_byte>
     dd2:	88 23       	and	r24, r24
     dd4:	09 f4       	brne	.+2      	; 0xdd8 <m_wii_open+0x160>
     dd6:	51 c0       	rjmp	.+162    	; 0xe7a <m_wii_open+0x202>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
     dd8:	84 e9       	ldi	r24, 0x94	; 148
     dda:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     dde:	83 ec       	ldi	r24, 0xC3	; 195
     de0:	99 e0       	ldi	r25, 0x09	; 9
     de2:	01 97       	sbiw	r24, 0x01	; 1
     de4:	f1 f7       	brne	.-4      	; 0xde2 <m_wii_open+0x16a>
     de6:	00 c0       	rjmp	.+0      	; 0xde8 <m_wii_open+0x170>
     de8:	00 00       	nop
	end();

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
     dea:	88 e5       	ldi	r24, 0x58	; 88
     dec:	0e 94 25 06 	call	0xc4a	; 0xc4a <start_write>
     df0:	88 23       	and	r24, r24
     df2:	09 f4       	brne	.+2      	; 0xdf6 <m_wii_open+0x17e>
     df4:	44 c0       	rjmp	.+136    	; 0xe7e <m_wii_open+0x206>
	if(!send_byte(0x30)){return 0;}
     df6:	80 e3       	ldi	r24, 0x30	; 48
     df8:	0e 94 18 06 	call	0xc30	; 0xc30 <send_byte>
     dfc:	88 23       	and	r24, r24
     dfe:	09 f4       	brne	.+2      	; 0xe02 <m_wii_open+0x18a>
     e00:	40 c0       	rjmp	.+128    	; 0xe82 <m_wii_open+0x20a>
	if(!send_byte(0x08)){return 0;}
     e02:	88 e0       	ldi	r24, 0x08	; 8
     e04:	0e 94 18 06 	call	0xc30	; 0xc30 <send_byte>
     e08:	88 23       	and	r24, r24
     e0a:	e9 f1       	breq	.+122    	; 0xe86 <m_wii_open+0x20e>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
     e0c:	84 e9       	ldi	r24, 0x94	; 148
     e0e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     e12:	83 ec       	ldi	r24, 0xC3	; 195
     e14:	99 e0       	ldi	r25, 0x09	; 9
     e16:	01 97       	sbiw	r24, 0x01	; 1
     e18:	f1 f7       	brne	.-4      	; 0xe16 <m_wii_open+0x19e>
     e1a:	00 c0       	rjmp	.+0      	; 0xe1c <m_wii_open+0x1a4>
     e1c:	00 00       	nop
	if(!send_byte(0x08)){return 0;}
	end();
	
	m_wait(INTERPACKET);

	return 1;
     e1e:	81 e0       	ldi	r24, 0x01	; 1
     e20:	08 95       	ret
char m_wii_open()
{	
	m_bus_init();

	// enter configuration mode
	if(!start_write(MWIITWIADDR)){return 0;}
     e22:	80 e0       	ldi	r24, 0x00	; 0
     e24:	08 95       	ret
	if(!send_byte(0x30)){return 0;}
     e26:	80 e0       	ldi	r24, 0x00	; 0
     e28:	08 95       	ret
	if(!send_byte(0x01)){return 0;}
     e2a:	80 e0       	ldi	r24, 0x00	; 0
     e2c:	08 95       	ret
	end();
	m_wait(INTERPACKET);
		
	// sensitivity setting, part 1
	if(!start_write(MWIITWIADDR)){return 0;}
     e2e:	80 e0       	ldi	r24, 0x00	; 0
     e30:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
     e32:	80 e0       	ldi	r24, 0x00	; 0
     e34:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
     e36:	80 e0       	ldi	r24, 0x00	; 0
     e38:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
     e3a:	80 e0       	ldi	r24, 0x00	; 0
     e3c:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
     e3e:	80 e0       	ldi	r24, 0x00	; 0
     e40:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
     e42:	80 e0       	ldi	r24, 0x00	; 0
     e44:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
     e46:	80 e0       	ldi	r24, 0x00	; 0
     e48:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
     e4a:	80 e0       	ldi	r24, 0x00	; 0
     e4c:	08 95       	ret
	if(!send_byte(0x90)){return 0;} // p0
     e4e:	80 e0       	ldi	r24, 0x00	; 0
     e50:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 2
	if(!start_write(MWIITWIADDR)){return 0;}
     e52:	80 e0       	ldi	r24, 0x00	; 0
     e54:	08 95       	ret
	if(!send_byte(0x07)){return 0;}
     e56:	80 e0       	ldi	r24, 0x00	; 0
     e58:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
     e5a:	80 e0       	ldi	r24, 0x00	; 0
     e5c:	08 95       	ret
	if(!send_byte(0x41)){return 0;} // p1
     e5e:	80 e0       	ldi	r24, 0x00	; 0
     e60:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 3
	if(!start_write(MWIITWIADDR)){return 0;}
     e62:	80 e0       	ldi	r24, 0x00	; 0
     e64:	08 95       	ret
	if(!send_byte(0x1A)){return 0;}
     e66:	80 e0       	ldi	r24, 0x00	; 0
     e68:	08 95       	ret
	if(!send_byte(0x40)){return 0;} // p2
     e6a:	80 e0       	ldi	r24, 0x00	; 0
     e6c:	08 95       	ret
	if(!send_byte(0x00)){return 0;} // p3
     e6e:	80 e0       	ldi	r24, 0x00	; 0
     e70:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
     e72:	80 e0       	ldi	r24, 0x00	; 0
     e74:	08 95       	ret
	if(!send_byte(0x33)){return 0;}
     e76:	80 e0       	ldi	r24, 0x00	; 0
     e78:	08 95       	ret
	if(!send_byte(0x03)){return 0;}
     e7a:	80 e0       	ldi	r24, 0x00	; 0
     e7c:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
     e7e:	80 e0       	ldi	r24, 0x00	; 0
     e80:	08 95       	ret
	if(!send_byte(0x30)){return 0;}
     e82:	80 e0       	ldi	r24, 0x00	; 0
     e84:	08 95       	ret
	if(!send_byte(0x08)){return 0;}
     e86:	80 e0       	ldi	r24, 0x00	; 0
	end();
	
	m_wait(INTERPACKET);

	return 1;
}
     e88:	08 95       	ret

00000e8a <start_read>:
	}	
	return 1;	// success
}	

unsigned char start_read(unsigned char address)
{
     e8a:	cf 93       	push	r28
     e8c:	c8 2f       	mov	r28, r24
	unsigned char status;
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
     e8e:	84 ea       	ldi	r24, 0xA4	; 164
     e90:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	if(!twi_wait())
     e94:	0e 94 05 06 	call	0xc0a	; 0xc0a <twi_wait>
     e98:	88 23       	and	r24, r24
     e9a:	69 f0       	breq	.+26     	; 0xeb6 <start_read+0x2c>
	{
		return 0;
	}
	
	// ADDRESS
	status = send_byte(((address<<1) + 1));
     e9c:	8c 2f       	mov	r24, r28
     e9e:	88 0f       	add	r24, r24
     ea0:	8f 5f       	subi	r24, 0xFF	; 255
     ea2:	0e 94 18 06 	call	0xc30	; 0xc30 <send_byte>
	if(status== 0x48){ // ACK was not received - may not be connected/listening
     ea6:	88 34       	cpi	r24, 0x48	; 72
     ea8:	29 f4       	brne	.+10     	; 0xeb4 <start_read+0x2a>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
     eaa:	84 e9       	ldi	r24, 0x94	; 148
     eac:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
		return 0;	// failure
     eb0:	80 e0       	ldi	r24, 0x00	; 0
     eb2:	01 c0       	rjmp	.+2      	; 0xeb6 <start_read+0x2c>
	}	
	return 1;	// success
     eb4:	81 e0       	ldi	r24, 0x01	; 1
}	
     eb6:	cf 91       	pop	r28
     eb8:	08 95       	ret

00000eba <m_wii_read>:

	return 1;
}

char m_wii_read(unsigned int* blob_data)
{
     eba:	0f 93       	push	r16
     ebc:	1f 93       	push	r17
     ebe:	cf 93       	push	r28
     ec0:	df 93       	push	r29
     ec2:	cd b7       	in	r28, 0x3d	; 61
     ec4:	de b7       	in	r29, 0x3e	; 62
     ec6:	60 97       	sbiw	r28, 0x10	; 16
     ec8:	0f b6       	in	r0, 0x3f	; 63
     eca:	f8 94       	cli
     ecc:	de bf       	out	0x3e, r29	; 62
     ece:	0f be       	out	0x3f, r0	; 63
     ed0:	cd bf       	out	0x3d, r28	; 61
     ed2:	8c 01       	movw	r16, r24
	int i;
	unsigned char temp[16] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
     ed4:	fe 01       	movw	r30, r28
     ed6:	31 96       	adiw	r30, 0x01	; 1
     ed8:	80 e1       	ldi	r24, 0x10	; 16
     eda:	df 01       	movw	r26, r30
     edc:	1d 92       	st	X+, r1
     ede:	8a 95       	dec	r24
     ee0:	e9 f7       	brne	.-6      	; 0xedc <m_wii_read+0x22>
	
	// prepare for reading
	if(!start_write(MWIITWIADDR)){return 0;}
     ee2:	88 e5       	ldi	r24, 0x58	; 88
     ee4:	0e 94 25 06 	call	0xc4a	; 0xc4a <start_write>
     ee8:	88 23       	and	r24, r24
     eea:	09 f4       	brne	.+2      	; 0xeee <m_wii_read+0x34>
     eec:	69 c0       	rjmp	.+210    	; 0xfc0 <m_wii_read+0x106>
	if(!send_byte(0x36)){return 0;}
     eee:	86 e3       	ldi	r24, 0x36	; 54
     ef0:	0e 94 18 06 	call	0xc30	; 0xc30 <send_byte>
     ef4:	88 23       	and	r24, r24
     ef6:	09 f4       	brne	.+2      	; 0xefa <m_wii_read+0x40>
     ef8:	65 c0       	rjmp	.+202    	; 0xfc4 <m_wii_read+0x10a>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
     efa:	84 e9       	ldi	r24, 0x94	; 148
     efc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     f00:	b8 e0       	ldi	r27, 0x08	; 8
     f02:	ba 95       	dec	r27
     f04:	f1 f7       	brne	.-4      	; 0xf02 <m_wii_read+0x48>
     f06:	00 00       	nop
	if(!send_byte(0x36)){return 0;}
	end();

	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
     f08:	88 e5       	ldi	r24, 0x58	; 88
     f0a:	0e 94 45 07 	call	0xe8a	; 0xe8a <start_read>
     f0e:	88 23       	and	r24, r24
     f10:	09 f4       	brne	.+2      	; 0xf14 <m_wii_read+0x5a>
     f12:	5a c0       	rjmp	.+180    	; 0xfc8 <m_wii_read+0x10e>
     f14:	be 01       	movw	r22, r28
     f16:	6f 5f       	subi	r22, 0xFF	; 255
     f18:	7f 4f       	sbci	r23, 0xFF	; 255
     f1a:	ae 01       	movw	r20, r28
     f1c:	40 5f       	subi	r20, 0xF0	; 240
     f1e:	5f 4f       	sbci	r21, 0xFF	; 255
	for(i=0;i<15;i++)
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
     f20:	ec eb       	ldi	r30, 0xBC	; 188
     f22:	f0 e0       	ldi	r31, 0x00	; 0
     f24:	84 ec       	ldi	r24, 0xC4	; 196
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		temp[i] = TWDR;
     f26:	2b eb       	ldi	r18, 0xBB	; 187
     f28:	30 e0       	ldi	r19, 0x00	; 0
	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
	for(i=0;i<15;i++)
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
     f2a:	80 83       	st	Z, r24
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
     f2c:	90 81       	ld	r25, Z
     f2e:	99 23       	and	r25, r25
     f30:	ec f7       	brge	.-6      	; 0xf2c <m_wii_read+0x72>
		temp[i] = TWDR;
     f32:	d9 01       	movw	r26, r18
     f34:	9c 91       	ld	r25, X
     f36:	db 01       	movw	r26, r22
     f38:	9d 93       	st	X+, r25
     f3a:	bd 01       	movw	r22, r26
	end();

	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
	for(i=0;i<15;i++)
     f3c:	a4 17       	cp	r26, r20
     f3e:	b5 07       	cpc	r27, r21
     f40:	a1 f7       	brne	.-24     	; 0xf2a <m_wii_read+0x70>
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		temp[i] = TWDR;
	}
	TWCR = (1<<TWINT) | (1<<TWEN);	// clear the flag, no ACK, and wait for another byte
     f42:	84 e8       	ldi	r24, 0x84	; 132
     f44:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
     f48:	ec eb       	ldi	r30, 0xBC	; 188
     f4a:	f0 e0       	ldi	r31, 0x00	; 0
     f4c:	80 81       	ld	r24, Z
     f4e:	88 23       	and	r24, r24
     f50:	ec f7       	brge	.-6      	; 0xf4c <m_wii_read+0x92>
	temp[15] = TWDR;
     f52:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     f56:	88 8b       	std	Y+16, r24	; 0x10
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
     f58:	84 e9       	ldi	r24, 0x94	; 148
     f5a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     f5e:	be 01       	movw	r22, r28
     f60:	6c 5f       	subi	r22, 0xFC	; 252
     f62:	7f 4f       	sbci	r23, 0xFF	; 255
     f64:	f8 01       	movw	r30, r16
     f66:	08 5e       	subi	r16, 0xE8	; 232
     f68:	1f 4f       	sbci	r17, 0xFF	; 255
	temp[15] = TWDR;
	end();

	for(i=0;i<10;i+=3) // for each blob:
	{	// i = 0, 3, 6, 9
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
     f6a:	db 01       	movw	r26, r22
     f6c:	2c 91       	ld	r18, X
     f6e:	32 2f       	mov	r19, r18
     f70:	30 73       	andi	r19, 0x30	; 48
     f72:	cb 01       	movw	r24, r22
     f74:	02 97       	sbiw	r24, 0x02	; 2
     f76:	dc 01       	movw	r26, r24
     f78:	8c 91       	ld	r24, X
     f7a:	90 e0       	ldi	r25, 0x00	; 0
     f7c:	b0 e1       	ldi	r27, 0x10	; 16
     f7e:	3b 9f       	mul	r19, r27
     f80:	80 0d       	add	r24, r0
     f82:	91 1d       	adc	r25, r1
     f84:	11 24       	eor	r1, r1
     f86:	91 83       	std	Z+1, r25	; 0x01
     f88:	80 83       	st	Z, r24
		blob_data[i+1] = (unsigned int)temp[i+2] + ((int)(temp[i+3] & 0b11000000) <<2);	// Y
     f8a:	42 2f       	mov	r20, r18
     f8c:	40 7c       	andi	r20, 0xC0	; 192
     f8e:	50 e0       	ldi	r21, 0x00	; 0
     f90:	44 0f       	add	r20, r20
     f92:	55 1f       	adc	r21, r21
     f94:	44 0f       	add	r20, r20
     f96:	55 1f       	adc	r21, r21
     f98:	cb 01       	movw	r24, r22
     f9a:	01 97       	sbiw	r24, 0x01	; 1
     f9c:	dc 01       	movw	r26, r24
     f9e:	8c 91       	ld	r24, X
     fa0:	48 0f       	add	r20, r24
     fa2:	51 1d       	adc	r21, r1
     fa4:	53 83       	std	Z+3, r21	; 0x03
     fa6:	42 83       	std	Z+2, r20	; 0x02
		blob_data[i+2] = temp[i+3] & 0b00001111;										// size
     fa8:	2f 70       	andi	r18, 0x0F	; 15
     faa:	30 e0       	ldi	r19, 0x00	; 0
     fac:	35 83       	std	Z+5, r19	; 0x05
     fae:	24 83       	std	Z+4, r18	; 0x04
     fb0:	6d 5f       	subi	r22, 0xFD	; 253
     fb2:	7f 4f       	sbci	r23, 0xFF	; 255
     fb4:	36 96       	adiw	r30, 0x06	; 6
	TWCR = (1<<TWINT) | (1<<TWEN);	// clear the flag, no ACK, and wait for another byte
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
	temp[15] = TWDR;
	end();

	for(i=0;i<10;i+=3) // for each blob:
     fb6:	e0 17       	cp	r30, r16
     fb8:	f1 07       	cpc	r31, r17
     fba:	b9 f6       	brne	.-82     	; 0xf6a <m_wii_read+0xb0>
	{	// i = 0, 3, 6, 9
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
		blob_data[i+1] = (unsigned int)temp[i+2] + ((int)(temp[i+3] & 0b11000000) <<2);	// Y
		blob_data[i+2] = temp[i+3] & 0b00001111;										// size
	}
	return 1;
     fbc:	81 e0       	ldi	r24, 0x01	; 1
     fbe:	05 c0       	rjmp	.+10     	; 0xfca <m_wii_read+0x110>
{
	int i;
	unsigned char temp[16] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
	
	// prepare for reading
	if(!start_write(MWIITWIADDR)){return 0;}
     fc0:	80 e0       	ldi	r24, 0x00	; 0
     fc2:	03 c0       	rjmp	.+6      	; 0xfca <m_wii_read+0x110>
	if(!send_byte(0x36)){return 0;}
     fc4:	80 e0       	ldi	r24, 0x00	; 0
     fc6:	01 c0       	rjmp	.+2      	; 0xfca <m_wii_read+0x110>
	end();

	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
     fc8:	80 e0       	ldi	r24, 0x00	; 0
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
		blob_data[i+1] = (unsigned int)temp[i+2] + ((int)(temp[i+3] & 0b11000000) <<2);	// Y
		blob_data[i+2] = temp[i+3] & 0b00001111;										// size
	}
	return 1;
}
     fca:	60 96       	adiw	r28, 0x10	; 16
     fcc:	0f b6       	in	r0, 0x3f	; 63
     fce:	f8 94       	cli
     fd0:	de bf       	out	0x3e, r29	; 62
     fd2:	0f be       	out	0x3f, r0	; 63
     fd4:	cd bf       	out	0x3d, r28	; 61
     fd6:	df 91       	pop	r29
     fd8:	cf 91       	pop	r28
     fda:	1f 91       	pop	r17
     fdc:	0f 91       	pop	r16
     fde:	08 95       	ret

00000fe0 <print_data>:
void play(){
	active = true;
}

void pause(){
	active = false;
     fe0:	4f 92       	push	r4
     fe2:	5f 92       	push	r5
     fe4:	6f 92       	push	r6
     fe6:	7f 92       	push	r7
     fe8:	8f 92       	push	r8
     fea:	9f 92       	push	r9
     fec:	af 92       	push	r10
     fee:	bf 92       	push	r11
     ff0:	cf 92       	push	r12
     ff2:	df 92       	push	r13
     ff4:	ef 92       	push	r14
     ff6:	ff 92       	push	r15
     ff8:	0f 93       	push	r16
     ffa:	1f 93       	push	r17
     ffc:	cf 93       	push	r28
     ffe:	df 93       	push	r29
    1000:	cd b7       	in	r28, 0x3d	; 61
    1002:	de b7       	in	r29, 0x3e	; 62
    1004:	28 97       	sbiw	r28, 0x08	; 8
    1006:	0f b6       	in	r0, 0x3f	; 63
    1008:	f8 94       	cli
    100a:	de bf       	out	0x3e, r29	; 62
    100c:	0f be       	out	0x3f, r0	; 63
    100e:	cd bf       	out	0x3d, r28	; 61
    1010:	3c 01       	movw	r6, r24
    1012:	56 2e       	mov	r5, r22
    1014:	47 2e       	mov	r4, r23
    1016:	29 83       	std	Y+1, r18	; 0x01
    1018:	3a 83       	std	Y+2, r19	; 0x02
    101a:	4b 83       	std	Y+3, r20	; 0x03
    101c:	5c 83       	std	Y+4, r21	; 0x04
    101e:	ed 82       	std	Y+5, r14	; 0x05
    1020:	fe 82       	std	Y+6, r15	; 0x06
    1022:	0f 83       	std	Y+7, r16	; 0x07
    1024:	18 87       	std	Y+8, r17	; 0x08
    1026:	88 ec       	ldi	r24, 0xC8	; 200
    1028:	92 e0       	ldi	r25, 0x02	; 2
    102a:	0e 94 b5 05 	call	0xb6a	; 0xb6a <print_P>
    102e:	83 01       	movw	r16, r6
    1030:	e5 2c       	mov	r14, r5
    1032:	f4 2c       	mov	r15, r4
    1034:	80 e1       	ldi	r24, 0x10	; 16
    1036:	68 0e       	add	r6, r24
    1038:	71 1c       	adc	r7, r1
    103a:	85 ec       	ldi	r24, 0xC5	; 197
    103c:	92 e0       	ldi	r25, 0x02	; 2
    103e:	0e 94 b5 05 	call	0xb6a	; 0xb6a <print_P>
    1042:	f8 01       	movw	r30, r16
    1044:	61 91       	ld	r22, Z+
    1046:	71 91       	ld	r23, Z+
    1048:	81 91       	ld	r24, Z+
    104a:	91 91       	ld	r25, Z+
    104c:	8f 01       	movw	r16, r30
    104e:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <__fixsfsi>
    1052:	cb 01       	movw	r24, r22
    1054:	0e 94 d1 05 	call	0xba2	; 0xba2 <m_usb_tx_int>
    1058:	82 ec       	ldi	r24, 0xC2	; 194
    105a:	92 e0       	ldi	r25, 0x02	; 2
    105c:	0e 94 b5 05 	call	0xb6a	; 0xb6a <print_P>
    1060:	f7 01       	movw	r30, r14
    1062:	61 91       	ld	r22, Z+
    1064:	71 91       	ld	r23, Z+
    1066:	81 91       	ld	r24, Z+
    1068:	91 91       	ld	r25, Z+
    106a:	7f 01       	movw	r14, r30
    106c:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <__fixsfsi>
    1070:	cb 01       	movw	r24, r22
    1072:	0e 94 d1 05 	call	0xba2	; 0xba2 <m_usb_tx_int>
    1076:	8f eb       	ldi	r24, 0xBF	; 191
    1078:	92 e0       	ldi	r25, 0x02	; 2
    107a:	0e 94 b5 05 	call	0xb6a	; 0xb6a <print_P>
    107e:	85 eb       	ldi	r24, 0xB5	; 181
    1080:	92 e0       	ldi	r25, 0x02	; 2
    1082:	0e 94 b5 05 	call	0xb6a	; 0xb6a <print_P>
    1086:	06 15       	cp	r16, r6
    1088:	17 05       	cpc	r17, r7
    108a:	b9 f6       	brne	.-82     	; 0x103a <print_data+0x5a>
    108c:	8d e0       	ldi	r24, 0x0D	; 13
    108e:	0e 94 99 03 	call	0x732	; 0x732 <m_usb_tx_char>
    1092:	89 ea       	ldi	r24, 0xA9	; 169
    1094:	92 e0       	ldi	r25, 0x02	; 2
    1096:	0e 94 b5 05 	call	0xb6a	; 0xb6a <print_P>
    109a:	c6 01       	movw	r24, r12
    109c:	0e 94 d1 05 	call	0xba2	; 0xba2 <m_usb_tx_int>
    10a0:	8a e9       	ldi	r24, 0x9A	; 154
    10a2:	92 e0       	ldi	r25, 0x02	; 2
    10a4:	0e 94 b5 05 	call	0xb6a	; 0xb6a <print_P>
    10a8:	8b e8       	ldi	r24, 0x8B	; 139
    10aa:	92 e0       	ldi	r25, 0x02	; 2
    10ac:	0e 94 b5 05 	call	0xb6a	; 0xb6a <print_P>
    10b0:	c5 01       	movw	r24, r10
    10b2:	0e 94 d1 05 	call	0xba2	; 0xba2 <m_usb_tx_int>
    10b6:	8d e0       	ldi	r24, 0x0D	; 13
    10b8:	0e 94 99 03 	call	0x732	; 0x732 <m_usb_tx_char>
    10bc:	84 e7       	ldi	r24, 0x74	; 116
    10be:	92 e0       	ldi	r25, 0x02	; 2
    10c0:	0e 94 b5 05 	call	0xb6a	; 0xb6a <print_P>
    10c4:	81 e7       	ldi	r24, 0x71	; 113
    10c6:	92 e0       	ldi	r25, 0x02	; 2
    10c8:	0e 94 b5 05 	call	0xb6a	; 0xb6a <print_P>
    10cc:	69 81       	ldd	r22, Y+1	; 0x01
    10ce:	7a 81       	ldd	r23, Y+2	; 0x02
    10d0:	8b 81       	ldd	r24, Y+3	; 0x03
    10d2:	9c 81       	ldd	r25, Y+4	; 0x04
    10d4:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <__fixsfsi>
    10d8:	cb 01       	movw	r24, r22
    10da:	0e 94 d1 05 	call	0xba2	; 0xba2 <m_usb_tx_int>
    10de:	8e e6       	ldi	r24, 0x6E	; 110
    10e0:	92 e0       	ldi	r25, 0x02	; 2
    10e2:	0e 94 b5 05 	call	0xb6a	; 0xb6a <print_P>
    10e6:	6d 81       	ldd	r22, Y+5	; 0x05
    10e8:	7e 81       	ldd	r23, Y+6	; 0x06
    10ea:	8f 81       	ldd	r24, Y+7	; 0x07
    10ec:	98 85       	ldd	r25, Y+8	; 0x08
    10ee:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <__fixsfsi>
    10f2:	cb 01       	movw	r24, r22
    10f4:	0e 94 d1 05 	call	0xba2	; 0xba2 <m_usb_tx_int>
    10f8:	8b e6       	ldi	r24, 0x6B	; 107
    10fa:	92 e0       	ldi	r25, 0x02	; 2
    10fc:	0e 94 b5 05 	call	0xb6a	; 0xb6a <print_P>
    1100:	86 e5       	ldi	r24, 0x56	; 86
    1102:	92 e0       	ldi	r25, 0x02	; 2
    1104:	0e 94 b5 05 	call	0xb6a	; 0xb6a <print_P>
    1108:	83 e5       	ldi	r24, 0x53	; 83
    110a:	92 e0       	ldi	r25, 0x02	; 2
    110c:	0e 94 b5 05 	call	0xb6a	; 0xb6a <print_P>
    1110:	f4 01       	movw	r30, r8
    1112:	61 81       	ldd	r22, Z+1	; 0x01
    1114:	72 81       	ldd	r23, Z+2	; 0x02
    1116:	83 81       	ldd	r24, Z+3	; 0x03
    1118:	94 81       	ldd	r25, Z+4	; 0x04
    111a:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <__fixsfsi>
    111e:	cb 01       	movw	r24, r22
    1120:	0e 94 d1 05 	call	0xba2	; 0xba2 <m_usb_tx_int>
    1124:	80 e5       	ldi	r24, 0x50	; 80
    1126:	92 e0       	ldi	r25, 0x02	; 2
    1128:	0e 94 b5 05 	call	0xb6a	; 0xb6a <print_P>
    112c:	f4 01       	movw	r30, r8
    112e:	65 81       	ldd	r22, Z+5	; 0x05
    1130:	76 81       	ldd	r23, Z+6	; 0x06
    1132:	87 81       	ldd	r24, Z+7	; 0x07
    1134:	90 85       	ldd	r25, Z+8	; 0x08
    1136:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <__fixsfsi>
    113a:	cb 01       	movw	r24, r22
    113c:	0e 94 d1 05 	call	0xba2	; 0xba2 <m_usb_tx_int>
    1140:	8d e4       	ldi	r24, 0x4D	; 77
    1142:	92 e0       	ldi	r25, 0x02	; 2
    1144:	0e 94 b5 05 	call	0xb6a	; 0xb6a <print_P>
    1148:	8c e3       	ldi	r24, 0x3C	; 60
    114a:	92 e0       	ldi	r25, 0x02	; 2
    114c:	0e 94 b5 05 	call	0xb6a	; 0xb6a <print_P>
    1150:	20 e0       	ldi	r18, 0x00	; 0
    1152:	30 e0       	ldi	r19, 0x00	; 0
    1154:	44 e3       	ldi	r20, 0x34	; 52
    1156:	53 e4       	ldi	r21, 0x43	; 67
    1158:	f4 01       	movw	r30, r8
    115a:	61 85       	ldd	r22, Z+9	; 0x09
    115c:	72 85       	ldd	r23, Z+10	; 0x0a
    115e:	83 85       	ldd	r24, Z+11	; 0x0b
    1160:	94 85       	ldd	r25, Z+12	; 0x0c
    1162:	0e 94 09 11 	call	0x2212	; 0x2212 <__mulsf3>
    1166:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <__fixsfsi>
    116a:	07 2e       	mov	r0, r23
    116c:	00 0c       	add	r0, r0
    116e:	88 0b       	sbc	r24, r24
    1170:	99 0b       	sbc	r25, r25
    1172:	0e 94 e6 0f 	call	0x1fcc	; 0x1fcc <__floatsisf>
    1176:	2b ed       	ldi	r18, 0xDB	; 219
    1178:	3f e0       	ldi	r19, 0x0F	; 15
    117a:	49 e4       	ldi	r20, 0x49	; 73
    117c:	50 e4       	ldi	r21, 0x40	; 64
    117e:	0e 94 3c 0f 	call	0x1e78	; 0x1e78 <__divsf3>
    1182:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <__fixsfsi>
    1186:	cb 01       	movw	r24, r22
    1188:	0e 94 d1 05 	call	0xba2	; 0xba2 <m_usb_tx_int>
    118c:	8d e2       	ldi	r24, 0x2D	; 45
    118e:	92 e0       	ldi	r25, 0x02	; 2
    1190:	0e 94 b5 05 	call	0xb6a	; 0xb6a <print_P>
    1194:	f4 01       	movw	r30, r8
    1196:	21 81       	ldd	r18, Z+1	; 0x01
    1198:	32 81       	ldd	r19, Z+2	; 0x02
    119a:	43 81       	ldd	r20, Z+3	; 0x03
    119c:	54 81       	ldd	r21, Z+4	; 0x04
    119e:	60 e0       	ldi	r22, 0x00	; 0
    11a0:	70 e0       	ldi	r23, 0x00	; 0
    11a2:	82 ef       	ldi	r24, 0xF2	; 242
    11a4:	92 e4       	ldi	r25, 0x42	; 66
    11a6:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <__subsf3>
    11aa:	6b 01       	movw	r12, r22
    11ac:	7c 01       	movw	r14, r24
    11ae:	f4 01       	movw	r30, r8
    11b0:	25 81       	ldd	r18, Z+5	; 0x05
    11b2:	36 81       	ldd	r19, Z+6	; 0x06
    11b4:	47 81       	ldd	r20, Z+7	; 0x07
    11b6:	50 85       	ldd	r21, Z+8	; 0x08
    11b8:	60 e0       	ldi	r22, 0x00	; 0
    11ba:	70 e8       	ldi	r23, 0x80	; 128
    11bc:	86 eb       	ldi	r24, 0xB6	; 182
    11be:	93 e4       	ldi	r25, 0x43	; 67
    11c0:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <__subsf3>
    11c4:	a7 01       	movw	r20, r14
    11c6:	96 01       	movw	r18, r12
    11c8:	0e 94 d3 0e 	call	0x1da6	; 0x1da6 <atan2>
    11cc:	20 e0       	ldi	r18, 0x00	; 0
    11ce:	30 e0       	ldi	r19, 0x00	; 0
    11d0:	44 e3       	ldi	r20, 0x34	; 52
    11d2:	53 e4       	ldi	r21, 0x43	; 67
    11d4:	0e 94 09 11 	call	0x2212	; 0x2212 <__mulsf3>
    11d8:	2b ed       	ldi	r18, 0xDB	; 219
    11da:	3f e0       	ldi	r19, 0x0F	; 15
    11dc:	49 e4       	ldi	r20, 0x49	; 73
    11de:	50 e4       	ldi	r21, 0x40	; 64
    11e0:	0e 94 3c 0f 	call	0x1e78	; 0x1e78 <__divsf3>
    11e4:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <__fixsfsi>
    11e8:	cb 01       	movw	r24, r22
    11ea:	0e 94 d1 05 	call	0xba2	; 0xba2 <m_usb_tx_int>
    11ee:	8d e0       	ldi	r24, 0x0D	; 13
    11f0:	0e 94 99 03 	call	0x732	; 0x732 <m_usb_tx_char>
    11f4:	8d e0       	ldi	r24, 0x0D	; 13
    11f6:	0e 94 99 03 	call	0x732	; 0x732 <m_usb_tx_char>
    11fa:	28 96       	adiw	r28, 0x08	; 8
    11fc:	0f b6       	in	r0, 0x3f	; 63
    11fe:	f8 94       	cli
    1200:	de bf       	out	0x3e, r29	; 62
    1202:	0f be       	out	0x3f, r0	; 63
    1204:	cd bf       	out	0x3d, r28	; 61
    1206:	df 91       	pop	r29
    1208:	cf 91       	pop	r28
    120a:	1f 91       	pop	r17
    120c:	0f 91       	pop	r16
    120e:	ff 90       	pop	r15
    1210:	ef 90       	pop	r14
    1212:	df 90       	pop	r13
    1214:	cf 90       	pop	r12
    1216:	bf 90       	pop	r11
    1218:	af 90       	pop	r10
    121a:	9f 90       	pop	r9
    121c:	8f 90       	pop	r8
    121e:	7f 90       	pop	r7
    1220:	6f 90       	pop	r6
    1222:	5f 90       	pop	r5
    1224:	4f 90       	pop	r4
    1226:	08 95       	ret

00001228 <init_robot>:
    1228:	fc 01       	movw	r30, r24
    122a:	11 82       	std	Z+1, r1	; 0x01
    122c:	12 82       	std	Z+2, r1	; 0x02
    122e:	13 82       	std	Z+3, r1	; 0x03
    1230:	14 82       	std	Z+4, r1	; 0x04
    1232:	15 82       	std	Z+5, r1	; 0x05
    1234:	16 82       	std	Z+6, r1	; 0x06
    1236:	17 82       	std	Z+7, r1	; 0x07
    1238:	10 86       	std	Z+8, r1	; 0x08
    123a:	11 86       	std	Z+9, r1	; 0x09
    123c:	12 86       	std	Z+10, r1	; 0x0a
    123e:	13 86       	std	Z+11, r1	; 0x0b
    1240:	14 86       	std	Z+12, r1	; 0x0c
    1242:	10 82       	st	Z, r1
    1244:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <active>
    1248:	08 95       	ret

0000124a <interpret>:
}

/* Interpret the measurement vector returned by mWii and update Robot struct data */
void interpret(Robot* robot, unsigned int* measurement){
    124a:	2f 92       	push	r2
    124c:	3f 92       	push	r3
    124e:	4f 92       	push	r4
    1250:	5f 92       	push	r5
    1252:	6f 92       	push	r6
    1254:	7f 92       	push	r7
    1256:	8f 92       	push	r8
    1258:	9f 92       	push	r9
    125a:	af 92       	push	r10
    125c:	bf 92       	push	r11
    125e:	cf 92       	push	r12
    1260:	df 92       	push	r13
    1262:	ef 92       	push	r14
    1264:	ff 92       	push	r15
    1266:	0f 93       	push	r16
    1268:	1f 93       	push	r17
    126a:	cf 93       	push	r28
    126c:	df 93       	push	r29
    126e:	cd b7       	in	r28, 0x3d	; 61
    1270:	de b7       	in	r29, 0x3e	; 62
    1272:	c7 56       	subi	r28, 0x67	; 103
    1274:	d1 09       	sbc	r29, r1
    1276:	0f b6       	in	r0, 0x3f	; 63
    1278:	f8 94       	cli
    127a:	de bf       	out	0x3e, r29	; 62
    127c:	0f be       	out	0x3f, r0	; 63
    127e:	cd bf       	out	0x3d, r28	; 61
    1280:	a8 96       	adiw	r28, 0x28	; 40
    1282:	9f af       	std	Y+63, r25	; 0x3f
    1284:	8e af       	std	Y+62, r24	; 0x3e
    1286:	a8 97       	sbiw	r28, 0x28	; 40
    1288:	8b 01       	movw	r16, r22
	// Star coordinates centered around the origin in order of distance from origin
	float const CENTERED_STARS[4][2] = {{-0.2730, -17.3060}, {11.3820, 5.9350}, {-0.2730, 11.6940}, {-10.8360, -0.3230}}; // cm

	// Extract x and y data from measurement
	float mWii_x[] = { (float) (measurement[0]-512.0), (float) (measurement[3]-512.0), (float) (measurement[6]-512.0), (float) (measurement[9]-512.0) };
    128a:	db 01       	movw	r26, r22
    128c:	6d 91       	ld	r22, X+
    128e:	7c 91       	ld	r23, X
    1290:	80 e0       	ldi	r24, 0x00	; 0
    1292:	90 e0       	ldi	r25, 0x00	; 0
    1294:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <__floatunsisf>
    1298:	20 e0       	ldi	r18, 0x00	; 0
    129a:	30 e0       	ldi	r19, 0x00	; 0
    129c:	40 e0       	ldi	r20, 0x00	; 0
    129e:	54 e4       	ldi	r21, 0x44	; 68
    12a0:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <__subsf3>
    12a4:	69 83       	std	Y+1, r22	; 0x01
    12a6:	7a 83       	std	Y+2, r23	; 0x02
    12a8:	8b 83       	std	Y+3, r24	; 0x03
    12aa:	9c 83       	std	Y+4, r25	; 0x04
    12ac:	f8 01       	movw	r30, r16
    12ae:	66 81       	ldd	r22, Z+6	; 0x06
    12b0:	77 81       	ldd	r23, Z+7	; 0x07
    12b2:	80 e0       	ldi	r24, 0x00	; 0
    12b4:	90 e0       	ldi	r25, 0x00	; 0
    12b6:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <__floatunsisf>
    12ba:	20 e0       	ldi	r18, 0x00	; 0
    12bc:	30 e0       	ldi	r19, 0x00	; 0
    12be:	40 e0       	ldi	r20, 0x00	; 0
    12c0:	54 e4       	ldi	r21, 0x44	; 68
    12c2:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <__subsf3>
    12c6:	6d 83       	std	Y+5, r22	; 0x05
    12c8:	7e 83       	std	Y+6, r23	; 0x06
    12ca:	8f 83       	std	Y+7, r24	; 0x07
    12cc:	98 87       	std	Y+8, r25	; 0x08
    12ce:	d8 01       	movw	r26, r16
    12d0:	1c 96       	adiw	r26, 0x0c	; 12
    12d2:	6d 91       	ld	r22, X+
    12d4:	7c 91       	ld	r23, X
    12d6:	1d 97       	sbiw	r26, 0x0d	; 13
    12d8:	80 e0       	ldi	r24, 0x00	; 0
    12da:	90 e0       	ldi	r25, 0x00	; 0
    12dc:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <__floatunsisf>
    12e0:	20 e0       	ldi	r18, 0x00	; 0
    12e2:	30 e0       	ldi	r19, 0x00	; 0
    12e4:	40 e0       	ldi	r20, 0x00	; 0
    12e6:	54 e4       	ldi	r21, 0x44	; 68
    12e8:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <__subsf3>
    12ec:	69 87       	std	Y+9, r22	; 0x09
    12ee:	7a 87       	std	Y+10, r23	; 0x0a
    12f0:	8b 87       	std	Y+11, r24	; 0x0b
    12f2:	9c 87       	std	Y+12, r25	; 0x0c
    12f4:	f8 01       	movw	r30, r16
    12f6:	62 89       	ldd	r22, Z+18	; 0x12
    12f8:	73 89       	ldd	r23, Z+19	; 0x13
    12fa:	80 e0       	ldi	r24, 0x00	; 0
    12fc:	90 e0       	ldi	r25, 0x00	; 0
    12fe:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <__floatunsisf>
    1302:	20 e0       	ldi	r18, 0x00	; 0
    1304:	30 e0       	ldi	r19, 0x00	; 0
    1306:	40 e0       	ldi	r20, 0x00	; 0
    1308:	54 e4       	ldi	r21, 0x44	; 68
    130a:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <__subsf3>
    130e:	6d 87       	std	Y+13, r22	; 0x0d
    1310:	7e 87       	std	Y+14, r23	; 0x0e
    1312:	8f 87       	std	Y+15, r24	; 0x0f
    1314:	98 8b       	std	Y+16, r25	; 0x10
	// Flipping y to right-handed coordinate system
	float mWii_y[] = { (float) -(measurement[1]-384.0), (float) -(measurement[4]-384.0), (float) -(measurement[7]-384.0), (float) -(measurement[10]-384.0) };
    1316:	d8 01       	movw	r26, r16
    1318:	12 96       	adiw	r26, 0x02	; 2
    131a:	6d 91       	ld	r22, X+
    131c:	7c 91       	ld	r23, X
    131e:	13 97       	sbiw	r26, 0x03	; 3
    1320:	80 e0       	ldi	r24, 0x00	; 0
    1322:	90 e0       	ldi	r25, 0x00	; 0
    1324:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <__floatunsisf>
    1328:	20 e0       	ldi	r18, 0x00	; 0
    132a:	30 e0       	ldi	r19, 0x00	; 0
    132c:	40 ec       	ldi	r20, 0xC0	; 192
    132e:	53 e4       	ldi	r21, 0x43	; 67
    1330:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <__subsf3>
    1334:	dc 01       	movw	r26, r24
    1336:	cb 01       	movw	r24, r22
    1338:	b0 58       	subi	r27, 0x80	; 128
    133a:	89 8b       	std	Y+17, r24	; 0x11
    133c:	9a 8b       	std	Y+18, r25	; 0x12
    133e:	ab 8b       	std	Y+19, r26	; 0x13
    1340:	bc 8b       	std	Y+20, r27	; 0x14
    1342:	f8 01       	movw	r30, r16
    1344:	60 85       	ldd	r22, Z+8	; 0x08
    1346:	71 85       	ldd	r23, Z+9	; 0x09
    1348:	80 e0       	ldi	r24, 0x00	; 0
    134a:	90 e0       	ldi	r25, 0x00	; 0
    134c:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <__floatunsisf>
    1350:	20 e0       	ldi	r18, 0x00	; 0
    1352:	30 e0       	ldi	r19, 0x00	; 0
    1354:	40 ec       	ldi	r20, 0xC0	; 192
    1356:	53 e4       	ldi	r21, 0x43	; 67
    1358:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <__subsf3>
    135c:	dc 01       	movw	r26, r24
    135e:	cb 01       	movw	r24, r22
    1360:	b0 58       	subi	r27, 0x80	; 128
    1362:	8d 8b       	std	Y+21, r24	; 0x15
    1364:	9e 8b       	std	Y+22, r25	; 0x16
    1366:	af 8b       	std	Y+23, r26	; 0x17
    1368:	b8 8f       	std	Y+24, r27	; 0x18
    136a:	d8 01       	movw	r26, r16
    136c:	1e 96       	adiw	r26, 0x0e	; 14
    136e:	6d 91       	ld	r22, X+
    1370:	7c 91       	ld	r23, X
    1372:	1f 97       	sbiw	r26, 0x0f	; 15
    1374:	80 e0       	ldi	r24, 0x00	; 0
    1376:	90 e0       	ldi	r25, 0x00	; 0
    1378:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <__floatunsisf>
    137c:	20 e0       	ldi	r18, 0x00	; 0
    137e:	30 e0       	ldi	r19, 0x00	; 0
    1380:	40 ec       	ldi	r20, 0xC0	; 192
    1382:	53 e4       	ldi	r21, 0x43	; 67
    1384:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <__subsf3>
    1388:	dc 01       	movw	r26, r24
    138a:	cb 01       	movw	r24, r22
    138c:	b0 58       	subi	r27, 0x80	; 128
    138e:	89 8f       	std	Y+25, r24	; 0x19
    1390:	9a 8f       	std	Y+26, r25	; 0x1a
    1392:	ab 8f       	std	Y+27, r26	; 0x1b
    1394:	bc 8f       	std	Y+28, r27	; 0x1c
    1396:	f8 01       	movw	r30, r16
    1398:	64 89       	ldd	r22, Z+20	; 0x14
    139a:	75 89       	ldd	r23, Z+21	; 0x15
    139c:	80 e0       	ldi	r24, 0x00	; 0
    139e:	90 e0       	ldi	r25, 0x00	; 0
    13a0:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <__floatunsisf>
    13a4:	20 e0       	ldi	r18, 0x00	; 0
    13a6:	30 e0       	ldi	r19, 0x00	; 0
    13a8:	40 ec       	ldi	r20, 0xC0	; 192
    13aa:	53 e4       	ldi	r21, 0x43	; 67
    13ac:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <__subsf3>
    13b0:	dc 01       	movw	r26, r24
    13b2:	cb 01       	movw	r24, r22
    13b4:	b0 58       	subi	r27, 0x80	; 128
    13b6:	8d 8f       	std	Y+29, r24	; 0x1d
    13b8:	9e 8f       	std	Y+30, r25	; 0x1e
    13ba:	af 8f       	std	Y+31, r26	; 0x1f
    13bc:	b8 a3       	std	Y+32, r27	; 0x20
    13be:	9e 01       	movw	r18, r28
    13c0:	2f 5f       	subi	r18, 0xFF	; 255
    13c2:	3f 4f       	sbci	r19, 0xFF	; 255
    13c4:	49 01       	movw	r8, r18
    13c6:	5e 01       	movw	r10, r28
    13c8:	31 e1       	ldi	r19, 0x11	; 17
    13ca:	a3 0e       	add	r10, r19
    13cc:	b1 1c       	adc	r11, r1
    13ce:	15 01       	movw	r2, r10
    13d0:	75 01       	movw	r14, r10
    13d2:	84 01       	movw	r16, r8

	
	////////// Determine translation to origin //////////
	float translation_x = 0, translation_y = 0;
    13d4:	25 96       	adiw	r28, 0x05	; 5
    13d6:	1c ae       	std	Y+60, r1	; 0x3c
    13d8:	1d ae       	std	Y+61, r1	; 0x3d
    13da:	1e ae       	std	Y+62, r1	; 0x3e
    13dc:	1f ae       	std	Y+63, r1	; 0x3f
    13de:	25 97       	sbiw	r28, 0x05	; 5
    13e0:	41 2c       	mov	r4, r1
    13e2:	51 2c       	mov	r5, r1
    13e4:	32 01       	movw	r6, r4
	for (int i = 0; i < 4; i++) {
		translation_x += mWii_x[i];
    13e6:	d8 01       	movw	r26, r16
    13e8:	2d 91       	ld	r18, X+
    13ea:	3d 91       	ld	r19, X+
    13ec:	4d 91       	ld	r20, X+
    13ee:	5d 91       	ld	r21, X+
    13f0:	8d 01       	movw	r16, r26
    13f2:	c3 01       	movw	r24, r6
    13f4:	b2 01       	movw	r22, r4
    13f6:	0e 94 54 0e 	call	0x1ca8	; 0x1ca8 <__addsf3>
    13fa:	2b 01       	movw	r4, r22
    13fc:	3c 01       	movw	r6, r24
		translation_y += mWii_y[i];
    13fe:	f7 01       	movw	r30, r14
    1400:	21 91       	ld	r18, Z+
    1402:	31 91       	ld	r19, Z+
    1404:	41 91       	ld	r20, Z+
    1406:	51 91       	ld	r21, Z+
    1408:	7f 01       	movw	r14, r30
    140a:	25 96       	adiw	r28, 0x05	; 5
    140c:	6c ad       	ldd	r22, Y+60	; 0x3c
    140e:	7d ad       	ldd	r23, Y+61	; 0x3d
    1410:	8e ad       	ldd	r24, Y+62	; 0x3e
    1412:	9f ad       	ldd	r25, Y+63	; 0x3f
    1414:	25 97       	sbiw	r28, 0x05	; 5
    1416:	0e 94 54 0e 	call	0x1ca8	; 0x1ca8 <__addsf3>
    141a:	25 96       	adiw	r28, 0x05	; 5
    141c:	6c af       	std	Y+60, r22	; 0x3c
    141e:	7d af       	std	Y+61, r23	; 0x3d
    1420:	8e af       	std	Y+62, r24	; 0x3e
    1422:	9f af       	std	Y+63, r25	; 0x3f
    1424:	25 97       	sbiw	r28, 0x05	; 5
	float mWii_y[] = { (float) -(measurement[1]-384.0), (float) -(measurement[4]-384.0), (float) -(measurement[7]-384.0), (float) -(measurement[10]-384.0) };

	
	////////// Determine translation to origin //////////
	float translation_x = 0, translation_y = 0;
	for (int i = 0; i < 4; i++) {
    1426:	02 15       	cp	r16, r2
    1428:	13 05       	cpc	r17, r3
    142a:	e9 f6       	brne	.-70     	; 0x13e6 <interpret+0x19c>
		translation_x += mWii_x[i];
		translation_y += mWii_y[i];
	}
	translation_x /= 4.0;
    142c:	20 e0       	ldi	r18, 0x00	; 0
    142e:	30 e0       	ldi	r19, 0x00	; 0
    1430:	40 e8       	ldi	r20, 0x80	; 128
    1432:	5e e3       	ldi	r21, 0x3E	; 62
    1434:	c3 01       	movw	r24, r6
    1436:	b2 01       	movw	r22, r4
    1438:	0e 94 09 11 	call	0x2212	; 0x2212 <__mulsf3>
    143c:	6a 96       	adiw	r28, 0x1a	; 26
    143e:	6c af       	std	Y+60, r22	; 0x3c
    1440:	7d af       	std	Y+61, r23	; 0x3d
    1442:	8e af       	std	Y+62, r24	; 0x3e
    1444:	9f af       	std	Y+63, r25	; 0x3f
    1446:	6a 97       	sbiw	r28, 0x1a	; 26
	translation_y /= 4.0;
    1448:	20 e0       	ldi	r18, 0x00	; 0
    144a:	30 e0       	ldi	r19, 0x00	; 0
    144c:	40 e8       	ldi	r20, 0x80	; 128
    144e:	5e e3       	ldi	r21, 0x3E	; 62
    1450:	25 96       	adiw	r28, 0x05	; 5
    1452:	6c ad       	ldd	r22, Y+60	; 0x3c
    1454:	7d ad       	ldd	r23, Y+61	; 0x3d
    1456:	8e ad       	ldd	r24, Y+62	; 0x3e
    1458:	9f ad       	ldd	r25, Y+63	; 0x3f
    145a:	25 97       	sbiw	r28, 0x05	; 5
    145c:	0e 94 09 11 	call	0x2212	; 0x2212 <__mulsf3>
    1460:	6e 96       	adiw	r28, 0x1e	; 30
    1462:	6c af       	std	Y+60, r22	; 0x3c
    1464:	7d af       	std	Y+61, r23	; 0x3d
    1466:	8e af       	std	Y+62, r24	; 0x3e
    1468:	9f af       	std	Y+63, r25	; 0x3f
    146a:	6e 97       	sbiw	r28, 0x1e	; 30
    146c:	35 01       	movw	r6, r10
    146e:	84 01       	movw	r16, r8

	////////// Find mWii and star scale //////////
	float mWii_scale = 0.0, star_scale = 0.0;
    1470:	25 96       	adiw	r28, 0x05	; 5
    1472:	1c ae       	std	Y+60, r1	; 0x3c
    1474:	1d ae       	std	Y+61, r1	; 0x3d
    1476:	1e ae       	std	Y+62, r1	; 0x3e
    1478:	1f ae       	std	Y+63, r1	; 0x3f
    147a:	25 97       	sbiw	r28, 0x05	; 5

	for (int i = 0; i < 4; i++) {
		mWii_scale += powf(mWii_x[i] - translation_x, 2.0) + powf(mWii_y[i] - translation_y, 2.0);
    147c:	d8 01       	movw	r26, r16
    147e:	6d 91       	ld	r22, X+
    1480:	7d 91       	ld	r23, X+
    1482:	8d 91       	ld	r24, X+
    1484:	9d 91       	ld	r25, X+
    1486:	8d 01       	movw	r16, r26
    1488:	6a 96       	adiw	r28, 0x1a	; 26
    148a:	2c ad       	ldd	r18, Y+60	; 0x3c
    148c:	3d ad       	ldd	r19, Y+61	; 0x3d
    148e:	4e ad       	ldd	r20, Y+62	; 0x3e
    1490:	5f ad       	ldd	r21, Y+63	; 0x3f
    1492:	6a 97       	sbiw	r28, 0x1a	; 26
    1494:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <__subsf3>
    1498:	6b 01       	movw	r12, r22
    149a:	7c 01       	movw	r14, r24
    149c:	f3 01       	movw	r30, r6
    149e:	61 91       	ld	r22, Z+
    14a0:	71 91       	ld	r23, Z+
    14a2:	81 91       	ld	r24, Z+
    14a4:	91 91       	ld	r25, Z+
    14a6:	3f 01       	movw	r6, r30
    14a8:	6e 96       	adiw	r28, 0x1e	; 30
    14aa:	2c ad       	ldd	r18, Y+60	; 0x3c
    14ac:	3d ad       	ldd	r19, Y+61	; 0x3d
    14ae:	4e ad       	ldd	r20, Y+62	; 0x3e
    14b0:	5f ad       	ldd	r21, Y+63	; 0x3f
    14b2:	6e 97       	sbiw	r28, 0x1e	; 30
    14b4:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <__subsf3>
    14b8:	9b 01       	movw	r18, r22
    14ba:	ac 01       	movw	r20, r24
    14bc:	0e 94 09 11 	call	0x2212	; 0x2212 <__mulsf3>
    14c0:	29 96       	adiw	r28, 0x09	; 9
    14c2:	6c af       	std	Y+60, r22	; 0x3c
    14c4:	7d af       	std	Y+61, r23	; 0x3d
    14c6:	8e af       	std	Y+62, r24	; 0x3e
    14c8:	9f af       	std	Y+63, r25	; 0x3f
    14ca:	29 97       	sbiw	r28, 0x09	; 9
    14cc:	a7 01       	movw	r20, r14
    14ce:	96 01       	movw	r18, r12
    14d0:	c7 01       	movw	r24, r14
    14d2:	b6 01       	movw	r22, r12
    14d4:	0e 94 09 11 	call	0x2212	; 0x2212 <__mulsf3>
    14d8:	9b 01       	movw	r18, r22
    14da:	ac 01       	movw	r20, r24
    14dc:	29 96       	adiw	r28, 0x09	; 9
    14de:	6c ad       	ldd	r22, Y+60	; 0x3c
    14e0:	7d ad       	ldd	r23, Y+61	; 0x3d
    14e2:	8e ad       	ldd	r24, Y+62	; 0x3e
    14e4:	9f ad       	ldd	r25, Y+63	; 0x3f
    14e6:	29 97       	sbiw	r28, 0x09	; 9
    14e8:	0e 94 54 0e 	call	0x1ca8	; 0x1ca8 <__addsf3>
    14ec:	9b 01       	movw	r18, r22
    14ee:	ac 01       	movw	r20, r24
    14f0:	25 96       	adiw	r28, 0x05	; 5
    14f2:	6c ad       	ldd	r22, Y+60	; 0x3c
    14f4:	7d ad       	ldd	r23, Y+61	; 0x3d
    14f6:	8e ad       	ldd	r24, Y+62	; 0x3e
    14f8:	9f ad       	ldd	r25, Y+63	; 0x3f
    14fa:	25 97       	sbiw	r28, 0x05	; 5
    14fc:	0e 94 54 0e 	call	0x1ca8	; 0x1ca8 <__addsf3>
    1500:	25 96       	adiw	r28, 0x05	; 5
    1502:	6c af       	std	Y+60, r22	; 0x3c
    1504:	7d af       	std	Y+61, r23	; 0x3d
    1506:	8e af       	std	Y+62, r24	; 0x3e
    1508:	9f af       	std	Y+63, r25	; 0x3f
    150a:	25 97       	sbiw	r28, 0x05	; 5
	translation_y /= 4.0;

	////////// Find mWii and star scale //////////
	float mWii_scale = 0.0, star_scale = 0.0;

	for (int i = 0; i < 4; i++) {
    150c:	02 15       	cp	r16, r2
    150e:	13 05       	cpc	r17, r3
    1510:	09 f0       	breq	.+2      	; 0x1514 <interpret+0x2ca>
    1512:	b4 cf       	rjmp	.-152    	; 0x147c <interpret+0x232>
		mWii_scale += powf(mWii_x[i] - translation_x, 2.0) + powf(mWii_y[i] - translation_y, 2.0);
		star_scale += powf(CENTERED_STARS[i][0], 2.0) + powf(CENTERED_STARS[i][1], 2.0);
	}
	
	mWii_scale = powf(mWii_scale / 4.0, 0.5);
    1514:	20 e0       	ldi	r18, 0x00	; 0
    1516:	30 e0       	ldi	r19, 0x00	; 0
    1518:	40 e8       	ldi	r20, 0x80	; 128
    151a:	5e e3       	ldi	r21, 0x3E	; 62
    151c:	0e 94 09 11 	call	0x2212	; 0x2212 <__mulsf3>
    1520:	20 e0       	ldi	r18, 0x00	; 0
    1522:	30 e0       	ldi	r19, 0x00	; 0
    1524:	40 e0       	ldi	r20, 0x00	; 0
    1526:	5f e3       	ldi	r21, 0x3F	; 63
    1528:	0e 94 76 11 	call	0x22ec	; 0x22ec <pow>
    152c:	e6 2e       	mov	r14, r22
    152e:	f7 2e       	mov	r15, r23
    1530:	08 2f       	mov	r16, r24
    1532:	19 2f       	mov	r17, r25
    1534:	2e 01       	movw	r4, r28
    1536:	f1 e2       	ldi	r31, 0x21	; 33
    1538:	4f 0e       	add	r4, r31
    153a:	51 1c       	adc	r5, r1
    153c:	9e 01       	movw	r18, r28
    153e:	2f 5c       	subi	r18, 0xCF	; 207
    1540:	3f 4f       	sbci	r19, 0xFF	; 255
    1542:	a2 96       	adiw	r28, 0x22	; 34
    1544:	3f af       	std	Y+63, r19	; 0x3f
    1546:	2e af       	std	Y+62, r18	; 0x3e
    1548:	a2 97       	sbiw	r28, 0x22	; 34
    154a:	69 01       	movw	r12, r18
    154c:	32 01       	movw	r6, r4
	star_scale = powf(star_scale / 4.0, 0.5);

	// Scale points to uniform scale (0 to 1)
	float mx[4], my[4];
	for (int i = 0; i < 4; i++) {
		mx[i] = (mWii_x[i] - translation_x) / mWii_scale;
    154e:	d4 01       	movw	r26, r8
    1550:	6d 91       	ld	r22, X+
    1552:	7d 91       	ld	r23, X+
    1554:	8d 91       	ld	r24, X+
    1556:	9d 91       	ld	r25, X+
    1558:	4d 01       	movw	r8, r26
    155a:	6a 96       	adiw	r28, 0x1a	; 26
    155c:	2c ad       	ldd	r18, Y+60	; 0x3c
    155e:	3d ad       	ldd	r19, Y+61	; 0x3d
    1560:	4e ad       	ldd	r20, Y+62	; 0x3e
    1562:	5f ad       	ldd	r21, Y+63	; 0x3f
    1564:	6a 97       	sbiw	r28, 0x1a	; 26
    1566:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <__subsf3>
    156a:	2e 2d       	mov	r18, r14
    156c:	3f 2d       	mov	r19, r15
    156e:	40 2f       	mov	r20, r16
    1570:	51 2f       	mov	r21, r17
    1572:	0e 94 3c 0f 	call	0x1e78	; 0x1e78 <__divsf3>
    1576:	f3 01       	movw	r30, r6
    1578:	61 93       	st	Z+, r22
    157a:	71 93       	st	Z+, r23
    157c:	81 93       	st	Z+, r24
    157e:	91 93       	st	Z+, r25
    1580:	3f 01       	movw	r6, r30
		my[i] = (mWii_y[i] - translation_y) / mWii_scale;
    1582:	d5 01       	movw	r26, r10
    1584:	6d 91       	ld	r22, X+
    1586:	7d 91       	ld	r23, X+
    1588:	8d 91       	ld	r24, X+
    158a:	9d 91       	ld	r25, X+
    158c:	5d 01       	movw	r10, r26
    158e:	6e 96       	adiw	r28, 0x1e	; 30
    1590:	2c ad       	ldd	r18, Y+60	; 0x3c
    1592:	3d ad       	ldd	r19, Y+61	; 0x3d
    1594:	4e ad       	ldd	r20, Y+62	; 0x3e
    1596:	5f ad       	ldd	r21, Y+63	; 0x3f
    1598:	6e 97       	sbiw	r28, 0x1e	; 30
    159a:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <__subsf3>
    159e:	2e 2d       	mov	r18, r14
    15a0:	3f 2d       	mov	r19, r15
    15a2:	40 2f       	mov	r20, r16
    15a4:	51 2f       	mov	r21, r17
    15a6:	0e 94 3c 0f 	call	0x1e78	; 0x1e78 <__divsf3>
    15aa:	f6 01       	movw	r30, r12
    15ac:	61 93       	st	Z+, r22
    15ae:	71 93       	st	Z+, r23
    15b0:	81 93       	st	Z+, r24
    15b2:	91 93       	st	Z+, r25
    15b4:	6f 01       	movw	r12, r30
	mWii_scale = powf(mWii_scale / 4.0, 0.5);
	star_scale = powf(star_scale / 4.0, 0.5);

	// Scale points to uniform scale (0 to 1)
	float mx[4], my[4];
	for (int i = 0; i < 4; i++) {
    15b6:	82 14       	cp	r8, r2
    15b8:	93 04       	cpc	r9, r3
    15ba:	49 f6       	brne	.-110    	; 0x154e <interpret+0x304>
    15bc:	27 96       	adiw	r28, 0x07	; 7
    15be:	1f ae       	std	Y+63, r1	; 0x3f
    15c0:	1e ae       	std	Y+62, r1	; 0x3e
    15c2:	27 97       	sbiw	r28, 0x07	; 7
    15c4:	21 e0       	ldi	r18, 0x01	; 1
    15c6:	30 e0       	ldi	r19, 0x00	; 0
    15c8:	a4 96       	adiw	r28, 0x24	; 36
    15ca:	3f af       	std	Y+63, r19	; 0x3f
    15cc:	2e af       	std	Y+62, r18	; 0x3e
    15ce:	a4 97       	sbiw	r28, 0x24	; 36
    15d0:	80 e0       	ldi	r24, 0x00	; 0
    15d2:	90 e0       	ldi	r25, 0x00	; 0
    15d4:	2a 96       	adiw	r28, 0x0a	; 10
    15d6:	1f ae       	std	Y+63, r1	; 0x3f
    15d8:	2a 97       	sbiw	r28, 0x0a	; 10
    15da:	2e 96       	adiw	r28, 0x0e	; 14
    15dc:	1f ae       	std	Y+63, r1	; 0x3f
    15de:	2e 97       	sbiw	r28, 0x0e	; 14
    15e0:	61 2c       	mov	r6, r1
    15e2:	71 2c       	mov	r7, r1
    15e4:	12 01       	movw	r2, r4

	// Get max distance indices
	float max_distance = 0;
	int indices[2] = {0, 1};
	for (int i = 0; i < 3; i++) {
		for (int j = i + 1; j < 4; j++) {
    15e6:	ac 01       	movw	r20, r24
    15e8:	4f 5f       	subi	r20, 0xFF	; 255
    15ea:	5f 4f       	sbci	r21, 0xFF	; 255
    15ec:	a0 96       	adiw	r28, 0x20	; 32
    15ee:	5f af       	std	Y+63, r21	; 0x3f
    15f0:	4e af       	std	Y+62, r20	; 0x3e
    15f2:	a0 97       	sbiw	r28, 0x20	; 32
    15f4:	44 30       	cpi	r20, 0x04	; 4
    15f6:	51 05       	cpc	r21, r1
    15f8:	0c f0       	brlt	.+2      	; 0x15fc <interpret+0x3b2>
    15fa:	76 c2       	rjmp	.+1260   	; 0x1ae8 <interpret+0x89e>
			// Get distance between points
			float distance = powf(powf(mx[i] - mx[j], 2.0) + powf(my[i] - my[j], 2.0), 0.5);
    15fc:	d1 01       	movw	r26, r2
    15fe:	2d 91       	ld	r18, X+
    1600:	3d 91       	ld	r19, X+
    1602:	4d 91       	ld	r20, X+
    1604:	5d 91       	ld	r21, X+
    1606:	4d 01       	movw	r8, r26
    1608:	62 96       	adiw	r28, 0x12	; 18
    160a:	2c af       	std	Y+60, r18	; 0x3c
    160c:	3d af       	std	Y+61, r19	; 0x3d
    160e:	4e af       	std	Y+62, r20	; 0x3e
    1610:	5f af       	std	Y+63, r21	; 0x3f
    1612:	62 97       	sbiw	r28, 0x12	; 18
    1614:	a2 96       	adiw	r28, 0x22	; 34
    1616:	ae ac       	ldd	r10, Y+62	; 0x3e
    1618:	bf ac       	ldd	r11, Y+63	; 0x3f
    161a:	a2 97       	sbiw	r28, 0x22	; 34
    161c:	d5 01       	movw	r26, r10
    161e:	2d 91       	ld	r18, X+
    1620:	3d 91       	ld	r19, X+
    1622:	4d 91       	ld	r20, X+
    1624:	5d 91       	ld	r21, X+
    1626:	5d 01       	movw	r10, r26
    1628:	66 96       	adiw	r28, 0x16	; 22
    162a:	2c af       	std	Y+60, r18	; 0x3c
    162c:	3d af       	std	Y+61, r19	; 0x3d
    162e:	4e af       	std	Y+62, r20	; 0x3e
    1630:	5f af       	std	Y+63, r21	; 0x3f
    1632:	66 97       	sbiw	r28, 0x16	; 22
    1634:	a0 96       	adiw	r28, 0x20	; 32
    1636:	4e ac       	ldd	r4, Y+62	; 0x3e
    1638:	5f ac       	ldd	r5, Y+63	; 0x3f
    163a:	a0 97       	sbiw	r28, 0x20	; 32
			// Compare to max distance
			if (distance > max_distance) {
    163c:	a5 96       	adiw	r28, 0x25	; 37
    163e:	8f af       	std	Y+63, r24	; 0x3f
    1640:	a5 97       	sbiw	r28, 0x25	; 37
    1642:	a6 96       	adiw	r28, 0x26	; 38
    1644:	9f af       	std	Y+63, r25	; 0x3f
    1646:	a6 97       	sbiw	r28, 0x26	; 38
	float max_distance = 0;
	int indices[2] = {0, 1};
	for (int i = 0; i < 3; i++) {
		for (int j = i + 1; j < 4; j++) {
			// Get distance between points
			float distance = powf(powf(mx[i] - mx[j], 2.0) + powf(my[i] - my[j], 2.0), 0.5);
    1648:	f4 01       	movw	r30, r8
    164a:	21 91       	ld	r18, Z+
    164c:	31 91       	ld	r19, Z+
    164e:	41 91       	ld	r20, Z+
    1650:	51 91       	ld	r21, Z+
    1652:	4f 01       	movw	r8, r30
    1654:	62 96       	adiw	r28, 0x12	; 18
    1656:	6c ad       	ldd	r22, Y+60	; 0x3c
    1658:	7d ad       	ldd	r23, Y+61	; 0x3d
    165a:	8e ad       	ldd	r24, Y+62	; 0x3e
    165c:	9f ad       	ldd	r25, Y+63	; 0x3f
    165e:	62 97       	sbiw	r28, 0x12	; 18
    1660:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <__subsf3>
    1664:	6b 01       	movw	r12, r22
    1666:	7c 01       	movw	r14, r24
    1668:	d5 01       	movw	r26, r10
    166a:	2d 91       	ld	r18, X+
    166c:	3d 91       	ld	r19, X+
    166e:	4d 91       	ld	r20, X+
    1670:	5d 91       	ld	r21, X+
    1672:	5d 01       	movw	r10, r26
    1674:	66 96       	adiw	r28, 0x16	; 22
    1676:	6c ad       	ldd	r22, Y+60	; 0x3c
    1678:	7d ad       	ldd	r23, Y+61	; 0x3d
    167a:	8e ad       	ldd	r24, Y+62	; 0x3e
    167c:	9f ad       	ldd	r25, Y+63	; 0x3f
    167e:	66 97       	sbiw	r28, 0x16	; 22
    1680:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <__subsf3>
    1684:	9b 01       	movw	r18, r22
    1686:	ac 01       	movw	r20, r24
    1688:	0e 94 09 11 	call	0x2212	; 0x2212 <__mulsf3>
    168c:	25 96       	adiw	r28, 0x05	; 5
    168e:	6c af       	std	Y+60, r22	; 0x3c
    1690:	7d af       	std	Y+61, r23	; 0x3d
    1692:	8e af       	std	Y+62, r24	; 0x3e
    1694:	9f af       	std	Y+63, r25	; 0x3f
    1696:	25 97       	sbiw	r28, 0x05	; 5
    1698:	a7 01       	movw	r20, r14
    169a:	96 01       	movw	r18, r12
    169c:	c7 01       	movw	r24, r14
    169e:	b6 01       	movw	r22, r12
    16a0:	0e 94 09 11 	call	0x2212	; 0x2212 <__mulsf3>
    16a4:	9b 01       	movw	r18, r22
    16a6:	ac 01       	movw	r20, r24
    16a8:	25 96       	adiw	r28, 0x05	; 5
    16aa:	6c ad       	ldd	r22, Y+60	; 0x3c
    16ac:	7d ad       	ldd	r23, Y+61	; 0x3d
    16ae:	8e ad       	ldd	r24, Y+62	; 0x3e
    16b0:	9f ad       	ldd	r25, Y+63	; 0x3f
    16b2:	25 97       	sbiw	r28, 0x05	; 5
    16b4:	0e 94 54 0e 	call	0x1ca8	; 0x1ca8 <__addsf3>
    16b8:	20 e0       	ldi	r18, 0x00	; 0
    16ba:	30 e0       	ldi	r19, 0x00	; 0
    16bc:	40 e0       	ldi	r20, 0x00	; 0
    16be:	5f e3       	ldi	r21, 0x3F	; 63
    16c0:	0e 94 76 11 	call	0x22ec	; 0x22ec <pow>
    16c4:	e6 2e       	mov	r14, r22
    16c6:	f7 2e       	mov	r15, r23
    16c8:	08 2f       	mov	r16, r24
    16ca:	19 2f       	mov	r17, r25
			// Compare to max distance
			if (distance > max_distance) {
    16cc:	2a 96       	adiw	r28, 0x0a	; 10
    16ce:	2f ad       	ldd	r18, Y+63	; 0x3f
    16d0:	2a 97       	sbiw	r28, 0x0a	; 10
    16d2:	2e 96       	adiw	r28, 0x0e	; 14
    16d4:	3f ad       	ldd	r19, Y+63	; 0x3f
    16d6:	2e 97       	sbiw	r28, 0x0e	; 14
    16d8:	46 2d       	mov	r20, r6
    16da:	57 2d       	mov	r21, r7
    16dc:	0e 94 fc 10 	call	0x21f8	; 0x21f8 <__gesf2>
    16e0:	18 16       	cp	r1, r24
    16e2:	c4 f4       	brge	.+48     	; 0x1714 <interpret+0x4ca>
    16e4:	a4 96       	adiw	r28, 0x24	; 36
    16e6:	5f ae       	std	Y+63, r5	; 0x3f
    16e8:	4e ae       	std	Y+62, r4	; 0x3e
    16ea:	a4 97       	sbiw	r28, 0x24	; 36
    16ec:	a5 96       	adiw	r28, 0x25	; 37
    16ee:	bf ad       	ldd	r27, Y+63	; 0x3f
    16f0:	a5 97       	sbiw	r28, 0x25	; 37
    16f2:	26 96       	adiw	r28, 0x06	; 6
    16f4:	bf af       	std	Y+63, r27	; 0x3f
    16f6:	26 97       	sbiw	r28, 0x06	; 6
    16f8:	a6 96       	adiw	r28, 0x26	; 38
    16fa:	ef ad       	ldd	r30, Y+63	; 0x3f
    16fc:	a6 97       	sbiw	r28, 0x26	; 38
    16fe:	27 96       	adiw	r28, 0x07	; 7
    1700:	ef af       	std	Y+63, r30	; 0x3f
    1702:	27 97       	sbiw	r28, 0x07	; 7
				// If greater, update max distance indices
				indices[0] = i;
				indices[1] = j;
				max_distance = distance;
    1704:	2a 96       	adiw	r28, 0x0a	; 10
    1706:	ef ae       	std	Y+63, r14	; 0x3f
    1708:	2a 97       	sbiw	r28, 0x0a	; 10
    170a:	2e 96       	adiw	r28, 0x0e	; 14
    170c:	ff ae       	std	Y+63, r15	; 0x3f
    170e:	2e 97       	sbiw	r28, 0x0e	; 14
    1710:	60 2e       	mov	r6, r16
    1712:	71 2e       	mov	r7, r17

	// Get max distance indices
	float max_distance = 0;
	int indices[2] = {0, 1};
	for (int i = 0; i < 3; i++) {
		for (int j = i + 1; j < 4; j++) {
    1714:	ff ef       	ldi	r31, 0xFF	; 255
    1716:	4f 1a       	sub	r4, r31
    1718:	5f 0a       	sbc	r5, r31
    171a:	24 e0       	ldi	r18, 0x04	; 4
    171c:	42 16       	cp	r4, r18
    171e:	51 04       	cpc	r5, r1
    1720:	09 f0       	breq	.+2      	; 0x1724 <interpret+0x4da>
    1722:	92 cf       	rjmp	.-220    	; 0x1648 <interpret+0x3fe>
    1724:	34 e0       	ldi	r19, 0x04	; 4
    1726:	23 0e       	add	r2, r19
    1728:	31 1c       	adc	r3, r1
    172a:	a2 96       	adiw	r28, 0x22	; 34
    172c:	4e ad       	ldd	r20, Y+62	; 0x3e
    172e:	5f ad       	ldd	r21, Y+63	; 0x3f
    1730:	a2 97       	sbiw	r28, 0x22	; 34
    1732:	4c 5f       	subi	r20, 0xFC	; 252
    1734:	5f 4f       	sbci	r21, 0xFF	; 255
    1736:	a2 96       	adiw	r28, 0x22	; 34
    1738:	5f af       	std	Y+63, r21	; 0x3f
    173a:	4e af       	std	Y+62, r20	; 0x3e
    173c:	a2 97       	sbiw	r28, 0x22	; 34
	////////// Sort mWii point indices based on distance from origin //////////

	// Get max distance indices
	float max_distance = 0;
	int indices[2] = {0, 1};
	for (int i = 0; i < 3; i++) {
    173e:	a0 96       	adiw	r28, 0x20	; 32
    1740:	8e ad       	ldd	r24, Y+62	; 0x3e
    1742:	9f ad       	ldd	r25, Y+63	; 0x3f
    1744:	a0 97       	sbiw	r28, 0x20	; 32
    1746:	83 30       	cpi	r24, 0x03	; 3
    1748:	91 05       	cpc	r25, r1
    174a:	09 f0       	breq	.+2      	; 0x174e <interpret+0x504>
    174c:	4c cf       	rjmp	.-360    	; 0x15e6 <interpret+0x39c>
    174e:	27 96       	adiw	r28, 0x07	; 7
    1750:	2e ac       	ldd	r2, Y+62	; 0x3e
    1752:	3f ac       	ldd	r3, Y+63	; 0x3f
    1754:	27 97       	sbiw	r28, 0x07	; 7
    1756:	a4 96       	adiw	r28, 0x24	; 36
    1758:	6e ac       	ldd	r6, Y+62	; 0x3e
    175a:	7f ac       	ldd	r7, Y+63	; 0x3f
    175c:	a4 97       	sbiw	r28, 0x24	; 36

	// Find which max index has the shortest distance to one of the other two points
	float min_distance = FLT_MAX;
	// Index of top star that we're looking for
	int top_index = indices[0];
	for (int i = 0; i < 4; i++) {
    175e:	00 e0       	ldi	r16, 0x00	; 0
    1760:	10 e0       	ldi	r17, 0x00	; 0
		// Looking at other two points
		if (i != indices[0] && i != indices[1]) {
    1762:	20 16       	cp	r2, r16
    1764:	31 06       	cpc	r3, r17
    1766:	09 f4       	brne	.+2      	; 0x176a <interpret+0x520>
    1768:	da c0       	rjmp	.+436    	; 0x191e <interpret+0x6d4>
    176a:	60 16       	cp	r6, r16
    176c:	71 06       	cpc	r7, r17
    176e:	09 f4       	brne	.+2      	; 0x1772 <interpret+0x528>
    1770:	d6 c0       	rjmp	.+428    	; 0x191e <interpret+0x6d4>
			// Get distance to first max distance point
			float distance = powf(powf(mx[indices[0]] - mx[i], 2.0) + powf(my[indices[0]] - my[i], 2.0), 0.5);
    1772:	00 0f       	add	r16, r16
    1774:	11 1f       	adc	r17, r17
    1776:	00 0f       	add	r16, r16
    1778:	11 1f       	adc	r17, r17
    177a:	81 e0       	ldi	r24, 0x01	; 1
    177c:	90 e0       	ldi	r25, 0x00	; 0
    177e:	8c 0f       	add	r24, r28
    1780:	9d 1f       	adc	r25, r29
    1782:	08 0f       	add	r16, r24
    1784:	19 1f       	adc	r17, r25
    1786:	d8 01       	movw	r26, r16
    1788:	90 96       	adiw	r26, 0x20	; 32
    178a:	2d 91       	ld	r18, X+
    178c:	3d 91       	ld	r19, X+
    178e:	4d 91       	ld	r20, X+
    1790:	5c 91       	ld	r21, X
    1792:	93 97       	sbiw	r26, 0x23	; 35
    1794:	25 96       	adiw	r28, 0x05	; 5
    1796:	2c af       	std	Y+60, r18	; 0x3c
    1798:	3d af       	std	Y+61, r19	; 0x3d
    179a:	4e af       	std	Y+62, r20	; 0x3e
    179c:	5f af       	std	Y+63, r21	; 0x3f
    179e:	25 97       	sbiw	r28, 0x05	; 5
    17a0:	71 01       	movw	r14, r2
    17a2:	ee 0c       	add	r14, r14
    17a4:	ff 1c       	adc	r15, r15
    17a6:	ee 0c       	add	r14, r14
    17a8:	ff 1c       	adc	r15, r15
    17aa:	e8 0e       	add	r14, r24
    17ac:	f9 1e       	adc	r15, r25
    17ae:	f7 01       	movw	r30, r14
    17b0:	60 a1       	ldd	r22, Z+32	; 0x20
    17b2:	71 a1       	ldd	r23, Z+33	; 0x21
    17b4:	82 a1       	ldd	r24, Z+34	; 0x22
    17b6:	93 a1       	ldd	r25, Z+35	; 0x23
    17b8:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <__subsf3>
    17bc:	2d 96       	adiw	r28, 0x0d	; 13
    17be:	6c af       	std	Y+60, r22	; 0x3c
    17c0:	7d af       	std	Y+61, r23	; 0x3d
    17c2:	8e af       	std	Y+62, r24	; 0x3e
    17c4:	9f af       	std	Y+63, r25	; 0x3f
    17c6:	2d 97       	sbiw	r28, 0x0d	; 13
    17c8:	d8 01       	movw	r26, r16
    17ca:	d0 96       	adiw	r26, 0x30	; 48
    17cc:	8d 90       	ld	r8, X+
    17ce:	9d 90       	ld	r9, X+
    17d0:	ad 90       	ld	r10, X+
    17d2:	bc 90       	ld	r11, X
    17d4:	d3 97       	sbiw	r26, 0x33	; 51
    17d6:	a5 01       	movw	r20, r10
    17d8:	94 01       	movw	r18, r8
    17da:	f7 01       	movw	r30, r14
    17dc:	60 a9       	ldd	r22, Z+48	; 0x30
    17de:	71 a9       	ldd	r23, Z+49	; 0x31
    17e0:	82 a9       	ldd	r24, Z+50	; 0x32
    17e2:	93 a9       	ldd	r25, Z+51	; 0x33
    17e4:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <__subsf3>
    17e8:	6b 01       	movw	r12, r22
    17ea:	7c 01       	movw	r14, r24
    17ec:	2d 96       	adiw	r28, 0x0d	; 13
    17ee:	2c ad       	ldd	r18, Y+60	; 0x3c
    17f0:	3d ad       	ldd	r19, Y+61	; 0x3d
    17f2:	4e ad       	ldd	r20, Y+62	; 0x3e
    17f4:	5f ad       	ldd	r21, Y+63	; 0x3f
    17f6:	2d 97       	sbiw	r28, 0x0d	; 13
    17f8:	ca 01       	movw	r24, r20
    17fa:	b9 01       	movw	r22, r18
    17fc:	0e 94 09 11 	call	0x2212	; 0x2212 <__mulsf3>
    1800:	2d 96       	adiw	r28, 0x0d	; 13
    1802:	6c af       	std	Y+60, r22	; 0x3c
    1804:	7d af       	std	Y+61, r23	; 0x3d
    1806:	8e af       	std	Y+62, r24	; 0x3e
    1808:	9f af       	std	Y+63, r25	; 0x3f
    180a:	2d 97       	sbiw	r28, 0x0d	; 13
    180c:	a7 01       	movw	r20, r14
    180e:	96 01       	movw	r18, r12
    1810:	c7 01       	movw	r24, r14
    1812:	b6 01       	movw	r22, r12
    1814:	0e 94 09 11 	call	0x2212	; 0x2212 <__mulsf3>
    1818:	9b 01       	movw	r18, r22
    181a:	ac 01       	movw	r20, r24
    181c:	2d 96       	adiw	r28, 0x0d	; 13
    181e:	6c ad       	ldd	r22, Y+60	; 0x3c
    1820:	7d ad       	ldd	r23, Y+61	; 0x3d
    1822:	8e ad       	ldd	r24, Y+62	; 0x3e
    1824:	9f ad       	ldd	r25, Y+63	; 0x3f
    1826:	2d 97       	sbiw	r28, 0x0d	; 13
    1828:	0e 94 54 0e 	call	0x1ca8	; 0x1ca8 <__addsf3>
    182c:	20 e0       	ldi	r18, 0x00	; 0
    182e:	30 e0       	ldi	r19, 0x00	; 0
    1830:	40 e0       	ldi	r20, 0x00	; 0
    1832:	5f e3       	ldi	r21, 0x3F	; 63
    1834:	0e 94 76 11 	call	0x22ec	; 0x22ec <pow>
    1838:	2d 96       	adiw	r28, 0x0d	; 13
    183a:	6c af       	std	Y+60, r22	; 0x3c
    183c:	7d af       	std	Y+61, r23	; 0x3d
    183e:	8e af       	std	Y+62, r24	; 0x3e
    1840:	9f af       	std	Y+63, r25	; 0x3f
    1842:	2d 97       	sbiw	r28, 0x0d	; 13
			min_distance = distance;

			// Get distance to other max distance point
			distance = powf(powf(mx[indices[1]] - mx[i], 2.0) + powf(my[indices[1]] - my[i], 2.0), 0.5);
    1844:	83 01       	movw	r16, r6
    1846:	00 0f       	add	r16, r16
    1848:	11 1f       	adc	r17, r17
    184a:	00 0f       	add	r16, r16
    184c:	11 1f       	adc	r17, r17
    184e:	21 e0       	ldi	r18, 0x01	; 1
    1850:	30 e0       	ldi	r19, 0x00	; 0
    1852:	2c 0f       	add	r18, r28
    1854:	3d 1f       	adc	r19, r29
    1856:	02 0f       	add	r16, r18
    1858:	13 1f       	adc	r17, r19
    185a:	25 96       	adiw	r28, 0x05	; 5
    185c:	2c ad       	ldd	r18, Y+60	; 0x3c
    185e:	3d ad       	ldd	r19, Y+61	; 0x3d
    1860:	4e ad       	ldd	r20, Y+62	; 0x3e
    1862:	5f ad       	ldd	r21, Y+63	; 0x3f
    1864:	25 97       	sbiw	r28, 0x05	; 5
    1866:	d8 01       	movw	r26, r16
    1868:	90 96       	adiw	r26, 0x20	; 32
    186a:	6d 91       	ld	r22, X+
    186c:	7d 91       	ld	r23, X+
    186e:	8d 91       	ld	r24, X+
    1870:	9c 91       	ld	r25, X
    1872:	93 97       	sbiw	r26, 0x23	; 35
    1874:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <__subsf3>
    1878:	25 96       	adiw	r28, 0x05	; 5
    187a:	6c af       	std	Y+60, r22	; 0x3c
    187c:	7d af       	std	Y+61, r23	; 0x3d
    187e:	8e af       	std	Y+62, r24	; 0x3e
    1880:	9f af       	std	Y+63, r25	; 0x3f
    1882:	25 97       	sbiw	r28, 0x05	; 5
    1884:	a5 01       	movw	r20, r10
    1886:	94 01       	movw	r18, r8
    1888:	f8 01       	movw	r30, r16
    188a:	60 a9       	ldd	r22, Z+48	; 0x30
    188c:	71 a9       	ldd	r23, Z+49	; 0x31
    188e:	82 a9       	ldd	r24, Z+50	; 0x32
    1890:	93 a9       	ldd	r25, Z+51	; 0x33
    1892:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <__subsf3>
    1896:	6b 01       	movw	r12, r22
    1898:	7c 01       	movw	r14, r24
    189a:	25 96       	adiw	r28, 0x05	; 5
    189c:	2c ad       	ldd	r18, Y+60	; 0x3c
    189e:	3d ad       	ldd	r19, Y+61	; 0x3d
    18a0:	4e ad       	ldd	r20, Y+62	; 0x3e
    18a2:	5f ad       	ldd	r21, Y+63	; 0x3f
    18a4:	25 97       	sbiw	r28, 0x05	; 5
    18a6:	ca 01       	movw	r24, r20
    18a8:	b9 01       	movw	r22, r18
    18aa:	0e 94 09 11 	call	0x2212	; 0x2212 <__mulsf3>
    18ae:	4b 01       	movw	r8, r22
    18b0:	5c 01       	movw	r10, r24
    18b2:	a7 01       	movw	r20, r14
    18b4:	96 01       	movw	r18, r12
    18b6:	c7 01       	movw	r24, r14
    18b8:	b6 01       	movw	r22, r12
    18ba:	0e 94 09 11 	call	0x2212	; 0x2212 <__mulsf3>
    18be:	9b 01       	movw	r18, r22
    18c0:	ac 01       	movw	r20, r24
    18c2:	c5 01       	movw	r24, r10
    18c4:	b4 01       	movw	r22, r8
    18c6:	0e 94 54 0e 	call	0x1ca8	; 0x1ca8 <__addsf3>
    18ca:	20 e0       	ldi	r18, 0x00	; 0
    18cc:	30 e0       	ldi	r19, 0x00	; 0
    18ce:	40 e0       	ldi	r20, 0x00	; 0
    18d0:	5f e3       	ldi	r21, 0x3F	; 63
    18d2:	0e 94 76 11 	call	0x22ec	; 0x22ec <pow>
    18d6:	9b 01       	movw	r18, r22
    18d8:	ac 01       	movw	r20, r24
			// If distance is lower than min distance, set as the new top index
			if (distance < min_distance) {
    18da:	2d 96       	adiw	r28, 0x0d	; 13
    18dc:	6c ad       	ldd	r22, Y+60	; 0x3c
    18de:	7d ad       	ldd	r23, Y+61	; 0x3d
    18e0:	8e ad       	ldd	r24, Y+62	; 0x3e
    18e2:	9f ad       	ldd	r25, Y+63	; 0x3f
    18e4:	2d 97       	sbiw	r28, 0x0d	; 13
    18e6:	0e 94 fc 10 	call	0x21f8	; 0x21f8 <__gesf2>
    18ea:	18 16       	cp	r1, r24
    18ec:	3c f5       	brge	.+78     	; 0x193c <interpret+0x6f2>
		}
	}

	// Determine bottom star index
	int bottom_index;
	if (indices[0] == top_index) {
    18ee:	26 14       	cp	r2, r6
    18f0:	37 04       	cpc	r3, r7
    18f2:	e1 f0       	breq	.+56     	; 0x192c <interpret+0x6e2>
    18f4:	a3 96       	adiw	r28, 0x23	; 35
    18f6:	9f ad       	ldd	r25, Y+63	; 0x3f
    18f8:	a3 97       	sbiw	r28, 0x23	; 35
    18fa:	a4 96       	adiw	r28, 0x24	; 36
    18fc:	8f ad       	ldd	r24, Y+63	; 0x3f
    18fe:	a4 97       	sbiw	r28, 0x24	; 36
    1900:	27 96       	adiw	r28, 0x07	; 7
    1902:	2e ad       	ldd	r18, Y+62	; 0x3e
    1904:	3f ad       	ldd	r19, Y+63	; 0x3f
    1906:	27 97       	sbiw	r28, 0x07	; 7
    1908:	a4 96       	adiw	r28, 0x24	; 36
    190a:	3f af       	std	Y+63, r19	; 0x3f
    190c:	2e af       	std	Y+62, r18	; 0x3e
    190e:	a4 97       	sbiw	r28, 0x24	; 36
    1910:	26 96       	adiw	r28, 0x06	; 6
    1912:	9f af       	std	Y+63, r25	; 0x3f
    1914:	26 97       	sbiw	r28, 0x06	; 6
    1916:	27 96       	adiw	r28, 0x07	; 7
    1918:	8f af       	std	Y+63, r24	; 0x3f
    191a:	27 97       	sbiw	r28, 0x07	; 7
    191c:	0f c0       	rjmp	.+30     	; 0x193c <interpret+0x6f2>

	// Find which max index has the shortest distance to one of the other two points
	float min_distance = FLT_MAX;
	// Index of top star that we're looking for
	int top_index = indices[0];
	for (int i = 0; i < 4; i++) {
    191e:	0f 5f       	subi	r16, 0xFF	; 255
    1920:	1f 4f       	sbci	r17, 0xFF	; 255
    1922:	04 30       	cpi	r16, 0x04	; 4
    1924:	11 05       	cpc	r17, r1
    1926:	09 f0       	breq	.+2      	; 0x192a <interpret+0x6e0>
    1928:	1c cf       	rjmp	.-456    	; 0x1762 <interpret+0x518>
    192a:	08 c0       	rjmp	.+16     	; 0x193c <interpret+0x6f2>
    192c:	a4 96       	adiw	r28, 0x24	; 36
    192e:	4e ad       	ldd	r20, Y+62	; 0x3e
    1930:	5f ad       	ldd	r21, Y+63	; 0x3f
    1932:	a4 97       	sbiw	r28, 0x24	; 36
    1934:	27 96       	adiw	r28, 0x07	; 7
    1936:	5f af       	std	Y+63, r21	; 0x3f
    1938:	4e af       	std	Y+62, r20	; 0x3e
    193a:	27 97       	sbiw	r28, 0x07	; 7
		bottom_index = indices[0];
	}

	////////// Determine mWii rotation //////////
	// determine rotation
	float delx = (mx[top_index] - mx[bottom_index]);
    193c:	27 96       	adiw	r28, 0x07	; 7
    193e:	0e ad       	ldd	r16, Y+62	; 0x3e
    1940:	1f ad       	ldd	r17, Y+63	; 0x3f
    1942:	27 97       	sbiw	r28, 0x07	; 7
    1944:	00 0f       	add	r16, r16
    1946:	11 1f       	adc	r17, r17
    1948:	00 0f       	add	r16, r16
    194a:	11 1f       	adc	r17, r17
    194c:	81 e0       	ldi	r24, 0x01	; 1
    194e:	90 e0       	ldi	r25, 0x00	; 0
    1950:	8c 0f       	add	r24, r28
    1952:	9d 1f       	adc	r25, r29
    1954:	08 0f       	add	r16, r24
    1956:	19 1f       	adc	r17, r25
    1958:	a4 96       	adiw	r28, 0x24	; 36
    195a:	ee ac       	ldd	r14, Y+62	; 0x3e
    195c:	ff ac       	ldd	r15, Y+63	; 0x3f
    195e:	a4 97       	sbiw	r28, 0x24	; 36
    1960:	ee 0c       	add	r14, r14
    1962:	ff 1c       	adc	r15, r15
    1964:	ee 0c       	add	r14, r14
    1966:	ff 1c       	adc	r15, r15
    1968:	e8 0e       	add	r14, r24
    196a:	f9 1e       	adc	r15, r25
    196c:	d7 01       	movw	r26, r14
    196e:	90 96       	adiw	r26, 0x20	; 32
    1970:	2d 91       	ld	r18, X+
    1972:	3d 91       	ld	r19, X+
    1974:	4d 91       	ld	r20, X+
    1976:	5c 91       	ld	r21, X
    1978:	93 97       	sbiw	r26, 0x23	; 35
    197a:	f8 01       	movw	r30, r16
    197c:	60 a1       	ldd	r22, Z+32	; 0x20
    197e:	71 a1       	ldd	r23, Z+33	; 0x21
    1980:	82 a1       	ldd	r24, Z+34	; 0x22
    1982:	93 a1       	ldd	r25, Z+35	; 0x23
    1984:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <__subsf3>
    1988:	4b 01       	movw	r8, r22
    198a:	5c 01       	movw	r10, r24
	float dely = (my[top_index] - my[bottom_index]);
    198c:	d7 01       	movw	r26, r14
    198e:	d0 96       	adiw	r26, 0x30	; 48
    1990:	2d 91       	ld	r18, X+
    1992:	3d 91       	ld	r19, X+
    1994:	4d 91       	ld	r20, X+
    1996:	5c 91       	ld	r21, X
    1998:	d3 97       	sbiw	r26, 0x33	; 51
    199a:	f8 01       	movw	r30, r16
    199c:	60 a9       	ldd	r22, Z+48	; 0x30
    199e:	71 a9       	ldd	r23, Z+49	; 0x31
    19a0:	82 a9       	ldd	r24, Z+50	; 0x32
    19a2:	93 a9       	ldd	r25, Z+51	; 0x33
    19a4:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <__subsf3>
	robot->o = atan2f(dely, delx); //find rotation from y axis
    19a8:	a5 01       	movw	r20, r10
    19aa:	94 01       	movw	r18, r8
    19ac:	0e 94 d3 0e 	call	0x1da6	; 0x1da6 <atan2>
    19b0:	2b 01       	movw	r4, r22
    19b2:	3c 01       	movw	r6, r24


	////////// Use rotation to translate points into new xy frame //////////
	// Rotate original mWii points around the origin
	float s = sinf(2.0 * PI - robot->o);
    19b4:	9b 01       	movw	r18, r22
    19b6:	ac 01       	movw	r20, r24
    19b8:	6b ed       	ldi	r22, 0xDB	; 219
    19ba:	7f e0       	ldi	r23, 0x0F	; 15
    19bc:	89 ec       	ldi	r24, 0xC9	; 201
    19be:	90 e4       	ldi	r25, 0x40	; 64
    19c0:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <__subsf3>
    19c4:	4b 01       	movw	r8, r22
    19c6:	5c 01       	movw	r10, r24
    19c8:	0e 94 c6 11 	call	0x238c	; 0x238c <sin>
    19cc:	6b 01       	movw	r12, r22
    19ce:	7c 01       	movw	r14, r24
	float c = cosf(2.0 * PI - robot->o);
    19d0:	c5 01       	movw	r24, r10
    19d2:	b4 01       	movw	r22, r8
    19d4:	0e 94 37 0f 	call	0x1e6e	; 0x1e6e <cos>
    19d8:	4b 01       	movw	r8, r22
    19da:	5c 01       	movw	r10, r24

	float ox = translation_x;
	float oy = translation_y;

	// Rotate points around origin into new xy frame
	translation_x = ox * c - oy * s;
    19dc:	9b 01       	movw	r18, r22
    19de:	ac 01       	movw	r20, r24
    19e0:	6a 96       	adiw	r28, 0x1a	; 26
    19e2:	6c ad       	ldd	r22, Y+60	; 0x3c
    19e4:	7d ad       	ldd	r23, Y+61	; 0x3d
    19e6:	8e ad       	ldd	r24, Y+62	; 0x3e
    19e8:	9f ad       	ldd	r25, Y+63	; 0x3f
    19ea:	6a 97       	sbiw	r28, 0x1a	; 26
    19ec:	0e 94 09 11 	call	0x2212	; 0x2212 <__mulsf3>
    19f0:	25 96       	adiw	r28, 0x05	; 5
    19f2:	6c af       	std	Y+60, r22	; 0x3c
    19f4:	7d af       	std	Y+61, r23	; 0x3d
    19f6:	8e af       	std	Y+62, r24	; 0x3e
    19f8:	9f af       	std	Y+63, r25	; 0x3f
    19fa:	25 97       	sbiw	r28, 0x05	; 5
    19fc:	a7 01       	movw	r20, r14
    19fe:	96 01       	movw	r18, r12
    1a00:	6e 96       	adiw	r28, 0x1e	; 30
    1a02:	6c ad       	ldd	r22, Y+60	; 0x3c
    1a04:	7d ad       	ldd	r23, Y+61	; 0x3d
    1a06:	8e ad       	ldd	r24, Y+62	; 0x3e
    1a08:	9f ad       	ldd	r25, Y+63	; 0x3f
    1a0a:	6e 97       	sbiw	r28, 0x1e	; 30
    1a0c:	0e 94 09 11 	call	0x2212	; 0x2212 <__mulsf3>
    1a10:	9b 01       	movw	r18, r22
    1a12:	ac 01       	movw	r20, r24
    1a14:	25 96       	adiw	r28, 0x05	; 5
    1a16:	6c ad       	ldd	r22, Y+60	; 0x3c
    1a18:	7d ad       	ldd	r23, Y+61	; 0x3d
    1a1a:	8e ad       	ldd	r24, Y+62	; 0x3e
    1a1c:	9f ad       	ldd	r25, Y+63	; 0x3f
    1a1e:	25 97       	sbiw	r28, 0x05	; 5
    1a20:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <__subsf3>
    1a24:	9b 01       	movw	r18, r22
    1a26:	ac 01       	movw	r20, r24
	translation_y = oy * c + ox * s;

	// Set robot x and y locations in pixels
	robot->x = -translation_x - CENTER_OFFSET_X;
    1a28:	60 e0       	ldi	r22, 0x00	; 0
    1a2a:	70 e0       	ldi	r23, 0x00	; 0
    1a2c:	88 ec       	ldi	r24, 0xC8	; 200
    1a2e:	91 e4       	ldi	r25, 0x41	; 65
    1a30:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <__subsf3>
    1a34:	a8 96       	adiw	r28, 0x28	; 40
    1a36:	ae ad       	ldd	r26, Y+62	; 0x3e
    1a38:	bf ad       	ldd	r27, Y+63	; 0x3f
    1a3a:	a8 97       	sbiw	r28, 0x28	; 40
    1a3c:	11 96       	adiw	r26, 0x01	; 1
    1a3e:	6d 93       	st	X+, r22
    1a40:	7d 93       	st	X+, r23
    1a42:	8d 93       	st	X+, r24
    1a44:	9c 93       	st	X, r25
    1a46:	14 97       	sbiw	r26, 0x04	; 4
	float ox = translation_x;
	float oy = translation_y;

	// Rotate points around origin into new xy frame
	translation_x = ox * c - oy * s;
	translation_y = oy * c + ox * s;
    1a48:	a5 01       	movw	r20, r10
    1a4a:	94 01       	movw	r18, r8
    1a4c:	6e 96       	adiw	r28, 0x1e	; 30
    1a4e:	6c ad       	ldd	r22, Y+60	; 0x3c
    1a50:	7d ad       	ldd	r23, Y+61	; 0x3d
    1a52:	8e ad       	ldd	r24, Y+62	; 0x3e
    1a54:	9f ad       	ldd	r25, Y+63	; 0x3f
    1a56:	6e 97       	sbiw	r28, 0x1e	; 30
    1a58:	0e 94 09 11 	call	0x2212	; 0x2212 <__mulsf3>
    1a5c:	4b 01       	movw	r8, r22
    1a5e:	5c 01       	movw	r10, r24
    1a60:	a7 01       	movw	r20, r14
    1a62:	96 01       	movw	r18, r12
    1a64:	6a 96       	adiw	r28, 0x1a	; 26
    1a66:	6c ad       	ldd	r22, Y+60	; 0x3c
    1a68:	7d ad       	ldd	r23, Y+61	; 0x3d
    1a6a:	8e ad       	ldd	r24, Y+62	; 0x3e
    1a6c:	9f ad       	ldd	r25, Y+63	; 0x3f
    1a6e:	6a 97       	sbiw	r28, 0x1a	; 26
    1a70:	0e 94 09 11 	call	0x2212	; 0x2212 <__mulsf3>
    1a74:	9b 01       	movw	r18, r22
    1a76:	ac 01       	movw	r20, r24
    1a78:	c5 01       	movw	r24, r10
    1a7a:	b4 01       	movw	r22, r8
    1a7c:	0e 94 54 0e 	call	0x1ca8	; 0x1ca8 <__addsf3>
    1a80:	9b 01       	movw	r18, r22
    1a82:	ac 01       	movw	r20, r24

	// Set robot x and y locations in pixels
	robot->x = -translation_x - CENTER_OFFSET_X;
	robot->y = -translation_y - CENTER_OFFSET_Y;
    1a84:	60 e0       	ldi	r22, 0x00	; 0
    1a86:	70 e0       	ldi	r23, 0x00	; 0
    1a88:	80 e8       	ldi	r24, 0x80	; 128
    1a8a:	9f e3       	ldi	r25, 0x3F	; 63
    1a8c:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <__subsf3>
    1a90:	a8 96       	adiw	r28, 0x28	; 40
    1a92:	ee ad       	ldd	r30, Y+62	; 0x3e
    1a94:	ff ad       	ldd	r31, Y+63	; 0x3f
    1a96:	a8 97       	sbiw	r28, 0x28	; 40
    1a98:	65 83       	std	Z+5, r22	; 0x05
    1a9a:	76 83       	std	Z+6, r23	; 0x06
    1a9c:	87 83       	std	Z+7, r24	; 0x07
    1a9e:	90 87       	std	Z+8, r25	; 0x08
	robot->o = -robot->o;
    1aa0:	d3 01       	movw	r26, r6
    1aa2:	c2 01       	movw	r24, r4
    1aa4:	b0 58       	subi	r27, 0x80	; 128
    1aa6:	81 87       	std	Z+9, r24	; 0x09
    1aa8:	92 87       	std	Z+10, r25	; 0x0a
    1aaa:	a3 87       	std	Z+11, r26	; 0x0b
    1aac:	b4 87       	std	Z+12, r27	; 0x0c

	// Print data
	print_data(mWii_x, mWii_y, ox, oy, top_index, bottom_index, robot);
    1aae:	4f 01       	movw	r8, r30
    1ab0:	a4 96       	adiw	r28, 0x24	; 36
    1ab2:	ae ac       	ldd	r10, Y+62	; 0x3e
    1ab4:	bf ac       	ldd	r11, Y+63	; 0x3f
    1ab6:	a4 97       	sbiw	r28, 0x24	; 36
    1ab8:	27 96       	adiw	r28, 0x07	; 7
    1aba:	ce ac       	ldd	r12, Y+62	; 0x3e
    1abc:	df ac       	ldd	r13, Y+63	; 0x3f
    1abe:	27 97       	sbiw	r28, 0x07	; 7
    1ac0:	6e 96       	adiw	r28, 0x1e	; 30
    1ac2:	ec ac       	ldd	r14, Y+60	; 0x3c
    1ac4:	fd ac       	ldd	r15, Y+61	; 0x3d
    1ac6:	0e ad       	ldd	r16, Y+62	; 0x3e
    1ac8:	1f ad       	ldd	r17, Y+63	; 0x3f
    1aca:	6e 97       	sbiw	r28, 0x1e	; 30
    1acc:	6a 96       	adiw	r28, 0x1a	; 26
    1ace:	2c ad       	ldd	r18, Y+60	; 0x3c
    1ad0:	3d ad       	ldd	r19, Y+61	; 0x3d
    1ad2:	4e ad       	ldd	r20, Y+62	; 0x3e
    1ad4:	5f ad       	ldd	r21, Y+63	; 0x3f
    1ad6:	6a 97       	sbiw	r28, 0x1a	; 26
    1ad8:	be 01       	movw	r22, r28
    1ada:	6f 5e       	subi	r22, 0xEF	; 239
    1adc:	7f 4f       	sbci	r23, 0xFF	; 255
    1ade:	ce 01       	movw	r24, r28
    1ae0:	01 96       	adiw	r24, 0x01	; 1
    1ae2:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <print_data>
    1ae6:	12 c0       	rjmp	.+36     	; 0x1b0c <interpret+0x8c2>
    1ae8:	f4 e0       	ldi	r31, 0x04	; 4
    1aea:	2f 0e       	add	r2, r31
    1aec:	31 1c       	adc	r3, r1
    1aee:	a2 96       	adiw	r28, 0x22	; 34
    1af0:	2e ad       	ldd	r18, Y+62	; 0x3e
    1af2:	3f ad       	ldd	r19, Y+63	; 0x3f
    1af4:	a2 97       	sbiw	r28, 0x22	; 34
    1af6:	2c 5f       	subi	r18, 0xFC	; 252
    1af8:	3f 4f       	sbci	r19, 0xFF	; 255
    1afa:	a2 96       	adiw	r28, 0x22	; 34
    1afc:	3f af       	std	Y+63, r19	; 0x3f
    1afe:	2e af       	std	Y+62, r18	; 0x3e
    1b00:	a2 97       	sbiw	r28, 0x22	; 34
	////////// Sort mWii point indices based on distance from origin //////////

	// Get max distance indices
	float max_distance = 0;
	int indices[2] = {0, 1};
	for (int i = 0; i < 3; i++) {
    1b02:	a0 96       	adiw	r28, 0x20	; 32
    1b04:	8e ad       	ldd	r24, Y+62	; 0x3e
    1b06:	9f ad       	ldd	r25, Y+63	; 0x3f
    1b08:	a0 97       	sbiw	r28, 0x20	; 32
    1b0a:	6d cd       	rjmp	.-1318   	; 0x15e6 <interpret+0x39c>
	robot->y = -translation_y - CENTER_OFFSET_Y;
	robot->o = -robot->o;

	// Print data
	print_data(mWii_x, mWii_y, ox, oy, top_index, bottom_index, robot);
}
    1b0c:	c9 59       	subi	r28, 0x99	; 153
    1b0e:	df 4f       	sbci	r29, 0xFF	; 255
    1b10:	0f b6       	in	r0, 0x3f	; 63
    1b12:	f8 94       	cli
    1b14:	de bf       	out	0x3e, r29	; 62
    1b16:	0f be       	out	0x3f, r0	; 63
    1b18:	cd bf       	out	0x3d, r28	; 61
    1b1a:	df 91       	pop	r29
    1b1c:	cf 91       	pop	r28
    1b1e:	1f 91       	pop	r17
    1b20:	0f 91       	pop	r16
    1b22:	ff 90       	pop	r15
    1b24:	ef 90       	pop	r14
    1b26:	df 90       	pop	r13
    1b28:	cf 90       	pop	r12
    1b2a:	bf 90       	pop	r11
    1b2c:	af 90       	pop	r10
    1b2e:	9f 90       	pop	r9
    1b30:	8f 90       	pop	r8
    1b32:	7f 90       	pop	r7
    1b34:	6f 90       	pop	r6
    1b36:	5f 90       	pop	r5
    1b38:	4f 90       	pop	r4
    1b3a:	3f 90       	pop	r3
    1b3c:	2f 90       	pop	r2
    1b3e:	08 95       	ret

00001b40 <step_to_goal>:
#include "score.h"

 bool step_to_goal(Robot* robot) {
    1b40:	ef 92       	push	r14
    1b42:	ff 92       	push	r15
    1b44:	0f 93       	push	r16
    1b46:	1f 93       	push	r17
    1b48:	cf 93       	push	r28
    1b4a:	df 93       	push	r29
    1b4c:	cd b7       	in	r28, 0x3d	; 61
    1b4e:	de b7       	in	r29, 0x3e	; 62
    1b50:	68 97       	sbiw	r28, 0x18	; 24
    1b52:	0f b6       	in	r0, 0x3f	; 63
    1b54:	f8 94       	cli
    1b56:	de bf       	out	0x3e, r29	; 62
    1b58:	0f be       	out	0x3f, r0	; 63
    1b5a:	cd bf       	out	0x3d, r28	; 61
    1b5c:	7c 01       	movw	r14, r24
	 unsigned int star_array[12];
	 // Get mWii array
	 m_wii_read(star_array);
    1b5e:	ce 01       	movw	r24, r28
    1b60:	01 96       	adiw	r24, 0x01	; 1
    1b62:	0e 94 5d 07 	call	0xeba	; 0xeba <m_wii_read>
	 // Get robot location and orientation
	 interpret(robot, star_array);
    1b66:	be 01       	movw	r22, r28
    1b68:	6f 5f       	subi	r22, 0xFF	; 255
    1b6a:	7f 4f       	sbci	r23, 0xFF	; 255
    1b6c:	c7 01       	movw	r24, r14
    1b6e:	0e 94 25 09 	call	0x124a	; 0x124a <interpret>
	 // Wait
	 if (facing_goal(robot, OPPONENT_X, OPPONENT_Y)) {
    1b72:	00 e0       	ldi	r16, 0x00	; 0
    1b74:	10 e8       	ldi	r17, 0x80	; 128
    1b76:	2d e9       	ldi	r18, 0x9D	; 157
    1b78:	33 e4       	ldi	r19, 0x43	; 67
    1b7a:	40 e0       	ldi	r20, 0x00	; 0
    1b7c:	50 e0       	ldi	r21, 0x00	; 0
    1b7e:	6c e0       	ldi	r22, 0x0C	; 12
    1b80:	72 e4       	ldi	r23, 0x42	; 66
    1b82:	c7 01       	movw	r24, r14
    1b84:	0e 94 b0 02 	call	0x560	; 0x560 <facing_goal>
    1b88:	88 23       	and	r24, r24
    1b8a:	29 f0       	breq	.+10     	; 0x1b96 <step_to_goal+0x56>
		 turn(0); // drive forward
    1b8c:	80 e0       	ldi	r24, 0x00	; 0
    1b8e:	90 e0       	ldi	r25, 0x00	; 0
    1b90:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <turn>
    1b94:	05 c0       	rjmp	.+10     	; 0x1ba0 <step_to_goal+0x60>
	 } else {
		turn_in_place(true, 100);
    1b96:	64 e6       	ldi	r22, 0x64	; 100
    1b98:	70 e0       	ldi	r23, 0x00	; 0
    1b9a:	81 e0       	ldi	r24, 0x01	; 1
    1b9c:	0e 94 38 02 	call	0x470	; 0x470 <turn_in_place>
	 }
	 if ( abs(OPPONENT_Y - robot->y) > 15 || abs(OPPONENT_X - robot->x) > 30) {
    1ba0:	f7 01       	movw	r30, r14
    1ba2:	25 81       	ldd	r18, Z+5	; 0x05
    1ba4:	36 81       	ldd	r19, Z+6	; 0x06
    1ba6:	47 81       	ldd	r20, Z+7	; 0x07
    1ba8:	50 85       	ldd	r21, Z+8	; 0x08
    1baa:	60 e0       	ldi	r22, 0x00	; 0
    1bac:	70 e8       	ldi	r23, 0x80	; 128
    1bae:	8d e9       	ldi	r24, 0x9D	; 157
    1bb0:	93 e4       	ldi	r25, 0x43	; 67
    1bb2:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <__subsf3>
    1bb6:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <__fixsfsi>
    1bba:	9b 01       	movw	r18, r22
    1bbc:	77 23       	and	r23, r23
    1bbe:	24 f4       	brge	.+8      	; 0x1bc8 <step_to_goal+0x88>
    1bc0:	22 27       	eor	r18, r18
    1bc2:	33 27       	eor	r19, r19
    1bc4:	26 1b       	sub	r18, r22
    1bc6:	37 0b       	sbc	r19, r23
    1bc8:	20 31       	cpi	r18, 0x10	; 16
    1bca:	31 05       	cpc	r19, r1
    1bcc:	bc f4       	brge	.+46     	; 0x1bfc <step_to_goal+0xbc>
    1bce:	f7 01       	movw	r30, r14
    1bd0:	21 81       	ldd	r18, Z+1	; 0x01
    1bd2:	32 81       	ldd	r19, Z+2	; 0x02
    1bd4:	43 81       	ldd	r20, Z+3	; 0x03
    1bd6:	54 81       	ldd	r21, Z+4	; 0x04
    1bd8:	60 e0       	ldi	r22, 0x00	; 0
    1bda:	70 e0       	ldi	r23, 0x00	; 0
    1bdc:	8c e0       	ldi	r24, 0x0C	; 12
    1bde:	92 e4       	ldi	r25, 0x42	; 66
    1be0:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <__subsf3>
    1be4:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <__fixsfsi>
    1be8:	9b 01       	movw	r18, r22
    1bea:	77 23       	and	r23, r23
    1bec:	24 f4       	brge	.+8      	; 0x1bf6 <step_to_goal+0xb6>
    1bee:	22 27       	eor	r18, r18
    1bf0:	33 27       	eor	r19, r19
    1bf2:	26 1b       	sub	r18, r22
    1bf4:	37 0b       	sbc	r19, r23
    1bf6:	2f 31       	cpi	r18, 0x1F	; 31
    1bf8:	31 05       	cpc	r19, r1
    1bfa:	34 f0       	brlt	.+12     	; 0x1c08 <step_to_goal+0xc8>
		 // you're in the goal
		 motor_stop();
    1bfc:	0e 94 33 02 	call	0x466	; 0x466 <motor_stop>
		 m_red(ON);
    1c00:	6e 9a       	sbi	0x0d, 6	; 13
    1c02:	76 98       	cbi	0x0e, 6	; 14
		 return true;
    1c04:	81 e0       	ldi	r24, 0x01	; 1
    1c06:	01 c0       	rjmp	.+2      	; 0x1c0a <step_to_goal+0xca>
	 }
	 return false;
    1c08:	80 e0       	ldi	r24, 0x00	; 0
 }
    1c0a:	68 96       	adiw	r28, 0x18	; 24
    1c0c:	0f b6       	in	r0, 0x3f	; 63
    1c0e:	f8 94       	cli
    1c10:	de bf       	out	0x3e, r29	; 62
    1c12:	0f be       	out	0x3f, r0	; 63
    1c14:	cd bf       	out	0x3d, r28	; 61
    1c16:	df 91       	pop	r29
    1c18:	cf 91       	pop	r28
    1c1a:	1f 91       	pop	r17
    1c1c:	0f 91       	pop	r16
    1c1e:	ff 90       	pop	r15
    1c20:	ef 90       	pop	r14
    1c22:	08 95       	ret

00001c24 <__vector_3>:
		m_red(TOGGLE);
		m_wait(100);
	}
}

ISR(INT2_vect){
    1c24:	1f 92       	push	r1
    1c26:	0f 92       	push	r0
    1c28:	0f b6       	in	r0, 0x3f	; 63
    1c2a:	0f 92       	push	r0
    1c2c:	11 24       	eor	r1, r1
    1c2e:	2f 93       	push	r18
    1c30:	3f 93       	push	r19
    1c32:	4f 93       	push	r20
    1c34:	5f 93       	push	r21
    1c36:	6f 93       	push	r22
    1c38:	7f 93       	push	r23
    1c3a:	8f 93       	push	r24
    1c3c:	9f 93       	push	r25
    1c3e:	af 93       	push	r26
    1c40:	bf 93       	push	r27
    1c42:	ef 93       	push	r30
    1c44:	ff 93       	push	r31
	// read message into package buffer
	if (!m_rf_read(package, 10)) {
    1c46:	6a e0       	ldi	r22, 0x0A	; 10
    1c48:	8e e0       	ldi	r24, 0x0E	; 14
    1c4a:	91 e0       	ldi	r25, 0x01	; 1
    1c4c:	0e 94 19 03 	call	0x632	; 0x632 <m_rf_read>
    1c50:	81 11       	cpse	r24, r1
    1c52:	04 c0       	rjmp	.+8      	; 0x1c5c <__vector_3+0x38>
		// Default to pause if command not read
		package[0] = 0xA4;
    1c54:	84 ea       	ldi	r24, 0xA4	; 164
    1c56:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <package>
    1c5a:	12 c0       	rjmp	.+36     	; 0x1c80 <__vector_3+0x5c>
	} else {
		m_green(ON);
    1c5c:	6a 9a       	sbi	0x0d, 2	; 13
    1c5e:	72 98       	cbi	0x0e, 2	; 14
	}
	
	switch(package[0]){
    1c60:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <package>
    1c64:	84 3a       	cpi	r24, 0xA4	; 164
    1c66:	61 f0       	breq	.+24     	; 0x1c80 <__vector_3+0x5c>
    1c68:	18 f4       	brcc	.+6      	; 0x1c70 <__vector_3+0x4c>
    1c6a:	81 3a       	cpi	r24, 0xA1	; 161
    1c6c:	29 f0       	breq	.+10     	; 0x1c78 <__vector_3+0x54>
    1c6e:	0a c0       	rjmp	.+20     	; 0x1c84 <__vector_3+0x60>
    1c70:	86 5a       	subi	r24, 0xA6	; 166
    1c72:	82 30       	cpi	r24, 0x02	; 2
    1c74:	38 f4       	brcc	.+14     	; 0x1c84 <__vector_3+0x60>
    1c76:	04 c0       	rjmp	.+8      	; 0x1c80 <__vector_3+0x5c>
			// flash LED 
			break;
		case 0xA1:	// Play command
			// light LED
			// set flag to play!
			active = true;
    1c78:	81 e0       	ldi	r24, 0x01	; 1
    1c7a:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <active>
			break;
    1c7e:	02 c0       	rjmp	.+4      	; 0x1c84 <__vector_3+0x60>
		case 0xA5:
			break;
		case 0xA4:
		case 0xA6:
		case 0xA7:
			active = false;
    1c80:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <active>
	}
    1c84:	ff 91       	pop	r31
    1c86:	ef 91       	pop	r30
    1c88:	bf 91       	pop	r27
    1c8a:	af 91       	pop	r26
    1c8c:	9f 91       	pop	r25
    1c8e:	8f 91       	pop	r24
    1c90:	7f 91       	pop	r23
    1c92:	6f 91       	pop	r22
    1c94:	5f 91       	pop	r21
    1c96:	4f 91       	pop	r20
    1c98:	3f 91       	pop	r19
    1c9a:	2f 91       	pop	r18
    1c9c:	0f 90       	pop	r0
    1c9e:	0f be       	out	0x3f, r0	; 63
    1ca0:	0f 90       	pop	r0
    1ca2:	1f 90       	pop	r1
    1ca4:	18 95       	reti

00001ca6 <__subsf3>:
    1ca6:	50 58       	subi	r21, 0x80	; 128

00001ca8 <__addsf3>:
    1ca8:	bb 27       	eor	r27, r27
    1caa:	aa 27       	eor	r26, r26
    1cac:	0e 94 6b 0e 	call	0x1cd6	; 0x1cd6 <__addsf3x>
    1cb0:	0c 94 ae 10 	jmp	0x215c	; 0x215c <__fp_round>
    1cb4:	0e 94 75 10 	call	0x20ea	; 0x20ea <__fp_pscA>
    1cb8:	38 f0       	brcs	.+14     	; 0x1cc8 <__addsf3+0x20>
    1cba:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <__fp_pscB>
    1cbe:	20 f0       	brcs	.+8      	; 0x1cc8 <__addsf3+0x20>
    1cc0:	39 f4       	brne	.+14     	; 0x1cd0 <__addsf3+0x28>
    1cc2:	9f 3f       	cpi	r25, 0xFF	; 255
    1cc4:	19 f4       	brne	.+6      	; 0x1ccc <__addsf3+0x24>
    1cc6:	26 f4       	brtc	.+8      	; 0x1cd0 <__addsf3+0x28>
    1cc8:	0c 94 4b 10 	jmp	0x2096	; 0x2096 <__fp_nan>
    1ccc:	0e f4       	brtc	.+2      	; 0x1cd0 <__addsf3+0x28>
    1cce:	e0 95       	com	r30
    1cd0:	e7 fb       	bst	r30, 7
    1cd2:	0c 94 45 10 	jmp	0x208a	; 0x208a <__fp_inf>

00001cd6 <__addsf3x>:
    1cd6:	e9 2f       	mov	r30, r25
    1cd8:	0e 94 d3 10 	call	0x21a6	; 0x21a6 <__fp_split3>
    1cdc:	58 f3       	brcs	.-42     	; 0x1cb4 <__addsf3+0xc>
    1cde:	ba 17       	cp	r27, r26
    1ce0:	62 07       	cpc	r22, r18
    1ce2:	73 07       	cpc	r23, r19
    1ce4:	84 07       	cpc	r24, r20
    1ce6:	95 07       	cpc	r25, r21
    1ce8:	20 f0       	brcs	.+8      	; 0x1cf2 <__addsf3x+0x1c>
    1cea:	79 f4       	brne	.+30     	; 0x1d0a <__addsf3x+0x34>
    1cec:	a6 f5       	brtc	.+104    	; 0x1d56 <__addsf3x+0x80>
    1cee:	0c 94 f5 10 	jmp	0x21ea	; 0x21ea <__fp_zero>
    1cf2:	0e f4       	brtc	.+2      	; 0x1cf6 <__addsf3x+0x20>
    1cf4:	e0 95       	com	r30
    1cf6:	0b 2e       	mov	r0, r27
    1cf8:	ba 2f       	mov	r27, r26
    1cfa:	a0 2d       	mov	r26, r0
    1cfc:	0b 01       	movw	r0, r22
    1cfe:	b9 01       	movw	r22, r18
    1d00:	90 01       	movw	r18, r0
    1d02:	0c 01       	movw	r0, r24
    1d04:	ca 01       	movw	r24, r20
    1d06:	a0 01       	movw	r20, r0
    1d08:	11 24       	eor	r1, r1
    1d0a:	ff 27       	eor	r31, r31
    1d0c:	59 1b       	sub	r21, r25
    1d0e:	99 f0       	breq	.+38     	; 0x1d36 <__addsf3x+0x60>
    1d10:	59 3f       	cpi	r21, 0xF9	; 249
    1d12:	50 f4       	brcc	.+20     	; 0x1d28 <__addsf3x+0x52>
    1d14:	50 3e       	cpi	r21, 0xE0	; 224
    1d16:	68 f1       	brcs	.+90     	; 0x1d72 <__addsf3x+0x9c>
    1d18:	1a 16       	cp	r1, r26
    1d1a:	f0 40       	sbci	r31, 0x00	; 0
    1d1c:	a2 2f       	mov	r26, r18
    1d1e:	23 2f       	mov	r18, r19
    1d20:	34 2f       	mov	r19, r20
    1d22:	44 27       	eor	r20, r20
    1d24:	58 5f       	subi	r21, 0xF8	; 248
    1d26:	f3 cf       	rjmp	.-26     	; 0x1d0e <__addsf3x+0x38>
    1d28:	46 95       	lsr	r20
    1d2a:	37 95       	ror	r19
    1d2c:	27 95       	ror	r18
    1d2e:	a7 95       	ror	r26
    1d30:	f0 40       	sbci	r31, 0x00	; 0
    1d32:	53 95       	inc	r21
    1d34:	c9 f7       	brne	.-14     	; 0x1d28 <__addsf3x+0x52>
    1d36:	7e f4       	brtc	.+30     	; 0x1d56 <__addsf3x+0x80>
    1d38:	1f 16       	cp	r1, r31
    1d3a:	ba 0b       	sbc	r27, r26
    1d3c:	62 0b       	sbc	r22, r18
    1d3e:	73 0b       	sbc	r23, r19
    1d40:	84 0b       	sbc	r24, r20
    1d42:	ba f0       	brmi	.+46     	; 0x1d72 <__addsf3x+0x9c>
    1d44:	91 50       	subi	r25, 0x01	; 1
    1d46:	a1 f0       	breq	.+40     	; 0x1d70 <__addsf3x+0x9a>
    1d48:	ff 0f       	add	r31, r31
    1d4a:	bb 1f       	adc	r27, r27
    1d4c:	66 1f       	adc	r22, r22
    1d4e:	77 1f       	adc	r23, r23
    1d50:	88 1f       	adc	r24, r24
    1d52:	c2 f7       	brpl	.-16     	; 0x1d44 <__addsf3x+0x6e>
    1d54:	0e c0       	rjmp	.+28     	; 0x1d72 <__addsf3x+0x9c>
    1d56:	ba 0f       	add	r27, r26
    1d58:	62 1f       	adc	r22, r18
    1d5a:	73 1f       	adc	r23, r19
    1d5c:	84 1f       	adc	r24, r20
    1d5e:	48 f4       	brcc	.+18     	; 0x1d72 <__addsf3x+0x9c>
    1d60:	87 95       	ror	r24
    1d62:	77 95       	ror	r23
    1d64:	67 95       	ror	r22
    1d66:	b7 95       	ror	r27
    1d68:	f7 95       	ror	r31
    1d6a:	9e 3f       	cpi	r25, 0xFE	; 254
    1d6c:	08 f0       	brcs	.+2      	; 0x1d70 <__addsf3x+0x9a>
    1d6e:	b0 cf       	rjmp	.-160    	; 0x1cd0 <__addsf3+0x28>
    1d70:	93 95       	inc	r25
    1d72:	88 0f       	add	r24, r24
    1d74:	08 f0       	brcs	.+2      	; 0x1d78 <__addsf3x+0xa2>
    1d76:	99 27       	eor	r25, r25
    1d78:	ee 0f       	add	r30, r30
    1d7a:	97 95       	ror	r25
    1d7c:	87 95       	ror	r24
    1d7e:	08 95       	ret
    1d80:	0e 94 75 10 	call	0x20ea	; 0x20ea <__fp_pscA>
    1d84:	60 f0       	brcs	.+24     	; 0x1d9e <__addsf3x+0xc8>
    1d86:	80 e8       	ldi	r24, 0x80	; 128
    1d88:	91 e0       	ldi	r25, 0x01	; 1
    1d8a:	09 f4       	brne	.+2      	; 0x1d8e <__addsf3x+0xb8>
    1d8c:	9e ef       	ldi	r25, 0xFE	; 254
    1d8e:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <__fp_pscB>
    1d92:	28 f0       	brcs	.+10     	; 0x1d9e <__addsf3x+0xc8>
    1d94:	40 e8       	ldi	r20, 0x80	; 128
    1d96:	51 e0       	ldi	r21, 0x01	; 1
    1d98:	71 f4       	brne	.+28     	; 0x1db6 <atan2+0x10>
    1d9a:	5e ef       	ldi	r21, 0xFE	; 254
    1d9c:	0c c0       	rjmp	.+24     	; 0x1db6 <atan2+0x10>
    1d9e:	0c 94 4b 10 	jmp	0x2096	; 0x2096 <__fp_nan>
    1da2:	0c 94 f5 10 	jmp	0x21ea	; 0x21ea <__fp_zero>

00001da6 <atan2>:
    1da6:	e9 2f       	mov	r30, r25
    1da8:	e0 78       	andi	r30, 0x80	; 128
    1daa:	0e 94 d3 10 	call	0x21a6	; 0x21a6 <__fp_split3>
    1dae:	40 f3       	brcs	.-48     	; 0x1d80 <__addsf3x+0xaa>
    1db0:	09 2e       	mov	r0, r25
    1db2:	05 2a       	or	r0, r21
    1db4:	b1 f3       	breq	.-20     	; 0x1da2 <__addsf3x+0xcc>
    1db6:	26 17       	cp	r18, r22
    1db8:	37 07       	cpc	r19, r23
    1dba:	48 07       	cpc	r20, r24
    1dbc:	59 07       	cpc	r21, r25
    1dbe:	38 f0       	brcs	.+14     	; 0x1dce <atan2+0x28>
    1dc0:	0e 2e       	mov	r0, r30
    1dc2:	07 f8       	bld	r0, 7
    1dc4:	e0 25       	eor	r30, r0
    1dc6:	69 f0       	breq	.+26     	; 0x1de2 <atan2+0x3c>
    1dc8:	e0 25       	eor	r30, r0
    1dca:	e0 64       	ori	r30, 0x40	; 64
    1dcc:	0a c0       	rjmp	.+20     	; 0x1de2 <atan2+0x3c>
    1dce:	ef 63       	ori	r30, 0x3F	; 63
    1dd0:	07 f8       	bld	r0, 7
    1dd2:	00 94       	com	r0
    1dd4:	07 fa       	bst	r0, 7
    1dd6:	db 01       	movw	r26, r22
    1dd8:	b9 01       	movw	r22, r18
    1dda:	9d 01       	movw	r18, r26
    1ddc:	dc 01       	movw	r26, r24
    1dde:	ca 01       	movw	r24, r20
    1de0:	ad 01       	movw	r20, r26
    1de2:	ef 93       	push	r30
    1de4:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <__divsf3_pse>
    1de8:	0e 94 ae 10 	call	0x215c	; 0x215c <__fp_round>
    1dec:	0e 94 03 0f 	call	0x1e06	; 0x1e06 <atan>
    1df0:	5f 91       	pop	r21
    1df2:	55 23       	and	r21, r21
    1df4:	39 f0       	breq	.+14     	; 0x1e04 <atan2+0x5e>
    1df6:	2b ed       	ldi	r18, 0xDB	; 219
    1df8:	3f e0       	ldi	r19, 0x0F	; 15
    1dfa:	49 e4       	ldi	r20, 0x49	; 73
    1dfc:	50 fd       	sbrc	r21, 0
    1dfe:	49 ec       	ldi	r20, 0xC9	; 201
    1e00:	0c 94 54 0e 	jmp	0x1ca8	; 0x1ca8 <__addsf3>
    1e04:	08 95       	ret

00001e06 <atan>:
    1e06:	df 93       	push	r29
    1e08:	dd 27       	eor	r29, r29
    1e0a:	b9 2f       	mov	r27, r25
    1e0c:	bf 77       	andi	r27, 0x7F	; 127
    1e0e:	40 e8       	ldi	r20, 0x80	; 128
    1e10:	5f e3       	ldi	r21, 0x3F	; 63
    1e12:	16 16       	cp	r1, r22
    1e14:	17 06       	cpc	r1, r23
    1e16:	48 07       	cpc	r20, r24
    1e18:	5b 07       	cpc	r21, r27
    1e1a:	18 f4       	brcc	.+6      	; 0x1e22 <atan+0x1c>
    1e1c:	d9 2f       	mov	r29, r25
    1e1e:	0e 94 01 11 	call	0x2202	; 0x2202 <inverse>
    1e22:	9f 93       	push	r25
    1e24:	8f 93       	push	r24
    1e26:	7f 93       	push	r23
    1e28:	6f 93       	push	r22
    1e2a:	0e 94 ce 11 	call	0x239c	; 0x239c <square>
    1e2e:	ec ea       	ldi	r30, 0xAC	; 172
    1e30:	f0 e0       	ldi	r31, 0x00	; 0
    1e32:	0e 94 4e 10 	call	0x209c	; 0x209c <__fp_powser>
    1e36:	0e 94 ae 10 	call	0x215c	; 0x215c <__fp_round>
    1e3a:	2f 91       	pop	r18
    1e3c:	3f 91       	pop	r19
    1e3e:	4f 91       	pop	r20
    1e40:	5f 91       	pop	r21
    1e42:	0e 94 1c 11 	call	0x2238	; 0x2238 <__mulsf3x>
    1e46:	dd 23       	and	r29, r29
    1e48:	51 f0       	breq	.+20     	; 0x1e5e <atan+0x58>
    1e4a:	90 58       	subi	r25, 0x80	; 128
    1e4c:	a2 ea       	ldi	r26, 0xA2	; 162
    1e4e:	2a ed       	ldi	r18, 0xDA	; 218
    1e50:	3f e0       	ldi	r19, 0x0F	; 15
    1e52:	49 ec       	ldi	r20, 0xC9	; 201
    1e54:	5f e3       	ldi	r21, 0x3F	; 63
    1e56:	d0 78       	andi	r29, 0x80	; 128
    1e58:	5d 27       	eor	r21, r29
    1e5a:	0e 94 6b 0e 	call	0x1cd6	; 0x1cd6 <__addsf3x>
    1e5e:	df 91       	pop	r29
    1e60:	0c 94 ae 10 	jmp	0x215c	; 0x215c <__fp_round>

00001e64 <__cmpsf2>:
    1e64:	0e 94 21 10 	call	0x2042	; 0x2042 <__fp_cmp>
    1e68:	08 f4       	brcc	.+2      	; 0x1e6c <__cmpsf2+0x8>
    1e6a:	81 e0       	ldi	r24, 0x01	; 1
    1e6c:	08 95       	ret

00001e6e <cos>:
    1e6e:	0e 94 85 10 	call	0x210a	; 0x210a <__fp_rempio2>
    1e72:	e3 95       	inc	r30
    1e74:	0c 94 bf 10 	jmp	0x217e	; 0x217e <__fp_sinus>

00001e78 <__divsf3>:
    1e78:	0e 94 50 0f 	call	0x1ea0	; 0x1ea0 <__divsf3x>
    1e7c:	0c 94 ae 10 	jmp	0x215c	; 0x215c <__fp_round>
    1e80:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <__fp_pscB>
    1e84:	58 f0       	brcs	.+22     	; 0x1e9c <__divsf3+0x24>
    1e86:	0e 94 75 10 	call	0x20ea	; 0x20ea <__fp_pscA>
    1e8a:	40 f0       	brcs	.+16     	; 0x1e9c <__divsf3+0x24>
    1e8c:	29 f4       	brne	.+10     	; 0x1e98 <__divsf3+0x20>
    1e8e:	5f 3f       	cpi	r21, 0xFF	; 255
    1e90:	29 f0       	breq	.+10     	; 0x1e9c <__divsf3+0x24>
    1e92:	0c 94 45 10 	jmp	0x208a	; 0x208a <__fp_inf>
    1e96:	51 11       	cpse	r21, r1
    1e98:	0c 94 f6 10 	jmp	0x21ec	; 0x21ec <__fp_szero>
    1e9c:	0c 94 4b 10 	jmp	0x2096	; 0x2096 <__fp_nan>

00001ea0 <__divsf3x>:
    1ea0:	0e 94 d3 10 	call	0x21a6	; 0x21a6 <__fp_split3>
    1ea4:	68 f3       	brcs	.-38     	; 0x1e80 <__divsf3+0x8>

00001ea6 <__divsf3_pse>:
    1ea6:	99 23       	and	r25, r25
    1ea8:	b1 f3       	breq	.-20     	; 0x1e96 <__divsf3+0x1e>
    1eaa:	55 23       	and	r21, r21
    1eac:	91 f3       	breq	.-28     	; 0x1e92 <__divsf3+0x1a>
    1eae:	95 1b       	sub	r25, r21
    1eb0:	55 0b       	sbc	r21, r21
    1eb2:	bb 27       	eor	r27, r27
    1eb4:	aa 27       	eor	r26, r26
    1eb6:	62 17       	cp	r22, r18
    1eb8:	73 07       	cpc	r23, r19
    1eba:	84 07       	cpc	r24, r20
    1ebc:	38 f0       	brcs	.+14     	; 0x1ecc <__divsf3_pse+0x26>
    1ebe:	9f 5f       	subi	r25, 0xFF	; 255
    1ec0:	5f 4f       	sbci	r21, 0xFF	; 255
    1ec2:	22 0f       	add	r18, r18
    1ec4:	33 1f       	adc	r19, r19
    1ec6:	44 1f       	adc	r20, r20
    1ec8:	aa 1f       	adc	r26, r26
    1eca:	a9 f3       	breq	.-22     	; 0x1eb6 <__divsf3_pse+0x10>
    1ecc:	35 d0       	rcall	.+106    	; 0x1f38 <__divsf3_pse+0x92>
    1ece:	0e 2e       	mov	r0, r30
    1ed0:	3a f0       	brmi	.+14     	; 0x1ee0 <__divsf3_pse+0x3a>
    1ed2:	e0 e8       	ldi	r30, 0x80	; 128
    1ed4:	32 d0       	rcall	.+100    	; 0x1f3a <__divsf3_pse+0x94>
    1ed6:	91 50       	subi	r25, 0x01	; 1
    1ed8:	50 40       	sbci	r21, 0x00	; 0
    1eda:	e6 95       	lsr	r30
    1edc:	00 1c       	adc	r0, r0
    1ede:	ca f7       	brpl	.-14     	; 0x1ed2 <__divsf3_pse+0x2c>
    1ee0:	2b d0       	rcall	.+86     	; 0x1f38 <__divsf3_pse+0x92>
    1ee2:	fe 2f       	mov	r31, r30
    1ee4:	29 d0       	rcall	.+82     	; 0x1f38 <__divsf3_pse+0x92>
    1ee6:	66 0f       	add	r22, r22
    1ee8:	77 1f       	adc	r23, r23
    1eea:	88 1f       	adc	r24, r24
    1eec:	bb 1f       	adc	r27, r27
    1eee:	26 17       	cp	r18, r22
    1ef0:	37 07       	cpc	r19, r23
    1ef2:	48 07       	cpc	r20, r24
    1ef4:	ab 07       	cpc	r26, r27
    1ef6:	b0 e8       	ldi	r27, 0x80	; 128
    1ef8:	09 f0       	breq	.+2      	; 0x1efc <__divsf3_pse+0x56>
    1efa:	bb 0b       	sbc	r27, r27
    1efc:	80 2d       	mov	r24, r0
    1efe:	bf 01       	movw	r22, r30
    1f00:	ff 27       	eor	r31, r31
    1f02:	93 58       	subi	r25, 0x83	; 131
    1f04:	5f 4f       	sbci	r21, 0xFF	; 255
    1f06:	3a f0       	brmi	.+14     	; 0x1f16 <__divsf3_pse+0x70>
    1f08:	9e 3f       	cpi	r25, 0xFE	; 254
    1f0a:	51 05       	cpc	r21, r1
    1f0c:	78 f0       	brcs	.+30     	; 0x1f2c <__divsf3_pse+0x86>
    1f0e:	0c 94 45 10 	jmp	0x208a	; 0x208a <__fp_inf>
    1f12:	0c 94 f6 10 	jmp	0x21ec	; 0x21ec <__fp_szero>
    1f16:	5f 3f       	cpi	r21, 0xFF	; 255
    1f18:	e4 f3       	brlt	.-8      	; 0x1f12 <__divsf3_pse+0x6c>
    1f1a:	98 3e       	cpi	r25, 0xE8	; 232
    1f1c:	d4 f3       	brlt	.-12     	; 0x1f12 <__divsf3_pse+0x6c>
    1f1e:	86 95       	lsr	r24
    1f20:	77 95       	ror	r23
    1f22:	67 95       	ror	r22
    1f24:	b7 95       	ror	r27
    1f26:	f7 95       	ror	r31
    1f28:	9f 5f       	subi	r25, 0xFF	; 255
    1f2a:	c9 f7       	brne	.-14     	; 0x1f1e <__divsf3_pse+0x78>
    1f2c:	88 0f       	add	r24, r24
    1f2e:	91 1d       	adc	r25, r1
    1f30:	96 95       	lsr	r25
    1f32:	87 95       	ror	r24
    1f34:	97 f9       	bld	r25, 7
    1f36:	08 95       	ret
    1f38:	e1 e0       	ldi	r30, 0x01	; 1
    1f3a:	66 0f       	add	r22, r22
    1f3c:	77 1f       	adc	r23, r23
    1f3e:	88 1f       	adc	r24, r24
    1f40:	bb 1f       	adc	r27, r27
    1f42:	62 17       	cp	r22, r18
    1f44:	73 07       	cpc	r23, r19
    1f46:	84 07       	cpc	r24, r20
    1f48:	ba 07       	cpc	r27, r26
    1f4a:	20 f0       	brcs	.+8      	; 0x1f54 <__divsf3_pse+0xae>
    1f4c:	62 1b       	sub	r22, r18
    1f4e:	73 0b       	sbc	r23, r19
    1f50:	84 0b       	sbc	r24, r20
    1f52:	ba 0b       	sbc	r27, r26
    1f54:	ee 1f       	adc	r30, r30
    1f56:	88 f7       	brcc	.-30     	; 0x1f3a <__divsf3_pse+0x94>
    1f58:	e0 95       	com	r30
    1f5a:	08 95       	ret

00001f5c <__fixsfsi>:
    1f5c:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <__fixunssfsi>
    1f60:	68 94       	set
    1f62:	b1 11       	cpse	r27, r1
    1f64:	0c 94 f6 10 	jmp	0x21ec	; 0x21ec <__fp_szero>
    1f68:	08 95       	ret

00001f6a <__fixunssfsi>:
    1f6a:	0e 94 db 10 	call	0x21b6	; 0x21b6 <__fp_splitA>
    1f6e:	88 f0       	brcs	.+34     	; 0x1f92 <__fixunssfsi+0x28>
    1f70:	9f 57       	subi	r25, 0x7F	; 127
    1f72:	98 f0       	brcs	.+38     	; 0x1f9a <__fixunssfsi+0x30>
    1f74:	b9 2f       	mov	r27, r25
    1f76:	99 27       	eor	r25, r25
    1f78:	b7 51       	subi	r27, 0x17	; 23
    1f7a:	b0 f0       	brcs	.+44     	; 0x1fa8 <__fixunssfsi+0x3e>
    1f7c:	e1 f0       	breq	.+56     	; 0x1fb6 <__fixunssfsi+0x4c>
    1f7e:	66 0f       	add	r22, r22
    1f80:	77 1f       	adc	r23, r23
    1f82:	88 1f       	adc	r24, r24
    1f84:	99 1f       	adc	r25, r25
    1f86:	1a f0       	brmi	.+6      	; 0x1f8e <__fixunssfsi+0x24>
    1f88:	ba 95       	dec	r27
    1f8a:	c9 f7       	brne	.-14     	; 0x1f7e <__fixunssfsi+0x14>
    1f8c:	14 c0       	rjmp	.+40     	; 0x1fb6 <__fixunssfsi+0x4c>
    1f8e:	b1 30       	cpi	r27, 0x01	; 1
    1f90:	91 f0       	breq	.+36     	; 0x1fb6 <__fixunssfsi+0x4c>
    1f92:	0e 94 f5 10 	call	0x21ea	; 0x21ea <__fp_zero>
    1f96:	b1 e0       	ldi	r27, 0x01	; 1
    1f98:	08 95       	ret
    1f9a:	0c 94 f5 10 	jmp	0x21ea	; 0x21ea <__fp_zero>
    1f9e:	67 2f       	mov	r22, r23
    1fa0:	78 2f       	mov	r23, r24
    1fa2:	88 27       	eor	r24, r24
    1fa4:	b8 5f       	subi	r27, 0xF8	; 248
    1fa6:	39 f0       	breq	.+14     	; 0x1fb6 <__fixunssfsi+0x4c>
    1fa8:	b9 3f       	cpi	r27, 0xF9	; 249
    1faa:	cc f3       	brlt	.-14     	; 0x1f9e <__fixunssfsi+0x34>
    1fac:	86 95       	lsr	r24
    1fae:	77 95       	ror	r23
    1fb0:	67 95       	ror	r22
    1fb2:	b3 95       	inc	r27
    1fb4:	d9 f7       	brne	.-10     	; 0x1fac <__fixunssfsi+0x42>
    1fb6:	3e f4       	brtc	.+14     	; 0x1fc6 <__fixunssfsi+0x5c>
    1fb8:	90 95       	com	r25
    1fba:	80 95       	com	r24
    1fbc:	70 95       	com	r23
    1fbe:	61 95       	neg	r22
    1fc0:	7f 4f       	sbci	r23, 0xFF	; 255
    1fc2:	8f 4f       	sbci	r24, 0xFF	; 255
    1fc4:	9f 4f       	sbci	r25, 0xFF	; 255
    1fc6:	08 95       	ret

00001fc8 <__floatunsisf>:
    1fc8:	e8 94       	clt
    1fca:	09 c0       	rjmp	.+18     	; 0x1fde <__floatsisf+0x12>

00001fcc <__floatsisf>:
    1fcc:	97 fb       	bst	r25, 7
    1fce:	3e f4       	brtc	.+14     	; 0x1fde <__floatsisf+0x12>
    1fd0:	90 95       	com	r25
    1fd2:	80 95       	com	r24
    1fd4:	70 95       	com	r23
    1fd6:	61 95       	neg	r22
    1fd8:	7f 4f       	sbci	r23, 0xFF	; 255
    1fda:	8f 4f       	sbci	r24, 0xFF	; 255
    1fdc:	9f 4f       	sbci	r25, 0xFF	; 255
    1fde:	99 23       	and	r25, r25
    1fe0:	a9 f0       	breq	.+42     	; 0x200c <__floatsisf+0x40>
    1fe2:	f9 2f       	mov	r31, r25
    1fe4:	96 e9       	ldi	r25, 0x96	; 150
    1fe6:	bb 27       	eor	r27, r27
    1fe8:	93 95       	inc	r25
    1fea:	f6 95       	lsr	r31
    1fec:	87 95       	ror	r24
    1fee:	77 95       	ror	r23
    1ff0:	67 95       	ror	r22
    1ff2:	b7 95       	ror	r27
    1ff4:	f1 11       	cpse	r31, r1
    1ff6:	f8 cf       	rjmp	.-16     	; 0x1fe8 <__floatsisf+0x1c>
    1ff8:	fa f4       	brpl	.+62     	; 0x2038 <__floatsisf+0x6c>
    1ffa:	bb 0f       	add	r27, r27
    1ffc:	11 f4       	brne	.+4      	; 0x2002 <__floatsisf+0x36>
    1ffe:	60 ff       	sbrs	r22, 0
    2000:	1b c0       	rjmp	.+54     	; 0x2038 <__floatsisf+0x6c>
    2002:	6f 5f       	subi	r22, 0xFF	; 255
    2004:	7f 4f       	sbci	r23, 0xFF	; 255
    2006:	8f 4f       	sbci	r24, 0xFF	; 255
    2008:	9f 4f       	sbci	r25, 0xFF	; 255
    200a:	16 c0       	rjmp	.+44     	; 0x2038 <__floatsisf+0x6c>
    200c:	88 23       	and	r24, r24
    200e:	11 f0       	breq	.+4      	; 0x2014 <__floatsisf+0x48>
    2010:	96 e9       	ldi	r25, 0x96	; 150
    2012:	11 c0       	rjmp	.+34     	; 0x2036 <__floatsisf+0x6a>
    2014:	77 23       	and	r23, r23
    2016:	21 f0       	breq	.+8      	; 0x2020 <__floatsisf+0x54>
    2018:	9e e8       	ldi	r25, 0x8E	; 142
    201a:	87 2f       	mov	r24, r23
    201c:	76 2f       	mov	r23, r22
    201e:	05 c0       	rjmp	.+10     	; 0x202a <__floatsisf+0x5e>
    2020:	66 23       	and	r22, r22
    2022:	71 f0       	breq	.+28     	; 0x2040 <__floatsisf+0x74>
    2024:	96 e8       	ldi	r25, 0x86	; 134
    2026:	86 2f       	mov	r24, r22
    2028:	70 e0       	ldi	r23, 0x00	; 0
    202a:	60 e0       	ldi	r22, 0x00	; 0
    202c:	2a f0       	brmi	.+10     	; 0x2038 <__floatsisf+0x6c>
    202e:	9a 95       	dec	r25
    2030:	66 0f       	add	r22, r22
    2032:	77 1f       	adc	r23, r23
    2034:	88 1f       	adc	r24, r24
    2036:	da f7       	brpl	.-10     	; 0x202e <__floatsisf+0x62>
    2038:	88 0f       	add	r24, r24
    203a:	96 95       	lsr	r25
    203c:	87 95       	ror	r24
    203e:	97 f9       	bld	r25, 7
    2040:	08 95       	ret

00002042 <__fp_cmp>:
    2042:	99 0f       	add	r25, r25
    2044:	00 08       	sbc	r0, r0
    2046:	55 0f       	add	r21, r21
    2048:	aa 0b       	sbc	r26, r26
    204a:	e0 e8       	ldi	r30, 0x80	; 128
    204c:	fe ef       	ldi	r31, 0xFE	; 254
    204e:	16 16       	cp	r1, r22
    2050:	17 06       	cpc	r1, r23
    2052:	e8 07       	cpc	r30, r24
    2054:	f9 07       	cpc	r31, r25
    2056:	c0 f0       	brcs	.+48     	; 0x2088 <__fp_cmp+0x46>
    2058:	12 16       	cp	r1, r18
    205a:	13 06       	cpc	r1, r19
    205c:	e4 07       	cpc	r30, r20
    205e:	f5 07       	cpc	r31, r21
    2060:	98 f0       	brcs	.+38     	; 0x2088 <__fp_cmp+0x46>
    2062:	62 1b       	sub	r22, r18
    2064:	73 0b       	sbc	r23, r19
    2066:	84 0b       	sbc	r24, r20
    2068:	95 0b       	sbc	r25, r21
    206a:	39 f4       	brne	.+14     	; 0x207a <__fp_cmp+0x38>
    206c:	0a 26       	eor	r0, r26
    206e:	61 f0       	breq	.+24     	; 0x2088 <__fp_cmp+0x46>
    2070:	23 2b       	or	r18, r19
    2072:	24 2b       	or	r18, r20
    2074:	25 2b       	or	r18, r21
    2076:	21 f4       	brne	.+8      	; 0x2080 <__fp_cmp+0x3e>
    2078:	08 95       	ret
    207a:	0a 26       	eor	r0, r26
    207c:	09 f4       	brne	.+2      	; 0x2080 <__fp_cmp+0x3e>
    207e:	a1 40       	sbci	r26, 0x01	; 1
    2080:	a6 95       	lsr	r26
    2082:	8f ef       	ldi	r24, 0xFF	; 255
    2084:	81 1d       	adc	r24, r1
    2086:	81 1d       	adc	r24, r1
    2088:	08 95       	ret

0000208a <__fp_inf>:
    208a:	97 f9       	bld	r25, 7
    208c:	9f 67       	ori	r25, 0x7F	; 127
    208e:	80 e8       	ldi	r24, 0x80	; 128
    2090:	70 e0       	ldi	r23, 0x00	; 0
    2092:	60 e0       	ldi	r22, 0x00	; 0
    2094:	08 95       	ret

00002096 <__fp_nan>:
    2096:	9f ef       	ldi	r25, 0xFF	; 255
    2098:	80 ec       	ldi	r24, 0xC0	; 192
    209a:	08 95       	ret

0000209c <__fp_powser>:
    209c:	df 93       	push	r29
    209e:	cf 93       	push	r28
    20a0:	1f 93       	push	r17
    20a2:	0f 93       	push	r16
    20a4:	ff 92       	push	r15
    20a6:	ef 92       	push	r14
    20a8:	df 92       	push	r13
    20aa:	7b 01       	movw	r14, r22
    20ac:	8c 01       	movw	r16, r24
    20ae:	68 94       	set
    20b0:	06 c0       	rjmp	.+12     	; 0x20be <__fp_powser+0x22>
    20b2:	da 2e       	mov	r13, r26
    20b4:	ef 01       	movw	r28, r30
    20b6:	0e 94 1c 11 	call	0x2238	; 0x2238 <__mulsf3x>
    20ba:	fe 01       	movw	r30, r28
    20bc:	e8 94       	clt
    20be:	a5 91       	lpm	r26, Z+
    20c0:	25 91       	lpm	r18, Z+
    20c2:	35 91       	lpm	r19, Z+
    20c4:	45 91       	lpm	r20, Z+
    20c6:	55 91       	lpm	r21, Z+
    20c8:	a6 f3       	brts	.-24     	; 0x20b2 <__fp_powser+0x16>
    20ca:	ef 01       	movw	r28, r30
    20cc:	0e 94 6b 0e 	call	0x1cd6	; 0x1cd6 <__addsf3x>
    20d0:	fe 01       	movw	r30, r28
    20d2:	97 01       	movw	r18, r14
    20d4:	a8 01       	movw	r20, r16
    20d6:	da 94       	dec	r13
    20d8:	69 f7       	brne	.-38     	; 0x20b4 <__fp_powser+0x18>
    20da:	df 90       	pop	r13
    20dc:	ef 90       	pop	r14
    20de:	ff 90       	pop	r15
    20e0:	0f 91       	pop	r16
    20e2:	1f 91       	pop	r17
    20e4:	cf 91       	pop	r28
    20e6:	df 91       	pop	r29
    20e8:	08 95       	ret

000020ea <__fp_pscA>:
    20ea:	00 24       	eor	r0, r0
    20ec:	0a 94       	dec	r0
    20ee:	16 16       	cp	r1, r22
    20f0:	17 06       	cpc	r1, r23
    20f2:	18 06       	cpc	r1, r24
    20f4:	09 06       	cpc	r0, r25
    20f6:	08 95       	ret

000020f8 <__fp_pscB>:
    20f8:	00 24       	eor	r0, r0
    20fa:	0a 94       	dec	r0
    20fc:	12 16       	cp	r1, r18
    20fe:	13 06       	cpc	r1, r19
    2100:	14 06       	cpc	r1, r20
    2102:	05 06       	cpc	r0, r21
    2104:	08 95       	ret
    2106:	0c 94 4b 10 	jmp	0x2096	; 0x2096 <__fp_nan>

0000210a <__fp_rempio2>:
    210a:	0e 94 db 10 	call	0x21b6	; 0x21b6 <__fp_splitA>
    210e:	d8 f3       	brcs	.-10     	; 0x2106 <__fp_pscB+0xe>
    2110:	e8 94       	clt
    2112:	e0 e0       	ldi	r30, 0x00	; 0
    2114:	bb 27       	eor	r27, r27
    2116:	9f 57       	subi	r25, 0x7F	; 127
    2118:	f0 f0       	brcs	.+60     	; 0x2156 <__fp_rempio2+0x4c>
    211a:	2a ed       	ldi	r18, 0xDA	; 218
    211c:	3f e0       	ldi	r19, 0x0F	; 15
    211e:	49 ec       	ldi	r20, 0xC9	; 201
    2120:	06 c0       	rjmp	.+12     	; 0x212e <__fp_rempio2+0x24>
    2122:	ee 0f       	add	r30, r30
    2124:	bb 0f       	add	r27, r27
    2126:	66 1f       	adc	r22, r22
    2128:	77 1f       	adc	r23, r23
    212a:	88 1f       	adc	r24, r24
    212c:	28 f0       	brcs	.+10     	; 0x2138 <__fp_rempio2+0x2e>
    212e:	b2 3a       	cpi	r27, 0xA2	; 162
    2130:	62 07       	cpc	r22, r18
    2132:	73 07       	cpc	r23, r19
    2134:	84 07       	cpc	r24, r20
    2136:	28 f0       	brcs	.+10     	; 0x2142 <__fp_rempio2+0x38>
    2138:	b2 5a       	subi	r27, 0xA2	; 162
    213a:	62 0b       	sbc	r22, r18
    213c:	73 0b       	sbc	r23, r19
    213e:	84 0b       	sbc	r24, r20
    2140:	e3 95       	inc	r30
    2142:	9a 95       	dec	r25
    2144:	72 f7       	brpl	.-36     	; 0x2122 <__fp_rempio2+0x18>
    2146:	80 38       	cpi	r24, 0x80	; 128
    2148:	30 f4       	brcc	.+12     	; 0x2156 <__fp_rempio2+0x4c>
    214a:	9a 95       	dec	r25
    214c:	bb 0f       	add	r27, r27
    214e:	66 1f       	adc	r22, r22
    2150:	77 1f       	adc	r23, r23
    2152:	88 1f       	adc	r24, r24
    2154:	d2 f7       	brpl	.-12     	; 0x214a <__fp_rempio2+0x40>
    2156:	90 48       	sbci	r25, 0x80	; 128
    2158:	0c 94 0e 12 	jmp	0x241c	; 0x241c <__fp_mpack_finite>

0000215c <__fp_round>:
    215c:	09 2e       	mov	r0, r25
    215e:	03 94       	inc	r0
    2160:	00 0c       	add	r0, r0
    2162:	11 f4       	brne	.+4      	; 0x2168 <__fp_round+0xc>
    2164:	88 23       	and	r24, r24
    2166:	52 f0       	brmi	.+20     	; 0x217c <__fp_round+0x20>
    2168:	bb 0f       	add	r27, r27
    216a:	40 f4       	brcc	.+16     	; 0x217c <__fp_round+0x20>
    216c:	bf 2b       	or	r27, r31
    216e:	11 f4       	brne	.+4      	; 0x2174 <__fp_round+0x18>
    2170:	60 ff       	sbrs	r22, 0
    2172:	04 c0       	rjmp	.+8      	; 0x217c <__fp_round+0x20>
    2174:	6f 5f       	subi	r22, 0xFF	; 255
    2176:	7f 4f       	sbci	r23, 0xFF	; 255
    2178:	8f 4f       	sbci	r24, 0xFF	; 255
    217a:	9f 4f       	sbci	r25, 0xFF	; 255
    217c:	08 95       	ret

0000217e <__fp_sinus>:
    217e:	ef 93       	push	r30
    2180:	e0 ff       	sbrs	r30, 0
    2182:	07 c0       	rjmp	.+14     	; 0x2192 <__fp_sinus+0x14>
    2184:	a2 ea       	ldi	r26, 0xA2	; 162
    2186:	2a ed       	ldi	r18, 0xDA	; 218
    2188:	3f e0       	ldi	r19, 0x0F	; 15
    218a:	49 ec       	ldi	r20, 0xC9	; 201
    218c:	5f eb       	ldi	r21, 0xBF	; 191
    218e:	0e 94 6b 0e 	call	0x1cd6	; 0x1cd6 <__addsf3x>
    2192:	0e 94 ae 10 	call	0x215c	; 0x215c <__fp_round>
    2196:	0f 90       	pop	r0
    2198:	03 94       	inc	r0
    219a:	01 fc       	sbrc	r0, 1
    219c:	90 58       	subi	r25, 0x80	; 128
    219e:	e9 ed       	ldi	r30, 0xD9	; 217
    21a0:	f0 e0       	ldi	r31, 0x00	; 0
    21a2:	0c 94 1a 12 	jmp	0x2434	; 0x2434 <__fp_powsodd>

000021a6 <__fp_split3>:
    21a6:	57 fd       	sbrc	r21, 7
    21a8:	90 58       	subi	r25, 0x80	; 128
    21aa:	44 0f       	add	r20, r20
    21ac:	55 1f       	adc	r21, r21
    21ae:	59 f0       	breq	.+22     	; 0x21c6 <__fp_splitA+0x10>
    21b0:	5f 3f       	cpi	r21, 0xFF	; 255
    21b2:	71 f0       	breq	.+28     	; 0x21d0 <__fp_splitA+0x1a>
    21b4:	47 95       	ror	r20

000021b6 <__fp_splitA>:
    21b6:	88 0f       	add	r24, r24
    21b8:	97 fb       	bst	r25, 7
    21ba:	99 1f       	adc	r25, r25
    21bc:	61 f0       	breq	.+24     	; 0x21d6 <__fp_splitA+0x20>
    21be:	9f 3f       	cpi	r25, 0xFF	; 255
    21c0:	79 f0       	breq	.+30     	; 0x21e0 <__fp_splitA+0x2a>
    21c2:	87 95       	ror	r24
    21c4:	08 95       	ret
    21c6:	12 16       	cp	r1, r18
    21c8:	13 06       	cpc	r1, r19
    21ca:	14 06       	cpc	r1, r20
    21cc:	55 1f       	adc	r21, r21
    21ce:	f2 cf       	rjmp	.-28     	; 0x21b4 <__fp_split3+0xe>
    21d0:	46 95       	lsr	r20
    21d2:	f1 df       	rcall	.-30     	; 0x21b6 <__fp_splitA>
    21d4:	08 c0       	rjmp	.+16     	; 0x21e6 <__fp_splitA+0x30>
    21d6:	16 16       	cp	r1, r22
    21d8:	17 06       	cpc	r1, r23
    21da:	18 06       	cpc	r1, r24
    21dc:	99 1f       	adc	r25, r25
    21de:	f1 cf       	rjmp	.-30     	; 0x21c2 <__fp_splitA+0xc>
    21e0:	86 95       	lsr	r24
    21e2:	71 05       	cpc	r23, r1
    21e4:	61 05       	cpc	r22, r1
    21e6:	08 94       	sec
    21e8:	08 95       	ret

000021ea <__fp_zero>:
    21ea:	e8 94       	clt

000021ec <__fp_szero>:
    21ec:	bb 27       	eor	r27, r27
    21ee:	66 27       	eor	r22, r22
    21f0:	77 27       	eor	r23, r23
    21f2:	cb 01       	movw	r24, r22
    21f4:	97 f9       	bld	r25, 7
    21f6:	08 95       	ret

000021f8 <__gesf2>:
    21f8:	0e 94 21 10 	call	0x2042	; 0x2042 <__fp_cmp>
    21fc:	08 f4       	brcc	.+2      	; 0x2200 <__gesf2+0x8>
    21fe:	8f ef       	ldi	r24, 0xFF	; 255
    2200:	08 95       	ret

00002202 <inverse>:
    2202:	9b 01       	movw	r18, r22
    2204:	ac 01       	movw	r20, r24
    2206:	60 e0       	ldi	r22, 0x00	; 0
    2208:	70 e0       	ldi	r23, 0x00	; 0
    220a:	80 e8       	ldi	r24, 0x80	; 128
    220c:	9f e3       	ldi	r25, 0x3F	; 63
    220e:	0c 94 3c 0f 	jmp	0x1e78	; 0x1e78 <__divsf3>

00002212 <__mulsf3>:
    2212:	0e 94 1c 11 	call	0x2238	; 0x2238 <__mulsf3x>
    2216:	0c 94 ae 10 	jmp	0x215c	; 0x215c <__fp_round>
    221a:	0e 94 75 10 	call	0x20ea	; 0x20ea <__fp_pscA>
    221e:	38 f0       	brcs	.+14     	; 0x222e <__mulsf3+0x1c>
    2220:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <__fp_pscB>
    2224:	20 f0       	brcs	.+8      	; 0x222e <__mulsf3+0x1c>
    2226:	95 23       	and	r25, r21
    2228:	11 f0       	breq	.+4      	; 0x222e <__mulsf3+0x1c>
    222a:	0c 94 45 10 	jmp	0x208a	; 0x208a <__fp_inf>
    222e:	0c 94 4b 10 	jmp	0x2096	; 0x2096 <__fp_nan>
    2232:	11 24       	eor	r1, r1
    2234:	0c 94 f6 10 	jmp	0x21ec	; 0x21ec <__fp_szero>

00002238 <__mulsf3x>:
    2238:	0e 94 d3 10 	call	0x21a6	; 0x21a6 <__fp_split3>
    223c:	70 f3       	brcs	.-36     	; 0x221a <__mulsf3+0x8>

0000223e <__mulsf3_pse>:
    223e:	95 9f       	mul	r25, r21
    2240:	c1 f3       	breq	.-16     	; 0x2232 <__mulsf3+0x20>
    2242:	95 0f       	add	r25, r21
    2244:	50 e0       	ldi	r21, 0x00	; 0
    2246:	55 1f       	adc	r21, r21
    2248:	62 9f       	mul	r22, r18
    224a:	f0 01       	movw	r30, r0
    224c:	72 9f       	mul	r23, r18
    224e:	bb 27       	eor	r27, r27
    2250:	f0 0d       	add	r31, r0
    2252:	b1 1d       	adc	r27, r1
    2254:	63 9f       	mul	r22, r19
    2256:	aa 27       	eor	r26, r26
    2258:	f0 0d       	add	r31, r0
    225a:	b1 1d       	adc	r27, r1
    225c:	aa 1f       	adc	r26, r26
    225e:	64 9f       	mul	r22, r20
    2260:	66 27       	eor	r22, r22
    2262:	b0 0d       	add	r27, r0
    2264:	a1 1d       	adc	r26, r1
    2266:	66 1f       	adc	r22, r22
    2268:	82 9f       	mul	r24, r18
    226a:	22 27       	eor	r18, r18
    226c:	b0 0d       	add	r27, r0
    226e:	a1 1d       	adc	r26, r1
    2270:	62 1f       	adc	r22, r18
    2272:	73 9f       	mul	r23, r19
    2274:	b0 0d       	add	r27, r0
    2276:	a1 1d       	adc	r26, r1
    2278:	62 1f       	adc	r22, r18
    227a:	83 9f       	mul	r24, r19
    227c:	a0 0d       	add	r26, r0
    227e:	61 1d       	adc	r22, r1
    2280:	22 1f       	adc	r18, r18
    2282:	74 9f       	mul	r23, r20
    2284:	33 27       	eor	r19, r19
    2286:	a0 0d       	add	r26, r0
    2288:	61 1d       	adc	r22, r1
    228a:	23 1f       	adc	r18, r19
    228c:	84 9f       	mul	r24, r20
    228e:	60 0d       	add	r22, r0
    2290:	21 1d       	adc	r18, r1
    2292:	82 2f       	mov	r24, r18
    2294:	76 2f       	mov	r23, r22
    2296:	6a 2f       	mov	r22, r26
    2298:	11 24       	eor	r1, r1
    229a:	9f 57       	subi	r25, 0x7F	; 127
    229c:	50 40       	sbci	r21, 0x00	; 0
    229e:	9a f0       	brmi	.+38     	; 0x22c6 <__mulsf3_pse+0x88>
    22a0:	f1 f0       	breq	.+60     	; 0x22de <__mulsf3_pse+0xa0>
    22a2:	88 23       	and	r24, r24
    22a4:	4a f0       	brmi	.+18     	; 0x22b8 <__mulsf3_pse+0x7a>
    22a6:	ee 0f       	add	r30, r30
    22a8:	ff 1f       	adc	r31, r31
    22aa:	bb 1f       	adc	r27, r27
    22ac:	66 1f       	adc	r22, r22
    22ae:	77 1f       	adc	r23, r23
    22b0:	88 1f       	adc	r24, r24
    22b2:	91 50       	subi	r25, 0x01	; 1
    22b4:	50 40       	sbci	r21, 0x00	; 0
    22b6:	a9 f7       	brne	.-22     	; 0x22a2 <__mulsf3_pse+0x64>
    22b8:	9e 3f       	cpi	r25, 0xFE	; 254
    22ba:	51 05       	cpc	r21, r1
    22bc:	80 f0       	brcs	.+32     	; 0x22de <__mulsf3_pse+0xa0>
    22be:	0c 94 45 10 	jmp	0x208a	; 0x208a <__fp_inf>
    22c2:	0c 94 f6 10 	jmp	0x21ec	; 0x21ec <__fp_szero>
    22c6:	5f 3f       	cpi	r21, 0xFF	; 255
    22c8:	e4 f3       	brlt	.-8      	; 0x22c2 <__mulsf3_pse+0x84>
    22ca:	98 3e       	cpi	r25, 0xE8	; 232
    22cc:	d4 f3       	brlt	.-12     	; 0x22c2 <__mulsf3_pse+0x84>
    22ce:	86 95       	lsr	r24
    22d0:	77 95       	ror	r23
    22d2:	67 95       	ror	r22
    22d4:	b7 95       	ror	r27
    22d6:	f7 95       	ror	r31
    22d8:	e7 95       	ror	r30
    22da:	9f 5f       	subi	r25, 0xFF	; 255
    22dc:	c1 f7       	brne	.-16     	; 0x22ce <__mulsf3_pse+0x90>
    22de:	fe 2b       	or	r31, r30
    22e0:	88 0f       	add	r24, r24
    22e2:	91 1d       	adc	r25, r1
    22e4:	96 95       	lsr	r25
    22e6:	87 95       	ror	r24
    22e8:	97 f9       	bld	r25, 7
    22ea:	08 95       	ret

000022ec <pow>:
    22ec:	fa 01       	movw	r30, r20
    22ee:	ee 0f       	add	r30, r30
    22f0:	ff 1f       	adc	r31, r31
    22f2:	30 96       	adiw	r30, 0x00	; 0
    22f4:	21 05       	cpc	r18, r1
    22f6:	31 05       	cpc	r19, r1
    22f8:	a1 f1       	breq	.+104    	; 0x2362 <pow+0x76>
    22fa:	61 15       	cp	r22, r1
    22fc:	71 05       	cpc	r23, r1
    22fe:	61 f4       	brne	.+24     	; 0x2318 <pow+0x2c>
    2300:	80 38       	cpi	r24, 0x80	; 128
    2302:	bf e3       	ldi	r27, 0x3F	; 63
    2304:	9b 07       	cpc	r25, r27
    2306:	49 f1       	breq	.+82     	; 0x235a <pow+0x6e>
    2308:	68 94       	set
    230a:	90 38       	cpi	r25, 0x80	; 128
    230c:	81 05       	cpc	r24, r1
    230e:	61 f0       	breq	.+24     	; 0x2328 <pow+0x3c>
    2310:	80 38       	cpi	r24, 0x80	; 128
    2312:	bf ef       	ldi	r27, 0xFF	; 255
    2314:	9b 07       	cpc	r25, r27
    2316:	41 f0       	breq	.+16     	; 0x2328 <pow+0x3c>
    2318:	99 23       	and	r25, r25
    231a:	4a f5       	brpl	.+82     	; 0x236e <pow+0x82>
    231c:	ff 3f       	cpi	r31, 0xFF	; 255
    231e:	e1 05       	cpc	r30, r1
    2320:	31 05       	cpc	r19, r1
    2322:	21 05       	cpc	r18, r1
    2324:	19 f1       	breq	.+70     	; 0x236c <pow+0x80>
    2326:	e8 94       	clt
    2328:	08 94       	sec
    232a:	e7 95       	ror	r30
    232c:	d9 01       	movw	r26, r18
    232e:	aa 23       	and	r26, r26
    2330:	29 f4       	brne	.+10     	; 0x233c <pow+0x50>
    2332:	ab 2f       	mov	r26, r27
    2334:	be 2f       	mov	r27, r30
    2336:	f8 5f       	subi	r31, 0xF8	; 248
    2338:	d0 f3       	brcs	.-12     	; 0x232e <pow+0x42>
    233a:	10 c0       	rjmp	.+32     	; 0x235c <pow+0x70>
    233c:	ff 5f       	subi	r31, 0xFF	; 255
    233e:	70 f4       	brcc	.+28     	; 0x235c <pow+0x70>
    2340:	a6 95       	lsr	r26
    2342:	e0 f7       	brcc	.-8      	; 0x233c <pow+0x50>
    2344:	f7 39       	cpi	r31, 0x97	; 151
    2346:	50 f0       	brcs	.+20     	; 0x235c <pow+0x70>
    2348:	19 f0       	breq	.+6      	; 0x2350 <pow+0x64>
    234a:	ff 3a       	cpi	r31, 0xAF	; 175
    234c:	38 f4       	brcc	.+14     	; 0x235c <pow+0x70>
    234e:	9f 77       	andi	r25, 0x7F	; 127
    2350:	9f 93       	push	r25
    2352:	0d d0       	rcall	.+26     	; 0x236e <pow+0x82>
    2354:	0f 90       	pop	r0
    2356:	07 fc       	sbrc	r0, 7
    2358:	90 58       	subi	r25, 0x80	; 128
    235a:	08 95       	ret
    235c:	46 f0       	brts	.+16     	; 0x236e <pow+0x82>
    235e:	0c 94 4b 10 	jmp	0x2096	; 0x2096 <__fp_nan>
    2362:	60 e0       	ldi	r22, 0x00	; 0
    2364:	70 e0       	ldi	r23, 0x00	; 0
    2366:	80 e8       	ldi	r24, 0x80	; 128
    2368:	9f e3       	ldi	r25, 0x3F	; 63
    236a:	08 95       	ret
    236c:	4f e7       	ldi	r20, 0x7F	; 127
    236e:	9f 77       	andi	r25, 0x7F	; 127
    2370:	5f 93       	push	r21
    2372:	4f 93       	push	r20
    2374:	3f 93       	push	r19
    2376:	2f 93       	push	r18
    2378:	0e 94 70 12 	call	0x24e0	; 0x24e0 <log>
    237c:	2f 91       	pop	r18
    237e:	3f 91       	pop	r19
    2380:	4f 91       	pop	r20
    2382:	5f 91       	pop	r21
    2384:	0e 94 09 11 	call	0x2212	; 0x2212 <__mulsf3>
    2388:	0c 94 da 11 	jmp	0x23b4	; 0x23b4 <exp>

0000238c <sin>:
    238c:	9f 93       	push	r25
    238e:	0e 94 85 10 	call	0x210a	; 0x210a <__fp_rempio2>
    2392:	0f 90       	pop	r0
    2394:	07 fc       	sbrc	r0, 7
    2396:	ee 5f       	subi	r30, 0xFE	; 254
    2398:	0c 94 bf 10 	jmp	0x217e	; 0x217e <__fp_sinus>

0000239c <square>:
    239c:	9b 01       	movw	r18, r22
    239e:	ac 01       	movw	r20, r24
    23a0:	0c 94 09 11 	jmp	0x2212	; 0x2212 <__mulsf3>
    23a4:	29 f4       	brne	.+10     	; 0x23b0 <square+0x14>
    23a6:	16 f0       	brts	.+4      	; 0x23ac <square+0x10>
    23a8:	0c 94 45 10 	jmp	0x208a	; 0x208a <__fp_inf>
    23ac:	0c 94 f5 10 	jmp	0x21ea	; 0x21ea <__fp_zero>
    23b0:	0c 94 4b 10 	jmp	0x2096	; 0x2096 <__fp_nan>

000023b4 <exp>:
    23b4:	0e 94 db 10 	call	0x21b6	; 0x21b6 <__fp_splitA>
    23b8:	a8 f3       	brcs	.-22     	; 0x23a4 <square+0x8>
    23ba:	96 38       	cpi	r25, 0x86	; 134
    23bc:	a0 f7       	brcc	.-24     	; 0x23a6 <square+0xa>
    23be:	07 f8       	bld	r0, 7
    23c0:	0f 92       	push	r0
    23c2:	e8 94       	clt
    23c4:	2b e3       	ldi	r18, 0x3B	; 59
    23c6:	3a ea       	ldi	r19, 0xAA	; 170
    23c8:	48 eb       	ldi	r20, 0xB8	; 184
    23ca:	5f e7       	ldi	r21, 0x7F	; 127
    23cc:	0e 94 1f 11 	call	0x223e	; 0x223e <__mulsf3_pse>
    23d0:	0f 92       	push	r0
    23d2:	0f 92       	push	r0
    23d4:	0f 92       	push	r0
    23d6:	4d b7       	in	r20, 0x3d	; 61
    23d8:	5e b7       	in	r21, 0x3e	; 62
    23da:	0f 92       	push	r0
    23dc:	0e 94 b8 12 	call	0x2570	; 0x2570 <modf>
    23e0:	e7 ef       	ldi	r30, 0xF7	; 247
    23e2:	f0 e0       	ldi	r31, 0x00	; 0
    23e4:	0e 94 4e 10 	call	0x209c	; 0x209c <__fp_powser>
    23e8:	4f 91       	pop	r20
    23ea:	5f 91       	pop	r21
    23ec:	ef 91       	pop	r30
    23ee:	ff 91       	pop	r31
    23f0:	e5 95       	asr	r30
    23f2:	ee 1f       	adc	r30, r30
    23f4:	ff 1f       	adc	r31, r31
    23f6:	49 f0       	breq	.+18     	; 0x240a <exp+0x56>
    23f8:	fe 57       	subi	r31, 0x7E	; 126
    23fa:	e0 68       	ori	r30, 0x80	; 128
    23fc:	44 27       	eor	r20, r20
    23fe:	ee 0f       	add	r30, r30
    2400:	44 1f       	adc	r20, r20
    2402:	fa 95       	dec	r31
    2404:	e1 f7       	brne	.-8      	; 0x23fe <exp+0x4a>
    2406:	41 95       	neg	r20
    2408:	55 0b       	sbc	r21, r21
    240a:	0e 94 32 12 	call	0x2464	; 0x2464 <ldexp>
    240e:	0f 90       	pop	r0
    2410:	07 fe       	sbrs	r0, 7
    2412:	0c 94 01 11 	jmp	0x2202	; 0x2202 <inverse>
    2416:	08 95       	ret

00002418 <__fp_mpack>:
    2418:	9f 3f       	cpi	r25, 0xFF	; 255
    241a:	31 f0       	breq	.+12     	; 0x2428 <__fp_mpack_finite+0xc>

0000241c <__fp_mpack_finite>:
    241c:	91 50       	subi	r25, 0x01	; 1
    241e:	20 f4       	brcc	.+8      	; 0x2428 <__fp_mpack_finite+0xc>
    2420:	87 95       	ror	r24
    2422:	77 95       	ror	r23
    2424:	67 95       	ror	r22
    2426:	b7 95       	ror	r27
    2428:	88 0f       	add	r24, r24
    242a:	91 1d       	adc	r25, r1
    242c:	96 95       	lsr	r25
    242e:	87 95       	ror	r24
    2430:	97 f9       	bld	r25, 7
    2432:	08 95       	ret

00002434 <__fp_powsodd>:
    2434:	9f 93       	push	r25
    2436:	8f 93       	push	r24
    2438:	7f 93       	push	r23
    243a:	6f 93       	push	r22
    243c:	ff 93       	push	r31
    243e:	ef 93       	push	r30
    2440:	9b 01       	movw	r18, r22
    2442:	ac 01       	movw	r20, r24
    2444:	0e 94 09 11 	call	0x2212	; 0x2212 <__mulsf3>
    2448:	ef 91       	pop	r30
    244a:	ff 91       	pop	r31
    244c:	0e 94 4e 10 	call	0x209c	; 0x209c <__fp_powser>
    2450:	2f 91       	pop	r18
    2452:	3f 91       	pop	r19
    2454:	4f 91       	pop	r20
    2456:	5f 91       	pop	r21
    2458:	0c 94 09 11 	jmp	0x2212	; 0x2212 <__mulsf3>
    245c:	0c 94 45 10 	jmp	0x208a	; 0x208a <__fp_inf>
    2460:	0c 94 0c 12 	jmp	0x2418	; 0x2418 <__fp_mpack>

00002464 <ldexp>:
    2464:	0e 94 db 10 	call	0x21b6	; 0x21b6 <__fp_splitA>
    2468:	d8 f3       	brcs	.-10     	; 0x2460 <__fp_powsodd+0x2c>
    246a:	99 23       	and	r25, r25
    246c:	c9 f3       	breq	.-14     	; 0x2460 <__fp_powsodd+0x2c>
    246e:	94 0f       	add	r25, r20
    2470:	51 1d       	adc	r21, r1
    2472:	a3 f3       	brvs	.-24     	; 0x245c <__fp_powsodd+0x28>
    2474:	91 50       	subi	r25, 0x01	; 1
    2476:	50 40       	sbci	r21, 0x00	; 0
    2478:	94 f0       	brlt	.+36     	; 0x249e <ldexp+0x3a>
    247a:	59 f0       	breq	.+22     	; 0x2492 <ldexp+0x2e>
    247c:	88 23       	and	r24, r24
    247e:	32 f0       	brmi	.+12     	; 0x248c <ldexp+0x28>
    2480:	66 0f       	add	r22, r22
    2482:	77 1f       	adc	r23, r23
    2484:	88 1f       	adc	r24, r24
    2486:	91 50       	subi	r25, 0x01	; 1
    2488:	50 40       	sbci	r21, 0x00	; 0
    248a:	c1 f7       	brne	.-16     	; 0x247c <ldexp+0x18>
    248c:	9e 3f       	cpi	r25, 0xFE	; 254
    248e:	51 05       	cpc	r21, r1
    2490:	2c f7       	brge	.-54     	; 0x245c <__fp_powsodd+0x28>
    2492:	88 0f       	add	r24, r24
    2494:	91 1d       	adc	r25, r1
    2496:	96 95       	lsr	r25
    2498:	87 95       	ror	r24
    249a:	97 f9       	bld	r25, 7
    249c:	08 95       	ret
    249e:	5f 3f       	cpi	r21, 0xFF	; 255
    24a0:	ac f0       	brlt	.+42     	; 0x24cc <ldexp+0x68>
    24a2:	98 3e       	cpi	r25, 0xE8	; 232
    24a4:	9c f0       	brlt	.+38     	; 0x24cc <ldexp+0x68>
    24a6:	bb 27       	eor	r27, r27
    24a8:	86 95       	lsr	r24
    24aa:	77 95       	ror	r23
    24ac:	67 95       	ror	r22
    24ae:	b7 95       	ror	r27
    24b0:	08 f4       	brcc	.+2      	; 0x24b4 <ldexp+0x50>
    24b2:	b1 60       	ori	r27, 0x01	; 1
    24b4:	93 95       	inc	r25
    24b6:	c1 f7       	brne	.-16     	; 0x24a8 <ldexp+0x44>
    24b8:	bb 0f       	add	r27, r27
    24ba:	58 f7       	brcc	.-42     	; 0x2492 <ldexp+0x2e>
    24bc:	11 f4       	brne	.+4      	; 0x24c2 <ldexp+0x5e>
    24be:	60 ff       	sbrs	r22, 0
    24c0:	e8 cf       	rjmp	.-48     	; 0x2492 <ldexp+0x2e>
    24c2:	6f 5f       	subi	r22, 0xFF	; 255
    24c4:	7f 4f       	sbci	r23, 0xFF	; 255
    24c6:	8f 4f       	sbci	r24, 0xFF	; 255
    24c8:	9f 4f       	sbci	r25, 0xFF	; 255
    24ca:	e3 cf       	rjmp	.-58     	; 0x2492 <ldexp+0x2e>
    24cc:	0c 94 f6 10 	jmp	0x21ec	; 0x21ec <__fp_szero>
    24d0:	16 f0       	brts	.+4      	; 0x24d6 <ldexp+0x72>
    24d2:	0c 94 0c 12 	jmp	0x2418	; 0x2418 <__fp_mpack>
    24d6:	0c 94 4b 10 	jmp	0x2096	; 0x2096 <__fp_nan>
    24da:	68 94       	set
    24dc:	0c 94 45 10 	jmp	0x208a	; 0x208a <__fp_inf>

000024e0 <log>:
    24e0:	0e 94 db 10 	call	0x21b6	; 0x21b6 <__fp_splitA>
    24e4:	a8 f3       	brcs	.-22     	; 0x24d0 <ldexp+0x6c>
    24e6:	99 23       	and	r25, r25
    24e8:	c1 f3       	breq	.-16     	; 0x24da <ldexp+0x76>
    24ea:	ae f3       	brts	.-22     	; 0x24d6 <ldexp+0x72>
    24ec:	df 93       	push	r29
    24ee:	cf 93       	push	r28
    24f0:	1f 93       	push	r17
    24f2:	0f 93       	push	r16
    24f4:	ff 92       	push	r15
    24f6:	c9 2f       	mov	r28, r25
    24f8:	dd 27       	eor	r29, r29
    24fa:	88 23       	and	r24, r24
    24fc:	2a f0       	brmi	.+10     	; 0x2508 <log+0x28>
    24fe:	21 97       	sbiw	r28, 0x01	; 1
    2500:	66 0f       	add	r22, r22
    2502:	77 1f       	adc	r23, r23
    2504:	88 1f       	adc	r24, r24
    2506:	da f7       	brpl	.-10     	; 0x24fe <log+0x1e>
    2508:	20 e0       	ldi	r18, 0x00	; 0
    250a:	30 e0       	ldi	r19, 0x00	; 0
    250c:	40 e8       	ldi	r20, 0x80	; 128
    250e:	5f eb       	ldi	r21, 0xBF	; 191
    2510:	9f e3       	ldi	r25, 0x3F	; 63
    2512:	88 39       	cpi	r24, 0x98	; 152
    2514:	20 f0       	brcs	.+8      	; 0x251e <log+0x3e>
    2516:	80 3e       	cpi	r24, 0xE0	; 224
    2518:	38 f0       	brcs	.+14     	; 0x2528 <log+0x48>
    251a:	21 96       	adiw	r28, 0x01	; 1
    251c:	8f 77       	andi	r24, 0x7F	; 127
    251e:	0e 94 54 0e 	call	0x1ca8	; 0x1ca8 <__addsf3>
    2522:	ef e1       	ldi	r30, 0x1F	; 31
    2524:	f1 e0       	ldi	r31, 0x01	; 1
    2526:	04 c0       	rjmp	.+8      	; 0x2530 <log+0x50>
    2528:	0e 94 54 0e 	call	0x1ca8	; 0x1ca8 <__addsf3>
    252c:	ec e4       	ldi	r30, 0x4C	; 76
    252e:	f1 e0       	ldi	r31, 0x01	; 1
    2530:	0e 94 4e 10 	call	0x209c	; 0x209c <__fp_powser>
    2534:	8b 01       	movw	r16, r22
    2536:	be 01       	movw	r22, r28
    2538:	ec 01       	movw	r28, r24
    253a:	fb 2e       	mov	r15, r27
    253c:	6f 57       	subi	r22, 0x7F	; 127
    253e:	71 09       	sbc	r23, r1
    2540:	75 95       	asr	r23
    2542:	77 1f       	adc	r23, r23
    2544:	88 0b       	sbc	r24, r24
    2546:	99 0b       	sbc	r25, r25
    2548:	0e 94 e6 0f 	call	0x1fcc	; 0x1fcc <__floatsisf>
    254c:	28 e1       	ldi	r18, 0x18	; 24
    254e:	32 e7       	ldi	r19, 0x72	; 114
    2550:	41 e3       	ldi	r20, 0x31	; 49
    2552:	5f e3       	ldi	r21, 0x3F	; 63
    2554:	0e 94 1c 11 	call	0x2238	; 0x2238 <__mulsf3x>
    2558:	af 2d       	mov	r26, r15
    255a:	98 01       	movw	r18, r16
    255c:	ae 01       	movw	r20, r28
    255e:	ff 90       	pop	r15
    2560:	0f 91       	pop	r16
    2562:	1f 91       	pop	r17
    2564:	cf 91       	pop	r28
    2566:	df 91       	pop	r29
    2568:	0e 94 6b 0e 	call	0x1cd6	; 0x1cd6 <__addsf3x>
    256c:	0c 94 ae 10 	jmp	0x215c	; 0x215c <__fp_round>

00002570 <modf>:
    2570:	fa 01       	movw	r30, r20
    2572:	dc 01       	movw	r26, r24
    2574:	aa 0f       	add	r26, r26
    2576:	bb 1f       	adc	r27, r27
    2578:	9b 01       	movw	r18, r22
    257a:	ac 01       	movw	r20, r24
    257c:	bf 57       	subi	r27, 0x7F	; 127
    257e:	28 f4       	brcc	.+10     	; 0x258a <modf+0x1a>
    2580:	22 27       	eor	r18, r18
    2582:	33 27       	eor	r19, r19
    2584:	44 27       	eor	r20, r20
    2586:	50 78       	andi	r21, 0x80	; 128
    2588:	20 c0       	rjmp	.+64     	; 0x25ca <modf+0x5a>
    258a:	b7 51       	subi	r27, 0x17	; 23
    258c:	90 f4       	brcc	.+36     	; 0x25b2 <modf+0x42>
    258e:	ab 2f       	mov	r26, r27
    2590:	00 24       	eor	r0, r0
    2592:	46 95       	lsr	r20
    2594:	37 95       	ror	r19
    2596:	27 95       	ror	r18
    2598:	01 1c       	adc	r0, r1
    259a:	a3 95       	inc	r26
    259c:	d2 f3       	brmi	.-12     	; 0x2592 <modf+0x22>
    259e:	00 20       	and	r0, r0
    25a0:	71 f0       	breq	.+28     	; 0x25be <modf+0x4e>
    25a2:	22 0f       	add	r18, r18
    25a4:	33 1f       	adc	r19, r19
    25a6:	44 1f       	adc	r20, r20
    25a8:	b3 95       	inc	r27
    25aa:	da f3       	brmi	.-10     	; 0x25a2 <modf+0x32>
    25ac:	0e d0       	rcall	.+28     	; 0x25ca <modf+0x5a>
    25ae:	0c 94 53 0e 	jmp	0x1ca6	; 0x1ca6 <__subsf3>
    25b2:	61 30       	cpi	r22, 0x01	; 1
    25b4:	71 05       	cpc	r23, r1
    25b6:	a0 e8       	ldi	r26, 0x80	; 128
    25b8:	8a 07       	cpc	r24, r26
    25ba:	b9 46       	sbci	r27, 0x69	; 105
    25bc:	30 f4       	brcc	.+12     	; 0x25ca <modf+0x5a>
    25be:	9b 01       	movw	r18, r22
    25c0:	ac 01       	movw	r20, r24
    25c2:	66 27       	eor	r22, r22
    25c4:	77 27       	eor	r23, r23
    25c6:	88 27       	eor	r24, r24
    25c8:	90 78       	andi	r25, 0x80	; 128
    25ca:	30 96       	adiw	r30, 0x00	; 0
    25cc:	21 f0       	breq	.+8      	; 0x25d6 <modf+0x66>
    25ce:	20 83       	st	Z, r18
    25d0:	31 83       	std	Z+1, r19	; 0x01
    25d2:	42 83       	std	Z+2, r20	; 0x02
    25d4:	53 83       	std	Z+3, r21	; 0x03
    25d6:	08 95       	ret

000025d8 <__itoa_ncheck>:
    25d8:	bb 27       	eor	r27, r27
    25da:	4a 30       	cpi	r20, 0x0A	; 10
    25dc:	31 f4       	brne	.+12     	; 0x25ea <__itoa_ncheck+0x12>
    25de:	99 23       	and	r25, r25
    25e0:	22 f4       	brpl	.+8      	; 0x25ea <__itoa_ncheck+0x12>
    25e2:	bd e2       	ldi	r27, 0x2D	; 45
    25e4:	90 95       	com	r25
    25e6:	81 95       	neg	r24
    25e8:	9f 4f       	sbci	r25, 0xFF	; 255
    25ea:	0c 94 f8 12 	jmp	0x25f0	; 0x25f0 <__utoa_common>

000025ee <__utoa_ncheck>:
    25ee:	bb 27       	eor	r27, r27

000025f0 <__utoa_common>:
    25f0:	fb 01       	movw	r30, r22
    25f2:	55 27       	eor	r21, r21
    25f4:	aa 27       	eor	r26, r26
    25f6:	88 0f       	add	r24, r24
    25f8:	99 1f       	adc	r25, r25
    25fa:	aa 1f       	adc	r26, r26
    25fc:	a4 17       	cp	r26, r20
    25fe:	10 f0       	brcs	.+4      	; 0x2604 <__utoa_common+0x14>
    2600:	a4 1b       	sub	r26, r20
    2602:	83 95       	inc	r24
    2604:	50 51       	subi	r21, 0x10	; 16
    2606:	b9 f7       	brne	.-18     	; 0x25f6 <__utoa_common+0x6>
    2608:	a0 5d       	subi	r26, 0xD0	; 208
    260a:	aa 33       	cpi	r26, 0x3A	; 58
    260c:	08 f0       	brcs	.+2      	; 0x2610 <__utoa_common+0x20>
    260e:	a9 5d       	subi	r26, 0xD9	; 217
    2610:	a1 93       	st	Z+, r26
    2612:	00 97       	sbiw	r24, 0x00	; 0
    2614:	79 f7       	brne	.-34     	; 0x25f4 <__utoa_common+0x4>
    2616:	b1 11       	cpse	r27, r1
    2618:	b1 93       	st	Z+, r27
    261a:	11 92       	st	Z+, r1
    261c:	cb 01       	movw	r24, r22
    261e:	0c 94 11 13 	jmp	0x2622	; 0x2622 <strrev>

00002622 <strrev>:
    2622:	dc 01       	movw	r26, r24
    2624:	fc 01       	movw	r30, r24
    2626:	67 2f       	mov	r22, r23
    2628:	71 91       	ld	r23, Z+
    262a:	77 23       	and	r23, r23
    262c:	e1 f7       	brne	.-8      	; 0x2626 <strrev+0x4>
    262e:	32 97       	sbiw	r30, 0x02	; 2
    2630:	04 c0       	rjmp	.+8      	; 0x263a <strrev+0x18>
    2632:	7c 91       	ld	r23, X
    2634:	6d 93       	st	X+, r22
    2636:	70 83       	st	Z, r23
    2638:	62 91       	ld	r22, -Z
    263a:	ae 17       	cp	r26, r30
    263c:	bf 07       	cpc	r27, r31
    263e:	c8 f3       	brcs	.-14     	; 0x2632 <strrev+0x10>
    2640:	08 95       	ret

00002642 <_exit>:
    2642:	f8 94       	cli

00002644 <__stop_program>:
    2644:	ff cf       	rjmp	.-2      	; 0x2644 <__stop_program>
