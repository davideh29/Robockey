
LocalizationTest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  0000246e  00002502  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000246e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800108  00800108  0000250a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000250a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000253c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000210  00000000  00000000  0000257c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000323a  00000000  00000000  0000278c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001412  00000000  00000000  000059c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001dcc  00000000  00000000  00006dd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000650  00000000  00000000  00008ba4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000bc8  00000000  00000000  000091f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002dcc  00000000  00000000  00009dbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000250  00000000  00000000  0000cb88  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 67 01 	jmp	0x2ce	; 0x2ce <__ctors_end>
       4:	0c 94 84 01 	jmp	0x308	; 0x308 <__bad_interrupt>
       8:	0c 94 84 01 	jmp	0x308	; 0x308 <__bad_interrupt>
       c:	0c 94 84 01 	jmp	0x308	; 0x308 <__bad_interrupt>
      10:	0c 94 84 01 	jmp	0x308	; 0x308 <__bad_interrupt>
      14:	0c 94 84 01 	jmp	0x308	; 0x308 <__bad_interrupt>
      18:	0c 94 84 01 	jmp	0x308	; 0x308 <__bad_interrupt>
      1c:	0c 94 84 01 	jmp	0x308	; 0x308 <__bad_interrupt>
      20:	0c 94 84 01 	jmp	0x308	; 0x308 <__bad_interrupt>
      24:	0c 94 84 01 	jmp	0x308	; 0x308 <__bad_interrupt>
      28:	0c 94 b7 03 	jmp	0x76e	; 0x76e <__vector_10>
      2c:	0c 94 f5 03 	jmp	0x7ea	; 0x7ea <__vector_11>
      30:	0c 94 84 01 	jmp	0x308	; 0x308 <__bad_interrupt>
      34:	0c 94 84 01 	jmp	0x308	; 0x308 <__bad_interrupt>
      38:	0c 94 84 01 	jmp	0x308	; 0x308 <__bad_interrupt>
      3c:	0c 94 84 01 	jmp	0x308	; 0x308 <__bad_interrupt>
      40:	0c 94 84 01 	jmp	0x308	; 0x308 <__bad_interrupt>
      44:	0c 94 84 01 	jmp	0x308	; 0x308 <__bad_interrupt>
      48:	0c 94 84 01 	jmp	0x308	; 0x308 <__bad_interrupt>
      4c:	0c 94 84 01 	jmp	0x308	; 0x308 <__bad_interrupt>
      50:	0c 94 84 01 	jmp	0x308	; 0x308 <__bad_interrupt>
      54:	0c 94 84 01 	jmp	0x308	; 0x308 <__bad_interrupt>
      58:	0c 94 84 01 	jmp	0x308	; 0x308 <__bad_interrupt>
      5c:	0c 94 84 01 	jmp	0x308	; 0x308 <__bad_interrupt>
      60:	0c 94 84 01 	jmp	0x308	; 0x308 <__bad_interrupt>
      64:	0c 94 84 01 	jmp	0x308	; 0x308 <__bad_interrupt>
      68:	0c 94 84 01 	jmp	0x308	; 0x308 <__bad_interrupt>
      6c:	0c 94 84 01 	jmp	0x308	; 0x308 <__bad_interrupt>
      70:	0c 94 84 01 	jmp	0x308	; 0x308 <__bad_interrupt>
      74:	0c 94 84 01 	jmp	0x308	; 0x308 <__bad_interrupt>
      78:	0c 94 84 01 	jmp	0x308	; 0x308 <__bad_interrupt>
      7c:	0c 94 84 01 	jmp	0x308	; 0x308 <__bad_interrupt>
      80:	0c 94 84 01 	jmp	0x308	; 0x308 <__bad_interrupt>
      84:	0c 94 84 01 	jmp	0x308	; 0x308 <__bad_interrupt>
      88:	0c 94 84 01 	jmp	0x308	; 0x308 <__bad_interrupt>
      8c:	0c 94 84 01 	jmp	0x308	; 0x308 <__bad_interrupt>
      90:	0c 94 84 01 	jmp	0x308	; 0x308 <__bad_interrupt>
      94:	0c 94 84 01 	jmp	0x308	; 0x308 <__bad_interrupt>
      98:	0c 94 84 01 	jmp	0x308	; 0x308 <__bad_interrupt>
      9c:	0c 94 84 01 	jmp	0x308	; 0x308 <__bad_interrupt>
      a0:	0c 94 84 01 	jmp	0x308	; 0x308 <__bad_interrupt>
      a4:	0c 94 84 01 	jmp	0x308	; 0x308 <__bad_interrupt>
      a8:	0c 94 84 01 	jmp	0x308	; 0x308 <__bad_interrupt>
      ac:	08 4a       	sbci	r16, 0xA8	; 168
      ae:	d7 3b       	cpi	r29, 0xB7	; 183
      b0:	3b ce       	rjmp	.-906    	; 0xfffffd28 <__eeprom_end+0xff7efd28>
      b2:	01 6e       	ori	r16, 0xE1	; 225
      b4:	84 bc       	out	0x24, r8	; 36
      b6:	bf fd       	.word	0xfdbf	; ????
      b8:	c1 2f       	mov	r28, r17
      ba:	3d 6c       	ori	r19, 0xCD	; 205
      bc:	74 31       	cpi	r23, 0x14	; 20
      be:	9a bd       	out	0x2a, r25	; 42
      c0:	56 83       	std	Z+6, r21	; 0x06
      c2:	3d da       	rcall	.-2950   	; 0xfffff53e <__eeprom_end+0xff7ef53e>
      c4:	3d 00       	.word	0x003d	; ????
      c6:	c7 7f       	andi	r28, 0xF7	; 247
      c8:	11 be       	out	0x31, r1	; 49
      ca:	d9 e4       	ldi	r29, 0x49	; 73
      cc:	bb 4c       	sbci	r27, 0xCB	; 203
      ce:	3e 91       	ld	r19, -X
      d0:	6b aa       	std	Y+51, r6	; 0x33
      d2:	aa be       	out	0x3a, r10	; 58
      d4:	00 00       	nop
      d6:	00 80       	ld	r0, Z
      d8:	3f 05       	cpc	r19, r15
      da:	a8 4c       	sbci	r26, 0xC8	; 200
      dc:	cd b2       	in	r12, 0x1d	; 29
      de:	d4 4e       	sbci	r29, 0xE4	; 228
      e0:	b9 38       	cpi	r27, 0x89	; 137
      e2:	36 a9       	ldd	r19, Z+54	; 0x36
      e4:	02 0c       	add	r0, r2
      e6:	50 b9       	out	0x00, r21	; 0
      e8:	91 86       	std	Z+9, r9	; 0x09
      ea:	88 08       	sbc	r8, r8
      ec:	3c a6       	std	Y+44, r3	; 0x2c
      ee:	aa aa       	std	Y+50, r10	; 0x32
      f0:	2a be       	out	0x3a, r2	; 58
      f2:	00 00       	nop
      f4:	00 80       	ld	r0, Z
      f6:	3f 07       	cpc	r19, r31
      f8:	63 42       	sbci	r22, 0x23	; 35
      fa:	36 b7       	in	r19, 0x36	; 54
      fc:	9b d8       	rcall	.-3786   	; 0xfffff234 <__eeprom_end+0xff7ef234>
      fe:	a7 1a       	sub	r10, r23
     100:	39 68       	ori	r19, 0x89	; 137
     102:	56 18       	sub	r5, r6
     104:	ae ba       	out	0x1e, r10	; 30
     106:	ab 55       	subi	r26, 0x5B	; 91
     108:	8c 1d       	adc	r24, r12
     10a:	3c b7       	in	r19, 0x3c	; 60
     10c:	cc 57       	subi	r28, 0x7C	; 124
     10e:	63 bd       	out	0x23, r22	; 35
     110:	6d ed       	ldi	r22, 0xDD	; 221
     112:	fd 75       	andi	r31, 0x5D	; 93
     114:	3e f6       	brtc	.-114    	; 0xa4 <__SREG__+0x65>
     116:	17 72       	andi	r17, 0x27	; 39
     118:	31 bf       	out	0x31, r19	; 49
     11a:	00 00       	nop
     11c:	00 80       	ld	r0, Z
     11e:	3f 08       	sbc	r3, r15
     120:	00 00       	nop
     122:	00 be       	out	0x30, r0	; 48
     124:	92 24       	eor	r9, r2
     126:	49 12       	cpse	r4, r25
     128:	3e ab       	std	Y+54, r19	; 0x36
     12a:	aa aa       	std	Y+50, r10	; 0x32
     12c:	2a be       	out	0x3a, r2	; 58
     12e:	cd cc       	rjmp	.-1638   	; 0xfffffaca <__eeprom_end+0xff7efaca>
     130:	cc 4c       	sbci	r28, 0xCC	; 204
     132:	3e 00       	.word	0x003e	; ????
     134:	00 00       	nop
     136:	80 be       	out	0x30, r8	; 48
     138:	ab aa       	std	Y+51, r10	; 0x33
     13a:	aa aa       	std	Y+50, r10	; 0x32
     13c:	3e 00       	.word	0x003e	; ????
     13e:	00 00       	nop
     140:	00 bf       	out	0x30, r16	; 48
     142:	00 00       	nop
     144:	00 80       	ld	r0, Z
     146:	3f 00       	.word	0x003f	; ????
     148:	00 00       	nop
     14a:	00 00       	nop
     14c:	08 41       	sbci	r16, 0x18	; 24
     14e:	78 d3       	rcall	.+1776   	; 0x840 <__vector_11+0x56>
     150:	bb 43       	sbci	r27, 0x3B	; 59
     152:	87 d1       	rcall	.+782    	; 0x462 <motor_init+0x26>
     154:	13 3d       	cpi	r17, 0xD3	; 211
     156:	19 0e       	add	r1, r25
     158:	3c c3       	rjmp	.+1656   	; 0x7d2 <__vector_10+0x64>
     15a:	bd 42       	sbci	r27, 0x2D	; 45
     15c:	82 ad       	ldd	r24, Z+58	; 0x3a
     15e:	2b 3e       	cpi	r18, 0xEB	; 235
     160:	68 ec       	ldi	r22, 0xC8	; 200
     162:	82 76       	andi	r24, 0x62	; 98
     164:	be d9       	rcall	.-3204   	; 0xfffff4e2 <__eeprom_end+0xff7ef4e2>
     166:	8f e1       	ldi	r24, 0x1F	; 31
     168:	a9 3e       	cpi	r26, 0xE9	; 233
     16a:	4c 80       	ldd	r4, Y+4	; 0x04
     16c:	ef ff       	.word	0xffef	; ????
     16e:	be 01       	movw	r22, r28
     170:	c4 ff       	sbrs	r28, 4
     172:	7f 3f       	cpi	r23, 0xFF	; 255
     174:	00 00       	nop
     176:	00 00       	nop
	...

0000017a <__trampolines_end>:
     17a:	00 01       	movw	r0, r0
     17c:	00 00       	nop
     17e:	11 02       	muls	r17, r17
     180:	12 00       	.word	0x0012	; ????
     182:	02 00       	.word	0x0002	; ????
     184:	00 ce       	rjmp	.-1024   	; 0xfffffd86 <__eeprom_end+0xff7efd86>
     186:	01 43       	sbci	r16, 0x31	; 49
     188:	00 03       	mulsu	r16, r16
     18a:	00 00       	nop
     18c:	ca 01       	movw	r24, r20
     18e:	04 01       	movw	r0, r8
     190:	03 09       	sbc	r16, r3
     192:	04 b6       	in	r0, 0x34	; 52
     194:	01 12       	cpse	r0, r17
     196:	02 03       	mulsu	r16, r18
     198:	09 04       	cpc	r0, r9
     19a:	ae 01       	movw	r20, r28
     19c:	06 03       	mulsu	r16, r22
     19e:	03 09       	sbc	r16, r3
     1a0:	04 a4       	ldd	r0, Z+44	; 0x2c
     1a2:	01 08       	sbc	r0, r1

000001a4 <string3>:
     1a4:	08 03 34 00 31 00 30 00 00 00                       ..4.1.0...

000001ae <string2>:
     1ae:	06 03 4d 00 32 00 00 00                             ..M.2...

000001b6 <string1>:
     1b6:	12 03 4a 00 2e 00 20 00 46 00 69 00 65 00 6e 00     ..J... .F.i.e.n.
     1c6:	65 00 00 00                                         e...

000001ca <string0>:
     1ca:	04 03 09 04                                         ....

000001ce <config1_descriptor>:
     1ce:	09 02 43 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..C.....2.......
     1de:	01 00 05 24 00 10 01 05 24 01 01 01 04 24 02 06     ...$....$....$..
     1ee:	05 24 06 00 01 07 05 82 03 10 00 40 09 04 01 00     .$.........@....
     1fe:	02 0a 00 00 00 07 05 03 02 40 00 00 07 05 84 02     .........@......
     20e:	40 00 00                                            @..

00000211 <device_descriptor>:
     211:	12 01 00 02 02 00 00 10 c0 16 7a 04 00 01 01 02     ..........z.....
     221:	03 01                                               ..

00000223 <endpoint_config_table>:
     223:	00 01 c1 12 01 80 36 01 81 36                       ......6..6

0000022d <__c.2036>:
     22d:	20 20 20 2d 2d 2d 20 20 20 52 68 6f 3a 20 00           ---   Rho: .

0000023c <__c.2034>:
     23c:	20 20 20 2d 2d 2d 20 20 20 54 68 65 74 61 3a 20        ---   Theta: 
	...

0000024d <__c.2032>:
     24d:	20 29 00                                             ).

00000250 <__c.2030>:
     250:	2c 20 00                                            , .

00000253 <__c.2028>:
     253:	28 20 00                                            ( .

00000256 <__c.2026>:
     256:	20 20 20 2d 2d 2d 20 20 20 4e 65 77 20 66 72 61        ---   New fra
     266:	6d 65 3a 20 00                                      me: .

0000026b <__c.2024>:
     26b:	20 29 00                                             ).

0000026e <__c.2022>:
     26e:	2c 20 00                                            , .

00000271 <__c.2020>:
     271:	28 20 00                                            ( .

00000274 <__c.2018>:
     274:	20 20 20 2d 2d 2d 20 20 20 54 72 61 6e 73 6c 61        ---   Transla
     284:	74 69 6f 6e 3a 20 00                                tion: .

0000028b <__c.2016>:
     28b:	42 6f 74 74 6f 6d 20 49 6e 64 65 78 3a 20 00        Bottom Index: .

0000029a <__c.2014>:
     29a:	20 20 20 20 2d 2d 2d 2d 2d 2d 20 20 20 20 00            ------    .

000002a9 <__c.2012>:
     2a9:	54 6f 70 20 49 6e 64 65 78 3a 20 00                 Top Index: .

000002b5 <__c.2007>:
     2b5:	20 20 20 2d 2d 2d 20 20 20 00                          ---   .

000002bf <__c.2005>:
     2bf:	20 29 00                                             ).

000002c2 <__c.2003>:
     2c2:	2c 20 00                                            , .

000002c5 <__c.2001>:
     2c5:	28 20 00                                            ( .

000002c8 <__c.1998>:
     2c8:	20 2d 2d 2d 20 00                                    --- .

000002ce <__ctors_end>:
     2ce:	11 24       	eor	r1, r1
     2d0:	1f be       	out	0x3f, r1	; 63
     2d2:	cf ef       	ldi	r28, 0xFF	; 255
     2d4:	da e0       	ldi	r29, 0x0A	; 10
     2d6:	de bf       	out	0x3e, r29	; 62
     2d8:	cd bf       	out	0x3d, r28	; 61

000002da <__do_copy_data>:
     2da:	11 e0       	ldi	r17, 0x01	; 1
     2dc:	a0 e0       	ldi	r26, 0x00	; 0
     2de:	b1 e0       	ldi	r27, 0x01	; 1
     2e0:	ee e6       	ldi	r30, 0x6E	; 110
     2e2:	f4 e2       	ldi	r31, 0x24	; 36
     2e4:	02 c0       	rjmp	.+4      	; 0x2ea <__do_copy_data+0x10>
     2e6:	05 90       	lpm	r0, Z+
     2e8:	0d 92       	st	X+, r0
     2ea:	a8 30       	cpi	r26, 0x08	; 8
     2ec:	b1 07       	cpc	r27, r17
     2ee:	d9 f7       	brne	.-10     	; 0x2e6 <__do_copy_data+0xc>

000002f0 <__do_clear_bss>:
     2f0:	21 e0       	ldi	r18, 0x01	; 1
     2f2:	a8 e0       	ldi	r26, 0x08	; 8
     2f4:	b1 e0       	ldi	r27, 0x01	; 1
     2f6:	01 c0       	rjmp	.+2      	; 0x2fa <.do_clear_bss_start>

000002f8 <.do_clear_bss_loop>:
     2f8:	1d 92       	st	X+, r1

000002fa <.do_clear_bss_start>:
     2fa:	ac 30       	cpi	r26, 0x0C	; 12
     2fc:	b2 07       	cpc	r27, r18
     2fe:	e1 f7       	brne	.-8      	; 0x2f8 <.do_clear_bss_loop>
     300:	0e 94 86 01 	call	0x30c	; 0x30c <main>
     304:	0c 94 35 12 	jmp	0x246a	; 0x246a <_exit>

00000308 <__bad_interrupt>:
     308:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000030c <main>:
#include "m_usb.h"
#include "motor_control.h"
#include "robockey_robot.h"
#define PI 3.14159

int main(void) {
     30c:	cf 93       	push	r28
     30e:	df 93       	push	r29
     310:	cd b7       	in	r28, 0x3d	; 61
     312:	de b7       	in	r29, 0x3e	; 62
     314:	a4 97       	sbiw	r28, 0x24	; 36
     316:	0f b6       	in	r0, 0x3f	; 63
     318:	f8 94       	cli
     31a:	de bf       	out	0x3e, r29	; 62
     31c:	0f be       	out	0x3f, r0	; 63
     31e:	cd bf       	out	0x3d, r28	; 61
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     320:	2f e3       	ldi	r18, 0x3F	; 63
     322:	8d e0       	ldi	r24, 0x0D	; 13
     324:	93 e0       	ldi	r25, 0x03	; 3
     326:	21 50       	subi	r18, 0x01	; 1
     328:	80 40       	sbci	r24, 0x00	; 0
     32a:	90 40       	sbci	r25, 0x00	; 0
     32c:	e1 f7       	brne	.-8      	; 0x326 <main+0x1a>
     32e:	00 c0       	rjmp	.+0      	; 0x330 <main+0x24>
     330:	00 00       	nop
	// Wait to avoid covering mWii w/finger
	m_wait(1000);
	m_clockdivide(3);
     332:	e1 e6       	ldi	r30, 0x61	; 97
     334:	f0 e0       	ldi	r31, 0x00	; 0
     336:	80 e8       	ldi	r24, 0x80	; 128
     338:	80 83       	st	Z, r24
     33a:	83 e0       	ldi	r24, 0x03	; 3
     33c:	80 83       	st	Z, r24
	// Initialize motor
	motor_init();
     33e:	0e 94 1e 02 	call	0x43c	; 0x43c <motor_init>
	// Get mwii readings
	char wiiOpen = m_wii_open();
     342:	0e 94 ff 05 	call	0xbfe	; 0xbfe <m_wii_open>
	if (wiiOpen) {
     346:	88 23       	and	r24, r24
     348:	19 f0       	breq	.+6      	; 0x350 <main+0x44>
		m_green(ON);
     34a:	6a 9a       	sbi	0x0d, 2	; 13
     34c:	72 98       	cbi	0x0e, 2	; 14
     34e:	02 c0       	rjmp	.+4      	; 0x354 <main+0x48>
	} else {
		m_red(ON);
     350:	6e 9a       	sbi	0x0d, 6	; 13
     352:	76 98       	cbi	0x0e, 6	; 14
	}
	unsigned int starArray[12];
	Robot testBot;
	m_usb_init();
     354:	0e 94 43 03 	call	0x686	; 0x686 <m_usb_init>
	turn_in_place(true);
     358:	81 e0       	ldi	r24, 0x01	; 1
     35a:	0e 94 5d 02 	call	0x4ba	; 0x4ba <turn_in_place>
     35e:	87 ea       	ldi	r24, 0xA7	; 167
     360:	91 e6       	ldi	r25, 0x61	; 97
     362:	01 97       	sbiw	r24, 0x01	; 1
     364:	f1 f7       	brne	.-4      	; 0x362 <main+0x56>
     366:	00 c0       	rjmp	.+0      	; 0x368 <main+0x5c>
     368:	00 00       	nop
	float opponent_x = 42, opponent_y = 317;
	while (1) {
		m_wait(100);
		// Get mWii array
		if (!m_wii_read(starArray)) m_red(ON);
     36a:	ce 01       	movw	r24, r28
     36c:	01 96       	adiw	r24, 0x01	; 1
     36e:	0e 94 20 07 	call	0xe40	; 0xe40 <m_wii_read>
     372:	81 11       	cpse	r24, r1
     374:	01 c0       	rjmp	.+2      	; 0x378 <main+0x6c>
     376:	6e 9a       	sbi	0x0d, 6	; 13
     378:	76 98       	cbi	0x0e, 6	; 14
		// Get robot location and orientation
		interpret(&testBot, starArray);
     37a:	be 01       	movw	r22, r28
     37c:	6f 5f       	subi	r22, 0xFF	; 255
     37e:	7f 4f       	sbci	r23, 0xFF	; 255
     380:	ce 01       	movw	r24, r28
     382:	49 96       	adiw	r24, 0x19	; 25
     384:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <interpret>
		// Wait
		if (facing_goal(&testBot, opponent_x, opponent_y)) {
     388:	00 e0       	ldi	r16, 0x00	; 0
     38a:	10 e8       	ldi	r17, 0x80	; 128
     38c:	2e e9       	ldi	r18, 0x9E	; 158
     38e:	33 e4       	ldi	r19, 0x43	; 67
     390:	40 e0       	ldi	r20, 0x00	; 0
     392:	50 e0       	ldi	r21, 0x00	; 0
     394:	68 e2       	ldi	r22, 0x28	; 40
     396:	72 e4       	ldi	r23, 0x42	; 66
     398:	ce 01       	movw	r24, r28
     39a:	49 96       	adiw	r24, 0x19	; 25
     39c:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <facing_goal>
     3a0:	88 23       	and	r24, r24
     3a2:	e9 f2       	breq	.-70     	; 0x35e <main+0x52>
			turn(0);
     3a4:	80 e0       	ldi	r24, 0x00	; 0
     3a6:	90 e0       	ldi	r25, 0x00	; 0
     3a8:	0e 94 7d 02 	call	0x4fa	; 0x4fa <turn>
			while (abs(opponent_y - testBot.y) > 15 || abs(opponent_x - testBot.x) > 30) {
     3ac:	15 c0       	rjmp	.+42     	; 0x3d8 <main+0xcc>
     3ae:	87 ea       	ldi	r24, 0xA7	; 167
     3b0:	91 e6       	ldi	r25, 0x61	; 97
     3b2:	01 97       	sbiw	r24, 0x01	; 1
     3b4:	f1 f7       	brne	.-4      	; 0x3b2 <main+0xa6>
     3b6:	00 c0       	rjmp	.+0      	; 0x3b8 <main+0xac>
     3b8:	00 00       	nop
				m_wait(100);
				if (!m_wii_read(starArray)) m_red(ON);
     3ba:	ce 01       	movw	r24, r28
     3bc:	01 96       	adiw	r24, 0x01	; 1
     3be:	0e 94 20 07 	call	0xe40	; 0xe40 <m_wii_read>
     3c2:	81 11       	cpse	r24, r1
     3c4:	01 c0       	rjmp	.+2      	; 0x3c8 <main+0xbc>
     3c6:	6e 9a       	sbi	0x0d, 6	; 13
     3c8:	76 98       	cbi	0x0e, 6	; 14
				interpret(&testBot, starArray);
     3ca:	be 01       	movw	r22, r28
     3cc:	6f 5f       	subi	r22, 0xFF	; 255
     3ce:	7f 4f       	sbci	r23, 0xFF	; 255
     3d0:	ce 01       	movw	r24, r28
     3d2:	49 96       	adiw	r24, 0x19	; 25
     3d4:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <interpret>
		// Get robot location and orientation
		interpret(&testBot, starArray);
		// Wait
		if (facing_goal(&testBot, opponent_x, opponent_y)) {
			turn(0);
			while (abs(opponent_y - testBot.y) > 15 || abs(opponent_x - testBot.x) > 30) {
     3d8:	2d 8d       	ldd	r18, Y+29	; 0x1d
     3da:	3e 8d       	ldd	r19, Y+30	; 0x1e
     3dc:	4f 8d       	ldd	r20, Y+31	; 0x1f
     3de:	58 a1       	ldd	r21, Y+32	; 0x20
     3e0:	60 e0       	ldi	r22, 0x00	; 0
     3e2:	70 e8       	ldi	r23, 0x80	; 128
     3e4:	8e e9       	ldi	r24, 0x9E	; 158
     3e6:	93 e4       	ldi	r25, 0x43	; 67
     3e8:	0e 94 67 0d 	call	0x1ace	; 0x1ace <__subsf3>
     3ec:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <__fixsfsi>
     3f0:	9b 01       	movw	r18, r22
     3f2:	77 23       	and	r23, r23
     3f4:	24 f4       	brge	.+8      	; 0x3fe <main+0xf2>
     3f6:	22 27       	eor	r18, r18
     3f8:	33 27       	eor	r19, r19
     3fa:	26 1b       	sub	r18, r22
     3fc:	37 0b       	sbc	r19, r23
     3fe:	20 31       	cpi	r18, 0x10	; 16
     400:	31 05       	cpc	r19, r1
     402:	ac f6       	brge	.-86     	; 0x3ae <main+0xa2>
     404:	29 8d       	ldd	r18, Y+25	; 0x19
     406:	3a 8d       	ldd	r19, Y+26	; 0x1a
     408:	4b 8d       	ldd	r20, Y+27	; 0x1b
     40a:	5c 8d       	ldd	r21, Y+28	; 0x1c
     40c:	60 e0       	ldi	r22, 0x00	; 0
     40e:	70 e0       	ldi	r23, 0x00	; 0
     410:	88 e2       	ldi	r24, 0x28	; 40
     412:	92 e4       	ldi	r25, 0x42	; 66
     414:	0e 94 67 0d 	call	0x1ace	; 0x1ace <__subsf3>
     418:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <__fixsfsi>
     41c:	9b 01       	movw	r18, r22
     41e:	77 23       	and	r23, r23
     420:	24 f4       	brge	.+8      	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
     422:	22 27       	eor	r18, r18
     424:	33 27       	eor	r19, r19
     426:	26 1b       	sub	r18, r22
     428:	37 0b       	sbc	r19, r23
     42a:	2f 31       	cpi	r18, 0x1F	; 31
     42c:	31 05       	cpc	r19, r1
     42e:	0c f0       	brlt	.+2      	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
     430:	be cf       	rjmp	.-132    	; 0x3ae <main+0xa2>
				m_wait(100);
				if (!m_wii_read(starArray)) m_red(ON);
				interpret(&testBot, starArray);
			}
			motor_stop();
     432:	0e 94 58 02 	call	0x4b0	; 0x4b0 <motor_stop>
			m_red(ON);
     436:	6e 9a       	sbi	0x0d, 6	; 13
     438:	76 98       	cbi	0x0e, 6	; 14
			while(1);
     43a:	ff cf       	rjmp	.-2      	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>

0000043c <motor_init>:
#include "robockey_robot.h"
#define PI 3.14159

void motor_init() {
	// Digital output pins
	set(DDRB, 1); // A-IN 1
     43c:	21 9a       	sbi	0x04, 1	; 4
	set(DDRB, 2); // A-IN 2
     43e:	22 9a       	sbi	0x04, 2	; 4
	set(DDRB, 3); // B-IN 1
     440:	23 9a       	sbi	0x04, 3	; 4
	set(DDRB, 7); // B-IN 2
     442:	27 9a       	sbi	0x04, 7	; 4

	set(PORTB, 1);
     444:	29 9a       	sbi	0x05, 1	; 5
	clear(PORTB, 2);
     446:	2a 98       	cbi	0x05, 2	; 5
	set(PORTB, 3);
     448:	2b 9a       	sbi	0x05, 3	; 5
	clear(PORTB, 7);
     44a:	2f 98       	cbi	0x05, 7	; 5

	// Timer 1
	// Prescale timer clock
	clear(TCCR1B, CS12);
     44c:	e1 e8       	ldi	r30, 0x81	; 129
     44e:	f0 e0       	ldi	r31, 0x00	; 0
     450:	80 81       	ld	r24, Z
     452:	8b 7f       	andi	r24, 0xFB	; 251
     454:	80 83       	st	Z, r24
	set(TCCR1B, CS11);
     456:	80 81       	ld	r24, Z
     458:	82 60       	ori	r24, 0x02	; 2
     45a:	80 83       	st	Z, r24
	clear(TCCR1B, CS10);
     45c:	80 81       	ld	r24, Z
     45e:	8e 7f       	andi	r24, 0xFE	; 254
     460:	80 83       	st	Z, r24

	// Set timer mode (UP to 0x00FF, PWM mode)
	clear(TCCR1B, WGM13);
     462:	80 81       	ld	r24, Z
     464:	8f 7e       	andi	r24, 0xEF	; 239
     466:	80 83       	st	Z, r24
	set(TCCR1B, WGM12);
     468:	80 81       	ld	r24, Z
     46a:	88 60       	ori	r24, 0x08	; 8
     46c:	80 83       	st	Z, r24
	clear(TCCR1A, WGM11);
     46e:	e0 e8       	ldi	r30, 0x80	; 128
     470:	f0 e0       	ldi	r31, 0x00	; 0
     472:	80 81       	ld	r24, Z
     474:	8d 7f       	andi	r24, 0xFD	; 253
     476:	80 83       	st	Z, r24
	set(TCCR1A, WGM10);
     478:	80 81       	ld	r24, Z
     47a:	81 60       	ori	r24, 0x01	; 1
     47c:	80 83       	st	Z, r24

	// Set Channel A compare output (Set at OCR1A, clear at rollover)
	set(TCCR1A, COM1A1);
     47e:	80 81       	ld	r24, Z
     480:	80 68       	ori	r24, 0x80	; 128
     482:	80 83       	st	Z, r24
	set(TCCR1A, COM1A0);
     484:	80 81       	ld	r24, Z
     486:	80 64       	ori	r24, 0x40	; 64
     488:	80 83       	st	Z, r24

	// Set Channel B compare output (Set at OCR1B, clear at rollover)
	set(TCCR1A, COM1B1);
     48a:	80 81       	ld	r24, Z
     48c:	80 62       	ori	r24, 0x20	; 32
     48e:	80 83       	st	Z, r24
	set(TCCR1A, COM1B0);
     490:	80 81       	ld	r24, Z
     492:	80 61       	ori	r24, 0x10	; 16
     494:	80 83       	st	Z, r24

	// Initialize OCR1A/B
	OCR1A = 0xBF;
     496:	8f eb       	ldi	r24, 0xBF	; 191
     498:	90 e0       	ldi	r25, 0x00	; 0
     49a:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     49e:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	OCR1B = 0xBF;
     4a2:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
     4a6:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>

	// Enable B5/6 output
	set(DDRB, 6);
     4aa:	26 9a       	sbi	0x04, 6	; 4
	set(DDRB, 5);
     4ac:	25 9a       	sbi	0x04, 5	; 4
     4ae:	08 95       	ret

000004b0 <motor_stop>:
}

void motor_stop() {
	clear(PORTB, 1);
     4b0:	29 98       	cbi	0x05, 1	; 5
	clear(PORTB, 2);
     4b2:	2a 98       	cbi	0x05, 2	; 5
	clear(PORTB, 3);
     4b4:	2b 98       	cbi	0x05, 3	; 5
	clear(PORTB, 7);
     4b6:	2f 98       	cbi	0x05, 7	; 5
     4b8:	08 95       	ret

000004ba <turn_in_place>:
}

void turn_in_place(bool right) {
	if (right) {
     4ba:	88 23       	and	r24, r24
     4bc:	79 f0       	breq	.+30     	; 0x4dc <turn_in_place+0x22>
		OCR1A = 0xBF;
     4be:	8f eb       	ldi	r24, 0xBF	; 191
     4c0:	90 e0       	ldi	r25, 0x00	; 0
     4c2:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     4c6:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
		OCR1B = 0xBF;
     4ca:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
     4ce:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
		set(PORTB, 1);
     4d2:	29 9a       	sbi	0x05, 1	; 5
		clear(PORTB, 2);
     4d4:	2a 98       	cbi	0x05, 2	; 5
		clear(PORTB, 3);
     4d6:	2b 98       	cbi	0x05, 3	; 5
		set(PORTB, 7);
     4d8:	2f 9a       	sbi	0x05, 7	; 5
     4da:	08 95       	ret
	} else {
		OCR1A = 0xBF;
     4dc:	8f eb       	ldi	r24, 0xBF	; 191
     4de:	90 e0       	ldi	r25, 0x00	; 0
     4e0:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     4e4:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
		OCR1B = 0xBF;
     4e8:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
     4ec:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
		clear(PORTB, 1);
     4f0:	29 98       	cbi	0x05, 1	; 5
		set(PORTB, 2);
     4f2:	2a 9a       	sbi	0x05, 2	; 5
		set(PORTB, 3);
     4f4:	2b 9a       	sbi	0x05, 3	; 5
		clear(PORTB, 7);
     4f6:	2f 98       	cbi	0x05, 7	; 5
     4f8:	08 95       	ret

000004fa <turn>:
	}
}

// -50 to -1 left, 0 forward, 1 to 50 right
void turn(int direction) {
	clear(PORTB, 1);
     4fa:	29 98       	cbi	0x05, 1	; 5
	set(PORTB, 2);
     4fc:	2a 9a       	sbi	0x05, 2	; 5
	clear(PORTB, 3);
     4fe:	2b 98       	cbi	0x05, 3	; 5
	set(PORTB, 7);
     500:	2f 9a       	sbi	0x05, 7	; 5
	if (direction == 0) {
     502:	00 97       	sbiw	r24, 0x00	; 0
     504:	69 f4       	brne	.+26     	; 0x520 <turn+0x26>
		OCR1A = 0x37;
     506:	87 e3       	ldi	r24, 0x37	; 55
     508:	90 e0       	ldi	r25, 0x00	; 0
     50a:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     50e:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
		OCR1B = 0x3F;
     512:	8f e3       	ldi	r24, 0x3F	; 63
     514:	90 e0       	ldi	r25, 0x00	; 0
     516:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
     51a:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
     51e:	08 95       	ret
     520:	bc 01       	movw	r22, r24
	} else if (direction > 0) {
     522:	18 16       	cp	r1, r24
     524:	19 06       	cpc	r1, r25
     526:	ec f4       	brge	.+58     	; 0x562 <turn+0x68>
		OCR1A = 0x00;
     528:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     52c:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
		OCR1B = (int) (255.0 * (float) direction / 50.0);
     530:	07 2e       	mov	r0, r23
     532:	00 0c       	add	r0, r0
     534:	88 0b       	sbc	r24, r24
     536:	99 0b       	sbc	r25, r25
     538:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <__floatsisf>
     53c:	20 e0       	ldi	r18, 0x00	; 0
     53e:	30 e0       	ldi	r19, 0x00	; 0
     540:	4f e7       	ldi	r20, 0x7F	; 127
     542:	53 e4       	ldi	r21, 0x43	; 67
     544:	0e 94 1d 10 	call	0x203a	; 0x203a <__mulsf3>
     548:	20 e0       	ldi	r18, 0x00	; 0
     54a:	30 e0       	ldi	r19, 0x00	; 0
     54c:	48 e4       	ldi	r20, 0x48	; 72
     54e:	52 e4       	ldi	r21, 0x42	; 66
     550:	0e 94 50 0e 	call	0x1ca0	; 0x1ca0 <__divsf3>
     554:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <__fixsfsi>
     558:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
     55c:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
     560:	08 95       	ret
	} else {
		OCR1A = (int) (255.0 * (float) -direction / 50.0);
     562:	71 95       	neg	r23
     564:	61 95       	neg	r22
     566:	71 09       	sbc	r23, r1
     568:	07 2e       	mov	r0, r23
     56a:	00 0c       	add	r0, r0
     56c:	88 0b       	sbc	r24, r24
     56e:	99 0b       	sbc	r25, r25
     570:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <__floatsisf>
     574:	20 e0       	ldi	r18, 0x00	; 0
     576:	30 e0       	ldi	r19, 0x00	; 0
     578:	4f e7       	ldi	r20, 0x7F	; 127
     57a:	53 e4       	ldi	r21, 0x43	; 67
     57c:	0e 94 1d 10 	call	0x203a	; 0x203a <__mulsf3>
     580:	20 e0       	ldi	r18, 0x00	; 0
     582:	30 e0       	ldi	r19, 0x00	; 0
     584:	48 e4       	ldi	r20, 0x48	; 72
     586:	52 e4       	ldi	r21, 0x42	; 66
     588:	0e 94 50 0e 	call	0x1ca0	; 0x1ca0 <__divsf3>
     58c:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <__fixsfsi>
     590:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     594:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
		OCR1B = 0x00;
     598:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
     59c:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
     5a0:	08 95       	ret

000005a2 <facing_goal>:
	}
}

// Turn to face opponent's goal
bool facing_goal(Robot* robot, float opponent_x, float opponent_y) {
     5a2:	8f 92       	push	r8
     5a4:	9f 92       	push	r9
     5a6:	af 92       	push	r10
     5a8:	bf 92       	push	r11
     5aa:	cf 92       	push	r12
     5ac:	df 92       	push	r13
     5ae:	ef 92       	push	r14
     5b0:	ff 92       	push	r15
     5b2:	0f 93       	push	r16
     5b4:	1f 93       	push	r17
     5b6:	cf 93       	push	r28
     5b8:	df 93       	push	r29
     5ba:	ec 01       	movw	r28, r24
     5bc:	48 01       	movw	r8, r16
     5be:	59 01       	movw	r10, r18
	float opponent_angle = (PI - atan2f(-(robot->y - opponent_y), robot->x - opponent_x));
     5c0:	9a 01       	movw	r18, r20
     5c2:	ab 01       	movw	r20, r22
     5c4:	68 81       	ld	r22, Y
     5c6:	79 81       	ldd	r23, Y+1	; 0x01
     5c8:	8a 81       	ldd	r24, Y+2	; 0x02
     5ca:	9b 81       	ldd	r25, Y+3	; 0x03
     5cc:	0e 94 67 0d 	call	0x1ace	; 0x1ace <__subsf3>
     5d0:	6b 01       	movw	r12, r22
     5d2:	7c 01       	movw	r14, r24
     5d4:	a5 01       	movw	r20, r10
     5d6:	94 01       	movw	r18, r8
     5d8:	6c 81       	ldd	r22, Y+4	; 0x04
     5da:	7d 81       	ldd	r23, Y+5	; 0x05
     5dc:	8e 81       	ldd	r24, Y+6	; 0x06
     5de:	9f 81       	ldd	r25, Y+7	; 0x07
     5e0:	0e 94 67 0d 	call	0x1ace	; 0x1ace <__subsf3>
     5e4:	90 58       	subi	r25, 0x80	; 128
     5e6:	a7 01       	movw	r20, r14
     5e8:	96 01       	movw	r18, r12
     5ea:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <atan2>
     5ee:	9b 01       	movw	r18, r22
     5f0:	ac 01       	movw	r20, r24
     5f2:	60 ed       	ldi	r22, 0xD0	; 208
     5f4:	7f e0       	ldi	r23, 0x0F	; 15
     5f6:	89 e4       	ldi	r24, 0x49	; 73
     5f8:	90 e4       	ldi	r25, 0x40	; 64
     5fa:	0e 94 67 0d 	call	0x1ace	; 0x1ace <__subsf3>
     5fe:	4b 01       	movw	r8, r22
     600:	5c 01       	movw	r10, r24
	// Near -PI
	if (opponent_angle < high_bound && opponent_angle < PI && low_bound >= PI - error) {
		return true;
	}*/
	// Normal case
	return (robot->o > low_bound && robot->o < high_bound);
     602:	c8 84       	ldd	r12, Y+8	; 0x08
     604:	d9 84       	ldd	r13, Y+9	; 0x09
     606:	ea 84       	ldd	r14, Y+10	; 0x0a
     608:	fb 84       	ldd	r15, Y+11	; 0x0b

// Turn to face opponent's goal
bool facing_goal(Robot* robot, float opponent_x, float opponent_y) {
	float opponent_angle = (PI - atan2f(-(robot->y - opponent_y), robot->x - opponent_x));
	float error = PI / 45.0;
	float low_bound = opponent_angle - error;
     60a:	2e e2       	ldi	r18, 0x2E	; 46
     60c:	3a ef       	ldi	r19, 0xFA	; 250
     60e:	4e e8       	ldi	r20, 0x8E	; 142
     610:	5d e3       	ldi	r21, 0x3D	; 61
     612:	0e 94 67 0d 	call	0x1ace	; 0x1ace <__subsf3>
	// Near -PI
	if (opponent_angle < high_bound && opponent_angle < PI && low_bound >= PI - error) {
		return true;
	}*/
	// Normal case
	return (robot->o > low_bound && robot->o < high_bound);
     616:	a7 01       	movw	r20, r14
     618:	96 01       	movw	r18, r12
     61a:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <__cmpsf2>
     61e:	88 23       	and	r24, r24
     620:	94 f4       	brge	.+36     	; 0x646 <facing_goal+0xa4>
// Turn to face opponent's goal
bool facing_goal(Robot* robot, float opponent_x, float opponent_y) {
	float opponent_angle = (PI - atan2f(-(robot->y - opponent_y), robot->x - opponent_x));
	float error = PI / 45.0;
	float low_bound = opponent_angle - error;
	float high_bound = opponent_angle + error;
     622:	2e e2       	ldi	r18, 0x2E	; 46
     624:	3a ef       	ldi	r19, 0xFA	; 250
     626:	4e e8       	ldi	r20, 0x8E	; 142
     628:	5d e3       	ldi	r21, 0x3D	; 61
     62a:	c5 01       	movw	r24, r10
     62c:	b4 01       	movw	r22, r8
     62e:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <__addsf3>
	// Near -PI
	if (opponent_angle < high_bound && opponent_angle < PI && low_bound >= PI - error) {
		return true;
	}*/
	// Normal case
	return (robot->o > low_bound && robot->o < high_bound);
     632:	c1 e0       	ldi	r28, 0x01	; 1
     634:	a7 01       	movw	r20, r14
     636:	96 01       	movw	r18, r12
     638:	0e 94 10 10 	call	0x2020	; 0x2020 <__gesf2>
     63c:	18 16       	cp	r1, r24
     63e:	0c f0       	brlt	.+2      	; 0x642 <facing_goal+0xa0>
     640:	c0 e0       	ldi	r28, 0x00	; 0
     642:	8c 2f       	mov	r24, r28
     644:	01 c0       	rjmp	.+2      	; 0x648 <facing_goal+0xa6>
     646:	80 e0       	ldi	r24, 0x00	; 0
}
     648:	81 70       	andi	r24, 0x01	; 1
     64a:	df 91       	pop	r29
     64c:	cf 91       	pop	r28
     64e:	1f 91       	pop	r17
     650:	0f 91       	pop	r16
     652:	ff 90       	pop	r15
     654:	ef 90       	pop	r14
     656:	df 90       	pop	r13
     658:	cf 90       	pop	r12
     65a:	bf 90       	pop	r11
     65c:	af 90       	pop	r10
     65e:	9f 90       	pop	r9
     660:	8f 90       	pop	r8
     662:	08 95       	ret

00000664 <m_bus_init>:

// PUBLIC FUNCTIONS
void m_bus_init(void)
{
	// ENABLE PULLUPS
	set(PORTD,0);
     664:	58 9a       	sbi	0x0b, 0	; 11
	set(PORTD,1);
     666:	59 9a       	sbi	0x0b, 1	; 11
	set(PORTD,2);
     668:	5a 9a       	sbi	0x0b, 2	; 11
	
	// CONFIGURE THE CLOCK
	TWBR = 12;	// CLK freq = CPU clock / (16 + 2*TWBR*(4^TWPS)), 16MHz clock, TWBR=12, TWPS=00 -> 400kHz
     66a:	8c e0       	ldi	r24, 0x0C	; 12
     66c:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>

	// ENABLE interrupts in INT2 (D2)
	set(EICRA,ISC21); clear(EICRA,ISC20); // trigger on falling edge
     670:	e9 e6       	ldi	r30, 0x69	; 105
     672:	f0 e0       	ldi	r31, 0x00	; 0
     674:	80 81       	ld	r24, Z
     676:	80 62       	ori	r24, 0x20	; 32
     678:	80 83       	st	Z, r24
     67a:	80 81       	ld	r24, Z
     67c:	8f 7e       	andi	r24, 0xEF	; 239
     67e:	80 83       	st	Z, r24
	set(EIMSK,INT2); // demask the interrupt
     680:	ea 9a       	sbi	0x1d, 2	; 29
	sei(); // enable global interrupts
     682:	78 94       	sei
     684:	08 95       	ret

00000686 <m_usb_init>:
	phex(i);
}

void m_usb_tx_hexchar(unsigned char i)
{
	phex(i);
     686:	81 e0       	ldi	r24, 0x01	; 1
     688:	80 93 d7 00 	sts	0x00D7, r24	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
     68c:	80 ea       	ldi	r24, 0xA0	; 160
     68e:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
     692:	82 e1       	ldi	r24, 0x12	; 18
     694:	89 bd       	out	0x29, r24	; 41
     696:	09 b4       	in	r0, 0x29	; 41
     698:	00 fe       	sbrs	r0, 0
     69a:	fd cf       	rjmp	.-6      	; 0x696 <m_usb_init+0x10>
     69c:	80 e9       	ldi	r24, 0x90	; 144
     69e:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
     6a2:	10 92 e0 00 	sts	0x00E0, r1	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
     6a6:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <usb_configuration>
     6aa:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <__data_end>
     6ae:	8c e0       	ldi	r24, 0x0C	; 12
     6b0:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
     6b4:	78 94       	sei
     6b6:	08 95       	ret

000006b8 <m_usb_tx_char>:
     6b8:	cf 93       	push	r28
     6ba:	df 93       	push	r29
     6bc:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <usb_configuration>
     6c0:	99 23       	and	r25, r25
     6c2:	09 f4       	brne	.+2      	; 0x6c6 <m_usb_tx_char+0xe>
     6c4:	4c c0       	rjmp	.+152    	; 0x75e <m_usb_tx_char+0xa6>
     6c6:	9f b7       	in	r25, 0x3f	; 63
     6c8:	f8 94       	cli
     6ca:	24 e0       	ldi	r18, 0x04	; 4
     6cc:	20 93 e9 00 	sts	0x00E9, r18	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
     6d0:	20 91 09 01 	lds	r18, 0x0109	; 0x800109 <transmit_previous_timeout>
     6d4:	22 23       	and	r18, r18
     6d6:	49 f0       	breq	.+18     	; 0x6ea <m_usb_tx_char+0x32>
     6d8:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     6dc:	25 fd       	sbrc	r18, 5
     6de:	03 c0       	rjmp	.+6      	; 0x6e6 <m_usb_tx_char+0x2e>
     6e0:	9f bf       	out	0x3f, r25	; 63
     6e2:	8f ef       	ldi	r24, 0xFF	; 255
     6e4:	41 c0       	rjmp	.+130    	; 0x768 <m_usb_tx_char+0xb0>
     6e6:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <transmit_previous_timeout>
     6ea:	30 91 e4 00 	lds	r19, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
     6ee:	37 5e       	subi	r19, 0xE7	; 231
     6f0:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     6f4:	25 fd       	sbrc	r18, 5
     6f6:	24 c0       	rjmp	.+72     	; 0x740 <m_usb_tx_char+0x88>
     6f8:	9f bf       	out	0x3f, r25	; 63
     6fa:	90 91 e4 00 	lds	r25, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
     6fe:	93 17       	cp	r25, r19
     700:	81 f0       	breq	.+32     	; 0x722 <m_usb_tx_char+0x6a>
     702:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <usb_configuration>
     706:	99 23       	and	r25, r25
     708:	61 f1       	breq	.+88     	; 0x762 <m_usb_tx_char+0xaa>
     70a:	a9 ee       	ldi	r26, 0xE9	; 233
     70c:	b0 e0       	ldi	r27, 0x00	; 0
     70e:	44 e0       	ldi	r20, 0x04	; 4
     710:	e8 ee       	ldi	r30, 0xE8	; 232
     712:	f0 e0       	ldi	r31, 0x00	; 0
     714:	c4 ee       	ldi	r28, 0xE4	; 228
     716:	d0 e0       	ldi	r29, 0x00	; 0
     718:	0d c0       	rjmp	.+26     	; 0x734 <m_usb_tx_char+0x7c>
     71a:	9f bf       	out	0x3f, r25	; 63
     71c:	98 81       	ld	r25, Y
     71e:	93 13       	cpse	r25, r19
     720:	05 c0       	rjmp	.+10     	; 0x72c <m_usb_tx_char+0x74>
     722:	81 e0       	ldi	r24, 0x01	; 1
     724:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <transmit_previous_timeout>
     728:	8f ef       	ldi	r24, 0xFF	; 255
     72a:	1e c0       	rjmp	.+60     	; 0x768 <m_usb_tx_char+0xb0>
     72c:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <usb_configuration>
     730:	99 23       	and	r25, r25
     732:	c9 f0       	breq	.+50     	; 0x766 <m_usb_tx_char+0xae>
     734:	9f b7       	in	r25, 0x3f	; 63
     736:	f8 94       	cli
     738:	4c 93       	st	X, r20
     73a:	20 81       	ld	r18, Z
     73c:	25 ff       	sbrs	r18, 5
     73e:	ed cf       	rjmp	.-38     	; 0x71a <m_usb_tx_char+0x62>
     740:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     744:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     748:	85 fd       	sbrc	r24, 5
     74a:	03 c0       	rjmp	.+6      	; 0x752 <m_usb_tx_char+0x9a>
     74c:	8a e3       	ldi	r24, 0x3A	; 58
     74e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     752:	85 e0       	ldi	r24, 0x05	; 5
     754:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <transmit_flush_timer>
     758:	9f bf       	out	0x3f, r25	; 63
     75a:	80 e0       	ldi	r24, 0x00	; 0
     75c:	05 c0       	rjmp	.+10     	; 0x768 <m_usb_tx_char+0xb0>
     75e:	8f ef       	ldi	r24, 0xFF	; 255
     760:	03 c0       	rjmp	.+6      	; 0x768 <m_usb_tx_char+0xb0>
     762:	8f ef       	ldi	r24, 0xFF	; 255
     764:	01 c0       	rjmp	.+2      	; 0x768 <m_usb_tx_char+0xb0>
     766:	8f ef       	ldi	r24, 0xFF	; 255
     768:	df 91       	pop	r29
     76a:	cf 91       	pop	r28
     76c:	08 95       	ret

0000076e <__vector_10>:
     76e:	1f 92       	push	r1
     770:	0f 92       	push	r0
     772:	0f b6       	in	r0, 0x3f	; 63
     774:	0f 92       	push	r0
     776:	11 24       	eor	r1, r1
     778:	8f 93       	push	r24
     77a:	9f 93       	push	r25
     77c:	ef 93       	push	r30
     77e:	ff 93       	push	r31
     780:	e1 ee       	ldi	r30, 0xE1	; 225
     782:	f0 e0       	ldi	r31, 0x00	; 0
     784:	80 81       	ld	r24, Z
     786:	10 82       	st	Z, r1
     788:	83 ff       	sbrs	r24, 3
     78a:	11 c0       	rjmp	.+34     	; 0x7ae <__vector_10+0x40>
     78c:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
     790:	91 e0       	ldi	r25, 0x01	; 1
     792:	90 93 eb 00 	sts	0x00EB, r25	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
     796:	10 92 ec 00 	sts	0x00EC, r1	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
     79a:	92 e1       	ldi	r25, 0x12	; 18
     79c:	90 93 ed 00 	sts	0x00ED, r25	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
     7a0:	98 e0       	ldi	r25, 0x08	; 8
     7a2:	90 93 f0 00 	sts	0x00F0, r25	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
     7a6:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <usb_configuration>
     7aa:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <__data_end>
     7ae:	82 ff       	sbrs	r24, 2
     7b0:	13 c0       	rjmp	.+38     	; 0x7d8 <__vector_10+0x6a>
     7b2:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <usb_configuration>
     7b6:	88 23       	and	r24, r24
     7b8:	79 f0       	breq	.+30     	; 0x7d8 <__vector_10+0x6a>
     7ba:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <transmit_flush_timer>
     7be:	88 23       	and	r24, r24
     7c0:	59 f0       	breq	.+22     	; 0x7d8 <__vector_10+0x6a>
     7c2:	81 50       	subi	r24, 0x01	; 1
     7c4:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <transmit_flush_timer>
     7c8:	81 11       	cpse	r24, r1
     7ca:	06 c0       	rjmp	.+12     	; 0x7d8 <__vector_10+0x6a>
     7cc:	84 e0       	ldi	r24, 0x04	; 4
     7ce:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
     7d2:	8a e3       	ldi	r24, 0x3A	; 58
     7d4:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     7d8:	ff 91       	pop	r31
     7da:	ef 91       	pop	r30
     7dc:	9f 91       	pop	r25
     7de:	8f 91       	pop	r24
     7e0:	0f 90       	pop	r0
     7e2:	0f be       	out	0x3f, r0	; 63
     7e4:	0f 90       	pop	r0
     7e6:	1f 90       	pop	r1
     7e8:	18 95       	reti

000007ea <__vector_11>:
     7ea:	1f 92       	push	r1
     7ec:	0f 92       	push	r0
     7ee:	0f b6       	in	r0, 0x3f	; 63
     7f0:	0f 92       	push	r0
     7f2:	11 24       	eor	r1, r1
     7f4:	0f 93       	push	r16
     7f6:	1f 93       	push	r17
     7f8:	2f 93       	push	r18
     7fa:	3f 93       	push	r19
     7fc:	4f 93       	push	r20
     7fe:	5f 93       	push	r21
     800:	6f 93       	push	r22
     802:	7f 93       	push	r23
     804:	8f 93       	push	r24
     806:	9f 93       	push	r25
     808:	af 93       	push	r26
     80a:	bf 93       	push	r27
     80c:	cf 93       	push	r28
     80e:	df 93       	push	r29
     810:	ef 93       	push	r30
     812:	ff 93       	push	r31
     814:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
     818:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     81c:	83 ff       	sbrs	r24, 3
     81e:	4c c1       	rjmp	.+664    	; 0xab8 <__vector_11+0x2ce>
     820:	e1 ef       	ldi	r30, 0xF1	; 241
     822:	f0 e0       	ldi	r31, 0x00	; 0
     824:	60 81       	ld	r22, Z
     826:	80 81       	ld	r24, Z
     828:	20 81       	ld	r18, Z
     82a:	90 81       	ld	r25, Z
     82c:	30 e0       	ldi	r19, 0x00	; 0
     82e:	39 2b       	or	r19, r25
     830:	40 81       	ld	r20, Z
     832:	90 81       	ld	r25, Z
     834:	50 e0       	ldi	r21, 0x00	; 0
     836:	59 2b       	or	r21, r25
     838:	70 81       	ld	r23, Z
     83a:	c0 81       	ld	r28, Z
     83c:	92 ef       	ldi	r25, 0xF2	; 242
     83e:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     842:	86 30       	cpi	r24, 0x06	; 6
     844:	09 f0       	breq	.+2      	; 0x848 <__vector_11+0x5e>
     846:	58 c0       	rjmp	.+176    	; 0x8f8 <__vector_11+0x10e>
     848:	04 c0       	rjmp	.+8      	; 0x852 <__vector_11+0x68>
     84a:	81 e2       	ldi	r24, 0x21	; 33
     84c:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
     850:	3a c1       	rjmp	.+628    	; 0xac6 <__vector_11+0x2dc>
     852:	66 e0       	ldi	r22, 0x06	; 6
     854:	8a e7       	ldi	r24, 0x7A	; 122
     856:	91 e0       	ldi	r25, 0x01	; 1
     858:	fc 01       	movw	r30, r24
     85a:	a5 91       	lpm	r26, Z+
     85c:	b4 91       	lpm	r27, Z
     85e:	2a 17       	cp	r18, r26
     860:	3b 07       	cpc	r19, r27
     862:	11 f0       	breq	.+4      	; 0x868 <__vector_11+0x7e>
     864:	07 96       	adiw	r24, 0x07	; 7
     866:	23 c0       	rjmp	.+70     	; 0x8ae <__vector_11+0xc4>
     868:	fc 01       	movw	r30, r24
     86a:	32 96       	adiw	r30, 0x02	; 2
     86c:	a5 91       	lpm	r26, Z+
     86e:	b4 91       	lpm	r27, Z
     870:	4a 17       	cp	r20, r26
     872:	5b 07       	cpc	r21, r27
     874:	11 f0       	breq	.+4      	; 0x87a <__vector_11+0x90>
     876:	07 96       	adiw	r24, 0x07	; 7
     878:	1a c0       	rjmp	.+52     	; 0x8ae <__vector_11+0xc4>
     87a:	fc 01       	movw	r30, r24
     87c:	34 96       	adiw	r30, 0x04	; 4
     87e:	45 91       	lpm	r20, Z+
     880:	54 91       	lpm	r21, Z
     882:	fc 01       	movw	r30, r24
     884:	36 96       	adiw	r30, 0x06	; 6
     886:	24 91       	lpm	r18, Z
     888:	87 2f       	mov	r24, r23
     88a:	90 e0       	ldi	r25, 0x00	; 0
     88c:	9c 2b       	or	r25, r28
     88e:	8f 3f       	cpi	r24, 0xFF	; 255
     890:	91 05       	cpc	r25, r1
     892:	19 f0       	breq	.+6      	; 0x89a <__vector_11+0xb0>
     894:	10 f0       	brcs	.+4      	; 0x89a <__vector_11+0xb0>
     896:	8f ef       	ldi	r24, 0xFF	; 255
     898:	90 e0       	ldi	r25, 0x00	; 0
     89a:	82 17       	cp	r24, r18
     89c:	08 f4       	brcc	.+2      	; 0x8a0 <__vector_11+0xb6>
     89e:	28 2f       	mov	r18, r24
     8a0:	a8 ee       	ldi	r26, 0xE8	; 232
     8a2:	b0 e0       	ldi	r27, 0x00	; 0
     8a4:	70 e1       	ldi	r23, 0x10	; 16
     8a6:	6e ef       	ldi	r22, 0xFE	; 254
     8a8:	c1 ef       	ldi	r28, 0xF1	; 241
     8aa:	d0 e0       	ldi	r29, 0x00	; 0
     8ac:	03 c0       	rjmp	.+6      	; 0x8b4 <__vector_11+0xca>
     8ae:	61 50       	subi	r22, 0x01	; 1
     8b0:	99 f6       	brne	.-90     	; 0x858 <__vector_11+0x6e>
     8b2:	cb cf       	rjmp	.-106    	; 0x84a <__vector_11+0x60>
     8b4:	8c 91       	ld	r24, X
     8b6:	98 2f       	mov	r25, r24
     8b8:	95 70       	andi	r25, 0x05	; 5
     8ba:	e1 f3       	breq	.-8      	; 0x8b4 <__vector_11+0xca>
     8bc:	82 fd       	sbrc	r24, 2
     8be:	03 c1       	rjmp	.+518    	; 0xac6 <__vector_11+0x2dc>
     8c0:	32 2f       	mov	r19, r18
     8c2:	21 31       	cpi	r18, 0x11	; 17
     8c4:	08 f0       	brcs	.+2      	; 0x8c8 <__vector_11+0xde>
     8c6:	37 2f       	mov	r19, r23
     8c8:	33 23       	and	r19, r19
     8ca:	09 f4       	brne	.+2      	; 0x8ce <__vector_11+0xe4>
     8cc:	f9 c0       	rjmp	.+498    	; 0xac0 <__vector_11+0x2d6>
     8ce:	fa 01       	movw	r30, r20
     8d0:	83 2f       	mov	r24, r19
     8d2:	94 91       	lpm	r25, Z
     8d4:	98 83       	st	Y, r25
     8d6:	81 50       	subi	r24, 0x01	; 1
     8d8:	31 96       	adiw	r30, 0x01	; 1
     8da:	81 11       	cpse	r24, r1
     8dc:	fa cf       	rjmp	.-12     	; 0x8d2 <__vector_11+0xe8>
     8de:	8f ef       	ldi	r24, 0xFF	; 255
     8e0:	83 0f       	add	r24, r19
     8e2:	90 e0       	ldi	r25, 0x00	; 0
     8e4:	01 96       	adiw	r24, 0x01	; 1
     8e6:	48 0f       	add	r20, r24
     8e8:	59 1f       	adc	r21, r25
     8ea:	23 1b       	sub	r18, r19
     8ec:	6c 93       	st	X, r22
     8ee:	21 11       	cpse	r18, r1
     8f0:	e1 cf       	rjmp	.-62     	; 0x8b4 <__vector_11+0xca>
     8f2:	30 31       	cpi	r19, 0x10	; 16
     8f4:	f9 f2       	breq	.-66     	; 0x8b4 <__vector_11+0xca>
     8f6:	e7 c0       	rjmp	.+462    	; 0xac6 <__vector_11+0x2dc>
     8f8:	85 30       	cpi	r24, 0x05	; 5
     8fa:	61 f4       	brne	.+24     	; 0x914 <__vector_11+0x12a>
     8fc:	8e ef       	ldi	r24, 0xFE	; 254
     8fe:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     902:	e8 ee       	ldi	r30, 0xE8	; 232
     904:	f0 e0       	ldi	r31, 0x00	; 0
     906:	80 81       	ld	r24, Z
     908:	80 ff       	sbrs	r24, 0
     90a:	fd cf       	rjmp	.-6      	; 0x906 <__vector_11+0x11c>
     90c:	20 68       	ori	r18, 0x80	; 128
     90e:	20 93 e3 00 	sts	0x00E3, r18	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
     912:	d9 c0       	rjmp	.+434    	; 0xac6 <__vector_11+0x2dc>
     914:	89 30       	cpi	r24, 0x09	; 9
     916:	09 f0       	breq	.+2      	; 0x91a <__vector_11+0x130>
     918:	35 c0       	rjmp	.+106    	; 0x984 <__vector_11+0x19a>
     91a:	61 11       	cpse	r22, r1
     91c:	cd c0       	rjmp	.+410    	; 0xab8 <__vector_11+0x2ce>
     91e:	20 93 0b 01 	sts	0x010B, r18	; 0x80010b <usb_configuration>
     922:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <__data_end>
     926:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <transmit_flush_timer>
     92a:	8e ef       	ldi	r24, 0xFE	; 254
     92c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     930:	81 e0       	ldi	r24, 0x01	; 1
     932:	23 e2       	ldi	r18, 0x23	; 35
     934:	32 e0       	ldi	r19, 0x02	; 2
     936:	c9 ee       	ldi	r28, 0xE9	; 233
     938:	d0 e0       	ldi	r29, 0x00	; 0
     93a:	ab ee       	ldi	r26, 0xEB	; 235
     93c:	b0 e0       	ldi	r27, 0x00	; 0
     93e:	0c ee       	ldi	r16, 0xEC	; 236
     940:	10 e0       	ldi	r17, 0x00	; 0
     942:	6d ee       	ldi	r22, 0xED	; 237
     944:	70 e0       	ldi	r23, 0x00	; 0
     946:	88 83       	st	Y, r24
     948:	a9 01       	movw	r20, r18
     94a:	4f 5f       	subi	r20, 0xFF	; 255
     94c:	5f 4f       	sbci	r21, 0xFF	; 255
     94e:	f9 01       	movw	r30, r18
     950:	94 91       	lpm	r25, Z
     952:	9c 93       	st	X, r25
     954:	99 23       	and	r25, r25
     956:	61 f0       	breq	.+24     	; 0x970 <__vector_11+0x186>
     958:	fa 01       	movw	r30, r20
     95a:	44 91       	lpm	r20, Z
     95c:	f8 01       	movw	r30, r16
     95e:	40 83       	st	Z, r20
     960:	f9 01       	movw	r30, r18
     962:	32 96       	adiw	r30, 0x02	; 2
     964:	94 91       	lpm	r25, Z
     966:	2d 5f       	subi	r18, 0xFD	; 253
     968:	3f 4f       	sbci	r19, 0xFF	; 255
     96a:	fb 01       	movw	r30, r22
     96c:	90 83       	st	Z, r25
     96e:	01 c0       	rjmp	.+2      	; 0x972 <__vector_11+0x188>
     970:	9a 01       	movw	r18, r20
     972:	8f 5f       	subi	r24, 0xFF	; 255
     974:	85 30       	cpi	r24, 0x05	; 5
     976:	39 f7       	brne	.-50     	; 0x946 <__vector_11+0x15c>
     978:	ea ee       	ldi	r30, 0xEA	; 234
     97a:	f0 e0       	ldi	r31, 0x00	; 0
     97c:	8e e1       	ldi	r24, 0x1E	; 30
     97e:	80 83       	st	Z, r24
     980:	10 82       	st	Z, r1
     982:	a1 c0       	rjmp	.+322    	; 0xac6 <__vector_11+0x2dc>
     984:	88 30       	cpi	r24, 0x08	; 8
     986:	81 f4       	brne	.+32     	; 0x9a8 <__vector_11+0x1be>
     988:	60 38       	cpi	r22, 0x80	; 128
     98a:	09 f0       	breq	.+2      	; 0x98e <__vector_11+0x1a4>
     98c:	95 c0       	rjmp	.+298    	; 0xab8 <__vector_11+0x2ce>
     98e:	e8 ee       	ldi	r30, 0xE8	; 232
     990:	f0 e0       	ldi	r31, 0x00	; 0
     992:	80 81       	ld	r24, Z
     994:	80 ff       	sbrs	r24, 0
     996:	fd cf       	rjmp	.-6      	; 0x992 <__vector_11+0x1a8>
     998:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <usb_configuration>
     99c:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     9a0:	8e ef       	ldi	r24, 0xFE	; 254
     9a2:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     9a6:	8f c0       	rjmp	.+286    	; 0xac6 <__vector_11+0x2dc>
     9a8:	81 32       	cpi	r24, 0x21	; 33
     9aa:	b9 f4       	brne	.+46     	; 0x9da <__vector_11+0x1f0>
     9ac:	61 3a       	cpi	r22, 0xA1	; 161
     9ae:	09 f0       	breq	.+2      	; 0x9b2 <__vector_11+0x1c8>
     9b0:	83 c0       	rjmp	.+262    	; 0xab8 <__vector_11+0x2ce>
     9b2:	e8 ee       	ldi	r30, 0xE8	; 232
     9b4:	f0 e0       	ldi	r31, 0x00	; 0
     9b6:	80 81       	ld	r24, Z
     9b8:	80 ff       	sbrs	r24, 0
     9ba:	fd cf       	rjmp	.-6      	; 0x9b6 <__vector_11+0x1cc>
     9bc:	e0 e0       	ldi	r30, 0x00	; 0
     9be:	f1 e0       	ldi	r31, 0x01	; 1
     9c0:	27 e0       	ldi	r18, 0x07	; 7
     9c2:	31 e0       	ldi	r19, 0x01	; 1
     9c4:	a1 ef       	ldi	r26, 0xF1	; 241
     9c6:	b0 e0       	ldi	r27, 0x00	; 0
     9c8:	81 91       	ld	r24, Z+
     9ca:	8c 93       	st	X, r24
     9cc:	e2 17       	cp	r30, r18
     9ce:	f3 07       	cpc	r31, r19
     9d0:	d9 f7       	brne	.-10     	; 0x9c8 <__vector_11+0x1de>
     9d2:	8e ef       	ldi	r24, 0xFE	; 254
     9d4:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     9d8:	76 c0       	rjmp	.+236    	; 0xac6 <__vector_11+0x2dc>
     9da:	80 32       	cpi	r24, 0x20	; 32
     9dc:	d1 f4       	brne	.+52     	; 0xa12 <__vector_11+0x228>
     9de:	61 32       	cpi	r22, 0x21	; 33
     9e0:	09 f0       	breq	.+2      	; 0x9e4 <__vector_11+0x1fa>
     9e2:	6a c0       	rjmp	.+212    	; 0xab8 <__vector_11+0x2ce>
     9e4:	e8 ee       	ldi	r30, 0xE8	; 232
     9e6:	f0 e0       	ldi	r31, 0x00	; 0
     9e8:	80 81       	ld	r24, Z
     9ea:	82 ff       	sbrs	r24, 2
     9ec:	fd cf       	rjmp	.-6      	; 0x9e8 <__vector_11+0x1fe>
     9ee:	e0 e0       	ldi	r30, 0x00	; 0
     9f0:	f1 e0       	ldi	r31, 0x01	; 1
     9f2:	27 e0       	ldi	r18, 0x07	; 7
     9f4:	31 e0       	ldi	r19, 0x01	; 1
     9f6:	a1 ef       	ldi	r26, 0xF1	; 241
     9f8:	b0 e0       	ldi	r27, 0x00	; 0
     9fa:	8c 91       	ld	r24, X
     9fc:	81 93       	st	Z+, r24
     9fe:	e2 17       	cp	r30, r18
     a00:	f3 07       	cpc	r31, r19
     a02:	d9 f7       	brne	.-10     	; 0x9fa <__vector_11+0x210>
     a04:	e8 ee       	ldi	r30, 0xE8	; 232
     a06:	f0 e0       	ldi	r31, 0x00	; 0
     a08:	8b ef       	ldi	r24, 0xFB	; 251
     a0a:	80 83       	st	Z, r24
     a0c:	8e ef       	ldi	r24, 0xFE	; 254
     a0e:	80 83       	st	Z, r24
     a10:	5a c0       	rjmp	.+180    	; 0xac6 <__vector_11+0x2dc>
     a12:	82 32       	cpi	r24, 0x22	; 34
     a14:	71 f4       	brne	.+28     	; 0xa32 <__vector_11+0x248>
     a16:	61 32       	cpi	r22, 0x21	; 33
     a18:	09 f0       	breq	.+2      	; 0xa1c <__vector_11+0x232>
     a1a:	4e c0       	rjmp	.+156    	; 0xab8 <__vector_11+0x2ce>
     a1c:	20 93 08 01 	sts	0x0108, r18	; 0x800108 <__data_end>
     a20:	e8 ee       	ldi	r30, 0xE8	; 232
     a22:	f0 e0       	ldi	r31, 0x00	; 0
     a24:	80 81       	ld	r24, Z
     a26:	80 ff       	sbrs	r24, 0
     a28:	fd cf       	rjmp	.-6      	; 0xa24 <__vector_11+0x23a>
     a2a:	8e ef       	ldi	r24, 0xFE	; 254
     a2c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     a30:	4a c0       	rjmp	.+148    	; 0xac6 <__vector_11+0x2dc>
     a32:	81 11       	cpse	r24, r1
     a34:	1a c0       	rjmp	.+52     	; 0xa6a <__vector_11+0x280>
     a36:	e8 ee       	ldi	r30, 0xE8	; 232
     a38:	f0 e0       	ldi	r31, 0x00	; 0
     a3a:	80 81       	ld	r24, Z
     a3c:	80 ff       	sbrs	r24, 0
     a3e:	fd cf       	rjmp	.-6      	; 0xa3a <__vector_11+0x250>
     a40:	62 38       	cpi	r22, 0x82	; 130
     a42:	51 f4       	brne	.+20     	; 0xa58 <__vector_11+0x26e>
     a44:	e9 ee       	ldi	r30, 0xE9	; 233
     a46:	f0 e0       	ldi	r31, 0x00	; 0
     a48:	40 83       	st	Z, r20
     a4a:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
     a4e:	85 fb       	bst	r24, 5
     a50:	88 27       	eor	r24, r24
     a52:	80 f9       	bld	r24, 0
     a54:	10 82       	st	Z, r1
     a56:	01 c0       	rjmp	.+2      	; 0xa5a <__vector_11+0x270>
     a58:	80 e0       	ldi	r24, 0x00	; 0
     a5a:	e1 ef       	ldi	r30, 0xF1	; 241
     a5c:	f0 e0       	ldi	r31, 0x00	; 0
     a5e:	80 83       	st	Z, r24
     a60:	10 82       	st	Z, r1
     a62:	8e ef       	ldi	r24, 0xFE	; 254
     a64:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     a68:	2e c0       	rjmp	.+92     	; 0xac6 <__vector_11+0x2dc>
     a6a:	98 2f       	mov	r25, r24
     a6c:	9d 7f       	andi	r25, 0xFD	; 253
     a6e:	91 30       	cpi	r25, 0x01	; 1
     a70:	19 f5       	brne	.+70     	; 0xab8 <__vector_11+0x2ce>
     a72:	62 30       	cpi	r22, 0x02	; 2
     a74:	09 f5       	brne	.+66     	; 0xab8 <__vector_11+0x2ce>
     a76:	23 2b       	or	r18, r19
     a78:	f9 f4       	brne	.+62     	; 0xab8 <__vector_11+0x2ce>
     a7a:	4f 77       	andi	r20, 0x7F	; 127
     a7c:	9f ef       	ldi	r25, 0xFF	; 255
     a7e:	94 0f       	add	r25, r20
     a80:	94 30       	cpi	r25, 0x04	; 4
     a82:	d0 f4       	brcc	.+52     	; 0xab8 <__vector_11+0x2ce>
     a84:	9e ef       	ldi	r25, 0xFE	; 254
     a86:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     a8a:	40 93 e9 00 	sts	0x00E9, r20	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
     a8e:	83 30       	cpi	r24, 0x03	; 3
     a90:	21 f4       	brne	.+8      	; 0xa9a <__vector_11+0x2b0>
     a92:	81 e2       	ldi	r24, 0x21	; 33
     a94:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
     a98:	16 c0       	rjmp	.+44     	; 0xac6 <__vector_11+0x2dc>
     a9a:	89 e1       	ldi	r24, 0x19	; 25
     a9c:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
     aa0:	81 e0       	ldi	r24, 0x01	; 1
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	02 c0       	rjmp	.+4      	; 0xaaa <__vector_11+0x2c0>
     aa6:	88 0f       	add	r24, r24
     aa8:	99 1f       	adc	r25, r25
     aaa:	4a 95       	dec	r20
     aac:	e2 f7       	brpl	.-8      	; 0xaa6 <__vector_11+0x2bc>
     aae:	ea ee       	ldi	r30, 0xEA	; 234
     ab0:	f0 e0       	ldi	r31, 0x00	; 0
     ab2:	80 83       	st	Z, r24
     ab4:	10 82       	st	Z, r1
     ab6:	07 c0       	rjmp	.+14     	; 0xac6 <__vector_11+0x2dc>
     ab8:	81 e2       	ldi	r24, 0x21	; 33
     aba:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
     abe:	03 c0       	rjmp	.+6      	; 0xac6 <__vector_11+0x2dc>
     ac0:	6c 93       	st	X, r22
     ac2:	21 11       	cpse	r18, r1
     ac4:	f7 ce       	rjmp	.-530    	; 0x8b4 <__vector_11+0xca>
     ac6:	ff 91       	pop	r31
     ac8:	ef 91       	pop	r30
     aca:	df 91       	pop	r29
     acc:	cf 91       	pop	r28
     ace:	bf 91       	pop	r27
     ad0:	af 91       	pop	r26
     ad2:	9f 91       	pop	r25
     ad4:	8f 91       	pop	r24
     ad6:	7f 91       	pop	r23
     ad8:	6f 91       	pop	r22
     ada:	5f 91       	pop	r21
     adc:	4f 91       	pop	r20
     ade:	3f 91       	pop	r19
     ae0:	2f 91       	pop	r18
     ae2:	1f 91       	pop	r17
     ae4:	0f 91       	pop	r16
     ae6:	0f 90       	pop	r0
     ae8:	0f be       	out	0x3f, r0	; 63
     aea:	0f 90       	pop	r0
     aec:	1f 90       	pop	r1
     aee:	18 95       	reti

00000af0 <print_P>:
     af0:	0f 93       	push	r16
     af2:	1f 93       	push	r17
     af4:	cf 93       	push	r28
     af6:	8c 01       	movw	r16, r24
     af8:	0f 5f       	subi	r16, 0xFF	; 255
     afa:	1f 4f       	sbci	r17, 0xFF	; 255
     afc:	fc 01       	movw	r30, r24
     afe:	c4 91       	lpm	r28, Z
     b00:	cc 23       	and	r28, r28
     b02:	71 f0       	breq	.+28     	; 0xb20 <__stack+0x21>
     b04:	ca 30       	cpi	r28, 0x0A	; 10
     b06:	19 f4       	brne	.+6      	; 0xb0e <__stack+0xf>
     b08:	8d e0       	ldi	r24, 0x0D	; 13
     b0a:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <m_usb_tx_char>
     b0e:	8c 2f       	mov	r24, r28
     b10:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <m_usb_tx_char>
     b14:	f8 01       	movw	r30, r16
     b16:	c4 91       	lpm	r28, Z
     b18:	0f 5f       	subi	r16, 0xFF	; 255
     b1a:	1f 4f       	sbci	r17, 0xFF	; 255
     b1c:	c1 11       	cpse	r28, r1
     b1e:	f2 cf       	rjmp	.-28     	; 0xb04 <__stack+0x5>
     b20:	cf 91       	pop	r28
     b22:	1f 91       	pop	r17
     b24:	0f 91       	pop	r16
     b26:	08 95       	ret

00000b28 <m_usb_tx_int>:
}

void m_usb_tx_int(int i)
{
     b28:	ef 92       	push	r14
     b2a:	ff 92       	push	r15
     b2c:	0f 93       	push	r16
     b2e:	1f 93       	push	r17
     b30:	cf 93       	push	r28
     b32:	df 93       	push	r29
     b34:	cd b7       	in	r28, 0x3d	; 61
     b36:	de b7       	in	r29, 0x3e	; 62
     b38:	27 97       	sbiw	r28, 0x07	; 7
     b3a:	0f b6       	in	r0, 0x3f	; 63
     b3c:	f8 94       	cli
     b3e:	de bf       	out	0x3e, r29	; 62
     b40:	0f be       	out	0x3f, r0	; 63
     b42:	cd bf       	out	0x3d, r28	; 61
	char string[7] = {0,0,0,0,0,0,0};
     b44:	8e 01       	movw	r16, r28
     b46:	0f 5f       	subi	r16, 0xFF	; 255
     b48:	1f 4f       	sbci	r17, 0xFF	; 255
     b4a:	27 e0       	ldi	r18, 0x07	; 7
     b4c:	f8 01       	movw	r30, r16
     b4e:	11 92       	st	Z+, r1
     b50:	2a 95       	dec	r18
     b52:	e9 f7       	brne	.-6      	; 0xb4e <m_usb_tx_int+0x26>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     b54:	4a e0       	ldi	r20, 0x0A	; 10
     b56:	b8 01       	movw	r22, r16
     b58:	0e 94 00 12 	call	0x2400	; 0x2400 <__itoa_ncheck>
     b5c:	7e 01       	movw	r14, r28
     b5e:	f8 e0       	ldi	r31, 0x08	; 8
     b60:	ef 0e       	add	r14, r31
     b62:	f1 1c       	adc	r15, r1
	itoa(i,string,10);
	for(i=0;i<7;i++){
        if(string[i]){
     b64:	f8 01       	movw	r30, r16
     b66:	81 91       	ld	r24, Z+
     b68:	8f 01       	movw	r16, r30
     b6a:	81 11       	cpse	r24, r1
            m_usb_tx_char(string[i]);
     b6c:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <m_usb_tx_char>

void m_usb_tx_int(int i)
{
	char string[7] = {0,0,0,0,0,0,0};
	itoa(i,string,10);
	for(i=0;i<7;i++){
     b70:	0e 15       	cp	r16, r14
     b72:	1f 05       	cpc	r17, r15
     b74:	b9 f7       	brne	.-18     	; 0xb64 <m_usb_tx_int+0x3c>
        if(string[i]){
            m_usb_tx_char(string[i]);
        }
	}
}
     b76:	27 96       	adiw	r28, 0x07	; 7
     b78:	0f b6       	in	r0, 0x3f	; 63
     b7a:	f8 94       	cli
     b7c:	de bf       	out	0x3e, r29	; 62
     b7e:	0f be       	out	0x3f, r0	; 63
     b80:	cd bf       	out	0x3d, r28	; 61
     b82:	df 91       	pop	r29
     b84:	cf 91       	pop	r28
     b86:	1f 91       	pop	r17
     b88:	0f 91       	pop	r16
     b8a:	ff 90       	pop	r15
     b8c:	ef 90       	pop	r14
     b8e:	08 95       	ret

00000b90 <twi_wait>:
	}
}

unsigned char twi_wait(void)
{
	unsigned int wait=0;
     b90:	20 e0       	ldi	r18, 0x00	; 0
     b92:	30 e0       	ldi	r19, 0x00	; 0
	while((!(TWCR & (1<<TWINT))) && (wait++<TWI_MAX_WAIT)){};	// wait for acknowledgement that they byte was sent
     b94:	ec eb       	ldi	r30, 0xBC	; 188
     b96:	f0 e0       	ldi	r31, 0x00	; 0
     b98:	80 81       	ld	r24, Z
     b9a:	88 23       	and	r24, r24
     b9c:	34 f0       	brlt	.+12     	; 0xbaa <twi_wait+0x1a>
     b9e:	2f 5f       	subi	r18, 0xFF	; 255
     ba0:	3f 4f       	sbci	r19, 0xFF	; 255
     ba2:	29 3e       	cpi	r18, 0xE9	; 233
     ba4:	83 e0       	ldi	r24, 0x03	; 3
     ba6:	38 07       	cpc	r19, r24
     ba8:	b9 f7       	brne	.-18     	; 0xb98 <twi_wait+0x8>
	if(wait==TWI_MAX_WAIT)
     baa:	81 e0       	ldi	r24, 0x01	; 1
     bac:	28 3e       	cpi	r18, 0xE8	; 232
     bae:	33 40       	sbci	r19, 0x03	; 3
     bb0:	09 f4       	brne	.+2      	; 0xbb4 <twi_wait+0x24>
     bb2:	80 e0       	ldi	r24, 0x00	; 0
	{
		return 0;					// fail
	} else {
		return 1;					// success
	}
}
     bb4:	08 95       	ret

00000bb6 <send_byte>:
	return 1;	// success
}	

unsigned char send_byte(unsigned char byte)
{
	TWDR = byte;					// load the byte
     bb6:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR = (1<<TWINT) | (1<<TWEN);	// send the byte
     bba:	84 e8       	ldi	r24, 0x84	; 132
     bbc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	if(twi_wait())					// timed out
     bc0:	0e 94 c8 05 	call	0xb90	; 0xb90 <twi_wait>
     bc4:	88 23       	and	r24, r24
     bc6:	19 f0       	breq	.+6      	; 0xbce <send_byte+0x18>
	{
		return (TWSR & 0xF8);		// return the status with prescaler bits masked out
     bc8:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     bcc:	88 7f       	andi	r24, 0xF8	; 248
	} else {
		return 0;					// comm failure
	}
}
     bce:	08 95       	ret

00000bd0 <start_write>:
//
//


unsigned char start_write(unsigned char address)
{
     bd0:	cf 93       	push	r28
     bd2:	c8 2f       	mov	r28, r24
	unsigned char status;
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
     bd4:	94 ea       	ldi	r25, 0xA4	; 164
     bd6:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	if(!twi_wait())
     bda:	0e 94 c8 05 	call	0xb90	; 0xb90 <twi_wait>
     bde:	88 23       	and	r24, r24
     be0:	61 f0       	breq	.+24     	; 0xbfa <start_write+0x2a>
	{
		return 0;
	}
	
	// ADDRESS
	status = send_byte(address<<1);
     be2:	8c 2f       	mov	r24, r28
     be4:	88 0f       	add	r24, r24
     be6:	0e 94 db 05 	call	0xbb6	; 0xbb6 <send_byte>
	if(status== 0x20){ // ACK was not received - may not be connected/listening
     bea:	80 32       	cpi	r24, 0x20	; 32
     bec:	29 f4       	brne	.+10     	; 0xbf8 <start_write+0x28>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
     bee:	84 e9       	ldi	r24, 0x94	; 148
     bf0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
		return 0;	// failure
     bf4:	80 e0       	ldi	r24, 0x00	; 0
     bf6:	01 c0       	rjmp	.+2      	; 0xbfa <start_write+0x2a>
	}	
	return 1;	// success
     bf8:	81 e0       	ldi	r24, 0x01	; 1
}	
     bfa:	cf 91       	pop	r28
     bfc:	08 95       	ret

00000bfe <m_wii_open>:
unsigned char twi_wait(void);
void end(void);

char m_wii_open()
{	
	m_bus_init();
     bfe:	0e 94 32 03 	call	0x664	; 0x664 <m_bus_init>

	// enter configuration mode
	if(!start_write(MWIITWIADDR)){return 0;}
     c02:	88 e5       	ldi	r24, 0x58	; 88
     c04:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <start_write>
     c08:	88 23       	and	r24, r24
     c0a:	09 f4       	brne	.+2      	; 0xc0e <m_wii_open+0x10>
     c0c:	cd c0       	rjmp	.+410    	; 0xda8 <m_wii_open+0x1aa>
	if(!send_byte(0x30)){return 0;}
     c0e:	80 e3       	ldi	r24, 0x30	; 48
     c10:	0e 94 db 05 	call	0xbb6	; 0xbb6 <send_byte>
     c14:	88 23       	and	r24, r24
     c16:	09 f4       	brne	.+2      	; 0xc1a <m_wii_open+0x1c>
     c18:	c9 c0       	rjmp	.+402    	; 0xdac <m_wii_open+0x1ae>
	if(!send_byte(0x01)){return 0;}
     c1a:	81 e0       	ldi	r24, 0x01	; 1
     c1c:	0e 94 db 05 	call	0xbb6	; 0xbb6 <send_byte>
     c20:	88 23       	and	r24, r24
     c22:	09 f4       	brne	.+2      	; 0xc26 <m_wii_open+0x28>
     c24:	c5 c0       	rjmp	.+394    	; 0xdb0 <m_wii_open+0x1b2>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
     c26:	84 e9       	ldi	r24, 0x94	; 148
     c28:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     c2c:	83 ec       	ldi	r24, 0xC3	; 195
     c2e:	99 e0       	ldi	r25, 0x09	; 9
     c30:	01 97       	sbiw	r24, 0x01	; 1
     c32:	f1 f7       	brne	.-4      	; 0xc30 <m_wii_open+0x32>
     c34:	00 c0       	rjmp	.+0      	; 0xc36 <m_wii_open+0x38>
     c36:	00 00       	nop
	if(!send_byte(0x01)){return 0;}
	end();
	m_wait(INTERPACKET);
		
	// sensitivity setting, part 1
	if(!start_write(MWIITWIADDR)){return 0;}
     c38:	88 e5       	ldi	r24, 0x58	; 88
     c3a:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <start_write>
     c3e:	88 23       	and	r24, r24
     c40:	09 f4       	brne	.+2      	; 0xc44 <m_wii_open+0x46>
     c42:	b8 c0       	rjmp	.+368    	; 0xdb4 <m_wii_open+0x1b6>
	if(!send_byte(0x00)){return 0;}
     c44:	80 e0       	ldi	r24, 0x00	; 0
     c46:	0e 94 db 05 	call	0xbb6	; 0xbb6 <send_byte>
     c4a:	88 23       	and	r24, r24
     c4c:	09 f4       	brne	.+2      	; 0xc50 <m_wii_open+0x52>
     c4e:	b4 c0       	rjmp	.+360    	; 0xdb8 <m_wii_open+0x1ba>
	if(!send_byte(0x00)){return 0;}
     c50:	80 e0       	ldi	r24, 0x00	; 0
     c52:	0e 94 db 05 	call	0xbb6	; 0xbb6 <send_byte>
     c56:	88 23       	and	r24, r24
     c58:	09 f4       	brne	.+2      	; 0xc5c <m_wii_open+0x5e>
     c5a:	b0 c0       	rjmp	.+352    	; 0xdbc <m_wii_open+0x1be>
	if(!send_byte(0x00)){return 0;}
     c5c:	80 e0       	ldi	r24, 0x00	; 0
     c5e:	0e 94 db 05 	call	0xbb6	; 0xbb6 <send_byte>
     c62:	88 23       	and	r24, r24
     c64:	09 f4       	brne	.+2      	; 0xc68 <m_wii_open+0x6a>
     c66:	ac c0       	rjmp	.+344    	; 0xdc0 <m_wii_open+0x1c2>
	if(!send_byte(0x00)){return 0;}
     c68:	80 e0       	ldi	r24, 0x00	; 0
     c6a:	0e 94 db 05 	call	0xbb6	; 0xbb6 <send_byte>
     c6e:	88 23       	and	r24, r24
     c70:	09 f4       	brne	.+2      	; 0xc74 <m_wii_open+0x76>
     c72:	a8 c0       	rjmp	.+336    	; 0xdc4 <m_wii_open+0x1c6>
	if(!send_byte(0x00)){return 0;}
     c74:	80 e0       	ldi	r24, 0x00	; 0
     c76:	0e 94 db 05 	call	0xbb6	; 0xbb6 <send_byte>
     c7a:	88 23       	and	r24, r24
     c7c:	09 f4       	brne	.+2      	; 0xc80 <m_wii_open+0x82>
     c7e:	a4 c0       	rjmp	.+328    	; 0xdc8 <m_wii_open+0x1ca>
	if(!send_byte(0x00)){return 0;}
     c80:	80 e0       	ldi	r24, 0x00	; 0
     c82:	0e 94 db 05 	call	0xbb6	; 0xbb6 <send_byte>
     c86:	88 23       	and	r24, r24
     c88:	09 f4       	brne	.+2      	; 0xc8c <m_wii_open+0x8e>
     c8a:	a0 c0       	rjmp	.+320    	; 0xdcc <m_wii_open+0x1ce>
	if(!send_byte(0x00)){return 0;}
     c8c:	80 e0       	ldi	r24, 0x00	; 0
     c8e:	0e 94 db 05 	call	0xbb6	; 0xbb6 <send_byte>
     c92:	88 23       	and	r24, r24
     c94:	09 f4       	brne	.+2      	; 0xc98 <m_wii_open+0x9a>
     c96:	9c c0       	rjmp	.+312    	; 0xdd0 <m_wii_open+0x1d2>
	if(!send_byte(0x90)){return 0;} // p0
     c98:	80 e9       	ldi	r24, 0x90	; 144
     c9a:	0e 94 db 05 	call	0xbb6	; 0xbb6 <send_byte>
     c9e:	88 23       	and	r24, r24
     ca0:	09 f4       	brne	.+2      	; 0xca4 <m_wii_open+0xa6>
     ca2:	98 c0       	rjmp	.+304    	; 0xdd4 <m_wii_open+0x1d6>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
     ca4:	84 e9       	ldi	r24, 0x94	; 148
     ca6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     caa:	83 ec       	ldi	r24, 0xC3	; 195
     cac:	99 e0       	ldi	r25, 0x09	; 9
     cae:	01 97       	sbiw	r24, 0x01	; 1
     cb0:	f1 f7       	brne	.-4      	; 0xcae <m_wii_open+0xb0>
     cb2:	00 c0       	rjmp	.+0      	; 0xcb4 <m_wii_open+0xb6>
     cb4:	00 00       	nop
	end();

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 2
	if(!start_write(MWIITWIADDR)){return 0;}
     cb6:	88 e5       	ldi	r24, 0x58	; 88
     cb8:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <start_write>
     cbc:	88 23       	and	r24, r24
     cbe:	09 f4       	brne	.+2      	; 0xcc2 <m_wii_open+0xc4>
     cc0:	8b c0       	rjmp	.+278    	; 0xdd8 <m_wii_open+0x1da>
	if(!send_byte(0x07)){return 0;}
     cc2:	87 e0       	ldi	r24, 0x07	; 7
     cc4:	0e 94 db 05 	call	0xbb6	; 0xbb6 <send_byte>
     cc8:	88 23       	and	r24, r24
     cca:	09 f4       	brne	.+2      	; 0xcce <m_wii_open+0xd0>
     ccc:	87 c0       	rjmp	.+270    	; 0xddc <m_wii_open+0x1de>
	if(!send_byte(0x00)){return 0;}
     cce:	80 e0       	ldi	r24, 0x00	; 0
     cd0:	0e 94 db 05 	call	0xbb6	; 0xbb6 <send_byte>
     cd4:	88 23       	and	r24, r24
     cd6:	09 f4       	brne	.+2      	; 0xcda <m_wii_open+0xdc>
     cd8:	83 c0       	rjmp	.+262    	; 0xde0 <m_wii_open+0x1e2>
	if(!send_byte(0x41)){return 0;} // p1
     cda:	81 e4       	ldi	r24, 0x41	; 65
     cdc:	0e 94 db 05 	call	0xbb6	; 0xbb6 <send_byte>
     ce0:	88 23       	and	r24, r24
     ce2:	09 f4       	brne	.+2      	; 0xce6 <m_wii_open+0xe8>
     ce4:	7f c0       	rjmp	.+254    	; 0xde4 <m_wii_open+0x1e6>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
     ce6:	84 e9       	ldi	r24, 0x94	; 148
     ce8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     cec:	83 ec       	ldi	r24, 0xC3	; 195
     cee:	99 e0       	ldi	r25, 0x09	; 9
     cf0:	01 97       	sbiw	r24, 0x01	; 1
     cf2:	f1 f7       	brne	.-4      	; 0xcf0 <m_wii_open+0xf2>
     cf4:	00 c0       	rjmp	.+0      	; 0xcf6 <m_wii_open+0xf8>
     cf6:	00 00       	nop
	end();

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 3
	if(!start_write(MWIITWIADDR)){return 0;}
     cf8:	88 e5       	ldi	r24, 0x58	; 88
     cfa:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <start_write>
     cfe:	88 23       	and	r24, r24
     d00:	09 f4       	brne	.+2      	; 0xd04 <m_wii_open+0x106>
     d02:	72 c0       	rjmp	.+228    	; 0xde8 <m_wii_open+0x1ea>
	if(!send_byte(0x1A)){return 0;}
     d04:	8a e1       	ldi	r24, 0x1A	; 26
     d06:	0e 94 db 05 	call	0xbb6	; 0xbb6 <send_byte>
     d0a:	88 23       	and	r24, r24
     d0c:	09 f4       	brne	.+2      	; 0xd10 <m_wii_open+0x112>
     d0e:	6e c0       	rjmp	.+220    	; 0xdec <m_wii_open+0x1ee>
	if(!send_byte(0x40)){return 0;} // p2
     d10:	80 e4       	ldi	r24, 0x40	; 64
     d12:	0e 94 db 05 	call	0xbb6	; 0xbb6 <send_byte>
     d16:	88 23       	and	r24, r24
     d18:	09 f4       	brne	.+2      	; 0xd1c <m_wii_open+0x11e>
     d1a:	6a c0       	rjmp	.+212    	; 0xdf0 <m_wii_open+0x1f2>
	if(!send_byte(0x00)){return 0;} // p3
     d1c:	80 e0       	ldi	r24, 0x00	; 0
     d1e:	0e 94 db 05 	call	0xbb6	; 0xbb6 <send_byte>
     d22:	88 23       	and	r24, r24
     d24:	09 f4       	brne	.+2      	; 0xd28 <m_wii_open+0x12a>
     d26:	66 c0       	rjmp	.+204    	; 0xdf4 <m_wii_open+0x1f6>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
     d28:	84 e9       	ldi	r24, 0x94	; 148
     d2a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     d2e:	83 ec       	ldi	r24, 0xC3	; 195
     d30:	99 e0       	ldi	r25, 0x09	; 9
     d32:	01 97       	sbiw	r24, 0x01	; 1
     d34:	f1 f7       	brne	.-4      	; 0xd32 <m_wii_open+0x134>
     d36:	00 c0       	rjmp	.+0      	; 0xd38 <m_wii_open+0x13a>
     d38:	00 00       	nop
	end();

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
     d3a:	88 e5       	ldi	r24, 0x58	; 88
     d3c:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <start_write>
     d40:	88 23       	and	r24, r24
     d42:	09 f4       	brne	.+2      	; 0xd46 <m_wii_open+0x148>
     d44:	59 c0       	rjmp	.+178    	; 0xdf8 <m_wii_open+0x1fa>
	if(!send_byte(0x33)){return 0;}
     d46:	83 e3       	ldi	r24, 0x33	; 51
     d48:	0e 94 db 05 	call	0xbb6	; 0xbb6 <send_byte>
     d4c:	88 23       	and	r24, r24
     d4e:	09 f4       	brne	.+2      	; 0xd52 <m_wii_open+0x154>
     d50:	55 c0       	rjmp	.+170    	; 0xdfc <m_wii_open+0x1fe>
	if(!send_byte(0x03)){return 0;}
     d52:	83 e0       	ldi	r24, 0x03	; 3
     d54:	0e 94 db 05 	call	0xbb6	; 0xbb6 <send_byte>
     d58:	88 23       	and	r24, r24
     d5a:	09 f4       	brne	.+2      	; 0xd5e <m_wii_open+0x160>
     d5c:	51 c0       	rjmp	.+162    	; 0xe00 <m_wii_open+0x202>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
     d5e:	84 e9       	ldi	r24, 0x94	; 148
     d60:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     d64:	83 ec       	ldi	r24, 0xC3	; 195
     d66:	99 e0       	ldi	r25, 0x09	; 9
     d68:	01 97       	sbiw	r24, 0x01	; 1
     d6a:	f1 f7       	brne	.-4      	; 0xd68 <m_wii_open+0x16a>
     d6c:	00 c0       	rjmp	.+0      	; 0xd6e <m_wii_open+0x170>
     d6e:	00 00       	nop
	end();

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
     d70:	88 e5       	ldi	r24, 0x58	; 88
     d72:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <start_write>
     d76:	88 23       	and	r24, r24
     d78:	09 f4       	brne	.+2      	; 0xd7c <m_wii_open+0x17e>
     d7a:	44 c0       	rjmp	.+136    	; 0xe04 <m_wii_open+0x206>
	if(!send_byte(0x30)){return 0;}
     d7c:	80 e3       	ldi	r24, 0x30	; 48
     d7e:	0e 94 db 05 	call	0xbb6	; 0xbb6 <send_byte>
     d82:	88 23       	and	r24, r24
     d84:	09 f4       	brne	.+2      	; 0xd88 <m_wii_open+0x18a>
     d86:	40 c0       	rjmp	.+128    	; 0xe08 <m_wii_open+0x20a>
	if(!send_byte(0x08)){return 0;}
     d88:	88 e0       	ldi	r24, 0x08	; 8
     d8a:	0e 94 db 05 	call	0xbb6	; 0xbb6 <send_byte>
     d8e:	88 23       	and	r24, r24
     d90:	e9 f1       	breq	.+122    	; 0xe0c <m_wii_open+0x20e>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
     d92:	84 e9       	ldi	r24, 0x94	; 148
     d94:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     d98:	83 ec       	ldi	r24, 0xC3	; 195
     d9a:	99 e0       	ldi	r25, 0x09	; 9
     d9c:	01 97       	sbiw	r24, 0x01	; 1
     d9e:	f1 f7       	brne	.-4      	; 0xd9c <m_wii_open+0x19e>
     da0:	00 c0       	rjmp	.+0      	; 0xda2 <m_wii_open+0x1a4>
     da2:	00 00       	nop
	if(!send_byte(0x08)){return 0;}
	end();
	
	m_wait(INTERPACKET);

	return 1;
     da4:	81 e0       	ldi	r24, 0x01	; 1
     da6:	08 95       	ret
char m_wii_open()
{	
	m_bus_init();

	// enter configuration mode
	if(!start_write(MWIITWIADDR)){return 0;}
     da8:	80 e0       	ldi	r24, 0x00	; 0
     daa:	08 95       	ret
	if(!send_byte(0x30)){return 0;}
     dac:	80 e0       	ldi	r24, 0x00	; 0
     dae:	08 95       	ret
	if(!send_byte(0x01)){return 0;}
     db0:	80 e0       	ldi	r24, 0x00	; 0
     db2:	08 95       	ret
	end();
	m_wait(INTERPACKET);
		
	// sensitivity setting, part 1
	if(!start_write(MWIITWIADDR)){return 0;}
     db4:	80 e0       	ldi	r24, 0x00	; 0
     db6:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
     db8:	80 e0       	ldi	r24, 0x00	; 0
     dba:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
     dbc:	80 e0       	ldi	r24, 0x00	; 0
     dbe:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
     dc0:	80 e0       	ldi	r24, 0x00	; 0
     dc2:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
     dc4:	80 e0       	ldi	r24, 0x00	; 0
     dc6:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
     dc8:	80 e0       	ldi	r24, 0x00	; 0
     dca:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
     dcc:	80 e0       	ldi	r24, 0x00	; 0
     dce:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
     dd0:	80 e0       	ldi	r24, 0x00	; 0
     dd2:	08 95       	ret
	if(!send_byte(0x90)){return 0;} // p0
     dd4:	80 e0       	ldi	r24, 0x00	; 0
     dd6:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 2
	if(!start_write(MWIITWIADDR)){return 0;}
     dd8:	80 e0       	ldi	r24, 0x00	; 0
     dda:	08 95       	ret
	if(!send_byte(0x07)){return 0;}
     ddc:	80 e0       	ldi	r24, 0x00	; 0
     dde:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
     de0:	80 e0       	ldi	r24, 0x00	; 0
     de2:	08 95       	ret
	if(!send_byte(0x41)){return 0;} // p1
     de4:	80 e0       	ldi	r24, 0x00	; 0
     de6:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 3
	if(!start_write(MWIITWIADDR)){return 0;}
     de8:	80 e0       	ldi	r24, 0x00	; 0
     dea:	08 95       	ret
	if(!send_byte(0x1A)){return 0;}
     dec:	80 e0       	ldi	r24, 0x00	; 0
     dee:	08 95       	ret
	if(!send_byte(0x40)){return 0;} // p2
     df0:	80 e0       	ldi	r24, 0x00	; 0
     df2:	08 95       	ret
	if(!send_byte(0x00)){return 0;} // p3
     df4:	80 e0       	ldi	r24, 0x00	; 0
     df6:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
     df8:	80 e0       	ldi	r24, 0x00	; 0
     dfa:	08 95       	ret
	if(!send_byte(0x33)){return 0;}
     dfc:	80 e0       	ldi	r24, 0x00	; 0
     dfe:	08 95       	ret
	if(!send_byte(0x03)){return 0;}
     e00:	80 e0       	ldi	r24, 0x00	; 0
     e02:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
     e04:	80 e0       	ldi	r24, 0x00	; 0
     e06:	08 95       	ret
	if(!send_byte(0x30)){return 0;}
     e08:	80 e0       	ldi	r24, 0x00	; 0
     e0a:	08 95       	ret
	if(!send_byte(0x08)){return 0;}
     e0c:	80 e0       	ldi	r24, 0x00	; 0
	end();
	
	m_wait(INTERPACKET);

	return 1;
}
     e0e:	08 95       	ret

00000e10 <start_read>:
	}	
	return 1;	// success
}	

unsigned char start_read(unsigned char address)
{
     e10:	cf 93       	push	r28
     e12:	c8 2f       	mov	r28, r24
	unsigned char status;
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
     e14:	84 ea       	ldi	r24, 0xA4	; 164
     e16:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	if(!twi_wait())
     e1a:	0e 94 c8 05 	call	0xb90	; 0xb90 <twi_wait>
     e1e:	88 23       	and	r24, r24
     e20:	69 f0       	breq	.+26     	; 0xe3c <start_read+0x2c>
	{
		return 0;
	}
	
	// ADDRESS
	status = send_byte(((address<<1) + 1));
     e22:	8c 2f       	mov	r24, r28
     e24:	88 0f       	add	r24, r24
     e26:	8f 5f       	subi	r24, 0xFF	; 255
     e28:	0e 94 db 05 	call	0xbb6	; 0xbb6 <send_byte>
	if(status== 0x48){ // ACK was not received - may not be connected/listening
     e2c:	88 34       	cpi	r24, 0x48	; 72
     e2e:	29 f4       	brne	.+10     	; 0xe3a <start_read+0x2a>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
     e30:	84 e9       	ldi	r24, 0x94	; 148
     e32:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
		return 0;	// failure
     e36:	80 e0       	ldi	r24, 0x00	; 0
     e38:	01 c0       	rjmp	.+2      	; 0xe3c <start_read+0x2c>
	}	
	return 1;	// success
     e3a:	81 e0       	ldi	r24, 0x01	; 1
}	
     e3c:	cf 91       	pop	r28
     e3e:	08 95       	ret

00000e40 <m_wii_read>:

	return 1;
}

char m_wii_read(unsigned int* blob_data)
{
     e40:	0f 93       	push	r16
     e42:	1f 93       	push	r17
     e44:	cf 93       	push	r28
     e46:	df 93       	push	r29
     e48:	cd b7       	in	r28, 0x3d	; 61
     e4a:	de b7       	in	r29, 0x3e	; 62
     e4c:	60 97       	sbiw	r28, 0x10	; 16
     e4e:	0f b6       	in	r0, 0x3f	; 63
     e50:	f8 94       	cli
     e52:	de bf       	out	0x3e, r29	; 62
     e54:	0f be       	out	0x3f, r0	; 63
     e56:	cd bf       	out	0x3d, r28	; 61
     e58:	8c 01       	movw	r16, r24
	int i;
	unsigned char temp[16] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
     e5a:	fe 01       	movw	r30, r28
     e5c:	31 96       	adiw	r30, 0x01	; 1
     e5e:	80 e1       	ldi	r24, 0x10	; 16
     e60:	df 01       	movw	r26, r30
     e62:	1d 92       	st	X+, r1
     e64:	8a 95       	dec	r24
     e66:	e9 f7       	brne	.-6      	; 0xe62 <m_wii_read+0x22>
	
	// prepare for reading
	if(!start_write(MWIITWIADDR)){return 0;}
     e68:	88 e5       	ldi	r24, 0x58	; 88
     e6a:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <start_write>
     e6e:	88 23       	and	r24, r24
     e70:	09 f4       	brne	.+2      	; 0xe74 <m_wii_read+0x34>
     e72:	69 c0       	rjmp	.+210    	; 0xf46 <m_wii_read+0x106>
	if(!send_byte(0x36)){return 0;}
     e74:	86 e3       	ldi	r24, 0x36	; 54
     e76:	0e 94 db 05 	call	0xbb6	; 0xbb6 <send_byte>
     e7a:	88 23       	and	r24, r24
     e7c:	09 f4       	brne	.+2      	; 0xe80 <m_wii_read+0x40>
     e7e:	65 c0       	rjmp	.+202    	; 0xf4a <m_wii_read+0x10a>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
     e80:	84 e9       	ldi	r24, 0x94	; 148
     e82:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     e86:	b8 e0       	ldi	r27, 0x08	; 8
     e88:	ba 95       	dec	r27
     e8a:	f1 f7       	brne	.-4      	; 0xe88 <m_wii_read+0x48>
     e8c:	00 00       	nop
	if(!send_byte(0x36)){return 0;}
	end();

	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
     e8e:	88 e5       	ldi	r24, 0x58	; 88
     e90:	0e 94 08 07 	call	0xe10	; 0xe10 <start_read>
     e94:	88 23       	and	r24, r24
     e96:	09 f4       	brne	.+2      	; 0xe9a <m_wii_read+0x5a>
     e98:	5a c0       	rjmp	.+180    	; 0xf4e <m_wii_read+0x10e>
     e9a:	be 01       	movw	r22, r28
     e9c:	6f 5f       	subi	r22, 0xFF	; 255
     e9e:	7f 4f       	sbci	r23, 0xFF	; 255
     ea0:	ae 01       	movw	r20, r28
     ea2:	40 5f       	subi	r20, 0xF0	; 240
     ea4:	5f 4f       	sbci	r21, 0xFF	; 255
	for(i=0;i<15;i++)
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
     ea6:	ec eb       	ldi	r30, 0xBC	; 188
     ea8:	f0 e0       	ldi	r31, 0x00	; 0
     eaa:	84 ec       	ldi	r24, 0xC4	; 196
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		temp[i] = TWDR;
     eac:	2b eb       	ldi	r18, 0xBB	; 187
     eae:	30 e0       	ldi	r19, 0x00	; 0
	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
	for(i=0;i<15;i++)
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
     eb0:	80 83       	st	Z, r24
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
     eb2:	90 81       	ld	r25, Z
     eb4:	99 23       	and	r25, r25
     eb6:	ec f7       	brge	.-6      	; 0xeb2 <m_wii_read+0x72>
		temp[i] = TWDR;
     eb8:	d9 01       	movw	r26, r18
     eba:	9c 91       	ld	r25, X
     ebc:	db 01       	movw	r26, r22
     ebe:	9d 93       	st	X+, r25
     ec0:	bd 01       	movw	r22, r26
	end();

	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
	for(i=0;i<15;i++)
     ec2:	a4 17       	cp	r26, r20
     ec4:	b5 07       	cpc	r27, r21
     ec6:	a1 f7       	brne	.-24     	; 0xeb0 <m_wii_read+0x70>
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		temp[i] = TWDR;
	}
	TWCR = (1<<TWINT) | (1<<TWEN);	// clear the flag, no ACK, and wait for another byte
     ec8:	84 e8       	ldi	r24, 0x84	; 132
     eca:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
     ece:	ec eb       	ldi	r30, 0xBC	; 188
     ed0:	f0 e0       	ldi	r31, 0x00	; 0
     ed2:	80 81       	ld	r24, Z
     ed4:	88 23       	and	r24, r24
     ed6:	ec f7       	brge	.-6      	; 0xed2 <m_wii_read+0x92>
	temp[15] = TWDR;
     ed8:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     edc:	88 8b       	std	Y+16, r24	; 0x10
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
     ede:	84 e9       	ldi	r24, 0x94	; 148
     ee0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     ee4:	be 01       	movw	r22, r28
     ee6:	6c 5f       	subi	r22, 0xFC	; 252
     ee8:	7f 4f       	sbci	r23, 0xFF	; 255
     eea:	f8 01       	movw	r30, r16
     eec:	08 5e       	subi	r16, 0xE8	; 232
     eee:	1f 4f       	sbci	r17, 0xFF	; 255
	temp[15] = TWDR;
	end();

	for(i=0;i<10;i+=3) // for each blob:
	{	// i = 0, 3, 6, 9
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
     ef0:	db 01       	movw	r26, r22
     ef2:	2c 91       	ld	r18, X
     ef4:	32 2f       	mov	r19, r18
     ef6:	30 73       	andi	r19, 0x30	; 48
     ef8:	cb 01       	movw	r24, r22
     efa:	02 97       	sbiw	r24, 0x02	; 2
     efc:	dc 01       	movw	r26, r24
     efe:	8c 91       	ld	r24, X
     f00:	90 e0       	ldi	r25, 0x00	; 0
     f02:	b0 e1       	ldi	r27, 0x10	; 16
     f04:	3b 9f       	mul	r19, r27
     f06:	80 0d       	add	r24, r0
     f08:	91 1d       	adc	r25, r1
     f0a:	11 24       	eor	r1, r1
     f0c:	91 83       	std	Z+1, r25	; 0x01
     f0e:	80 83       	st	Z, r24
		blob_data[i+1] = (unsigned int)temp[i+2] + ((int)(temp[i+3] & 0b11000000) <<2);	// Y
     f10:	42 2f       	mov	r20, r18
     f12:	40 7c       	andi	r20, 0xC0	; 192
     f14:	50 e0       	ldi	r21, 0x00	; 0
     f16:	44 0f       	add	r20, r20
     f18:	55 1f       	adc	r21, r21
     f1a:	44 0f       	add	r20, r20
     f1c:	55 1f       	adc	r21, r21
     f1e:	cb 01       	movw	r24, r22
     f20:	01 97       	sbiw	r24, 0x01	; 1
     f22:	dc 01       	movw	r26, r24
     f24:	8c 91       	ld	r24, X
     f26:	48 0f       	add	r20, r24
     f28:	51 1d       	adc	r21, r1
     f2a:	53 83       	std	Z+3, r21	; 0x03
     f2c:	42 83       	std	Z+2, r20	; 0x02
		blob_data[i+2] = temp[i+3] & 0b00001111;										// size
     f2e:	2f 70       	andi	r18, 0x0F	; 15
     f30:	30 e0       	ldi	r19, 0x00	; 0
     f32:	35 83       	std	Z+5, r19	; 0x05
     f34:	24 83       	std	Z+4, r18	; 0x04
     f36:	6d 5f       	subi	r22, 0xFD	; 253
     f38:	7f 4f       	sbci	r23, 0xFF	; 255
     f3a:	36 96       	adiw	r30, 0x06	; 6
	TWCR = (1<<TWINT) | (1<<TWEN);	// clear the flag, no ACK, and wait for another byte
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
	temp[15] = TWDR;
	end();

	for(i=0;i<10;i+=3) // for each blob:
     f3c:	e0 17       	cp	r30, r16
     f3e:	f1 07       	cpc	r31, r17
     f40:	b9 f6       	brne	.-82     	; 0xef0 <m_wii_read+0xb0>
	{	// i = 0, 3, 6, 9
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
		blob_data[i+1] = (unsigned int)temp[i+2] + ((int)(temp[i+3] & 0b11000000) <<2);	// Y
		blob_data[i+2] = temp[i+3] & 0b00001111;										// size
	}
	return 1;
     f42:	81 e0       	ldi	r24, 0x01	; 1
     f44:	05 c0       	rjmp	.+10     	; 0xf50 <m_wii_read+0x110>
{
	int i;
	unsigned char temp[16] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
	
	// prepare for reading
	if(!start_write(MWIITWIADDR)){return 0;}
     f46:	80 e0       	ldi	r24, 0x00	; 0
     f48:	03 c0       	rjmp	.+6      	; 0xf50 <m_wii_read+0x110>
	if(!send_byte(0x36)){return 0;}
     f4a:	80 e0       	ldi	r24, 0x00	; 0
     f4c:	01 c0       	rjmp	.+2      	; 0xf50 <m_wii_read+0x110>
	end();

	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
     f4e:	80 e0       	ldi	r24, 0x00	; 0
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
		blob_data[i+1] = (unsigned int)temp[i+2] + ((int)(temp[i+3] & 0b11000000) <<2);	// Y
		blob_data[i+2] = temp[i+3] & 0b00001111;										// size
	}
	return 1;
}
     f50:	60 96       	adiw	r28, 0x10	; 16
     f52:	0f b6       	in	r0, 0x3f	; 63
     f54:	f8 94       	cli
     f56:	de bf       	out	0x3e, r29	; 62
     f58:	0f be       	out	0x3f, r0	; 63
     f5a:	cd bf       	out	0x3d, r28	; 61
     f5c:	df 91       	pop	r29
     f5e:	cf 91       	pop	r28
     f60:	1f 91       	pop	r17
     f62:	0f 91       	pop	r16
     f64:	08 95       	ret

00000f66 <print_data>:
#define CENTER_OFFSET_X -125
#define CENTER_OFFSET_Y 30


// Prints mWii data 
void print_data(float* mx, float* my, float ox, float oy, int top_index, int bottom_index, Robot* robot) {
     f66:	4f 92       	push	r4
     f68:	5f 92       	push	r5
     f6a:	6f 92       	push	r6
     f6c:	7f 92       	push	r7
     f6e:	8f 92       	push	r8
     f70:	9f 92       	push	r9
     f72:	af 92       	push	r10
     f74:	bf 92       	push	r11
     f76:	cf 92       	push	r12
     f78:	df 92       	push	r13
     f7a:	ef 92       	push	r14
     f7c:	ff 92       	push	r15
     f7e:	0f 93       	push	r16
     f80:	1f 93       	push	r17
     f82:	cf 93       	push	r28
     f84:	df 93       	push	r29
     f86:	cd b7       	in	r28, 0x3d	; 61
     f88:	de b7       	in	r29, 0x3e	; 62
     f8a:	28 97       	sbiw	r28, 0x08	; 8
     f8c:	0f b6       	in	r0, 0x3f	; 63
     f8e:	f8 94       	cli
     f90:	de bf       	out	0x3e, r29	; 62
     f92:	0f be       	out	0x3f, r0	; 63
     f94:	cd bf       	out	0x3d, r28	; 61
     f96:	3c 01       	movw	r6, r24
     f98:	56 2e       	mov	r5, r22
     f9a:	47 2e       	mov	r4, r23
     f9c:	29 83       	std	Y+1, r18	; 0x01
     f9e:	3a 83       	std	Y+2, r19	; 0x02
     fa0:	4b 83       	std	Y+3, r20	; 0x03
     fa2:	5c 83       	std	Y+4, r21	; 0x04
     fa4:	ed 82       	std	Y+5, r14	; 0x05
     fa6:	fe 82       	std	Y+6, r15	; 0x06
     fa8:	0f 83       	std	Y+7, r16	; 0x07
     faa:	18 87       	std	Y+8, r17	; 0x08
	float opponent_x = (96.0 - CENTER_OFFSET_X), opponent_y = (364.0 - CENTER_OFFSET_Y);
	// Print four points
	m_usb_tx_string(" --- ");
     fac:	88 ec       	ldi	r24, 0xC8	; 200
     fae:	92 e0       	ldi	r25, 0x02	; 2
     fb0:	0e 94 78 05 	call	0xaf0	; 0xaf0 <print_P>
     fb4:	83 01       	movw	r16, r6
     fb6:	e5 2c       	mov	r14, r5
     fb8:	f4 2c       	mov	r15, r4
     fba:	80 e1       	ldi	r24, 0x10	; 16
     fbc:	68 0e       	add	r6, r24
     fbe:	71 1c       	adc	r7, r1
	for (int i = 0; i < 4; i++) {
		m_usb_tx_string("( ");
     fc0:	85 ec       	ldi	r24, 0xC5	; 197
     fc2:	92 e0       	ldi	r25, 0x02	; 2
     fc4:	0e 94 78 05 	call	0xaf0	; 0xaf0 <print_P>
		m_usb_tx_int((int) mx[i]);
     fc8:	f8 01       	movw	r30, r16
     fca:	61 91       	ld	r22, Z+
     fcc:	71 91       	ld	r23, Z+
     fce:	81 91       	ld	r24, Z+
     fd0:	91 91       	ld	r25, Z+
     fd2:	8f 01       	movw	r16, r30
     fd4:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <__fixsfsi>
     fd8:	cb 01       	movw	r24, r22
     fda:	0e 94 94 05 	call	0xb28	; 0xb28 <m_usb_tx_int>
		m_usb_tx_string(", ");
     fde:	82 ec       	ldi	r24, 0xC2	; 194
     fe0:	92 e0       	ldi	r25, 0x02	; 2
     fe2:	0e 94 78 05 	call	0xaf0	; 0xaf0 <print_P>
		m_usb_tx_int((int) my[i]);
     fe6:	f7 01       	movw	r30, r14
     fe8:	61 91       	ld	r22, Z+
     fea:	71 91       	ld	r23, Z+
     fec:	81 91       	ld	r24, Z+
     fee:	91 91       	ld	r25, Z+
     ff0:	7f 01       	movw	r14, r30
     ff2:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <__fixsfsi>
     ff6:	cb 01       	movw	r24, r22
     ff8:	0e 94 94 05 	call	0xb28	; 0xb28 <m_usb_tx_int>
		m_usb_tx_string(" )");
     ffc:	8f eb       	ldi	r24, 0xBF	; 191
     ffe:	92 e0       	ldi	r25, 0x02	; 2
    1000:	0e 94 78 05 	call	0xaf0	; 0xaf0 <print_P>
		m_usb_tx_string("   ---   ");
    1004:	85 eb       	ldi	r24, 0xB5	; 181
    1006:	92 e0       	ldi	r25, 0x02	; 2
    1008:	0e 94 78 05 	call	0xaf0	; 0xaf0 <print_P>
// Prints mWii data 
void print_data(float* mx, float* my, float ox, float oy, int top_index, int bottom_index, Robot* robot) {
	float opponent_x = (96.0 - CENTER_OFFSET_X), opponent_y = (364.0 - CENTER_OFFSET_Y);
	// Print four points
	m_usb_tx_string(" --- ");
	for (int i = 0; i < 4; i++) {
    100c:	06 15       	cp	r16, r6
    100e:	17 05       	cpc	r17, r7
    1010:	b9 f6       	brne	.-82     	; 0xfc0 <print_data+0x5a>
		m_usb_tx_int((int) my[i]);
		m_usb_tx_string(" )");
		m_usb_tx_string("   ---   ");
	}
	// Print calculated translation and rotation
	m_usb_tx_char(13);
    1012:	8d e0       	ldi	r24, 0x0D	; 13
    1014:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <m_usb_tx_char>
	m_usb_tx_string("Top Index: ");
    1018:	89 ea       	ldi	r24, 0xA9	; 169
    101a:	92 e0       	ldi	r25, 0x02	; 2
    101c:	0e 94 78 05 	call	0xaf0	; 0xaf0 <print_P>
	m_usb_tx_int(top_index);
    1020:	c6 01       	movw	r24, r12
    1022:	0e 94 94 05 	call	0xb28	; 0xb28 <m_usb_tx_int>
	m_usb_tx_string("    ------    ");
    1026:	8a e9       	ldi	r24, 0x9A	; 154
    1028:	92 e0       	ldi	r25, 0x02	; 2
    102a:	0e 94 78 05 	call	0xaf0	; 0xaf0 <print_P>
	m_usb_tx_string("Bottom Index: ");
    102e:	8b e8       	ldi	r24, 0x8B	; 139
    1030:	92 e0       	ldi	r25, 0x02	; 2
    1032:	0e 94 78 05 	call	0xaf0	; 0xaf0 <print_P>
	m_usb_tx_int(bottom_index);
    1036:	c5 01       	movw	r24, r10
    1038:	0e 94 94 05 	call	0xb28	; 0xb28 <m_usb_tx_int>
	m_usb_tx_char(13);
    103c:	8d e0       	ldi	r24, 0x0D	; 13
    103e:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <m_usb_tx_char>
	m_usb_tx_string("   ---   Translation: ");
    1042:	84 e7       	ldi	r24, 0x74	; 116
    1044:	92 e0       	ldi	r25, 0x02	; 2
    1046:	0e 94 78 05 	call	0xaf0	; 0xaf0 <print_P>
	m_usb_tx_string("( ");
    104a:	81 e7       	ldi	r24, 0x71	; 113
    104c:	92 e0       	ldi	r25, 0x02	; 2
    104e:	0e 94 78 05 	call	0xaf0	; 0xaf0 <print_P>
	m_usb_tx_int((int) ox);
    1052:	69 81       	ldd	r22, Y+1	; 0x01
    1054:	7a 81       	ldd	r23, Y+2	; 0x02
    1056:	8b 81       	ldd	r24, Y+3	; 0x03
    1058:	9c 81       	ldd	r25, Y+4	; 0x04
    105a:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <__fixsfsi>
    105e:	cb 01       	movw	r24, r22
    1060:	0e 94 94 05 	call	0xb28	; 0xb28 <m_usb_tx_int>
	m_usb_tx_string(", ");
    1064:	8e e6       	ldi	r24, 0x6E	; 110
    1066:	92 e0       	ldi	r25, 0x02	; 2
    1068:	0e 94 78 05 	call	0xaf0	; 0xaf0 <print_P>
	m_usb_tx_int((int) oy);
    106c:	6d 81       	ldd	r22, Y+5	; 0x05
    106e:	7e 81       	ldd	r23, Y+6	; 0x06
    1070:	8f 81       	ldd	r24, Y+7	; 0x07
    1072:	98 85       	ldd	r25, Y+8	; 0x08
    1074:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <__fixsfsi>
    1078:	cb 01       	movw	r24, r22
    107a:	0e 94 94 05 	call	0xb28	; 0xb28 <m_usb_tx_int>
	m_usb_tx_string(" )");
    107e:	8b e6       	ldi	r24, 0x6B	; 107
    1080:	92 e0       	ldi	r25, 0x02	; 2
    1082:	0e 94 78 05 	call	0xaf0	; 0xaf0 <print_P>
	m_usb_tx_string("   ---   New frame: ");
    1086:	86 e5       	ldi	r24, 0x56	; 86
    1088:	92 e0       	ldi	r25, 0x02	; 2
    108a:	0e 94 78 05 	call	0xaf0	; 0xaf0 <print_P>
	m_usb_tx_string("( ");
    108e:	83 e5       	ldi	r24, 0x53	; 83
    1090:	92 e0       	ldi	r25, 0x02	; 2
    1092:	0e 94 78 05 	call	0xaf0	; 0xaf0 <print_P>
	m_usb_tx_int((int) robot->x);
    1096:	f4 01       	movw	r30, r8
    1098:	60 81       	ld	r22, Z
    109a:	71 81       	ldd	r23, Z+1	; 0x01
    109c:	82 81       	ldd	r24, Z+2	; 0x02
    109e:	93 81       	ldd	r25, Z+3	; 0x03
    10a0:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <__fixsfsi>
    10a4:	cb 01       	movw	r24, r22
    10a6:	0e 94 94 05 	call	0xb28	; 0xb28 <m_usb_tx_int>
	m_usb_tx_string(", ");
    10aa:	80 e5       	ldi	r24, 0x50	; 80
    10ac:	92 e0       	ldi	r25, 0x02	; 2
    10ae:	0e 94 78 05 	call	0xaf0	; 0xaf0 <print_P>
	m_usb_tx_int((int) robot->y);
    10b2:	f4 01       	movw	r30, r8
    10b4:	64 81       	ldd	r22, Z+4	; 0x04
    10b6:	75 81       	ldd	r23, Z+5	; 0x05
    10b8:	86 81       	ldd	r24, Z+6	; 0x06
    10ba:	97 81       	ldd	r25, Z+7	; 0x07
    10bc:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <__fixsfsi>
    10c0:	cb 01       	movw	r24, r22
    10c2:	0e 94 94 05 	call	0xb28	; 0xb28 <m_usb_tx_int>
	m_usb_tx_string(" )");
    10c6:	8d e4       	ldi	r24, 0x4D	; 77
    10c8:	92 e0       	ldi	r25, 0x02	; 2
    10ca:	0e 94 78 05 	call	0xaf0	; 0xaf0 <print_P>
	m_usb_tx_string("   ---   Theta: ");
    10ce:	8c e3       	ldi	r24, 0x3C	; 60
    10d0:	92 e0       	ldi	r25, 0x02	; 2
    10d2:	0e 94 78 05 	call	0xaf0	; 0xaf0 <print_P>
	m_usb_tx_int((int) (robot->o * 180.0) / PI);	// print angle in degrees
    10d6:	20 e0       	ldi	r18, 0x00	; 0
    10d8:	30 e0       	ldi	r19, 0x00	; 0
    10da:	44 e3       	ldi	r20, 0x34	; 52
    10dc:	53 e4       	ldi	r21, 0x43	; 67
    10de:	f4 01       	movw	r30, r8
    10e0:	60 85       	ldd	r22, Z+8	; 0x08
    10e2:	71 85       	ldd	r23, Z+9	; 0x09
    10e4:	82 85       	ldd	r24, Z+10	; 0x0a
    10e6:	93 85       	ldd	r25, Z+11	; 0x0b
    10e8:	0e 94 1d 10 	call	0x203a	; 0x203a <__mulsf3>
    10ec:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <__fixsfsi>
    10f0:	07 2e       	mov	r0, r23
    10f2:	00 0c       	add	r0, r0
    10f4:	88 0b       	sbc	r24, r24
    10f6:	99 0b       	sbc	r25, r25
    10f8:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <__floatsisf>
    10fc:	2b ed       	ldi	r18, 0xDB	; 219
    10fe:	3f e0       	ldi	r19, 0x0F	; 15
    1100:	49 e4       	ldi	r20, 0x49	; 73
    1102:	50 e4       	ldi	r21, 0x40	; 64
    1104:	0e 94 50 0e 	call	0x1ca0	; 0x1ca0 <__divsf3>
    1108:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <__fixsfsi>
    110c:	cb 01       	movw	r24, r22
    110e:	0e 94 94 05 	call	0xb28	; 0xb28 <m_usb_tx_int>
	m_usb_tx_string("   ---   Rho: ");
    1112:	8d e2       	ldi	r24, 0x2D	; 45
    1114:	92 e0       	ldi	r25, 0x02	; 2
    1116:	0e 94 78 05 	call	0xaf0	; 0xaf0 <print_P>
	m_usb_tx_int((int) ((180.0 * (PI - atan2f(-(robot->y - opponent_y), robot->x - opponent_x))) / PI));
    111a:	20 e0       	ldi	r18, 0x00	; 0
    111c:	30 e0       	ldi	r19, 0x00	; 0
    111e:	4d e5       	ldi	r20, 0x5D	; 93
    1120:	53 e4       	ldi	r21, 0x43	; 67
    1122:	f4 01       	movw	r30, r8
    1124:	60 81       	ld	r22, Z
    1126:	71 81       	ldd	r23, Z+1	; 0x01
    1128:	82 81       	ldd	r24, Z+2	; 0x02
    112a:	93 81       	ldd	r25, Z+3	; 0x03
    112c:	0e 94 67 0d 	call	0x1ace	; 0x1ace <__subsf3>
    1130:	6b 01       	movw	r12, r22
    1132:	7c 01       	movw	r14, r24
    1134:	20 e0       	ldi	r18, 0x00	; 0
    1136:	30 e0       	ldi	r19, 0x00	; 0
    1138:	47 ea       	ldi	r20, 0xA7	; 167
    113a:	53 e4       	ldi	r21, 0x43	; 67
    113c:	f4 01       	movw	r30, r8
    113e:	64 81       	ldd	r22, Z+4	; 0x04
    1140:	75 81       	ldd	r23, Z+5	; 0x05
    1142:	86 81       	ldd	r24, Z+6	; 0x06
    1144:	97 81       	ldd	r25, Z+7	; 0x07
    1146:	0e 94 67 0d 	call	0x1ace	; 0x1ace <__subsf3>
    114a:	90 58       	subi	r25, 0x80	; 128
    114c:	a7 01       	movw	r20, r14
    114e:	96 01       	movw	r18, r12
    1150:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <atan2>
    1154:	9b 01       	movw	r18, r22
    1156:	ac 01       	movw	r20, r24
    1158:	6b ed       	ldi	r22, 0xDB	; 219
    115a:	7f e0       	ldi	r23, 0x0F	; 15
    115c:	89 e4       	ldi	r24, 0x49	; 73
    115e:	90 e4       	ldi	r25, 0x40	; 64
    1160:	0e 94 67 0d 	call	0x1ace	; 0x1ace <__subsf3>
    1164:	20 e0       	ldi	r18, 0x00	; 0
    1166:	30 e0       	ldi	r19, 0x00	; 0
    1168:	44 e3       	ldi	r20, 0x34	; 52
    116a:	53 e4       	ldi	r21, 0x43	; 67
    116c:	0e 94 1d 10 	call	0x203a	; 0x203a <__mulsf3>
    1170:	2b ed       	ldi	r18, 0xDB	; 219
    1172:	3f e0       	ldi	r19, 0x0F	; 15
    1174:	49 e4       	ldi	r20, 0x49	; 73
    1176:	50 e4       	ldi	r21, 0x40	; 64
    1178:	0e 94 50 0e 	call	0x1ca0	; 0x1ca0 <__divsf3>
    117c:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <__fixsfsi>
    1180:	cb 01       	movw	r24, r22
    1182:	0e 94 94 05 	call	0xb28	; 0xb28 <m_usb_tx_int>
	m_usb_tx_char(13);
    1186:	8d e0       	ldi	r24, 0x0D	; 13
    1188:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <m_usb_tx_char>
	m_usb_tx_char(13);
    118c:	8d e0       	ldi	r24, 0x0D	; 13
    118e:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <m_usb_tx_char>
}
    1192:	28 96       	adiw	r28, 0x08	; 8
    1194:	0f b6       	in	r0, 0x3f	; 63
    1196:	f8 94       	cli
    1198:	de bf       	out	0x3e, r29	; 62
    119a:	0f be       	out	0x3f, r0	; 63
    119c:	cd bf       	out	0x3d, r28	; 61
    119e:	df 91       	pop	r29
    11a0:	cf 91       	pop	r28
    11a2:	1f 91       	pop	r17
    11a4:	0f 91       	pop	r16
    11a6:	ff 90       	pop	r15
    11a8:	ef 90       	pop	r14
    11aa:	df 90       	pop	r13
    11ac:	cf 90       	pop	r12
    11ae:	bf 90       	pop	r11
    11b0:	af 90       	pop	r10
    11b2:	9f 90       	pop	r9
    11b4:	8f 90       	pop	r8
    11b6:	7f 90       	pop	r7
    11b8:	6f 90       	pop	r6
    11ba:	5f 90       	pop	r5
    11bc:	4f 90       	pop	r4
    11be:	08 95       	ret

000011c0 <interpret>:

/* Interpret the measurement vector returned by mWii and update Robot struct data */
void interpret(Robot* robot, unsigned int* measurement){
    11c0:	2f 92       	push	r2
    11c2:	3f 92       	push	r3
    11c4:	4f 92       	push	r4
    11c6:	5f 92       	push	r5
    11c8:	6f 92       	push	r6
    11ca:	7f 92       	push	r7
    11cc:	8f 92       	push	r8
    11ce:	9f 92       	push	r9
    11d0:	af 92       	push	r10
    11d2:	bf 92       	push	r11
    11d4:	cf 92       	push	r12
    11d6:	df 92       	push	r13
    11d8:	ef 92       	push	r14
    11da:	ff 92       	push	r15
    11dc:	0f 93       	push	r16
    11de:	1f 93       	push	r17
    11e0:	cf 93       	push	r28
    11e2:	df 93       	push	r29
    11e4:	cd b7       	in	r28, 0x3d	; 61
    11e6:	de b7       	in	r29, 0x3e	; 62
    11e8:	c7 56       	subi	r28, 0x67	; 103
    11ea:	d1 09       	sbc	r29, r1
    11ec:	0f b6       	in	r0, 0x3f	; 63
    11ee:	f8 94       	cli
    11f0:	de bf       	out	0x3e, r29	; 62
    11f2:	0f be       	out	0x3f, r0	; 63
    11f4:	cd bf       	out	0x3d, r28	; 61
    11f6:	a8 96       	adiw	r28, 0x28	; 40
    11f8:	9f af       	std	Y+63, r25	; 0x3f
    11fa:	8e af       	std	Y+62, r24	; 0x3e
    11fc:	a8 97       	sbiw	r28, 0x28	; 40
    11fe:	8b 01       	movw	r16, r22
	// Star coordinates centered around the origin in order of distance from origin
	float const CENTERED_STARS[4][2] = {{-0.2730, -17.3060}, {11.3820, 5.9350}, {-0.2730, 11.6940}, {-10.8360, -0.3230}}; // cm

	// Extract x and y data from measurement
	float mWii_x[] = { (float) (measurement[0]-512.0), (float) (measurement[3]-512.0), (float) (measurement[6]-512.0), (float) (measurement[9]-512.0) };
    1200:	fb 01       	movw	r30, r22
    1202:	60 81       	ld	r22, Z
    1204:	71 81       	ldd	r23, Z+1	; 0x01
    1206:	80 e0       	ldi	r24, 0x00	; 0
    1208:	90 e0       	ldi	r25, 0x00	; 0
    120a:	0e 94 f8 0e 	call	0x1df0	; 0x1df0 <__floatunsisf>
    120e:	20 e0       	ldi	r18, 0x00	; 0
    1210:	30 e0       	ldi	r19, 0x00	; 0
    1212:	40 e0       	ldi	r20, 0x00	; 0
    1214:	54 e4       	ldi	r21, 0x44	; 68
    1216:	0e 94 67 0d 	call	0x1ace	; 0x1ace <__subsf3>
    121a:	69 83       	std	Y+1, r22	; 0x01
    121c:	7a 83       	std	Y+2, r23	; 0x02
    121e:	8b 83       	std	Y+3, r24	; 0x03
    1220:	9c 83       	std	Y+4, r25	; 0x04
    1222:	f8 01       	movw	r30, r16
    1224:	66 81       	ldd	r22, Z+6	; 0x06
    1226:	77 81       	ldd	r23, Z+7	; 0x07
    1228:	80 e0       	ldi	r24, 0x00	; 0
    122a:	90 e0       	ldi	r25, 0x00	; 0
    122c:	0e 94 f8 0e 	call	0x1df0	; 0x1df0 <__floatunsisf>
    1230:	20 e0       	ldi	r18, 0x00	; 0
    1232:	30 e0       	ldi	r19, 0x00	; 0
    1234:	40 e0       	ldi	r20, 0x00	; 0
    1236:	54 e4       	ldi	r21, 0x44	; 68
    1238:	0e 94 67 0d 	call	0x1ace	; 0x1ace <__subsf3>
    123c:	6d 83       	std	Y+5, r22	; 0x05
    123e:	7e 83       	std	Y+6, r23	; 0x06
    1240:	8f 83       	std	Y+7, r24	; 0x07
    1242:	98 87       	std	Y+8, r25	; 0x08
    1244:	f8 01       	movw	r30, r16
    1246:	64 85       	ldd	r22, Z+12	; 0x0c
    1248:	75 85       	ldd	r23, Z+13	; 0x0d
    124a:	80 e0       	ldi	r24, 0x00	; 0
    124c:	90 e0       	ldi	r25, 0x00	; 0
    124e:	0e 94 f8 0e 	call	0x1df0	; 0x1df0 <__floatunsisf>
    1252:	20 e0       	ldi	r18, 0x00	; 0
    1254:	30 e0       	ldi	r19, 0x00	; 0
    1256:	40 e0       	ldi	r20, 0x00	; 0
    1258:	54 e4       	ldi	r21, 0x44	; 68
    125a:	0e 94 67 0d 	call	0x1ace	; 0x1ace <__subsf3>
    125e:	69 87       	std	Y+9, r22	; 0x09
    1260:	7a 87       	std	Y+10, r23	; 0x0a
    1262:	8b 87       	std	Y+11, r24	; 0x0b
    1264:	9c 87       	std	Y+12, r25	; 0x0c
    1266:	f8 01       	movw	r30, r16
    1268:	62 89       	ldd	r22, Z+18	; 0x12
    126a:	73 89       	ldd	r23, Z+19	; 0x13
    126c:	80 e0       	ldi	r24, 0x00	; 0
    126e:	90 e0       	ldi	r25, 0x00	; 0
    1270:	0e 94 f8 0e 	call	0x1df0	; 0x1df0 <__floatunsisf>
    1274:	20 e0       	ldi	r18, 0x00	; 0
    1276:	30 e0       	ldi	r19, 0x00	; 0
    1278:	40 e0       	ldi	r20, 0x00	; 0
    127a:	54 e4       	ldi	r21, 0x44	; 68
    127c:	0e 94 67 0d 	call	0x1ace	; 0x1ace <__subsf3>
    1280:	6d 87       	std	Y+13, r22	; 0x0d
    1282:	7e 87       	std	Y+14, r23	; 0x0e
    1284:	8f 87       	std	Y+15, r24	; 0x0f
    1286:	98 8b       	std	Y+16, r25	; 0x10
	// Flipping y to right-handed coordinate system
	float mWii_y[] = { (float) -(measurement[1]-384.0), (float) -(measurement[4]-384.0), (float) -(measurement[7]-384.0), (float) -(measurement[10]-384.0) };
    1288:	f8 01       	movw	r30, r16
    128a:	62 81       	ldd	r22, Z+2	; 0x02
    128c:	73 81       	ldd	r23, Z+3	; 0x03
    128e:	80 e0       	ldi	r24, 0x00	; 0
    1290:	90 e0       	ldi	r25, 0x00	; 0
    1292:	0e 94 f8 0e 	call	0x1df0	; 0x1df0 <__floatunsisf>
    1296:	20 e0       	ldi	r18, 0x00	; 0
    1298:	30 e0       	ldi	r19, 0x00	; 0
    129a:	40 ec       	ldi	r20, 0xC0	; 192
    129c:	53 e4       	ldi	r21, 0x43	; 67
    129e:	0e 94 67 0d 	call	0x1ace	; 0x1ace <__subsf3>
    12a2:	dc 01       	movw	r26, r24
    12a4:	cb 01       	movw	r24, r22
    12a6:	b0 58       	subi	r27, 0x80	; 128
    12a8:	89 8b       	std	Y+17, r24	; 0x11
    12aa:	9a 8b       	std	Y+18, r25	; 0x12
    12ac:	ab 8b       	std	Y+19, r26	; 0x13
    12ae:	bc 8b       	std	Y+20, r27	; 0x14
    12b0:	f8 01       	movw	r30, r16
    12b2:	60 85       	ldd	r22, Z+8	; 0x08
    12b4:	71 85       	ldd	r23, Z+9	; 0x09
    12b6:	80 e0       	ldi	r24, 0x00	; 0
    12b8:	90 e0       	ldi	r25, 0x00	; 0
    12ba:	0e 94 f8 0e 	call	0x1df0	; 0x1df0 <__floatunsisf>
    12be:	20 e0       	ldi	r18, 0x00	; 0
    12c0:	30 e0       	ldi	r19, 0x00	; 0
    12c2:	40 ec       	ldi	r20, 0xC0	; 192
    12c4:	53 e4       	ldi	r21, 0x43	; 67
    12c6:	0e 94 67 0d 	call	0x1ace	; 0x1ace <__subsf3>
    12ca:	dc 01       	movw	r26, r24
    12cc:	cb 01       	movw	r24, r22
    12ce:	b0 58       	subi	r27, 0x80	; 128
    12d0:	8d 8b       	std	Y+21, r24	; 0x15
    12d2:	9e 8b       	std	Y+22, r25	; 0x16
    12d4:	af 8b       	std	Y+23, r26	; 0x17
    12d6:	b8 8f       	std	Y+24, r27	; 0x18
    12d8:	f8 01       	movw	r30, r16
    12da:	66 85       	ldd	r22, Z+14	; 0x0e
    12dc:	77 85       	ldd	r23, Z+15	; 0x0f
    12de:	80 e0       	ldi	r24, 0x00	; 0
    12e0:	90 e0       	ldi	r25, 0x00	; 0
    12e2:	0e 94 f8 0e 	call	0x1df0	; 0x1df0 <__floatunsisf>
    12e6:	20 e0       	ldi	r18, 0x00	; 0
    12e8:	30 e0       	ldi	r19, 0x00	; 0
    12ea:	40 ec       	ldi	r20, 0xC0	; 192
    12ec:	53 e4       	ldi	r21, 0x43	; 67
    12ee:	0e 94 67 0d 	call	0x1ace	; 0x1ace <__subsf3>
    12f2:	dc 01       	movw	r26, r24
    12f4:	cb 01       	movw	r24, r22
    12f6:	b0 58       	subi	r27, 0x80	; 128
    12f8:	89 8f       	std	Y+25, r24	; 0x19
    12fa:	9a 8f       	std	Y+26, r25	; 0x1a
    12fc:	ab 8f       	std	Y+27, r26	; 0x1b
    12fe:	bc 8f       	std	Y+28, r27	; 0x1c
    1300:	f8 01       	movw	r30, r16
    1302:	64 89       	ldd	r22, Z+20	; 0x14
    1304:	75 89       	ldd	r23, Z+21	; 0x15
    1306:	80 e0       	ldi	r24, 0x00	; 0
    1308:	90 e0       	ldi	r25, 0x00	; 0
    130a:	0e 94 f8 0e 	call	0x1df0	; 0x1df0 <__floatunsisf>
    130e:	20 e0       	ldi	r18, 0x00	; 0
    1310:	30 e0       	ldi	r19, 0x00	; 0
    1312:	40 ec       	ldi	r20, 0xC0	; 192
    1314:	53 e4       	ldi	r21, 0x43	; 67
    1316:	0e 94 67 0d 	call	0x1ace	; 0x1ace <__subsf3>
    131a:	dc 01       	movw	r26, r24
    131c:	cb 01       	movw	r24, r22
    131e:	b0 58       	subi	r27, 0x80	; 128
    1320:	8d 8f       	std	Y+29, r24	; 0x1d
    1322:	9e 8f       	std	Y+30, r25	; 0x1e
    1324:	af 8f       	std	Y+31, r26	; 0x1f
    1326:	b8 a3       	std	Y+32, r27	; 0x20
    1328:	9e 01       	movw	r18, r28
    132a:	2f 5f       	subi	r18, 0xFF	; 255
    132c:	3f 4f       	sbci	r19, 0xFF	; 255
    132e:	49 01       	movw	r8, r18
    1330:	5e 01       	movw	r10, r28
    1332:	31 e1       	ldi	r19, 0x11	; 17
    1334:	a3 0e       	add	r10, r19
    1336:	b1 1c       	adc	r11, r1
    1338:	15 01       	movw	r2, r10
    133a:	75 01       	movw	r14, r10
    133c:	84 01       	movw	r16, r8

	
	////////// Determine translation to origin //////////
	float translation_x = 0, translation_y = 0;
    133e:	25 96       	adiw	r28, 0x05	; 5
    1340:	1c ae       	std	Y+60, r1	; 0x3c
    1342:	1d ae       	std	Y+61, r1	; 0x3d
    1344:	1e ae       	std	Y+62, r1	; 0x3e
    1346:	1f ae       	std	Y+63, r1	; 0x3f
    1348:	25 97       	sbiw	r28, 0x05	; 5
    134a:	41 2c       	mov	r4, r1
    134c:	51 2c       	mov	r5, r1
    134e:	32 01       	movw	r6, r4
	for (int i = 0; i < 4; i++) {
		translation_x += mWii_x[i];
    1350:	f8 01       	movw	r30, r16
    1352:	21 91       	ld	r18, Z+
    1354:	31 91       	ld	r19, Z+
    1356:	41 91       	ld	r20, Z+
    1358:	51 91       	ld	r21, Z+
    135a:	8f 01       	movw	r16, r30
    135c:	c3 01       	movw	r24, r6
    135e:	b2 01       	movw	r22, r4
    1360:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <__addsf3>
    1364:	2b 01       	movw	r4, r22
    1366:	3c 01       	movw	r6, r24
		translation_y += mWii_y[i];
    1368:	f7 01       	movw	r30, r14
    136a:	21 91       	ld	r18, Z+
    136c:	31 91       	ld	r19, Z+
    136e:	41 91       	ld	r20, Z+
    1370:	51 91       	ld	r21, Z+
    1372:	7f 01       	movw	r14, r30
    1374:	25 96       	adiw	r28, 0x05	; 5
    1376:	6c ad       	ldd	r22, Y+60	; 0x3c
    1378:	7d ad       	ldd	r23, Y+61	; 0x3d
    137a:	8e ad       	ldd	r24, Y+62	; 0x3e
    137c:	9f ad       	ldd	r25, Y+63	; 0x3f
    137e:	25 97       	sbiw	r28, 0x05	; 5
    1380:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <__addsf3>
    1384:	25 96       	adiw	r28, 0x05	; 5
    1386:	6c af       	std	Y+60, r22	; 0x3c
    1388:	7d af       	std	Y+61, r23	; 0x3d
    138a:	8e af       	std	Y+62, r24	; 0x3e
    138c:	9f af       	std	Y+63, r25	; 0x3f
    138e:	25 97       	sbiw	r28, 0x05	; 5
	float mWii_y[] = { (float) -(measurement[1]-384.0), (float) -(measurement[4]-384.0), (float) -(measurement[7]-384.0), (float) -(measurement[10]-384.0) };

	
	////////// Determine translation to origin //////////
	float translation_x = 0, translation_y = 0;
	for (int i = 0; i < 4; i++) {
    1390:	02 15       	cp	r16, r2
    1392:	13 05       	cpc	r17, r3
    1394:	e9 f6       	brne	.-70     	; 0x1350 <interpret+0x190>
		translation_x += mWii_x[i];
		translation_y += mWii_y[i];
	}
	translation_x /= 4.0;
    1396:	20 e0       	ldi	r18, 0x00	; 0
    1398:	30 e0       	ldi	r19, 0x00	; 0
    139a:	40 e8       	ldi	r20, 0x80	; 128
    139c:	5e e3       	ldi	r21, 0x3E	; 62
    139e:	c3 01       	movw	r24, r6
    13a0:	b2 01       	movw	r22, r4
    13a2:	0e 94 1d 10 	call	0x203a	; 0x203a <__mulsf3>
    13a6:	6a 96       	adiw	r28, 0x1a	; 26
    13a8:	6c af       	std	Y+60, r22	; 0x3c
    13aa:	7d af       	std	Y+61, r23	; 0x3d
    13ac:	8e af       	std	Y+62, r24	; 0x3e
    13ae:	9f af       	std	Y+63, r25	; 0x3f
    13b0:	6a 97       	sbiw	r28, 0x1a	; 26
	translation_y /= 4.0;
    13b2:	20 e0       	ldi	r18, 0x00	; 0
    13b4:	30 e0       	ldi	r19, 0x00	; 0
    13b6:	40 e8       	ldi	r20, 0x80	; 128
    13b8:	5e e3       	ldi	r21, 0x3E	; 62
    13ba:	25 96       	adiw	r28, 0x05	; 5
    13bc:	6c ad       	ldd	r22, Y+60	; 0x3c
    13be:	7d ad       	ldd	r23, Y+61	; 0x3d
    13c0:	8e ad       	ldd	r24, Y+62	; 0x3e
    13c2:	9f ad       	ldd	r25, Y+63	; 0x3f
    13c4:	25 97       	sbiw	r28, 0x05	; 5
    13c6:	0e 94 1d 10 	call	0x203a	; 0x203a <__mulsf3>
    13ca:	6e 96       	adiw	r28, 0x1e	; 30
    13cc:	6c af       	std	Y+60, r22	; 0x3c
    13ce:	7d af       	std	Y+61, r23	; 0x3d
    13d0:	8e af       	std	Y+62, r24	; 0x3e
    13d2:	9f af       	std	Y+63, r25	; 0x3f
    13d4:	6e 97       	sbiw	r28, 0x1e	; 30
    13d6:	35 01       	movw	r6, r10
    13d8:	84 01       	movw	r16, r8

	////////// Find mWii and star scale //////////
	float mWii_scale = 0.0, star_scale = 0.0;
    13da:	25 96       	adiw	r28, 0x05	; 5
    13dc:	1c ae       	std	Y+60, r1	; 0x3c
    13de:	1d ae       	std	Y+61, r1	; 0x3d
    13e0:	1e ae       	std	Y+62, r1	; 0x3e
    13e2:	1f ae       	std	Y+63, r1	; 0x3f
    13e4:	25 97       	sbiw	r28, 0x05	; 5

	for (int i = 0; i < 4; i++) {
		mWii_scale += powf(mWii_x[i] - translation_x, 2.0) + powf(mWii_y[i] - translation_y, 2.0);
    13e6:	f8 01       	movw	r30, r16
    13e8:	61 91       	ld	r22, Z+
    13ea:	71 91       	ld	r23, Z+
    13ec:	81 91       	ld	r24, Z+
    13ee:	91 91       	ld	r25, Z+
    13f0:	8f 01       	movw	r16, r30
    13f2:	6a 96       	adiw	r28, 0x1a	; 26
    13f4:	2c ad       	ldd	r18, Y+60	; 0x3c
    13f6:	3d ad       	ldd	r19, Y+61	; 0x3d
    13f8:	4e ad       	ldd	r20, Y+62	; 0x3e
    13fa:	5f ad       	ldd	r21, Y+63	; 0x3f
    13fc:	6a 97       	sbiw	r28, 0x1a	; 26
    13fe:	0e 94 67 0d 	call	0x1ace	; 0x1ace <__subsf3>
    1402:	6b 01       	movw	r12, r22
    1404:	7c 01       	movw	r14, r24
    1406:	f3 01       	movw	r30, r6
    1408:	61 91       	ld	r22, Z+
    140a:	71 91       	ld	r23, Z+
    140c:	81 91       	ld	r24, Z+
    140e:	91 91       	ld	r25, Z+
    1410:	3f 01       	movw	r6, r30
    1412:	6e 96       	adiw	r28, 0x1e	; 30
    1414:	2c ad       	ldd	r18, Y+60	; 0x3c
    1416:	3d ad       	ldd	r19, Y+61	; 0x3d
    1418:	4e ad       	ldd	r20, Y+62	; 0x3e
    141a:	5f ad       	ldd	r21, Y+63	; 0x3f
    141c:	6e 97       	sbiw	r28, 0x1e	; 30
    141e:	0e 94 67 0d 	call	0x1ace	; 0x1ace <__subsf3>
    1422:	9b 01       	movw	r18, r22
    1424:	ac 01       	movw	r20, r24
    1426:	0e 94 1d 10 	call	0x203a	; 0x203a <__mulsf3>
    142a:	29 96       	adiw	r28, 0x09	; 9
    142c:	6c af       	std	Y+60, r22	; 0x3c
    142e:	7d af       	std	Y+61, r23	; 0x3d
    1430:	8e af       	std	Y+62, r24	; 0x3e
    1432:	9f af       	std	Y+63, r25	; 0x3f
    1434:	29 97       	sbiw	r28, 0x09	; 9
    1436:	a7 01       	movw	r20, r14
    1438:	96 01       	movw	r18, r12
    143a:	c7 01       	movw	r24, r14
    143c:	b6 01       	movw	r22, r12
    143e:	0e 94 1d 10 	call	0x203a	; 0x203a <__mulsf3>
    1442:	9b 01       	movw	r18, r22
    1444:	ac 01       	movw	r20, r24
    1446:	29 96       	adiw	r28, 0x09	; 9
    1448:	6c ad       	ldd	r22, Y+60	; 0x3c
    144a:	7d ad       	ldd	r23, Y+61	; 0x3d
    144c:	8e ad       	ldd	r24, Y+62	; 0x3e
    144e:	9f ad       	ldd	r25, Y+63	; 0x3f
    1450:	29 97       	sbiw	r28, 0x09	; 9
    1452:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <__addsf3>
    1456:	9b 01       	movw	r18, r22
    1458:	ac 01       	movw	r20, r24
    145a:	25 96       	adiw	r28, 0x05	; 5
    145c:	6c ad       	ldd	r22, Y+60	; 0x3c
    145e:	7d ad       	ldd	r23, Y+61	; 0x3d
    1460:	8e ad       	ldd	r24, Y+62	; 0x3e
    1462:	9f ad       	ldd	r25, Y+63	; 0x3f
    1464:	25 97       	sbiw	r28, 0x05	; 5
    1466:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <__addsf3>
    146a:	25 96       	adiw	r28, 0x05	; 5
    146c:	6c af       	std	Y+60, r22	; 0x3c
    146e:	7d af       	std	Y+61, r23	; 0x3d
    1470:	8e af       	std	Y+62, r24	; 0x3e
    1472:	9f af       	std	Y+63, r25	; 0x3f
    1474:	25 97       	sbiw	r28, 0x05	; 5
	translation_y /= 4.0;

	////////// Find mWii and star scale //////////
	float mWii_scale = 0.0, star_scale = 0.0;

	for (int i = 0; i < 4; i++) {
    1476:	02 15       	cp	r16, r2
    1478:	13 05       	cpc	r17, r3
    147a:	09 f0       	breq	.+2      	; 0x147e <interpret+0x2be>
    147c:	b4 cf       	rjmp	.-152    	; 0x13e6 <interpret+0x226>
		mWii_scale += powf(mWii_x[i] - translation_x, 2.0) + powf(mWii_y[i] - translation_y, 2.0);
		star_scale += powf(CENTERED_STARS[i][0], 2.0) + powf(CENTERED_STARS[i][1], 2.0);
	}
	
	mWii_scale = powf(mWii_scale / 4.0, 0.5);
    147e:	20 e0       	ldi	r18, 0x00	; 0
    1480:	30 e0       	ldi	r19, 0x00	; 0
    1482:	40 e8       	ldi	r20, 0x80	; 128
    1484:	5e e3       	ldi	r21, 0x3E	; 62
    1486:	0e 94 1d 10 	call	0x203a	; 0x203a <__mulsf3>
    148a:	20 e0       	ldi	r18, 0x00	; 0
    148c:	30 e0       	ldi	r19, 0x00	; 0
    148e:	40 e0       	ldi	r20, 0x00	; 0
    1490:	5f e3       	ldi	r21, 0x3F	; 63
    1492:	0e 94 8a 10 	call	0x2114	; 0x2114 <pow>
    1496:	e6 2e       	mov	r14, r22
    1498:	f7 2e       	mov	r15, r23
    149a:	08 2f       	mov	r16, r24
    149c:	19 2f       	mov	r17, r25
    149e:	2e 01       	movw	r4, r28
    14a0:	f1 e2       	ldi	r31, 0x21	; 33
    14a2:	4f 0e       	add	r4, r31
    14a4:	51 1c       	adc	r5, r1
    14a6:	9e 01       	movw	r18, r28
    14a8:	2f 5c       	subi	r18, 0xCF	; 207
    14aa:	3f 4f       	sbci	r19, 0xFF	; 255
    14ac:	a2 96       	adiw	r28, 0x22	; 34
    14ae:	3f af       	std	Y+63, r19	; 0x3f
    14b0:	2e af       	std	Y+62, r18	; 0x3e
    14b2:	a2 97       	sbiw	r28, 0x22	; 34
    14b4:	69 01       	movw	r12, r18
    14b6:	32 01       	movw	r6, r4

	// Scale points to uniform scale (0 to 1)
	float sx[4], sy[4];
	float mx[4], my[4];
	for (int i = 0; i < 4; i++) {
		mx[i] = (mWii_x[i] - translation_x) / mWii_scale;
    14b8:	f4 01       	movw	r30, r8
    14ba:	61 91       	ld	r22, Z+
    14bc:	71 91       	ld	r23, Z+
    14be:	81 91       	ld	r24, Z+
    14c0:	91 91       	ld	r25, Z+
    14c2:	4f 01       	movw	r8, r30
    14c4:	6a 96       	adiw	r28, 0x1a	; 26
    14c6:	2c ad       	ldd	r18, Y+60	; 0x3c
    14c8:	3d ad       	ldd	r19, Y+61	; 0x3d
    14ca:	4e ad       	ldd	r20, Y+62	; 0x3e
    14cc:	5f ad       	ldd	r21, Y+63	; 0x3f
    14ce:	6a 97       	sbiw	r28, 0x1a	; 26
    14d0:	0e 94 67 0d 	call	0x1ace	; 0x1ace <__subsf3>
    14d4:	2e 2d       	mov	r18, r14
    14d6:	3f 2d       	mov	r19, r15
    14d8:	40 2f       	mov	r20, r16
    14da:	51 2f       	mov	r21, r17
    14dc:	0e 94 50 0e 	call	0x1ca0	; 0x1ca0 <__divsf3>
    14e0:	f3 01       	movw	r30, r6
    14e2:	61 93       	st	Z+, r22
    14e4:	71 93       	st	Z+, r23
    14e6:	81 93       	st	Z+, r24
    14e8:	91 93       	st	Z+, r25
    14ea:	3f 01       	movw	r6, r30
		my[i] = (mWii_y[i] - translation_y) / mWii_scale;
    14ec:	f5 01       	movw	r30, r10
    14ee:	61 91       	ld	r22, Z+
    14f0:	71 91       	ld	r23, Z+
    14f2:	81 91       	ld	r24, Z+
    14f4:	91 91       	ld	r25, Z+
    14f6:	5f 01       	movw	r10, r30
    14f8:	6e 96       	adiw	r28, 0x1e	; 30
    14fa:	2c ad       	ldd	r18, Y+60	; 0x3c
    14fc:	3d ad       	ldd	r19, Y+61	; 0x3d
    14fe:	4e ad       	ldd	r20, Y+62	; 0x3e
    1500:	5f ad       	ldd	r21, Y+63	; 0x3f
    1502:	6e 97       	sbiw	r28, 0x1e	; 30
    1504:	0e 94 67 0d 	call	0x1ace	; 0x1ace <__subsf3>
    1508:	2e 2d       	mov	r18, r14
    150a:	3f 2d       	mov	r19, r15
    150c:	40 2f       	mov	r20, r16
    150e:	51 2f       	mov	r21, r17
    1510:	0e 94 50 0e 	call	0x1ca0	; 0x1ca0 <__divsf3>
    1514:	f6 01       	movw	r30, r12
    1516:	61 93       	st	Z+, r22
    1518:	71 93       	st	Z+, r23
    151a:	81 93       	st	Z+, r24
    151c:	91 93       	st	Z+, r25
    151e:	6f 01       	movw	r12, r30
	star_scale = powf(star_scale / 4.0, 0.5);

	// Scale points to uniform scale (0 to 1)
	float sx[4], sy[4];
	float mx[4], my[4];
	for (int i = 0; i < 4; i++) {
    1520:	82 14       	cp	r8, r2
    1522:	93 04       	cpc	r9, r3
    1524:	49 f6       	brne	.-110    	; 0x14b8 <interpret+0x2f8>
    1526:	27 96       	adiw	r28, 0x07	; 7
    1528:	1f ae       	std	Y+63, r1	; 0x3f
    152a:	1e ae       	std	Y+62, r1	; 0x3e
    152c:	27 97       	sbiw	r28, 0x07	; 7
    152e:	21 e0       	ldi	r18, 0x01	; 1
    1530:	30 e0       	ldi	r19, 0x00	; 0
    1532:	a4 96       	adiw	r28, 0x24	; 36
    1534:	3f af       	std	Y+63, r19	; 0x3f
    1536:	2e af       	std	Y+62, r18	; 0x3e
    1538:	a4 97       	sbiw	r28, 0x24	; 36
    153a:	80 e0       	ldi	r24, 0x00	; 0
    153c:	90 e0       	ldi	r25, 0x00	; 0
    153e:	2a 96       	adiw	r28, 0x0a	; 10
    1540:	1f ae       	std	Y+63, r1	; 0x3f
    1542:	2a 97       	sbiw	r28, 0x0a	; 10
    1544:	2e 96       	adiw	r28, 0x0e	; 14
    1546:	1f ae       	std	Y+63, r1	; 0x3f
    1548:	2e 97       	sbiw	r28, 0x0e	; 14
    154a:	61 2c       	mov	r6, r1
    154c:	71 2c       	mov	r7, r1
    154e:	12 01       	movw	r2, r4

	// Get max distance indices
	float max_distance = 0;
	int indices[2] = {0, 1};
	for (int i = 0; i < 3; i++) {
		for (int j = i + 1; j < 4; j++) {
    1550:	ac 01       	movw	r20, r24
    1552:	4f 5f       	subi	r20, 0xFF	; 255
    1554:	5f 4f       	sbci	r21, 0xFF	; 255
    1556:	a0 96       	adiw	r28, 0x20	; 32
    1558:	5f af       	std	Y+63, r21	; 0x3f
    155a:	4e af       	std	Y+62, r20	; 0x3e
    155c:	a0 97       	sbiw	r28, 0x20	; 32
    155e:	44 30       	cpi	r20, 0x04	; 4
    1560:	51 05       	cpc	r21, r1
    1562:	0c f0       	brlt	.+2      	; 0x1566 <interpret+0x3a6>
    1564:	88 c2       	rjmp	.+1296   	; 0x1a76 <interpret+0x8b6>
			// Get distance between points
			float distance = powf(powf(mx[i] - mx[j], 2.0) + powf(my[i] - my[j], 2.0), 0.5);
    1566:	f1 01       	movw	r30, r2
    1568:	21 91       	ld	r18, Z+
    156a:	31 91       	ld	r19, Z+
    156c:	41 91       	ld	r20, Z+
    156e:	51 91       	ld	r21, Z+
    1570:	4f 01       	movw	r8, r30
    1572:	62 96       	adiw	r28, 0x12	; 18
    1574:	2c af       	std	Y+60, r18	; 0x3c
    1576:	3d af       	std	Y+61, r19	; 0x3d
    1578:	4e af       	std	Y+62, r20	; 0x3e
    157a:	5f af       	std	Y+63, r21	; 0x3f
    157c:	62 97       	sbiw	r28, 0x12	; 18
    157e:	a2 96       	adiw	r28, 0x22	; 34
    1580:	ae ac       	ldd	r10, Y+62	; 0x3e
    1582:	bf ac       	ldd	r11, Y+63	; 0x3f
    1584:	a2 97       	sbiw	r28, 0x22	; 34
    1586:	f5 01       	movw	r30, r10
    1588:	21 91       	ld	r18, Z+
    158a:	31 91       	ld	r19, Z+
    158c:	41 91       	ld	r20, Z+
    158e:	51 91       	ld	r21, Z+
    1590:	5f 01       	movw	r10, r30
    1592:	66 96       	adiw	r28, 0x16	; 22
    1594:	2c af       	std	Y+60, r18	; 0x3c
    1596:	3d af       	std	Y+61, r19	; 0x3d
    1598:	4e af       	std	Y+62, r20	; 0x3e
    159a:	5f af       	std	Y+63, r21	; 0x3f
    159c:	66 97       	sbiw	r28, 0x16	; 22
    159e:	a0 96       	adiw	r28, 0x20	; 32
    15a0:	4e ac       	ldd	r4, Y+62	; 0x3e
    15a2:	5f ac       	ldd	r5, Y+63	; 0x3f
    15a4:	a0 97       	sbiw	r28, 0x20	; 32
			// Compare to max distance
			if (distance > max_distance) {
    15a6:	a5 96       	adiw	r28, 0x25	; 37
    15a8:	8f af       	std	Y+63, r24	; 0x3f
    15aa:	a5 97       	sbiw	r28, 0x25	; 37
    15ac:	a6 96       	adiw	r28, 0x26	; 38
    15ae:	9f af       	std	Y+63, r25	; 0x3f
    15b0:	a6 97       	sbiw	r28, 0x26	; 38
	float max_distance = 0;
	int indices[2] = {0, 1};
	for (int i = 0; i < 3; i++) {
		for (int j = i + 1; j < 4; j++) {
			// Get distance between points
			float distance = powf(powf(mx[i] - mx[j], 2.0) + powf(my[i] - my[j], 2.0), 0.5);
    15b2:	f4 01       	movw	r30, r8
    15b4:	21 91       	ld	r18, Z+
    15b6:	31 91       	ld	r19, Z+
    15b8:	41 91       	ld	r20, Z+
    15ba:	51 91       	ld	r21, Z+
    15bc:	4f 01       	movw	r8, r30
    15be:	62 96       	adiw	r28, 0x12	; 18
    15c0:	6c ad       	ldd	r22, Y+60	; 0x3c
    15c2:	7d ad       	ldd	r23, Y+61	; 0x3d
    15c4:	8e ad       	ldd	r24, Y+62	; 0x3e
    15c6:	9f ad       	ldd	r25, Y+63	; 0x3f
    15c8:	62 97       	sbiw	r28, 0x12	; 18
    15ca:	0e 94 67 0d 	call	0x1ace	; 0x1ace <__subsf3>
    15ce:	6b 01       	movw	r12, r22
    15d0:	7c 01       	movw	r14, r24
    15d2:	f5 01       	movw	r30, r10
    15d4:	21 91       	ld	r18, Z+
    15d6:	31 91       	ld	r19, Z+
    15d8:	41 91       	ld	r20, Z+
    15da:	51 91       	ld	r21, Z+
    15dc:	5f 01       	movw	r10, r30
    15de:	66 96       	adiw	r28, 0x16	; 22
    15e0:	6c ad       	ldd	r22, Y+60	; 0x3c
    15e2:	7d ad       	ldd	r23, Y+61	; 0x3d
    15e4:	8e ad       	ldd	r24, Y+62	; 0x3e
    15e6:	9f ad       	ldd	r25, Y+63	; 0x3f
    15e8:	66 97       	sbiw	r28, 0x16	; 22
    15ea:	0e 94 67 0d 	call	0x1ace	; 0x1ace <__subsf3>
    15ee:	9b 01       	movw	r18, r22
    15f0:	ac 01       	movw	r20, r24
    15f2:	0e 94 1d 10 	call	0x203a	; 0x203a <__mulsf3>
    15f6:	25 96       	adiw	r28, 0x05	; 5
    15f8:	6c af       	std	Y+60, r22	; 0x3c
    15fa:	7d af       	std	Y+61, r23	; 0x3d
    15fc:	8e af       	std	Y+62, r24	; 0x3e
    15fe:	9f af       	std	Y+63, r25	; 0x3f
    1600:	25 97       	sbiw	r28, 0x05	; 5
    1602:	a7 01       	movw	r20, r14
    1604:	96 01       	movw	r18, r12
    1606:	c7 01       	movw	r24, r14
    1608:	b6 01       	movw	r22, r12
    160a:	0e 94 1d 10 	call	0x203a	; 0x203a <__mulsf3>
    160e:	9b 01       	movw	r18, r22
    1610:	ac 01       	movw	r20, r24
    1612:	25 96       	adiw	r28, 0x05	; 5
    1614:	6c ad       	ldd	r22, Y+60	; 0x3c
    1616:	7d ad       	ldd	r23, Y+61	; 0x3d
    1618:	8e ad       	ldd	r24, Y+62	; 0x3e
    161a:	9f ad       	ldd	r25, Y+63	; 0x3f
    161c:	25 97       	sbiw	r28, 0x05	; 5
    161e:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <__addsf3>
    1622:	20 e0       	ldi	r18, 0x00	; 0
    1624:	30 e0       	ldi	r19, 0x00	; 0
    1626:	40 e0       	ldi	r20, 0x00	; 0
    1628:	5f e3       	ldi	r21, 0x3F	; 63
    162a:	0e 94 8a 10 	call	0x2114	; 0x2114 <pow>
    162e:	e6 2e       	mov	r14, r22
    1630:	f7 2e       	mov	r15, r23
    1632:	08 2f       	mov	r16, r24
    1634:	19 2f       	mov	r17, r25
			// Compare to max distance
			if (distance > max_distance) {
    1636:	2a 96       	adiw	r28, 0x0a	; 10
    1638:	2f ad       	ldd	r18, Y+63	; 0x3f
    163a:	2a 97       	sbiw	r28, 0x0a	; 10
    163c:	2e 96       	adiw	r28, 0x0e	; 14
    163e:	3f ad       	ldd	r19, Y+63	; 0x3f
    1640:	2e 97       	sbiw	r28, 0x0e	; 14
    1642:	46 2d       	mov	r20, r6
    1644:	57 2d       	mov	r21, r7
    1646:	0e 94 10 10 	call	0x2020	; 0x2020 <__gesf2>
    164a:	18 16       	cp	r1, r24
    164c:	c4 f4       	brge	.+48     	; 0x167e <interpret+0x4be>
    164e:	a4 96       	adiw	r28, 0x24	; 36
    1650:	5f ae       	std	Y+63, r5	; 0x3f
    1652:	4e ae       	std	Y+62, r4	; 0x3e
    1654:	a4 97       	sbiw	r28, 0x24	; 36
    1656:	a5 96       	adiw	r28, 0x25	; 37
    1658:	ff ad       	ldd	r31, Y+63	; 0x3f
    165a:	a5 97       	sbiw	r28, 0x25	; 37
    165c:	26 96       	adiw	r28, 0x06	; 6
    165e:	ff af       	std	Y+63, r31	; 0x3f
    1660:	26 97       	sbiw	r28, 0x06	; 6
    1662:	a6 96       	adiw	r28, 0x26	; 38
    1664:	2f ad       	ldd	r18, Y+63	; 0x3f
    1666:	a6 97       	sbiw	r28, 0x26	; 38
    1668:	27 96       	adiw	r28, 0x07	; 7
    166a:	2f af       	std	Y+63, r18	; 0x3f
    166c:	27 97       	sbiw	r28, 0x07	; 7
				// If greater, update max distance indices
				indices[0] = i;
				indices[1] = j;
				max_distance = distance;
    166e:	2a 96       	adiw	r28, 0x0a	; 10
    1670:	ef ae       	std	Y+63, r14	; 0x3f
    1672:	2a 97       	sbiw	r28, 0x0a	; 10
    1674:	2e 96       	adiw	r28, 0x0e	; 14
    1676:	ff ae       	std	Y+63, r15	; 0x3f
    1678:	2e 97       	sbiw	r28, 0x0e	; 14
    167a:	60 2e       	mov	r6, r16
    167c:	71 2e       	mov	r7, r17

	// Get max distance indices
	float max_distance = 0;
	int indices[2] = {0, 1};
	for (int i = 0; i < 3; i++) {
		for (int j = i + 1; j < 4; j++) {
    167e:	3f ef       	ldi	r19, 0xFF	; 255
    1680:	43 1a       	sub	r4, r19
    1682:	53 0a       	sbc	r5, r19
    1684:	44 e0       	ldi	r20, 0x04	; 4
    1686:	44 16       	cp	r4, r20
    1688:	51 04       	cpc	r5, r1
    168a:	09 f0       	breq	.+2      	; 0x168e <interpret+0x4ce>
    168c:	92 cf       	rjmp	.-220    	; 0x15b2 <interpret+0x3f2>
    168e:	54 e0       	ldi	r21, 0x04	; 4
    1690:	25 0e       	add	r2, r21
    1692:	31 1c       	adc	r3, r1
    1694:	a2 96       	adiw	r28, 0x22	; 34
    1696:	8e ad       	ldd	r24, Y+62	; 0x3e
    1698:	9f ad       	ldd	r25, Y+63	; 0x3f
    169a:	a2 97       	sbiw	r28, 0x22	; 34
    169c:	04 96       	adiw	r24, 0x04	; 4
    169e:	a2 96       	adiw	r28, 0x22	; 34
    16a0:	9f af       	std	Y+63, r25	; 0x3f
    16a2:	8e af       	std	Y+62, r24	; 0x3e
    16a4:	a2 97       	sbiw	r28, 0x22	; 34
	////////// Sort mWii point indices based on distance from origin //////////

	// Get max distance indices
	float max_distance = 0;
	int indices[2] = {0, 1};
	for (int i = 0; i < 3; i++) {
    16a6:	a0 96       	adiw	r28, 0x20	; 32
    16a8:	8e ad       	ldd	r24, Y+62	; 0x3e
    16aa:	9f ad       	ldd	r25, Y+63	; 0x3f
    16ac:	a0 97       	sbiw	r28, 0x20	; 32
    16ae:	83 30       	cpi	r24, 0x03	; 3
    16b0:	91 05       	cpc	r25, r1
    16b2:	09 f0       	breq	.+2      	; 0x16b6 <interpret+0x4f6>
    16b4:	4d cf       	rjmp	.-358    	; 0x1550 <interpret+0x390>
    16b6:	27 96       	adiw	r28, 0x07	; 7
    16b8:	2e ac       	ldd	r2, Y+62	; 0x3e
    16ba:	3f ac       	ldd	r3, Y+63	; 0x3f
    16bc:	27 97       	sbiw	r28, 0x07	; 7
    16be:	a4 96       	adiw	r28, 0x24	; 36
    16c0:	ce ac       	ldd	r12, Y+62	; 0x3e
    16c2:	df ac       	ldd	r13, Y+63	; 0x3f
    16c4:	a4 97       	sbiw	r28, 0x24	; 36

	// Find which max index has the shortest distance to one of the other two points
	float min_distance = FLT_MAX;
	// Index of top star that we're looking for
	int top_index = indices[0];
	for (int i = 0; i < 4; i++) {
    16c6:	00 e0       	ldi	r16, 0x00	; 0
    16c8:	10 e0       	ldi	r17, 0x00	; 0
		// Looking at other two points
		if (i != indices[0] && i != indices[1]) {
    16ca:	20 16       	cp	r2, r16
    16cc:	31 06       	cpc	r3, r17
    16ce:	09 f4       	brne	.+2      	; 0x16d2 <interpret+0x512>
    16d0:	f4 c0       	rjmp	.+488    	; 0x18ba <interpret+0x6fa>
    16d2:	c0 16       	cp	r12, r16
    16d4:	d1 06       	cpc	r13, r17
    16d6:	09 f4       	brne	.+2      	; 0x16da <interpret+0x51a>
    16d8:	f0 c0       	rjmp	.+480    	; 0x18ba <interpret+0x6fa>
			// Get distance to first max distance point
			float distance = powf(powf(mx[indices[0]] - mx[i], 2.0) + powf(my[indices[0]] - my[i], 2.0), 0.5);
    16da:	00 0f       	add	r16, r16
    16dc:	11 1f       	adc	r17, r17
    16de:	00 0f       	add	r16, r16
    16e0:	11 1f       	adc	r17, r17
    16e2:	e1 e0       	ldi	r30, 0x01	; 1
    16e4:	f0 e0       	ldi	r31, 0x00	; 0
    16e6:	ec 0f       	add	r30, r28
    16e8:	fd 1f       	adc	r31, r29
    16ea:	0e 0f       	add	r16, r30
    16ec:	1f 1f       	adc	r17, r31
    16ee:	f8 01       	movw	r30, r16
    16f0:	40 a0       	ldd	r4, Z+32	; 0x20
    16f2:	51 a0       	ldd	r5, Z+33	; 0x21
    16f4:	62 a0       	ldd	r6, Z+34	; 0x22
    16f6:	73 a0       	ldd	r7, Z+35	; 0x23
    16f8:	71 01       	movw	r14, r2
    16fa:	ee 0c       	add	r14, r14
    16fc:	ff 1c       	adc	r15, r15
    16fe:	ee 0c       	add	r14, r14
    1700:	ff 1c       	adc	r15, r15
    1702:	21 e0       	ldi	r18, 0x01	; 1
    1704:	30 e0       	ldi	r19, 0x00	; 0
    1706:	2c 0f       	add	r18, r28
    1708:	3d 1f       	adc	r19, r29
    170a:	e2 0e       	add	r14, r18
    170c:	f3 1e       	adc	r15, r19
    170e:	a3 01       	movw	r20, r6
    1710:	92 01       	movw	r18, r4
    1712:	f7 01       	movw	r30, r14
    1714:	60 a1       	ldd	r22, Z+32	; 0x20
    1716:	71 a1       	ldd	r23, Z+33	; 0x21
    1718:	82 a1       	ldd	r24, Z+34	; 0x22
    171a:	93 a1       	ldd	r25, Z+35	; 0x23
    171c:	0e 94 67 0d 	call	0x1ace	; 0x1ace <__subsf3>
    1720:	25 96       	adiw	r28, 0x05	; 5
    1722:	6c af       	std	Y+60, r22	; 0x3c
    1724:	7d af       	std	Y+61, r23	; 0x3d
    1726:	8e af       	std	Y+62, r24	; 0x3e
    1728:	9f af       	std	Y+63, r25	; 0x3f
    172a:	25 97       	sbiw	r28, 0x05	; 5
    172c:	f8 01       	movw	r30, r16
    172e:	80 a8       	ldd	r8, Z+48	; 0x30
    1730:	91 a8       	ldd	r9, Z+49	; 0x31
    1732:	a2 a8       	ldd	r10, Z+50	; 0x32
    1734:	b3 a8       	ldd	r11, Z+51	; 0x33
    1736:	a5 01       	movw	r20, r10
    1738:	94 01       	movw	r18, r8
    173a:	f7 01       	movw	r30, r14
    173c:	60 a9       	ldd	r22, Z+48	; 0x30
    173e:	71 a9       	ldd	r23, Z+49	; 0x31
    1740:	82 a9       	ldd	r24, Z+50	; 0x32
    1742:	93 a9       	ldd	r25, Z+51	; 0x33
    1744:	0e 94 67 0d 	call	0x1ace	; 0x1ace <__subsf3>
    1748:	2d 96       	adiw	r28, 0x0d	; 13
    174a:	6c af       	std	Y+60, r22	; 0x3c
    174c:	7d af       	std	Y+61, r23	; 0x3d
    174e:	8e af       	std	Y+62, r24	; 0x3e
    1750:	9f af       	std	Y+63, r25	; 0x3f
    1752:	2d 97       	sbiw	r28, 0x0d	; 13
    1754:	25 96       	adiw	r28, 0x05	; 5
    1756:	2c ad       	ldd	r18, Y+60	; 0x3c
    1758:	3d ad       	ldd	r19, Y+61	; 0x3d
    175a:	4e ad       	ldd	r20, Y+62	; 0x3e
    175c:	5f ad       	ldd	r21, Y+63	; 0x3f
    175e:	25 97       	sbiw	r28, 0x05	; 5
    1760:	ca 01       	movw	r24, r20
    1762:	b9 01       	movw	r22, r18
    1764:	0e 94 1d 10 	call	0x203a	; 0x203a <__mulsf3>
    1768:	25 96       	adiw	r28, 0x05	; 5
    176a:	6c af       	std	Y+60, r22	; 0x3c
    176c:	7d af       	std	Y+61, r23	; 0x3d
    176e:	8e af       	std	Y+62, r24	; 0x3e
    1770:	9f af       	std	Y+63, r25	; 0x3f
    1772:	25 97       	sbiw	r28, 0x05	; 5
    1774:	2d 96       	adiw	r28, 0x0d	; 13
    1776:	2c ad       	ldd	r18, Y+60	; 0x3c
    1778:	3d ad       	ldd	r19, Y+61	; 0x3d
    177a:	4e ad       	ldd	r20, Y+62	; 0x3e
    177c:	5f ad       	ldd	r21, Y+63	; 0x3f
    177e:	2d 97       	sbiw	r28, 0x0d	; 13
    1780:	ca 01       	movw	r24, r20
    1782:	b9 01       	movw	r22, r18
    1784:	0e 94 1d 10 	call	0x203a	; 0x203a <__mulsf3>
    1788:	9b 01       	movw	r18, r22
    178a:	ac 01       	movw	r20, r24
    178c:	25 96       	adiw	r28, 0x05	; 5
    178e:	6c ad       	ldd	r22, Y+60	; 0x3c
    1790:	7d ad       	ldd	r23, Y+61	; 0x3d
    1792:	8e ad       	ldd	r24, Y+62	; 0x3e
    1794:	9f ad       	ldd	r25, Y+63	; 0x3f
    1796:	25 97       	sbiw	r28, 0x05	; 5
    1798:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <__addsf3>
    179c:	20 e0       	ldi	r18, 0x00	; 0
    179e:	30 e0       	ldi	r19, 0x00	; 0
    17a0:	40 e0       	ldi	r20, 0x00	; 0
    17a2:	5f e3       	ldi	r21, 0x3F	; 63
    17a4:	0e 94 8a 10 	call	0x2114	; 0x2114 <pow>
    17a8:	2a 96       	adiw	r28, 0x0a	; 10
    17aa:	6f af       	std	Y+63, r22	; 0x3f
    17ac:	2a 97       	sbiw	r28, 0x0a	; 10
    17ae:	2e 96       	adiw	r28, 0x0e	; 14
    17b0:	7f af       	std	Y+63, r23	; 0x3f
    17b2:	2e 97       	sbiw	r28, 0x0e	; 14
    17b4:	e8 2e       	mov	r14, r24
    17b6:	f9 2e       	mov	r15, r25
			// If distance is lower than min distance, set as the new top index
			if (distance < min_distance) {
    17b8:	2f ef       	ldi	r18, 0xFF	; 255
    17ba:	3f ef       	ldi	r19, 0xFF	; 255
    17bc:	4f e7       	ldi	r20, 0x7F	; 127
    17be:	5f e7       	ldi	r21, 0x7F	; 127
    17c0:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <__cmpsf2>
    17c4:	88 23       	and	r24, r24
    17c6:	84 f0       	brlt	.+32     	; 0x17e8 <interpret+0x628>
			}
		}
	}

	// Find which max index has the shortest distance to one of the other two points
	float min_distance = FLT_MAX;
    17c8:	ff ef       	ldi	r31, 0xFF	; 255
    17ca:	2a 96       	adiw	r28, 0x0a	; 10
    17cc:	ff af       	std	Y+63, r31	; 0x3f
    17ce:	2a 97       	sbiw	r28, 0x0a	; 10
    17d0:	2f ef       	ldi	r18, 0xFF	; 255
    17d2:	2e 96       	adiw	r28, 0x0e	; 14
    17d4:	2f af       	std	Y+63, r18	; 0x3f
    17d6:	2e 97       	sbiw	r28, 0x0e	; 14
    17d8:	0f 2e       	mov	r0, r31
    17da:	ff e7       	ldi	r31, 0x7F	; 127
    17dc:	ef 2e       	mov	r14, r31
    17de:	f0 2d       	mov	r31, r0
    17e0:	0f 2e       	mov	r0, r31
    17e2:	ff e7       	ldi	r31, 0x7F	; 127
    17e4:	ff 2e       	mov	r15, r31
    17e6:	f0 2d       	mov	r31, r0
			if (distance < min_distance) {
				top_index = indices[0];
				min_distance = distance;
			}
			// Get distance to other max distance point
			distance = powf(powf(mx[indices[1]] - mx[i], 2.0) + powf(my[indices[1]] - my[i], 2.0), 0.5);
    17e8:	86 01       	movw	r16, r12
    17ea:	00 0f       	add	r16, r16
    17ec:	11 1f       	adc	r17, r17
    17ee:	00 0f       	add	r16, r16
    17f0:	11 1f       	adc	r17, r17
    17f2:	41 e0       	ldi	r20, 0x01	; 1
    17f4:	50 e0       	ldi	r21, 0x00	; 0
    17f6:	4c 0f       	add	r20, r28
    17f8:	5d 1f       	adc	r21, r29
    17fa:	04 0f       	add	r16, r20
    17fc:	15 1f       	adc	r17, r21
    17fe:	a3 01       	movw	r20, r6
    1800:	92 01       	movw	r18, r4
    1802:	f8 01       	movw	r30, r16
    1804:	60 a1       	ldd	r22, Z+32	; 0x20
    1806:	71 a1       	ldd	r23, Z+33	; 0x21
    1808:	82 a1       	ldd	r24, Z+34	; 0x22
    180a:	93 a1       	ldd	r25, Z+35	; 0x23
    180c:	0e 94 67 0d 	call	0x1ace	; 0x1ace <__subsf3>
    1810:	25 96       	adiw	r28, 0x05	; 5
    1812:	6c af       	std	Y+60, r22	; 0x3c
    1814:	7d af       	std	Y+61, r23	; 0x3d
    1816:	8e af       	std	Y+62, r24	; 0x3e
    1818:	9f af       	std	Y+63, r25	; 0x3f
    181a:	25 97       	sbiw	r28, 0x05	; 5
    181c:	a5 01       	movw	r20, r10
    181e:	94 01       	movw	r18, r8
    1820:	f8 01       	movw	r30, r16
    1822:	60 a9       	ldd	r22, Z+48	; 0x30
    1824:	71 a9       	ldd	r23, Z+49	; 0x31
    1826:	82 a9       	ldd	r24, Z+50	; 0x32
    1828:	93 a9       	ldd	r25, Z+51	; 0x33
    182a:	0e 94 67 0d 	call	0x1ace	; 0x1ace <__subsf3>
    182e:	2b 01       	movw	r4, r22
    1830:	3c 01       	movw	r6, r24
    1832:	25 96       	adiw	r28, 0x05	; 5
    1834:	2c ad       	ldd	r18, Y+60	; 0x3c
    1836:	3d ad       	ldd	r19, Y+61	; 0x3d
    1838:	4e ad       	ldd	r20, Y+62	; 0x3e
    183a:	5f ad       	ldd	r21, Y+63	; 0x3f
    183c:	25 97       	sbiw	r28, 0x05	; 5
    183e:	ca 01       	movw	r24, r20
    1840:	b9 01       	movw	r22, r18
    1842:	0e 94 1d 10 	call	0x203a	; 0x203a <__mulsf3>
    1846:	4b 01       	movw	r8, r22
    1848:	5c 01       	movw	r10, r24
    184a:	a3 01       	movw	r20, r6
    184c:	92 01       	movw	r18, r4
    184e:	c3 01       	movw	r24, r6
    1850:	b2 01       	movw	r22, r4
    1852:	0e 94 1d 10 	call	0x203a	; 0x203a <__mulsf3>
    1856:	9b 01       	movw	r18, r22
    1858:	ac 01       	movw	r20, r24
    185a:	c5 01       	movw	r24, r10
    185c:	b4 01       	movw	r22, r8
    185e:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <__addsf3>
    1862:	20 e0       	ldi	r18, 0x00	; 0
    1864:	30 e0       	ldi	r19, 0x00	; 0
    1866:	40 e0       	ldi	r20, 0x00	; 0
    1868:	5f e3       	ldi	r21, 0x3F	; 63
    186a:	0e 94 8a 10 	call	0x2114	; 0x2114 <pow>
    186e:	9b 01       	movw	r18, r22
    1870:	ac 01       	movw	r20, r24
			// If distance is lower than min distance, set as the new top index
			if (distance < min_distance) {
    1872:	2a 96       	adiw	r28, 0x0a	; 10
    1874:	6f ad       	ldd	r22, Y+63	; 0x3f
    1876:	2a 97       	sbiw	r28, 0x0a	; 10
    1878:	2e 96       	adiw	r28, 0x0e	; 14
    187a:	7f ad       	ldd	r23, Y+63	; 0x3f
    187c:	2e 97       	sbiw	r28, 0x0e	; 14
    187e:	8e 2d       	mov	r24, r14
    1880:	9f 2d       	mov	r25, r15
    1882:	0e 94 10 10 	call	0x2020	; 0x2020 <__gesf2>
    1886:	18 16       	cp	r1, r24
    1888:	3c f5       	brge	.+78     	; 0x18d8 <interpret+0x718>
		}
	}

	// Determine bottom star index
	int bottom_index;
	if (indices[0] == top_index) {
    188a:	2c 14       	cp	r2, r12
    188c:	3d 04       	cpc	r3, r13
    188e:	e1 f0       	breq	.+56     	; 0x18c8 <interpret+0x708>
    1890:	a3 96       	adiw	r28, 0x23	; 35
    1892:	9f ad       	ldd	r25, Y+63	; 0x3f
    1894:	a3 97       	sbiw	r28, 0x23	; 35
    1896:	a4 96       	adiw	r28, 0x24	; 36
    1898:	8f ad       	ldd	r24, Y+63	; 0x3f
    189a:	a4 97       	sbiw	r28, 0x24	; 36
    189c:	27 96       	adiw	r28, 0x07	; 7
    189e:	2e ad       	ldd	r18, Y+62	; 0x3e
    18a0:	3f ad       	ldd	r19, Y+63	; 0x3f
    18a2:	27 97       	sbiw	r28, 0x07	; 7
    18a4:	a4 96       	adiw	r28, 0x24	; 36
    18a6:	3f af       	std	Y+63, r19	; 0x3f
    18a8:	2e af       	std	Y+62, r18	; 0x3e
    18aa:	a4 97       	sbiw	r28, 0x24	; 36
    18ac:	26 96       	adiw	r28, 0x06	; 6
    18ae:	9f af       	std	Y+63, r25	; 0x3f
    18b0:	26 97       	sbiw	r28, 0x06	; 6
    18b2:	27 96       	adiw	r28, 0x07	; 7
    18b4:	8f af       	std	Y+63, r24	; 0x3f
    18b6:	27 97       	sbiw	r28, 0x07	; 7
    18b8:	0f c0       	rjmp	.+30     	; 0x18d8 <interpret+0x718>

	// Find which max index has the shortest distance to one of the other two points
	float min_distance = FLT_MAX;
	// Index of top star that we're looking for
	int top_index = indices[0];
	for (int i = 0; i < 4; i++) {
    18ba:	0f 5f       	subi	r16, 0xFF	; 255
    18bc:	1f 4f       	sbci	r17, 0xFF	; 255
    18be:	04 30       	cpi	r16, 0x04	; 4
    18c0:	11 05       	cpc	r17, r1
    18c2:	09 f0       	breq	.+2      	; 0x18c6 <interpret+0x706>
    18c4:	02 cf       	rjmp	.-508    	; 0x16ca <interpret+0x50a>
    18c6:	08 c0       	rjmp	.+16     	; 0x18d8 <interpret+0x718>
    18c8:	a4 96       	adiw	r28, 0x24	; 36
    18ca:	4e ad       	ldd	r20, Y+62	; 0x3e
    18cc:	5f ad       	ldd	r21, Y+63	; 0x3f
    18ce:	a4 97       	sbiw	r28, 0x24	; 36
    18d0:	27 96       	adiw	r28, 0x07	; 7
    18d2:	5f af       	std	Y+63, r21	; 0x3f
    18d4:	4e af       	std	Y+62, r20	; 0x3e
    18d6:	27 97       	sbiw	r28, 0x07	; 7
		bottom_index = indices[0];
	}

	////////// Determine mWii rotation //////////
	// determine rotation
	float delx = (mx[top_index] - mx[bottom_index]);
    18d8:	27 96       	adiw	r28, 0x07	; 7
    18da:	0e ad       	ldd	r16, Y+62	; 0x3e
    18dc:	1f ad       	ldd	r17, Y+63	; 0x3f
    18de:	27 97       	sbiw	r28, 0x07	; 7
    18e0:	00 0f       	add	r16, r16
    18e2:	11 1f       	adc	r17, r17
    18e4:	00 0f       	add	r16, r16
    18e6:	11 1f       	adc	r17, r17
    18e8:	81 e0       	ldi	r24, 0x01	; 1
    18ea:	90 e0       	ldi	r25, 0x00	; 0
    18ec:	8c 0f       	add	r24, r28
    18ee:	9d 1f       	adc	r25, r29
    18f0:	08 0f       	add	r16, r24
    18f2:	19 1f       	adc	r17, r25
    18f4:	a4 96       	adiw	r28, 0x24	; 36
    18f6:	ee ac       	ldd	r14, Y+62	; 0x3e
    18f8:	ff ac       	ldd	r15, Y+63	; 0x3f
    18fa:	a4 97       	sbiw	r28, 0x24	; 36
    18fc:	ee 0c       	add	r14, r14
    18fe:	ff 1c       	adc	r15, r15
    1900:	ee 0c       	add	r14, r14
    1902:	ff 1c       	adc	r15, r15
    1904:	e8 0e       	add	r14, r24
    1906:	f9 1e       	adc	r15, r25
    1908:	f7 01       	movw	r30, r14
    190a:	20 a1       	ldd	r18, Z+32	; 0x20
    190c:	31 a1       	ldd	r19, Z+33	; 0x21
    190e:	42 a1       	ldd	r20, Z+34	; 0x22
    1910:	53 a1       	ldd	r21, Z+35	; 0x23
    1912:	f8 01       	movw	r30, r16
    1914:	60 a1       	ldd	r22, Z+32	; 0x20
    1916:	71 a1       	ldd	r23, Z+33	; 0x21
    1918:	82 a1       	ldd	r24, Z+34	; 0x22
    191a:	93 a1       	ldd	r25, Z+35	; 0x23
    191c:	0e 94 67 0d 	call	0x1ace	; 0x1ace <__subsf3>
    1920:	4b 01       	movw	r8, r22
    1922:	5c 01       	movw	r10, r24
	float dely = (my[top_index] - my[bottom_index]);
    1924:	f7 01       	movw	r30, r14
    1926:	20 a9       	ldd	r18, Z+48	; 0x30
    1928:	31 a9       	ldd	r19, Z+49	; 0x31
    192a:	42 a9       	ldd	r20, Z+50	; 0x32
    192c:	53 a9       	ldd	r21, Z+51	; 0x33
    192e:	f8 01       	movw	r30, r16
    1930:	60 a9       	ldd	r22, Z+48	; 0x30
    1932:	71 a9       	ldd	r23, Z+49	; 0x31
    1934:	82 a9       	ldd	r24, Z+50	; 0x32
    1936:	93 a9       	ldd	r25, Z+51	; 0x33
    1938:	0e 94 67 0d 	call	0x1ace	; 0x1ace <__subsf3>
	robot->o = atan2f(dely, delx); //find rotation from y axis
    193c:	a5 01       	movw	r20, r10
    193e:	94 01       	movw	r18, r8
    1940:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <atan2>
    1944:	2b 01       	movw	r4, r22
    1946:	3c 01       	movw	r6, r24
	//if (robot->o < 0) robot->o += 2.0 * PI;
	*/

	////////// Use rotation to translate points into new xy frame //////////
	// Rotate original mWii points around the origin
	float s = sinf(2.0 * PI - robot->o);
    1948:	9b 01       	movw	r18, r22
    194a:	ac 01       	movw	r20, r24
    194c:	6b ed       	ldi	r22, 0xDB	; 219
    194e:	7f e0       	ldi	r23, 0x0F	; 15
    1950:	89 ec       	ldi	r24, 0xC9	; 201
    1952:	90 e4       	ldi	r25, 0x40	; 64
    1954:	0e 94 67 0d 	call	0x1ace	; 0x1ace <__subsf3>
    1958:	4b 01       	movw	r8, r22
    195a:	5c 01       	movw	r10, r24
    195c:	0e 94 da 10 	call	0x21b4	; 0x21b4 <sin>
    1960:	6b 01       	movw	r12, r22
    1962:	7c 01       	movw	r14, r24
	float c = cosf(2.0 * PI - robot->o);
    1964:	c5 01       	movw	r24, r10
    1966:	b4 01       	movw	r22, r8
    1968:	0e 94 4b 0e 	call	0x1c96	; 0x1c96 <cos>
    196c:	4b 01       	movw	r8, r22
    196e:	5c 01       	movw	r10, r24

	float ox = translation_x;
	float oy = translation_y;

	// Rotate points around origin into new xy frame
	translation_x = ox * c - oy * s;
    1970:	9b 01       	movw	r18, r22
    1972:	ac 01       	movw	r20, r24
    1974:	6a 96       	adiw	r28, 0x1a	; 26
    1976:	6c ad       	ldd	r22, Y+60	; 0x3c
    1978:	7d ad       	ldd	r23, Y+61	; 0x3d
    197a:	8e ad       	ldd	r24, Y+62	; 0x3e
    197c:	9f ad       	ldd	r25, Y+63	; 0x3f
    197e:	6a 97       	sbiw	r28, 0x1a	; 26
    1980:	0e 94 1d 10 	call	0x203a	; 0x203a <__mulsf3>
    1984:	25 96       	adiw	r28, 0x05	; 5
    1986:	6c af       	std	Y+60, r22	; 0x3c
    1988:	7d af       	std	Y+61, r23	; 0x3d
    198a:	8e af       	std	Y+62, r24	; 0x3e
    198c:	9f af       	std	Y+63, r25	; 0x3f
    198e:	25 97       	sbiw	r28, 0x05	; 5
    1990:	a7 01       	movw	r20, r14
    1992:	96 01       	movw	r18, r12
    1994:	6e 96       	adiw	r28, 0x1e	; 30
    1996:	6c ad       	ldd	r22, Y+60	; 0x3c
    1998:	7d ad       	ldd	r23, Y+61	; 0x3d
    199a:	8e ad       	ldd	r24, Y+62	; 0x3e
    199c:	9f ad       	ldd	r25, Y+63	; 0x3f
    199e:	6e 97       	sbiw	r28, 0x1e	; 30
    19a0:	0e 94 1d 10 	call	0x203a	; 0x203a <__mulsf3>
    19a4:	9b 01       	movw	r18, r22
    19a6:	ac 01       	movw	r20, r24
    19a8:	25 96       	adiw	r28, 0x05	; 5
    19aa:	6c ad       	ldd	r22, Y+60	; 0x3c
    19ac:	7d ad       	ldd	r23, Y+61	; 0x3d
    19ae:	8e ad       	ldd	r24, Y+62	; 0x3e
    19b0:	9f ad       	ldd	r25, Y+63	; 0x3f
    19b2:	25 97       	sbiw	r28, 0x05	; 5
    19b4:	0e 94 67 0d 	call	0x1ace	; 0x1ace <__subsf3>
    19b8:	9b 01       	movw	r18, r22
    19ba:	ac 01       	movw	r20, r24
	translation_y = oy * c + ox * s;

	// Set robot x and y locations in pixels
	robot->x = -translation_x - CENTER_OFFSET_X;
    19bc:	60 e0       	ldi	r22, 0x00	; 0
    19be:	70 e0       	ldi	r23, 0x00	; 0
    19c0:	8a ef       	ldi	r24, 0xFA	; 250
    19c2:	92 e4       	ldi	r25, 0x42	; 66
    19c4:	0e 94 67 0d 	call	0x1ace	; 0x1ace <__subsf3>
    19c8:	a8 96       	adiw	r28, 0x28	; 40
    19ca:	ee ad       	ldd	r30, Y+62	; 0x3e
    19cc:	ff ad       	ldd	r31, Y+63	; 0x3f
    19ce:	a8 97       	sbiw	r28, 0x28	; 40
    19d0:	60 83       	st	Z, r22
    19d2:	71 83       	std	Z+1, r23	; 0x01
    19d4:	82 83       	std	Z+2, r24	; 0x02
    19d6:	93 83       	std	Z+3, r25	; 0x03
	float ox = translation_x;
	float oy = translation_y;

	// Rotate points around origin into new xy frame
	translation_x = ox * c - oy * s;
	translation_y = oy * c + ox * s;
    19d8:	a5 01       	movw	r20, r10
    19da:	94 01       	movw	r18, r8
    19dc:	6e 96       	adiw	r28, 0x1e	; 30
    19de:	6c ad       	ldd	r22, Y+60	; 0x3c
    19e0:	7d ad       	ldd	r23, Y+61	; 0x3d
    19e2:	8e ad       	ldd	r24, Y+62	; 0x3e
    19e4:	9f ad       	ldd	r25, Y+63	; 0x3f
    19e6:	6e 97       	sbiw	r28, 0x1e	; 30
    19e8:	0e 94 1d 10 	call	0x203a	; 0x203a <__mulsf3>
    19ec:	4b 01       	movw	r8, r22
    19ee:	5c 01       	movw	r10, r24
    19f0:	a7 01       	movw	r20, r14
    19f2:	96 01       	movw	r18, r12
    19f4:	6a 96       	adiw	r28, 0x1a	; 26
    19f6:	6c ad       	ldd	r22, Y+60	; 0x3c
    19f8:	7d ad       	ldd	r23, Y+61	; 0x3d
    19fa:	8e ad       	ldd	r24, Y+62	; 0x3e
    19fc:	9f ad       	ldd	r25, Y+63	; 0x3f
    19fe:	6a 97       	sbiw	r28, 0x1a	; 26
    1a00:	0e 94 1d 10 	call	0x203a	; 0x203a <__mulsf3>
    1a04:	9b 01       	movw	r18, r22
    1a06:	ac 01       	movw	r20, r24
    1a08:	c5 01       	movw	r24, r10
    1a0a:	b4 01       	movw	r22, r8
    1a0c:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <__addsf3>

	// Set robot x and y locations in pixels
	robot->x = -translation_x - CENTER_OFFSET_X;
	robot->y = -translation_y - CENTER_OFFSET_Y;
    1a10:	90 58       	subi	r25, 0x80	; 128
    1a12:	20 e0       	ldi	r18, 0x00	; 0
    1a14:	30 e0       	ldi	r19, 0x00	; 0
    1a16:	40 ef       	ldi	r20, 0xF0	; 240
    1a18:	51 e4       	ldi	r21, 0x41	; 65
    1a1a:	0e 94 67 0d 	call	0x1ace	; 0x1ace <__subsf3>
    1a1e:	a8 96       	adiw	r28, 0x28	; 40
    1a20:	ee ad       	ldd	r30, Y+62	; 0x3e
    1a22:	ff ad       	ldd	r31, Y+63	; 0x3f
    1a24:	a8 97       	sbiw	r28, 0x28	; 40
    1a26:	64 83       	std	Z+4, r22	; 0x04
    1a28:	75 83       	std	Z+5, r23	; 0x05
    1a2a:	86 83       	std	Z+6, r24	; 0x06
    1a2c:	97 83       	std	Z+7, r25	; 0x07
	robot->o = -robot->o;
    1a2e:	d3 01       	movw	r26, r6
    1a30:	c2 01       	movw	r24, r4
    1a32:	b0 58       	subi	r27, 0x80	; 128
    1a34:	80 87       	std	Z+8, r24	; 0x08
    1a36:	91 87       	std	Z+9, r25	; 0x09
    1a38:	a2 87       	std	Z+10, r26	; 0x0a
    1a3a:	b3 87       	std	Z+11, r27	; 0x0b

	// Print data
	print_data(mWii_x, mWii_y, ox, oy, top_index, bottom_index, robot);
    1a3c:	4f 01       	movw	r8, r30
    1a3e:	a4 96       	adiw	r28, 0x24	; 36
    1a40:	ae ac       	ldd	r10, Y+62	; 0x3e
    1a42:	bf ac       	ldd	r11, Y+63	; 0x3f
    1a44:	a4 97       	sbiw	r28, 0x24	; 36
    1a46:	27 96       	adiw	r28, 0x07	; 7
    1a48:	ce ac       	ldd	r12, Y+62	; 0x3e
    1a4a:	df ac       	ldd	r13, Y+63	; 0x3f
    1a4c:	27 97       	sbiw	r28, 0x07	; 7
    1a4e:	6e 96       	adiw	r28, 0x1e	; 30
    1a50:	ec ac       	ldd	r14, Y+60	; 0x3c
    1a52:	fd ac       	ldd	r15, Y+61	; 0x3d
    1a54:	0e ad       	ldd	r16, Y+62	; 0x3e
    1a56:	1f ad       	ldd	r17, Y+63	; 0x3f
    1a58:	6e 97       	sbiw	r28, 0x1e	; 30
    1a5a:	6a 96       	adiw	r28, 0x1a	; 26
    1a5c:	2c ad       	ldd	r18, Y+60	; 0x3c
    1a5e:	3d ad       	ldd	r19, Y+61	; 0x3d
    1a60:	4e ad       	ldd	r20, Y+62	; 0x3e
    1a62:	5f ad       	ldd	r21, Y+63	; 0x3f
    1a64:	6a 97       	sbiw	r28, 0x1a	; 26
    1a66:	be 01       	movw	r22, r28
    1a68:	6f 5e       	subi	r22, 0xEF	; 239
    1a6a:	7f 4f       	sbci	r23, 0xFF	; 255
    1a6c:	ce 01       	movw	r24, r28
    1a6e:	01 96       	adiw	r24, 0x01	; 1
    1a70:	0e 94 b3 07 	call	0xf66	; 0xf66 <print_data>
    1a74:	12 c0       	rjmp	.+36     	; 0x1a9a <interpret+0x8da>
    1a76:	f4 e0       	ldi	r31, 0x04	; 4
    1a78:	2f 0e       	add	r2, r31
    1a7a:	31 1c       	adc	r3, r1
    1a7c:	a2 96       	adiw	r28, 0x22	; 34
    1a7e:	2e ad       	ldd	r18, Y+62	; 0x3e
    1a80:	3f ad       	ldd	r19, Y+63	; 0x3f
    1a82:	a2 97       	sbiw	r28, 0x22	; 34
    1a84:	2c 5f       	subi	r18, 0xFC	; 252
    1a86:	3f 4f       	sbci	r19, 0xFF	; 255
    1a88:	a2 96       	adiw	r28, 0x22	; 34
    1a8a:	3f af       	std	Y+63, r19	; 0x3f
    1a8c:	2e af       	std	Y+62, r18	; 0x3e
    1a8e:	a2 97       	sbiw	r28, 0x22	; 34
	////////// Sort mWii point indices based on distance from origin //////////

	// Get max distance indices
	float max_distance = 0;
	int indices[2] = {0, 1};
	for (int i = 0; i < 3; i++) {
    1a90:	a0 96       	adiw	r28, 0x20	; 32
    1a92:	8e ad       	ldd	r24, Y+62	; 0x3e
    1a94:	9f ad       	ldd	r25, Y+63	; 0x3f
    1a96:	a0 97       	sbiw	r28, 0x20	; 32
    1a98:	5b cd       	rjmp	.-1354   	; 0x1550 <interpret+0x390>
	robot->y = -translation_y - CENTER_OFFSET_Y;
	robot->o = -robot->o;

	// Print data
	print_data(mWii_x, mWii_y, ox, oy, top_index, bottom_index, robot);
}
    1a9a:	c9 59       	subi	r28, 0x99	; 153
    1a9c:	df 4f       	sbci	r29, 0xFF	; 255
    1a9e:	0f b6       	in	r0, 0x3f	; 63
    1aa0:	f8 94       	cli
    1aa2:	de bf       	out	0x3e, r29	; 62
    1aa4:	0f be       	out	0x3f, r0	; 63
    1aa6:	cd bf       	out	0x3d, r28	; 61
    1aa8:	df 91       	pop	r29
    1aaa:	cf 91       	pop	r28
    1aac:	1f 91       	pop	r17
    1aae:	0f 91       	pop	r16
    1ab0:	ff 90       	pop	r15
    1ab2:	ef 90       	pop	r14
    1ab4:	df 90       	pop	r13
    1ab6:	cf 90       	pop	r12
    1ab8:	bf 90       	pop	r11
    1aba:	af 90       	pop	r10
    1abc:	9f 90       	pop	r9
    1abe:	8f 90       	pop	r8
    1ac0:	7f 90       	pop	r7
    1ac2:	6f 90       	pop	r6
    1ac4:	5f 90       	pop	r5
    1ac6:	4f 90       	pop	r4
    1ac8:	3f 90       	pop	r3
    1aca:	2f 90       	pop	r2
    1acc:	08 95       	ret

00001ace <__subsf3>:
    1ace:	50 58       	subi	r21, 0x80	; 128

00001ad0 <__addsf3>:
    1ad0:	bb 27       	eor	r27, r27
    1ad2:	aa 27       	eor	r26, r26
    1ad4:	0e 94 7f 0d 	call	0x1afe	; 0x1afe <__addsf3x>
    1ad8:	0c 94 c2 0f 	jmp	0x1f84	; 0x1f84 <__fp_round>
    1adc:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <__fp_pscA>
    1ae0:	38 f0       	brcs	.+14     	; 0x1af0 <__addsf3+0x20>
    1ae2:	0e 94 90 0f 	call	0x1f20	; 0x1f20 <__fp_pscB>
    1ae6:	20 f0       	brcs	.+8      	; 0x1af0 <__addsf3+0x20>
    1ae8:	39 f4       	brne	.+14     	; 0x1af8 <__addsf3+0x28>
    1aea:	9f 3f       	cpi	r25, 0xFF	; 255
    1aec:	19 f4       	brne	.+6      	; 0x1af4 <__addsf3+0x24>
    1aee:	26 f4       	brtc	.+8      	; 0x1af8 <__addsf3+0x28>
    1af0:	0c 94 5f 0f 	jmp	0x1ebe	; 0x1ebe <__fp_nan>
    1af4:	0e f4       	brtc	.+2      	; 0x1af8 <__addsf3+0x28>
    1af6:	e0 95       	com	r30
    1af8:	e7 fb       	bst	r30, 7
    1afa:	0c 94 59 0f 	jmp	0x1eb2	; 0x1eb2 <__fp_inf>

00001afe <__addsf3x>:
    1afe:	e9 2f       	mov	r30, r25
    1b00:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <__fp_split3>
    1b04:	58 f3       	brcs	.-42     	; 0x1adc <__addsf3+0xc>
    1b06:	ba 17       	cp	r27, r26
    1b08:	62 07       	cpc	r22, r18
    1b0a:	73 07       	cpc	r23, r19
    1b0c:	84 07       	cpc	r24, r20
    1b0e:	95 07       	cpc	r25, r21
    1b10:	20 f0       	brcs	.+8      	; 0x1b1a <__addsf3x+0x1c>
    1b12:	79 f4       	brne	.+30     	; 0x1b32 <__addsf3x+0x34>
    1b14:	a6 f5       	brtc	.+104    	; 0x1b7e <__addsf3x+0x80>
    1b16:	0c 94 09 10 	jmp	0x2012	; 0x2012 <__fp_zero>
    1b1a:	0e f4       	brtc	.+2      	; 0x1b1e <__addsf3x+0x20>
    1b1c:	e0 95       	com	r30
    1b1e:	0b 2e       	mov	r0, r27
    1b20:	ba 2f       	mov	r27, r26
    1b22:	a0 2d       	mov	r26, r0
    1b24:	0b 01       	movw	r0, r22
    1b26:	b9 01       	movw	r22, r18
    1b28:	90 01       	movw	r18, r0
    1b2a:	0c 01       	movw	r0, r24
    1b2c:	ca 01       	movw	r24, r20
    1b2e:	a0 01       	movw	r20, r0
    1b30:	11 24       	eor	r1, r1
    1b32:	ff 27       	eor	r31, r31
    1b34:	59 1b       	sub	r21, r25
    1b36:	99 f0       	breq	.+38     	; 0x1b5e <__addsf3x+0x60>
    1b38:	59 3f       	cpi	r21, 0xF9	; 249
    1b3a:	50 f4       	brcc	.+20     	; 0x1b50 <__addsf3x+0x52>
    1b3c:	50 3e       	cpi	r21, 0xE0	; 224
    1b3e:	68 f1       	brcs	.+90     	; 0x1b9a <__addsf3x+0x9c>
    1b40:	1a 16       	cp	r1, r26
    1b42:	f0 40       	sbci	r31, 0x00	; 0
    1b44:	a2 2f       	mov	r26, r18
    1b46:	23 2f       	mov	r18, r19
    1b48:	34 2f       	mov	r19, r20
    1b4a:	44 27       	eor	r20, r20
    1b4c:	58 5f       	subi	r21, 0xF8	; 248
    1b4e:	f3 cf       	rjmp	.-26     	; 0x1b36 <__addsf3x+0x38>
    1b50:	46 95       	lsr	r20
    1b52:	37 95       	ror	r19
    1b54:	27 95       	ror	r18
    1b56:	a7 95       	ror	r26
    1b58:	f0 40       	sbci	r31, 0x00	; 0
    1b5a:	53 95       	inc	r21
    1b5c:	c9 f7       	brne	.-14     	; 0x1b50 <__addsf3x+0x52>
    1b5e:	7e f4       	brtc	.+30     	; 0x1b7e <__addsf3x+0x80>
    1b60:	1f 16       	cp	r1, r31
    1b62:	ba 0b       	sbc	r27, r26
    1b64:	62 0b       	sbc	r22, r18
    1b66:	73 0b       	sbc	r23, r19
    1b68:	84 0b       	sbc	r24, r20
    1b6a:	ba f0       	brmi	.+46     	; 0x1b9a <__addsf3x+0x9c>
    1b6c:	91 50       	subi	r25, 0x01	; 1
    1b6e:	a1 f0       	breq	.+40     	; 0x1b98 <__addsf3x+0x9a>
    1b70:	ff 0f       	add	r31, r31
    1b72:	bb 1f       	adc	r27, r27
    1b74:	66 1f       	adc	r22, r22
    1b76:	77 1f       	adc	r23, r23
    1b78:	88 1f       	adc	r24, r24
    1b7a:	c2 f7       	brpl	.-16     	; 0x1b6c <__addsf3x+0x6e>
    1b7c:	0e c0       	rjmp	.+28     	; 0x1b9a <__addsf3x+0x9c>
    1b7e:	ba 0f       	add	r27, r26
    1b80:	62 1f       	adc	r22, r18
    1b82:	73 1f       	adc	r23, r19
    1b84:	84 1f       	adc	r24, r20
    1b86:	48 f4       	brcc	.+18     	; 0x1b9a <__addsf3x+0x9c>
    1b88:	87 95       	ror	r24
    1b8a:	77 95       	ror	r23
    1b8c:	67 95       	ror	r22
    1b8e:	b7 95       	ror	r27
    1b90:	f7 95       	ror	r31
    1b92:	9e 3f       	cpi	r25, 0xFE	; 254
    1b94:	08 f0       	brcs	.+2      	; 0x1b98 <__addsf3x+0x9a>
    1b96:	b0 cf       	rjmp	.-160    	; 0x1af8 <__addsf3+0x28>
    1b98:	93 95       	inc	r25
    1b9a:	88 0f       	add	r24, r24
    1b9c:	08 f0       	brcs	.+2      	; 0x1ba0 <__addsf3x+0xa2>
    1b9e:	99 27       	eor	r25, r25
    1ba0:	ee 0f       	add	r30, r30
    1ba2:	97 95       	ror	r25
    1ba4:	87 95       	ror	r24
    1ba6:	08 95       	ret
    1ba8:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <__fp_pscA>
    1bac:	60 f0       	brcs	.+24     	; 0x1bc6 <__addsf3x+0xc8>
    1bae:	80 e8       	ldi	r24, 0x80	; 128
    1bb0:	91 e0       	ldi	r25, 0x01	; 1
    1bb2:	09 f4       	brne	.+2      	; 0x1bb6 <__addsf3x+0xb8>
    1bb4:	9e ef       	ldi	r25, 0xFE	; 254
    1bb6:	0e 94 90 0f 	call	0x1f20	; 0x1f20 <__fp_pscB>
    1bba:	28 f0       	brcs	.+10     	; 0x1bc6 <__addsf3x+0xc8>
    1bbc:	40 e8       	ldi	r20, 0x80	; 128
    1bbe:	51 e0       	ldi	r21, 0x01	; 1
    1bc0:	71 f4       	brne	.+28     	; 0x1bde <atan2+0x10>
    1bc2:	5e ef       	ldi	r21, 0xFE	; 254
    1bc4:	0c c0       	rjmp	.+24     	; 0x1bde <atan2+0x10>
    1bc6:	0c 94 5f 0f 	jmp	0x1ebe	; 0x1ebe <__fp_nan>
    1bca:	0c 94 09 10 	jmp	0x2012	; 0x2012 <__fp_zero>

00001bce <atan2>:
    1bce:	e9 2f       	mov	r30, r25
    1bd0:	e0 78       	andi	r30, 0x80	; 128
    1bd2:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <__fp_split3>
    1bd6:	40 f3       	brcs	.-48     	; 0x1ba8 <__addsf3x+0xaa>
    1bd8:	09 2e       	mov	r0, r25
    1bda:	05 2a       	or	r0, r21
    1bdc:	b1 f3       	breq	.-20     	; 0x1bca <__addsf3x+0xcc>
    1bde:	26 17       	cp	r18, r22
    1be0:	37 07       	cpc	r19, r23
    1be2:	48 07       	cpc	r20, r24
    1be4:	59 07       	cpc	r21, r25
    1be6:	38 f0       	brcs	.+14     	; 0x1bf6 <atan2+0x28>
    1be8:	0e 2e       	mov	r0, r30
    1bea:	07 f8       	bld	r0, 7
    1bec:	e0 25       	eor	r30, r0
    1bee:	69 f0       	breq	.+26     	; 0x1c0a <atan2+0x3c>
    1bf0:	e0 25       	eor	r30, r0
    1bf2:	e0 64       	ori	r30, 0x40	; 64
    1bf4:	0a c0       	rjmp	.+20     	; 0x1c0a <atan2+0x3c>
    1bf6:	ef 63       	ori	r30, 0x3F	; 63
    1bf8:	07 f8       	bld	r0, 7
    1bfa:	00 94       	com	r0
    1bfc:	07 fa       	bst	r0, 7
    1bfe:	db 01       	movw	r26, r22
    1c00:	b9 01       	movw	r22, r18
    1c02:	9d 01       	movw	r18, r26
    1c04:	dc 01       	movw	r26, r24
    1c06:	ca 01       	movw	r24, r20
    1c08:	ad 01       	movw	r20, r26
    1c0a:	ef 93       	push	r30
    1c0c:	0e 94 67 0e 	call	0x1cce	; 0x1cce <__divsf3_pse>
    1c10:	0e 94 c2 0f 	call	0x1f84	; 0x1f84 <__fp_round>
    1c14:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <atan>
    1c18:	5f 91       	pop	r21
    1c1a:	55 23       	and	r21, r21
    1c1c:	39 f0       	breq	.+14     	; 0x1c2c <atan2+0x5e>
    1c1e:	2b ed       	ldi	r18, 0xDB	; 219
    1c20:	3f e0       	ldi	r19, 0x0F	; 15
    1c22:	49 e4       	ldi	r20, 0x49	; 73
    1c24:	50 fd       	sbrc	r21, 0
    1c26:	49 ec       	ldi	r20, 0xC9	; 201
    1c28:	0c 94 68 0d 	jmp	0x1ad0	; 0x1ad0 <__addsf3>
    1c2c:	08 95       	ret

00001c2e <atan>:
    1c2e:	df 93       	push	r29
    1c30:	dd 27       	eor	r29, r29
    1c32:	b9 2f       	mov	r27, r25
    1c34:	bf 77       	andi	r27, 0x7F	; 127
    1c36:	40 e8       	ldi	r20, 0x80	; 128
    1c38:	5f e3       	ldi	r21, 0x3F	; 63
    1c3a:	16 16       	cp	r1, r22
    1c3c:	17 06       	cpc	r1, r23
    1c3e:	48 07       	cpc	r20, r24
    1c40:	5b 07       	cpc	r21, r27
    1c42:	18 f4       	brcc	.+6      	; 0x1c4a <atan+0x1c>
    1c44:	d9 2f       	mov	r29, r25
    1c46:	0e 94 15 10 	call	0x202a	; 0x202a <inverse>
    1c4a:	9f 93       	push	r25
    1c4c:	8f 93       	push	r24
    1c4e:	7f 93       	push	r23
    1c50:	6f 93       	push	r22
    1c52:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <square>
    1c56:	ec ea       	ldi	r30, 0xAC	; 172
    1c58:	f0 e0       	ldi	r31, 0x00	; 0
    1c5a:	0e 94 62 0f 	call	0x1ec4	; 0x1ec4 <__fp_powser>
    1c5e:	0e 94 c2 0f 	call	0x1f84	; 0x1f84 <__fp_round>
    1c62:	2f 91       	pop	r18
    1c64:	3f 91       	pop	r19
    1c66:	4f 91       	pop	r20
    1c68:	5f 91       	pop	r21
    1c6a:	0e 94 30 10 	call	0x2060	; 0x2060 <__mulsf3x>
    1c6e:	dd 23       	and	r29, r29
    1c70:	51 f0       	breq	.+20     	; 0x1c86 <atan+0x58>
    1c72:	90 58       	subi	r25, 0x80	; 128
    1c74:	a2 ea       	ldi	r26, 0xA2	; 162
    1c76:	2a ed       	ldi	r18, 0xDA	; 218
    1c78:	3f e0       	ldi	r19, 0x0F	; 15
    1c7a:	49 ec       	ldi	r20, 0xC9	; 201
    1c7c:	5f e3       	ldi	r21, 0x3F	; 63
    1c7e:	d0 78       	andi	r29, 0x80	; 128
    1c80:	5d 27       	eor	r21, r29
    1c82:	0e 94 7f 0d 	call	0x1afe	; 0x1afe <__addsf3x>
    1c86:	df 91       	pop	r29
    1c88:	0c 94 c2 0f 	jmp	0x1f84	; 0x1f84 <__fp_round>

00001c8c <__cmpsf2>:
    1c8c:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <__fp_cmp>
    1c90:	08 f4       	brcc	.+2      	; 0x1c94 <__cmpsf2+0x8>
    1c92:	81 e0       	ldi	r24, 0x01	; 1
    1c94:	08 95       	ret

00001c96 <cos>:
    1c96:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <__fp_rempio2>
    1c9a:	e3 95       	inc	r30
    1c9c:	0c 94 d3 0f 	jmp	0x1fa6	; 0x1fa6 <__fp_sinus>

00001ca0 <__divsf3>:
    1ca0:	0e 94 64 0e 	call	0x1cc8	; 0x1cc8 <__divsf3x>
    1ca4:	0c 94 c2 0f 	jmp	0x1f84	; 0x1f84 <__fp_round>
    1ca8:	0e 94 90 0f 	call	0x1f20	; 0x1f20 <__fp_pscB>
    1cac:	58 f0       	brcs	.+22     	; 0x1cc4 <__divsf3+0x24>
    1cae:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <__fp_pscA>
    1cb2:	40 f0       	brcs	.+16     	; 0x1cc4 <__divsf3+0x24>
    1cb4:	29 f4       	brne	.+10     	; 0x1cc0 <__divsf3+0x20>
    1cb6:	5f 3f       	cpi	r21, 0xFF	; 255
    1cb8:	29 f0       	breq	.+10     	; 0x1cc4 <__divsf3+0x24>
    1cba:	0c 94 59 0f 	jmp	0x1eb2	; 0x1eb2 <__fp_inf>
    1cbe:	51 11       	cpse	r21, r1
    1cc0:	0c 94 0a 10 	jmp	0x2014	; 0x2014 <__fp_szero>
    1cc4:	0c 94 5f 0f 	jmp	0x1ebe	; 0x1ebe <__fp_nan>

00001cc8 <__divsf3x>:
    1cc8:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <__fp_split3>
    1ccc:	68 f3       	brcs	.-38     	; 0x1ca8 <__divsf3+0x8>

00001cce <__divsf3_pse>:
    1cce:	99 23       	and	r25, r25
    1cd0:	b1 f3       	breq	.-20     	; 0x1cbe <__divsf3+0x1e>
    1cd2:	55 23       	and	r21, r21
    1cd4:	91 f3       	breq	.-28     	; 0x1cba <__divsf3+0x1a>
    1cd6:	95 1b       	sub	r25, r21
    1cd8:	55 0b       	sbc	r21, r21
    1cda:	bb 27       	eor	r27, r27
    1cdc:	aa 27       	eor	r26, r26
    1cde:	62 17       	cp	r22, r18
    1ce0:	73 07       	cpc	r23, r19
    1ce2:	84 07       	cpc	r24, r20
    1ce4:	38 f0       	brcs	.+14     	; 0x1cf4 <__divsf3_pse+0x26>
    1ce6:	9f 5f       	subi	r25, 0xFF	; 255
    1ce8:	5f 4f       	sbci	r21, 0xFF	; 255
    1cea:	22 0f       	add	r18, r18
    1cec:	33 1f       	adc	r19, r19
    1cee:	44 1f       	adc	r20, r20
    1cf0:	aa 1f       	adc	r26, r26
    1cf2:	a9 f3       	breq	.-22     	; 0x1cde <__divsf3_pse+0x10>
    1cf4:	35 d0       	rcall	.+106    	; 0x1d60 <__divsf3_pse+0x92>
    1cf6:	0e 2e       	mov	r0, r30
    1cf8:	3a f0       	brmi	.+14     	; 0x1d08 <__divsf3_pse+0x3a>
    1cfa:	e0 e8       	ldi	r30, 0x80	; 128
    1cfc:	32 d0       	rcall	.+100    	; 0x1d62 <__divsf3_pse+0x94>
    1cfe:	91 50       	subi	r25, 0x01	; 1
    1d00:	50 40       	sbci	r21, 0x00	; 0
    1d02:	e6 95       	lsr	r30
    1d04:	00 1c       	adc	r0, r0
    1d06:	ca f7       	brpl	.-14     	; 0x1cfa <__divsf3_pse+0x2c>
    1d08:	2b d0       	rcall	.+86     	; 0x1d60 <__divsf3_pse+0x92>
    1d0a:	fe 2f       	mov	r31, r30
    1d0c:	29 d0       	rcall	.+82     	; 0x1d60 <__divsf3_pse+0x92>
    1d0e:	66 0f       	add	r22, r22
    1d10:	77 1f       	adc	r23, r23
    1d12:	88 1f       	adc	r24, r24
    1d14:	bb 1f       	adc	r27, r27
    1d16:	26 17       	cp	r18, r22
    1d18:	37 07       	cpc	r19, r23
    1d1a:	48 07       	cpc	r20, r24
    1d1c:	ab 07       	cpc	r26, r27
    1d1e:	b0 e8       	ldi	r27, 0x80	; 128
    1d20:	09 f0       	breq	.+2      	; 0x1d24 <__divsf3_pse+0x56>
    1d22:	bb 0b       	sbc	r27, r27
    1d24:	80 2d       	mov	r24, r0
    1d26:	bf 01       	movw	r22, r30
    1d28:	ff 27       	eor	r31, r31
    1d2a:	93 58       	subi	r25, 0x83	; 131
    1d2c:	5f 4f       	sbci	r21, 0xFF	; 255
    1d2e:	3a f0       	brmi	.+14     	; 0x1d3e <__divsf3_pse+0x70>
    1d30:	9e 3f       	cpi	r25, 0xFE	; 254
    1d32:	51 05       	cpc	r21, r1
    1d34:	78 f0       	brcs	.+30     	; 0x1d54 <__divsf3_pse+0x86>
    1d36:	0c 94 59 0f 	jmp	0x1eb2	; 0x1eb2 <__fp_inf>
    1d3a:	0c 94 0a 10 	jmp	0x2014	; 0x2014 <__fp_szero>
    1d3e:	5f 3f       	cpi	r21, 0xFF	; 255
    1d40:	e4 f3       	brlt	.-8      	; 0x1d3a <__divsf3_pse+0x6c>
    1d42:	98 3e       	cpi	r25, 0xE8	; 232
    1d44:	d4 f3       	brlt	.-12     	; 0x1d3a <__divsf3_pse+0x6c>
    1d46:	86 95       	lsr	r24
    1d48:	77 95       	ror	r23
    1d4a:	67 95       	ror	r22
    1d4c:	b7 95       	ror	r27
    1d4e:	f7 95       	ror	r31
    1d50:	9f 5f       	subi	r25, 0xFF	; 255
    1d52:	c9 f7       	brne	.-14     	; 0x1d46 <__divsf3_pse+0x78>
    1d54:	88 0f       	add	r24, r24
    1d56:	91 1d       	adc	r25, r1
    1d58:	96 95       	lsr	r25
    1d5a:	87 95       	ror	r24
    1d5c:	97 f9       	bld	r25, 7
    1d5e:	08 95       	ret
    1d60:	e1 e0       	ldi	r30, 0x01	; 1
    1d62:	66 0f       	add	r22, r22
    1d64:	77 1f       	adc	r23, r23
    1d66:	88 1f       	adc	r24, r24
    1d68:	bb 1f       	adc	r27, r27
    1d6a:	62 17       	cp	r22, r18
    1d6c:	73 07       	cpc	r23, r19
    1d6e:	84 07       	cpc	r24, r20
    1d70:	ba 07       	cpc	r27, r26
    1d72:	20 f0       	brcs	.+8      	; 0x1d7c <__divsf3_pse+0xae>
    1d74:	62 1b       	sub	r22, r18
    1d76:	73 0b       	sbc	r23, r19
    1d78:	84 0b       	sbc	r24, r20
    1d7a:	ba 0b       	sbc	r27, r26
    1d7c:	ee 1f       	adc	r30, r30
    1d7e:	88 f7       	brcc	.-30     	; 0x1d62 <__divsf3_pse+0x94>
    1d80:	e0 95       	com	r30
    1d82:	08 95       	ret

00001d84 <__fixsfsi>:
    1d84:	0e 94 c9 0e 	call	0x1d92	; 0x1d92 <__fixunssfsi>
    1d88:	68 94       	set
    1d8a:	b1 11       	cpse	r27, r1
    1d8c:	0c 94 0a 10 	jmp	0x2014	; 0x2014 <__fp_szero>
    1d90:	08 95       	ret

00001d92 <__fixunssfsi>:
    1d92:	0e 94 ef 0f 	call	0x1fde	; 0x1fde <__fp_splitA>
    1d96:	88 f0       	brcs	.+34     	; 0x1dba <__fixunssfsi+0x28>
    1d98:	9f 57       	subi	r25, 0x7F	; 127
    1d9a:	98 f0       	brcs	.+38     	; 0x1dc2 <__fixunssfsi+0x30>
    1d9c:	b9 2f       	mov	r27, r25
    1d9e:	99 27       	eor	r25, r25
    1da0:	b7 51       	subi	r27, 0x17	; 23
    1da2:	b0 f0       	brcs	.+44     	; 0x1dd0 <__fixunssfsi+0x3e>
    1da4:	e1 f0       	breq	.+56     	; 0x1dde <__fixunssfsi+0x4c>
    1da6:	66 0f       	add	r22, r22
    1da8:	77 1f       	adc	r23, r23
    1daa:	88 1f       	adc	r24, r24
    1dac:	99 1f       	adc	r25, r25
    1dae:	1a f0       	brmi	.+6      	; 0x1db6 <__fixunssfsi+0x24>
    1db0:	ba 95       	dec	r27
    1db2:	c9 f7       	brne	.-14     	; 0x1da6 <__fixunssfsi+0x14>
    1db4:	14 c0       	rjmp	.+40     	; 0x1dde <__fixunssfsi+0x4c>
    1db6:	b1 30       	cpi	r27, 0x01	; 1
    1db8:	91 f0       	breq	.+36     	; 0x1dde <__fixunssfsi+0x4c>
    1dba:	0e 94 09 10 	call	0x2012	; 0x2012 <__fp_zero>
    1dbe:	b1 e0       	ldi	r27, 0x01	; 1
    1dc0:	08 95       	ret
    1dc2:	0c 94 09 10 	jmp	0x2012	; 0x2012 <__fp_zero>
    1dc6:	67 2f       	mov	r22, r23
    1dc8:	78 2f       	mov	r23, r24
    1dca:	88 27       	eor	r24, r24
    1dcc:	b8 5f       	subi	r27, 0xF8	; 248
    1dce:	39 f0       	breq	.+14     	; 0x1dde <__fixunssfsi+0x4c>
    1dd0:	b9 3f       	cpi	r27, 0xF9	; 249
    1dd2:	cc f3       	brlt	.-14     	; 0x1dc6 <__fixunssfsi+0x34>
    1dd4:	86 95       	lsr	r24
    1dd6:	77 95       	ror	r23
    1dd8:	67 95       	ror	r22
    1dda:	b3 95       	inc	r27
    1ddc:	d9 f7       	brne	.-10     	; 0x1dd4 <__fixunssfsi+0x42>
    1dde:	3e f4       	brtc	.+14     	; 0x1dee <__fixunssfsi+0x5c>
    1de0:	90 95       	com	r25
    1de2:	80 95       	com	r24
    1de4:	70 95       	com	r23
    1de6:	61 95       	neg	r22
    1de8:	7f 4f       	sbci	r23, 0xFF	; 255
    1dea:	8f 4f       	sbci	r24, 0xFF	; 255
    1dec:	9f 4f       	sbci	r25, 0xFF	; 255
    1dee:	08 95       	ret

00001df0 <__floatunsisf>:
    1df0:	e8 94       	clt
    1df2:	09 c0       	rjmp	.+18     	; 0x1e06 <__floatsisf+0x12>

00001df4 <__floatsisf>:
    1df4:	97 fb       	bst	r25, 7
    1df6:	3e f4       	brtc	.+14     	; 0x1e06 <__floatsisf+0x12>
    1df8:	90 95       	com	r25
    1dfa:	80 95       	com	r24
    1dfc:	70 95       	com	r23
    1dfe:	61 95       	neg	r22
    1e00:	7f 4f       	sbci	r23, 0xFF	; 255
    1e02:	8f 4f       	sbci	r24, 0xFF	; 255
    1e04:	9f 4f       	sbci	r25, 0xFF	; 255
    1e06:	99 23       	and	r25, r25
    1e08:	a9 f0       	breq	.+42     	; 0x1e34 <__floatsisf+0x40>
    1e0a:	f9 2f       	mov	r31, r25
    1e0c:	96 e9       	ldi	r25, 0x96	; 150
    1e0e:	bb 27       	eor	r27, r27
    1e10:	93 95       	inc	r25
    1e12:	f6 95       	lsr	r31
    1e14:	87 95       	ror	r24
    1e16:	77 95       	ror	r23
    1e18:	67 95       	ror	r22
    1e1a:	b7 95       	ror	r27
    1e1c:	f1 11       	cpse	r31, r1
    1e1e:	f8 cf       	rjmp	.-16     	; 0x1e10 <__floatsisf+0x1c>
    1e20:	fa f4       	brpl	.+62     	; 0x1e60 <__floatsisf+0x6c>
    1e22:	bb 0f       	add	r27, r27
    1e24:	11 f4       	brne	.+4      	; 0x1e2a <__floatsisf+0x36>
    1e26:	60 ff       	sbrs	r22, 0
    1e28:	1b c0       	rjmp	.+54     	; 0x1e60 <__floatsisf+0x6c>
    1e2a:	6f 5f       	subi	r22, 0xFF	; 255
    1e2c:	7f 4f       	sbci	r23, 0xFF	; 255
    1e2e:	8f 4f       	sbci	r24, 0xFF	; 255
    1e30:	9f 4f       	sbci	r25, 0xFF	; 255
    1e32:	16 c0       	rjmp	.+44     	; 0x1e60 <__floatsisf+0x6c>
    1e34:	88 23       	and	r24, r24
    1e36:	11 f0       	breq	.+4      	; 0x1e3c <__floatsisf+0x48>
    1e38:	96 e9       	ldi	r25, 0x96	; 150
    1e3a:	11 c0       	rjmp	.+34     	; 0x1e5e <__floatsisf+0x6a>
    1e3c:	77 23       	and	r23, r23
    1e3e:	21 f0       	breq	.+8      	; 0x1e48 <__floatsisf+0x54>
    1e40:	9e e8       	ldi	r25, 0x8E	; 142
    1e42:	87 2f       	mov	r24, r23
    1e44:	76 2f       	mov	r23, r22
    1e46:	05 c0       	rjmp	.+10     	; 0x1e52 <__floatsisf+0x5e>
    1e48:	66 23       	and	r22, r22
    1e4a:	71 f0       	breq	.+28     	; 0x1e68 <__floatsisf+0x74>
    1e4c:	96 e8       	ldi	r25, 0x86	; 134
    1e4e:	86 2f       	mov	r24, r22
    1e50:	70 e0       	ldi	r23, 0x00	; 0
    1e52:	60 e0       	ldi	r22, 0x00	; 0
    1e54:	2a f0       	brmi	.+10     	; 0x1e60 <__floatsisf+0x6c>
    1e56:	9a 95       	dec	r25
    1e58:	66 0f       	add	r22, r22
    1e5a:	77 1f       	adc	r23, r23
    1e5c:	88 1f       	adc	r24, r24
    1e5e:	da f7       	brpl	.-10     	; 0x1e56 <__floatsisf+0x62>
    1e60:	88 0f       	add	r24, r24
    1e62:	96 95       	lsr	r25
    1e64:	87 95       	ror	r24
    1e66:	97 f9       	bld	r25, 7
    1e68:	08 95       	ret

00001e6a <__fp_cmp>:
    1e6a:	99 0f       	add	r25, r25
    1e6c:	00 08       	sbc	r0, r0
    1e6e:	55 0f       	add	r21, r21
    1e70:	aa 0b       	sbc	r26, r26
    1e72:	e0 e8       	ldi	r30, 0x80	; 128
    1e74:	fe ef       	ldi	r31, 0xFE	; 254
    1e76:	16 16       	cp	r1, r22
    1e78:	17 06       	cpc	r1, r23
    1e7a:	e8 07       	cpc	r30, r24
    1e7c:	f9 07       	cpc	r31, r25
    1e7e:	c0 f0       	brcs	.+48     	; 0x1eb0 <__fp_cmp+0x46>
    1e80:	12 16       	cp	r1, r18
    1e82:	13 06       	cpc	r1, r19
    1e84:	e4 07       	cpc	r30, r20
    1e86:	f5 07       	cpc	r31, r21
    1e88:	98 f0       	brcs	.+38     	; 0x1eb0 <__fp_cmp+0x46>
    1e8a:	62 1b       	sub	r22, r18
    1e8c:	73 0b       	sbc	r23, r19
    1e8e:	84 0b       	sbc	r24, r20
    1e90:	95 0b       	sbc	r25, r21
    1e92:	39 f4       	brne	.+14     	; 0x1ea2 <__fp_cmp+0x38>
    1e94:	0a 26       	eor	r0, r26
    1e96:	61 f0       	breq	.+24     	; 0x1eb0 <__fp_cmp+0x46>
    1e98:	23 2b       	or	r18, r19
    1e9a:	24 2b       	or	r18, r20
    1e9c:	25 2b       	or	r18, r21
    1e9e:	21 f4       	brne	.+8      	; 0x1ea8 <__fp_cmp+0x3e>
    1ea0:	08 95       	ret
    1ea2:	0a 26       	eor	r0, r26
    1ea4:	09 f4       	brne	.+2      	; 0x1ea8 <__fp_cmp+0x3e>
    1ea6:	a1 40       	sbci	r26, 0x01	; 1
    1ea8:	a6 95       	lsr	r26
    1eaa:	8f ef       	ldi	r24, 0xFF	; 255
    1eac:	81 1d       	adc	r24, r1
    1eae:	81 1d       	adc	r24, r1
    1eb0:	08 95       	ret

00001eb2 <__fp_inf>:
    1eb2:	97 f9       	bld	r25, 7
    1eb4:	9f 67       	ori	r25, 0x7F	; 127
    1eb6:	80 e8       	ldi	r24, 0x80	; 128
    1eb8:	70 e0       	ldi	r23, 0x00	; 0
    1eba:	60 e0       	ldi	r22, 0x00	; 0
    1ebc:	08 95       	ret

00001ebe <__fp_nan>:
    1ebe:	9f ef       	ldi	r25, 0xFF	; 255
    1ec0:	80 ec       	ldi	r24, 0xC0	; 192
    1ec2:	08 95       	ret

00001ec4 <__fp_powser>:
    1ec4:	df 93       	push	r29
    1ec6:	cf 93       	push	r28
    1ec8:	1f 93       	push	r17
    1eca:	0f 93       	push	r16
    1ecc:	ff 92       	push	r15
    1ece:	ef 92       	push	r14
    1ed0:	df 92       	push	r13
    1ed2:	7b 01       	movw	r14, r22
    1ed4:	8c 01       	movw	r16, r24
    1ed6:	68 94       	set
    1ed8:	06 c0       	rjmp	.+12     	; 0x1ee6 <__fp_powser+0x22>
    1eda:	da 2e       	mov	r13, r26
    1edc:	ef 01       	movw	r28, r30
    1ede:	0e 94 30 10 	call	0x2060	; 0x2060 <__mulsf3x>
    1ee2:	fe 01       	movw	r30, r28
    1ee4:	e8 94       	clt
    1ee6:	a5 91       	lpm	r26, Z+
    1ee8:	25 91       	lpm	r18, Z+
    1eea:	35 91       	lpm	r19, Z+
    1eec:	45 91       	lpm	r20, Z+
    1eee:	55 91       	lpm	r21, Z+
    1ef0:	a6 f3       	brts	.-24     	; 0x1eda <__fp_powser+0x16>
    1ef2:	ef 01       	movw	r28, r30
    1ef4:	0e 94 7f 0d 	call	0x1afe	; 0x1afe <__addsf3x>
    1ef8:	fe 01       	movw	r30, r28
    1efa:	97 01       	movw	r18, r14
    1efc:	a8 01       	movw	r20, r16
    1efe:	da 94       	dec	r13
    1f00:	69 f7       	brne	.-38     	; 0x1edc <__fp_powser+0x18>
    1f02:	df 90       	pop	r13
    1f04:	ef 90       	pop	r14
    1f06:	ff 90       	pop	r15
    1f08:	0f 91       	pop	r16
    1f0a:	1f 91       	pop	r17
    1f0c:	cf 91       	pop	r28
    1f0e:	df 91       	pop	r29
    1f10:	08 95       	ret

00001f12 <__fp_pscA>:
    1f12:	00 24       	eor	r0, r0
    1f14:	0a 94       	dec	r0
    1f16:	16 16       	cp	r1, r22
    1f18:	17 06       	cpc	r1, r23
    1f1a:	18 06       	cpc	r1, r24
    1f1c:	09 06       	cpc	r0, r25
    1f1e:	08 95       	ret

00001f20 <__fp_pscB>:
    1f20:	00 24       	eor	r0, r0
    1f22:	0a 94       	dec	r0
    1f24:	12 16       	cp	r1, r18
    1f26:	13 06       	cpc	r1, r19
    1f28:	14 06       	cpc	r1, r20
    1f2a:	05 06       	cpc	r0, r21
    1f2c:	08 95       	ret
    1f2e:	0c 94 5f 0f 	jmp	0x1ebe	; 0x1ebe <__fp_nan>

00001f32 <__fp_rempio2>:
    1f32:	0e 94 ef 0f 	call	0x1fde	; 0x1fde <__fp_splitA>
    1f36:	d8 f3       	brcs	.-10     	; 0x1f2e <__fp_pscB+0xe>
    1f38:	e8 94       	clt
    1f3a:	e0 e0       	ldi	r30, 0x00	; 0
    1f3c:	bb 27       	eor	r27, r27
    1f3e:	9f 57       	subi	r25, 0x7F	; 127
    1f40:	f0 f0       	brcs	.+60     	; 0x1f7e <__fp_rempio2+0x4c>
    1f42:	2a ed       	ldi	r18, 0xDA	; 218
    1f44:	3f e0       	ldi	r19, 0x0F	; 15
    1f46:	49 ec       	ldi	r20, 0xC9	; 201
    1f48:	06 c0       	rjmp	.+12     	; 0x1f56 <__fp_rempio2+0x24>
    1f4a:	ee 0f       	add	r30, r30
    1f4c:	bb 0f       	add	r27, r27
    1f4e:	66 1f       	adc	r22, r22
    1f50:	77 1f       	adc	r23, r23
    1f52:	88 1f       	adc	r24, r24
    1f54:	28 f0       	brcs	.+10     	; 0x1f60 <__fp_rempio2+0x2e>
    1f56:	b2 3a       	cpi	r27, 0xA2	; 162
    1f58:	62 07       	cpc	r22, r18
    1f5a:	73 07       	cpc	r23, r19
    1f5c:	84 07       	cpc	r24, r20
    1f5e:	28 f0       	brcs	.+10     	; 0x1f6a <__fp_rempio2+0x38>
    1f60:	b2 5a       	subi	r27, 0xA2	; 162
    1f62:	62 0b       	sbc	r22, r18
    1f64:	73 0b       	sbc	r23, r19
    1f66:	84 0b       	sbc	r24, r20
    1f68:	e3 95       	inc	r30
    1f6a:	9a 95       	dec	r25
    1f6c:	72 f7       	brpl	.-36     	; 0x1f4a <__fp_rempio2+0x18>
    1f6e:	80 38       	cpi	r24, 0x80	; 128
    1f70:	30 f4       	brcc	.+12     	; 0x1f7e <__fp_rempio2+0x4c>
    1f72:	9a 95       	dec	r25
    1f74:	bb 0f       	add	r27, r27
    1f76:	66 1f       	adc	r22, r22
    1f78:	77 1f       	adc	r23, r23
    1f7a:	88 1f       	adc	r24, r24
    1f7c:	d2 f7       	brpl	.-12     	; 0x1f72 <__fp_rempio2+0x40>
    1f7e:	90 48       	sbci	r25, 0x80	; 128
    1f80:	0c 94 22 11 	jmp	0x2244	; 0x2244 <__fp_mpack_finite>

00001f84 <__fp_round>:
    1f84:	09 2e       	mov	r0, r25
    1f86:	03 94       	inc	r0
    1f88:	00 0c       	add	r0, r0
    1f8a:	11 f4       	brne	.+4      	; 0x1f90 <__fp_round+0xc>
    1f8c:	88 23       	and	r24, r24
    1f8e:	52 f0       	brmi	.+20     	; 0x1fa4 <__fp_round+0x20>
    1f90:	bb 0f       	add	r27, r27
    1f92:	40 f4       	brcc	.+16     	; 0x1fa4 <__fp_round+0x20>
    1f94:	bf 2b       	or	r27, r31
    1f96:	11 f4       	brne	.+4      	; 0x1f9c <__fp_round+0x18>
    1f98:	60 ff       	sbrs	r22, 0
    1f9a:	04 c0       	rjmp	.+8      	; 0x1fa4 <__fp_round+0x20>
    1f9c:	6f 5f       	subi	r22, 0xFF	; 255
    1f9e:	7f 4f       	sbci	r23, 0xFF	; 255
    1fa0:	8f 4f       	sbci	r24, 0xFF	; 255
    1fa2:	9f 4f       	sbci	r25, 0xFF	; 255
    1fa4:	08 95       	ret

00001fa6 <__fp_sinus>:
    1fa6:	ef 93       	push	r30
    1fa8:	e0 ff       	sbrs	r30, 0
    1faa:	07 c0       	rjmp	.+14     	; 0x1fba <__fp_sinus+0x14>
    1fac:	a2 ea       	ldi	r26, 0xA2	; 162
    1fae:	2a ed       	ldi	r18, 0xDA	; 218
    1fb0:	3f e0       	ldi	r19, 0x0F	; 15
    1fb2:	49 ec       	ldi	r20, 0xC9	; 201
    1fb4:	5f eb       	ldi	r21, 0xBF	; 191
    1fb6:	0e 94 7f 0d 	call	0x1afe	; 0x1afe <__addsf3x>
    1fba:	0e 94 c2 0f 	call	0x1f84	; 0x1f84 <__fp_round>
    1fbe:	0f 90       	pop	r0
    1fc0:	03 94       	inc	r0
    1fc2:	01 fc       	sbrc	r0, 1
    1fc4:	90 58       	subi	r25, 0x80	; 128
    1fc6:	e9 ed       	ldi	r30, 0xD9	; 217
    1fc8:	f0 e0       	ldi	r31, 0x00	; 0
    1fca:	0c 94 2e 11 	jmp	0x225c	; 0x225c <__fp_powsodd>

00001fce <__fp_split3>:
    1fce:	57 fd       	sbrc	r21, 7
    1fd0:	90 58       	subi	r25, 0x80	; 128
    1fd2:	44 0f       	add	r20, r20
    1fd4:	55 1f       	adc	r21, r21
    1fd6:	59 f0       	breq	.+22     	; 0x1fee <__fp_splitA+0x10>
    1fd8:	5f 3f       	cpi	r21, 0xFF	; 255
    1fda:	71 f0       	breq	.+28     	; 0x1ff8 <__fp_splitA+0x1a>
    1fdc:	47 95       	ror	r20

00001fde <__fp_splitA>:
    1fde:	88 0f       	add	r24, r24
    1fe0:	97 fb       	bst	r25, 7
    1fe2:	99 1f       	adc	r25, r25
    1fe4:	61 f0       	breq	.+24     	; 0x1ffe <__fp_splitA+0x20>
    1fe6:	9f 3f       	cpi	r25, 0xFF	; 255
    1fe8:	79 f0       	breq	.+30     	; 0x2008 <__fp_splitA+0x2a>
    1fea:	87 95       	ror	r24
    1fec:	08 95       	ret
    1fee:	12 16       	cp	r1, r18
    1ff0:	13 06       	cpc	r1, r19
    1ff2:	14 06       	cpc	r1, r20
    1ff4:	55 1f       	adc	r21, r21
    1ff6:	f2 cf       	rjmp	.-28     	; 0x1fdc <__fp_split3+0xe>
    1ff8:	46 95       	lsr	r20
    1ffa:	f1 df       	rcall	.-30     	; 0x1fde <__fp_splitA>
    1ffc:	08 c0       	rjmp	.+16     	; 0x200e <__fp_splitA+0x30>
    1ffe:	16 16       	cp	r1, r22
    2000:	17 06       	cpc	r1, r23
    2002:	18 06       	cpc	r1, r24
    2004:	99 1f       	adc	r25, r25
    2006:	f1 cf       	rjmp	.-30     	; 0x1fea <__fp_splitA+0xc>
    2008:	86 95       	lsr	r24
    200a:	71 05       	cpc	r23, r1
    200c:	61 05       	cpc	r22, r1
    200e:	08 94       	sec
    2010:	08 95       	ret

00002012 <__fp_zero>:
    2012:	e8 94       	clt

00002014 <__fp_szero>:
    2014:	bb 27       	eor	r27, r27
    2016:	66 27       	eor	r22, r22
    2018:	77 27       	eor	r23, r23
    201a:	cb 01       	movw	r24, r22
    201c:	97 f9       	bld	r25, 7
    201e:	08 95       	ret

00002020 <__gesf2>:
    2020:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <__fp_cmp>
    2024:	08 f4       	brcc	.+2      	; 0x2028 <__gesf2+0x8>
    2026:	8f ef       	ldi	r24, 0xFF	; 255
    2028:	08 95       	ret

0000202a <inverse>:
    202a:	9b 01       	movw	r18, r22
    202c:	ac 01       	movw	r20, r24
    202e:	60 e0       	ldi	r22, 0x00	; 0
    2030:	70 e0       	ldi	r23, 0x00	; 0
    2032:	80 e8       	ldi	r24, 0x80	; 128
    2034:	9f e3       	ldi	r25, 0x3F	; 63
    2036:	0c 94 50 0e 	jmp	0x1ca0	; 0x1ca0 <__divsf3>

0000203a <__mulsf3>:
    203a:	0e 94 30 10 	call	0x2060	; 0x2060 <__mulsf3x>
    203e:	0c 94 c2 0f 	jmp	0x1f84	; 0x1f84 <__fp_round>
    2042:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <__fp_pscA>
    2046:	38 f0       	brcs	.+14     	; 0x2056 <__mulsf3+0x1c>
    2048:	0e 94 90 0f 	call	0x1f20	; 0x1f20 <__fp_pscB>
    204c:	20 f0       	brcs	.+8      	; 0x2056 <__mulsf3+0x1c>
    204e:	95 23       	and	r25, r21
    2050:	11 f0       	breq	.+4      	; 0x2056 <__mulsf3+0x1c>
    2052:	0c 94 59 0f 	jmp	0x1eb2	; 0x1eb2 <__fp_inf>
    2056:	0c 94 5f 0f 	jmp	0x1ebe	; 0x1ebe <__fp_nan>
    205a:	11 24       	eor	r1, r1
    205c:	0c 94 0a 10 	jmp	0x2014	; 0x2014 <__fp_szero>

00002060 <__mulsf3x>:
    2060:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <__fp_split3>
    2064:	70 f3       	brcs	.-36     	; 0x2042 <__mulsf3+0x8>

00002066 <__mulsf3_pse>:
    2066:	95 9f       	mul	r25, r21
    2068:	c1 f3       	breq	.-16     	; 0x205a <__mulsf3+0x20>
    206a:	95 0f       	add	r25, r21
    206c:	50 e0       	ldi	r21, 0x00	; 0
    206e:	55 1f       	adc	r21, r21
    2070:	62 9f       	mul	r22, r18
    2072:	f0 01       	movw	r30, r0
    2074:	72 9f       	mul	r23, r18
    2076:	bb 27       	eor	r27, r27
    2078:	f0 0d       	add	r31, r0
    207a:	b1 1d       	adc	r27, r1
    207c:	63 9f       	mul	r22, r19
    207e:	aa 27       	eor	r26, r26
    2080:	f0 0d       	add	r31, r0
    2082:	b1 1d       	adc	r27, r1
    2084:	aa 1f       	adc	r26, r26
    2086:	64 9f       	mul	r22, r20
    2088:	66 27       	eor	r22, r22
    208a:	b0 0d       	add	r27, r0
    208c:	a1 1d       	adc	r26, r1
    208e:	66 1f       	adc	r22, r22
    2090:	82 9f       	mul	r24, r18
    2092:	22 27       	eor	r18, r18
    2094:	b0 0d       	add	r27, r0
    2096:	a1 1d       	adc	r26, r1
    2098:	62 1f       	adc	r22, r18
    209a:	73 9f       	mul	r23, r19
    209c:	b0 0d       	add	r27, r0
    209e:	a1 1d       	adc	r26, r1
    20a0:	62 1f       	adc	r22, r18
    20a2:	83 9f       	mul	r24, r19
    20a4:	a0 0d       	add	r26, r0
    20a6:	61 1d       	adc	r22, r1
    20a8:	22 1f       	adc	r18, r18
    20aa:	74 9f       	mul	r23, r20
    20ac:	33 27       	eor	r19, r19
    20ae:	a0 0d       	add	r26, r0
    20b0:	61 1d       	adc	r22, r1
    20b2:	23 1f       	adc	r18, r19
    20b4:	84 9f       	mul	r24, r20
    20b6:	60 0d       	add	r22, r0
    20b8:	21 1d       	adc	r18, r1
    20ba:	82 2f       	mov	r24, r18
    20bc:	76 2f       	mov	r23, r22
    20be:	6a 2f       	mov	r22, r26
    20c0:	11 24       	eor	r1, r1
    20c2:	9f 57       	subi	r25, 0x7F	; 127
    20c4:	50 40       	sbci	r21, 0x00	; 0
    20c6:	9a f0       	brmi	.+38     	; 0x20ee <__mulsf3_pse+0x88>
    20c8:	f1 f0       	breq	.+60     	; 0x2106 <__mulsf3_pse+0xa0>
    20ca:	88 23       	and	r24, r24
    20cc:	4a f0       	brmi	.+18     	; 0x20e0 <__mulsf3_pse+0x7a>
    20ce:	ee 0f       	add	r30, r30
    20d0:	ff 1f       	adc	r31, r31
    20d2:	bb 1f       	adc	r27, r27
    20d4:	66 1f       	adc	r22, r22
    20d6:	77 1f       	adc	r23, r23
    20d8:	88 1f       	adc	r24, r24
    20da:	91 50       	subi	r25, 0x01	; 1
    20dc:	50 40       	sbci	r21, 0x00	; 0
    20de:	a9 f7       	brne	.-22     	; 0x20ca <__mulsf3_pse+0x64>
    20e0:	9e 3f       	cpi	r25, 0xFE	; 254
    20e2:	51 05       	cpc	r21, r1
    20e4:	80 f0       	brcs	.+32     	; 0x2106 <__mulsf3_pse+0xa0>
    20e6:	0c 94 59 0f 	jmp	0x1eb2	; 0x1eb2 <__fp_inf>
    20ea:	0c 94 0a 10 	jmp	0x2014	; 0x2014 <__fp_szero>
    20ee:	5f 3f       	cpi	r21, 0xFF	; 255
    20f0:	e4 f3       	brlt	.-8      	; 0x20ea <__mulsf3_pse+0x84>
    20f2:	98 3e       	cpi	r25, 0xE8	; 232
    20f4:	d4 f3       	brlt	.-12     	; 0x20ea <__mulsf3_pse+0x84>
    20f6:	86 95       	lsr	r24
    20f8:	77 95       	ror	r23
    20fa:	67 95       	ror	r22
    20fc:	b7 95       	ror	r27
    20fe:	f7 95       	ror	r31
    2100:	e7 95       	ror	r30
    2102:	9f 5f       	subi	r25, 0xFF	; 255
    2104:	c1 f7       	brne	.-16     	; 0x20f6 <__mulsf3_pse+0x90>
    2106:	fe 2b       	or	r31, r30
    2108:	88 0f       	add	r24, r24
    210a:	91 1d       	adc	r25, r1
    210c:	96 95       	lsr	r25
    210e:	87 95       	ror	r24
    2110:	97 f9       	bld	r25, 7
    2112:	08 95       	ret

00002114 <pow>:
    2114:	fa 01       	movw	r30, r20
    2116:	ee 0f       	add	r30, r30
    2118:	ff 1f       	adc	r31, r31
    211a:	30 96       	adiw	r30, 0x00	; 0
    211c:	21 05       	cpc	r18, r1
    211e:	31 05       	cpc	r19, r1
    2120:	a1 f1       	breq	.+104    	; 0x218a <pow+0x76>
    2122:	61 15       	cp	r22, r1
    2124:	71 05       	cpc	r23, r1
    2126:	61 f4       	brne	.+24     	; 0x2140 <pow+0x2c>
    2128:	80 38       	cpi	r24, 0x80	; 128
    212a:	bf e3       	ldi	r27, 0x3F	; 63
    212c:	9b 07       	cpc	r25, r27
    212e:	49 f1       	breq	.+82     	; 0x2182 <pow+0x6e>
    2130:	68 94       	set
    2132:	90 38       	cpi	r25, 0x80	; 128
    2134:	81 05       	cpc	r24, r1
    2136:	61 f0       	breq	.+24     	; 0x2150 <pow+0x3c>
    2138:	80 38       	cpi	r24, 0x80	; 128
    213a:	bf ef       	ldi	r27, 0xFF	; 255
    213c:	9b 07       	cpc	r25, r27
    213e:	41 f0       	breq	.+16     	; 0x2150 <pow+0x3c>
    2140:	99 23       	and	r25, r25
    2142:	4a f5       	brpl	.+82     	; 0x2196 <pow+0x82>
    2144:	ff 3f       	cpi	r31, 0xFF	; 255
    2146:	e1 05       	cpc	r30, r1
    2148:	31 05       	cpc	r19, r1
    214a:	21 05       	cpc	r18, r1
    214c:	19 f1       	breq	.+70     	; 0x2194 <pow+0x80>
    214e:	e8 94       	clt
    2150:	08 94       	sec
    2152:	e7 95       	ror	r30
    2154:	d9 01       	movw	r26, r18
    2156:	aa 23       	and	r26, r26
    2158:	29 f4       	brne	.+10     	; 0x2164 <pow+0x50>
    215a:	ab 2f       	mov	r26, r27
    215c:	be 2f       	mov	r27, r30
    215e:	f8 5f       	subi	r31, 0xF8	; 248
    2160:	d0 f3       	brcs	.-12     	; 0x2156 <pow+0x42>
    2162:	10 c0       	rjmp	.+32     	; 0x2184 <pow+0x70>
    2164:	ff 5f       	subi	r31, 0xFF	; 255
    2166:	70 f4       	brcc	.+28     	; 0x2184 <pow+0x70>
    2168:	a6 95       	lsr	r26
    216a:	e0 f7       	brcc	.-8      	; 0x2164 <pow+0x50>
    216c:	f7 39       	cpi	r31, 0x97	; 151
    216e:	50 f0       	brcs	.+20     	; 0x2184 <pow+0x70>
    2170:	19 f0       	breq	.+6      	; 0x2178 <pow+0x64>
    2172:	ff 3a       	cpi	r31, 0xAF	; 175
    2174:	38 f4       	brcc	.+14     	; 0x2184 <pow+0x70>
    2176:	9f 77       	andi	r25, 0x7F	; 127
    2178:	9f 93       	push	r25
    217a:	0d d0       	rcall	.+26     	; 0x2196 <pow+0x82>
    217c:	0f 90       	pop	r0
    217e:	07 fc       	sbrc	r0, 7
    2180:	90 58       	subi	r25, 0x80	; 128
    2182:	08 95       	ret
    2184:	46 f0       	brts	.+16     	; 0x2196 <pow+0x82>
    2186:	0c 94 5f 0f 	jmp	0x1ebe	; 0x1ebe <__fp_nan>
    218a:	60 e0       	ldi	r22, 0x00	; 0
    218c:	70 e0       	ldi	r23, 0x00	; 0
    218e:	80 e8       	ldi	r24, 0x80	; 128
    2190:	9f e3       	ldi	r25, 0x3F	; 63
    2192:	08 95       	ret
    2194:	4f e7       	ldi	r20, 0x7F	; 127
    2196:	9f 77       	andi	r25, 0x7F	; 127
    2198:	5f 93       	push	r21
    219a:	4f 93       	push	r20
    219c:	3f 93       	push	r19
    219e:	2f 93       	push	r18
    21a0:	0e 94 84 11 	call	0x2308	; 0x2308 <log>
    21a4:	2f 91       	pop	r18
    21a6:	3f 91       	pop	r19
    21a8:	4f 91       	pop	r20
    21aa:	5f 91       	pop	r21
    21ac:	0e 94 1d 10 	call	0x203a	; 0x203a <__mulsf3>
    21b0:	0c 94 ee 10 	jmp	0x21dc	; 0x21dc <exp>

000021b4 <sin>:
    21b4:	9f 93       	push	r25
    21b6:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <__fp_rempio2>
    21ba:	0f 90       	pop	r0
    21bc:	07 fc       	sbrc	r0, 7
    21be:	ee 5f       	subi	r30, 0xFE	; 254
    21c0:	0c 94 d3 0f 	jmp	0x1fa6	; 0x1fa6 <__fp_sinus>

000021c4 <square>:
    21c4:	9b 01       	movw	r18, r22
    21c6:	ac 01       	movw	r20, r24
    21c8:	0c 94 1d 10 	jmp	0x203a	; 0x203a <__mulsf3>
    21cc:	29 f4       	brne	.+10     	; 0x21d8 <square+0x14>
    21ce:	16 f0       	brts	.+4      	; 0x21d4 <square+0x10>
    21d0:	0c 94 59 0f 	jmp	0x1eb2	; 0x1eb2 <__fp_inf>
    21d4:	0c 94 09 10 	jmp	0x2012	; 0x2012 <__fp_zero>
    21d8:	0c 94 5f 0f 	jmp	0x1ebe	; 0x1ebe <__fp_nan>

000021dc <exp>:
    21dc:	0e 94 ef 0f 	call	0x1fde	; 0x1fde <__fp_splitA>
    21e0:	a8 f3       	brcs	.-22     	; 0x21cc <square+0x8>
    21e2:	96 38       	cpi	r25, 0x86	; 134
    21e4:	a0 f7       	brcc	.-24     	; 0x21ce <square+0xa>
    21e6:	07 f8       	bld	r0, 7
    21e8:	0f 92       	push	r0
    21ea:	e8 94       	clt
    21ec:	2b e3       	ldi	r18, 0x3B	; 59
    21ee:	3a ea       	ldi	r19, 0xAA	; 170
    21f0:	48 eb       	ldi	r20, 0xB8	; 184
    21f2:	5f e7       	ldi	r21, 0x7F	; 127
    21f4:	0e 94 33 10 	call	0x2066	; 0x2066 <__mulsf3_pse>
    21f8:	0f 92       	push	r0
    21fa:	0f 92       	push	r0
    21fc:	0f 92       	push	r0
    21fe:	4d b7       	in	r20, 0x3d	; 61
    2200:	5e b7       	in	r21, 0x3e	; 62
    2202:	0f 92       	push	r0
    2204:	0e 94 cc 11 	call	0x2398	; 0x2398 <modf>
    2208:	e7 ef       	ldi	r30, 0xF7	; 247
    220a:	f0 e0       	ldi	r31, 0x00	; 0
    220c:	0e 94 62 0f 	call	0x1ec4	; 0x1ec4 <__fp_powser>
    2210:	4f 91       	pop	r20
    2212:	5f 91       	pop	r21
    2214:	ef 91       	pop	r30
    2216:	ff 91       	pop	r31
    2218:	e5 95       	asr	r30
    221a:	ee 1f       	adc	r30, r30
    221c:	ff 1f       	adc	r31, r31
    221e:	49 f0       	breq	.+18     	; 0x2232 <exp+0x56>
    2220:	fe 57       	subi	r31, 0x7E	; 126
    2222:	e0 68       	ori	r30, 0x80	; 128
    2224:	44 27       	eor	r20, r20
    2226:	ee 0f       	add	r30, r30
    2228:	44 1f       	adc	r20, r20
    222a:	fa 95       	dec	r31
    222c:	e1 f7       	brne	.-8      	; 0x2226 <exp+0x4a>
    222e:	41 95       	neg	r20
    2230:	55 0b       	sbc	r21, r21
    2232:	0e 94 46 11 	call	0x228c	; 0x228c <ldexp>
    2236:	0f 90       	pop	r0
    2238:	07 fe       	sbrs	r0, 7
    223a:	0c 94 15 10 	jmp	0x202a	; 0x202a <inverse>
    223e:	08 95       	ret

00002240 <__fp_mpack>:
    2240:	9f 3f       	cpi	r25, 0xFF	; 255
    2242:	31 f0       	breq	.+12     	; 0x2250 <__fp_mpack_finite+0xc>

00002244 <__fp_mpack_finite>:
    2244:	91 50       	subi	r25, 0x01	; 1
    2246:	20 f4       	brcc	.+8      	; 0x2250 <__fp_mpack_finite+0xc>
    2248:	87 95       	ror	r24
    224a:	77 95       	ror	r23
    224c:	67 95       	ror	r22
    224e:	b7 95       	ror	r27
    2250:	88 0f       	add	r24, r24
    2252:	91 1d       	adc	r25, r1
    2254:	96 95       	lsr	r25
    2256:	87 95       	ror	r24
    2258:	97 f9       	bld	r25, 7
    225a:	08 95       	ret

0000225c <__fp_powsodd>:
    225c:	9f 93       	push	r25
    225e:	8f 93       	push	r24
    2260:	7f 93       	push	r23
    2262:	6f 93       	push	r22
    2264:	ff 93       	push	r31
    2266:	ef 93       	push	r30
    2268:	9b 01       	movw	r18, r22
    226a:	ac 01       	movw	r20, r24
    226c:	0e 94 1d 10 	call	0x203a	; 0x203a <__mulsf3>
    2270:	ef 91       	pop	r30
    2272:	ff 91       	pop	r31
    2274:	0e 94 62 0f 	call	0x1ec4	; 0x1ec4 <__fp_powser>
    2278:	2f 91       	pop	r18
    227a:	3f 91       	pop	r19
    227c:	4f 91       	pop	r20
    227e:	5f 91       	pop	r21
    2280:	0c 94 1d 10 	jmp	0x203a	; 0x203a <__mulsf3>
    2284:	0c 94 59 0f 	jmp	0x1eb2	; 0x1eb2 <__fp_inf>
    2288:	0c 94 20 11 	jmp	0x2240	; 0x2240 <__fp_mpack>

0000228c <ldexp>:
    228c:	0e 94 ef 0f 	call	0x1fde	; 0x1fde <__fp_splitA>
    2290:	d8 f3       	brcs	.-10     	; 0x2288 <__fp_powsodd+0x2c>
    2292:	99 23       	and	r25, r25
    2294:	c9 f3       	breq	.-14     	; 0x2288 <__fp_powsodd+0x2c>
    2296:	94 0f       	add	r25, r20
    2298:	51 1d       	adc	r21, r1
    229a:	a3 f3       	brvs	.-24     	; 0x2284 <__fp_powsodd+0x28>
    229c:	91 50       	subi	r25, 0x01	; 1
    229e:	50 40       	sbci	r21, 0x00	; 0
    22a0:	94 f0       	brlt	.+36     	; 0x22c6 <ldexp+0x3a>
    22a2:	59 f0       	breq	.+22     	; 0x22ba <ldexp+0x2e>
    22a4:	88 23       	and	r24, r24
    22a6:	32 f0       	brmi	.+12     	; 0x22b4 <ldexp+0x28>
    22a8:	66 0f       	add	r22, r22
    22aa:	77 1f       	adc	r23, r23
    22ac:	88 1f       	adc	r24, r24
    22ae:	91 50       	subi	r25, 0x01	; 1
    22b0:	50 40       	sbci	r21, 0x00	; 0
    22b2:	c1 f7       	brne	.-16     	; 0x22a4 <ldexp+0x18>
    22b4:	9e 3f       	cpi	r25, 0xFE	; 254
    22b6:	51 05       	cpc	r21, r1
    22b8:	2c f7       	brge	.-54     	; 0x2284 <__fp_powsodd+0x28>
    22ba:	88 0f       	add	r24, r24
    22bc:	91 1d       	adc	r25, r1
    22be:	96 95       	lsr	r25
    22c0:	87 95       	ror	r24
    22c2:	97 f9       	bld	r25, 7
    22c4:	08 95       	ret
    22c6:	5f 3f       	cpi	r21, 0xFF	; 255
    22c8:	ac f0       	brlt	.+42     	; 0x22f4 <ldexp+0x68>
    22ca:	98 3e       	cpi	r25, 0xE8	; 232
    22cc:	9c f0       	brlt	.+38     	; 0x22f4 <ldexp+0x68>
    22ce:	bb 27       	eor	r27, r27
    22d0:	86 95       	lsr	r24
    22d2:	77 95       	ror	r23
    22d4:	67 95       	ror	r22
    22d6:	b7 95       	ror	r27
    22d8:	08 f4       	brcc	.+2      	; 0x22dc <ldexp+0x50>
    22da:	b1 60       	ori	r27, 0x01	; 1
    22dc:	93 95       	inc	r25
    22de:	c1 f7       	brne	.-16     	; 0x22d0 <ldexp+0x44>
    22e0:	bb 0f       	add	r27, r27
    22e2:	58 f7       	brcc	.-42     	; 0x22ba <ldexp+0x2e>
    22e4:	11 f4       	brne	.+4      	; 0x22ea <ldexp+0x5e>
    22e6:	60 ff       	sbrs	r22, 0
    22e8:	e8 cf       	rjmp	.-48     	; 0x22ba <ldexp+0x2e>
    22ea:	6f 5f       	subi	r22, 0xFF	; 255
    22ec:	7f 4f       	sbci	r23, 0xFF	; 255
    22ee:	8f 4f       	sbci	r24, 0xFF	; 255
    22f0:	9f 4f       	sbci	r25, 0xFF	; 255
    22f2:	e3 cf       	rjmp	.-58     	; 0x22ba <ldexp+0x2e>
    22f4:	0c 94 0a 10 	jmp	0x2014	; 0x2014 <__fp_szero>
    22f8:	16 f0       	brts	.+4      	; 0x22fe <ldexp+0x72>
    22fa:	0c 94 20 11 	jmp	0x2240	; 0x2240 <__fp_mpack>
    22fe:	0c 94 5f 0f 	jmp	0x1ebe	; 0x1ebe <__fp_nan>
    2302:	68 94       	set
    2304:	0c 94 59 0f 	jmp	0x1eb2	; 0x1eb2 <__fp_inf>

00002308 <log>:
    2308:	0e 94 ef 0f 	call	0x1fde	; 0x1fde <__fp_splitA>
    230c:	a8 f3       	brcs	.-22     	; 0x22f8 <ldexp+0x6c>
    230e:	99 23       	and	r25, r25
    2310:	c1 f3       	breq	.-16     	; 0x2302 <ldexp+0x76>
    2312:	ae f3       	brts	.-22     	; 0x22fe <ldexp+0x72>
    2314:	df 93       	push	r29
    2316:	cf 93       	push	r28
    2318:	1f 93       	push	r17
    231a:	0f 93       	push	r16
    231c:	ff 92       	push	r15
    231e:	c9 2f       	mov	r28, r25
    2320:	dd 27       	eor	r29, r29
    2322:	88 23       	and	r24, r24
    2324:	2a f0       	brmi	.+10     	; 0x2330 <log+0x28>
    2326:	21 97       	sbiw	r28, 0x01	; 1
    2328:	66 0f       	add	r22, r22
    232a:	77 1f       	adc	r23, r23
    232c:	88 1f       	adc	r24, r24
    232e:	da f7       	brpl	.-10     	; 0x2326 <log+0x1e>
    2330:	20 e0       	ldi	r18, 0x00	; 0
    2332:	30 e0       	ldi	r19, 0x00	; 0
    2334:	40 e8       	ldi	r20, 0x80	; 128
    2336:	5f eb       	ldi	r21, 0xBF	; 191
    2338:	9f e3       	ldi	r25, 0x3F	; 63
    233a:	88 39       	cpi	r24, 0x98	; 152
    233c:	20 f0       	brcs	.+8      	; 0x2346 <log+0x3e>
    233e:	80 3e       	cpi	r24, 0xE0	; 224
    2340:	38 f0       	brcs	.+14     	; 0x2350 <log+0x48>
    2342:	21 96       	adiw	r28, 0x01	; 1
    2344:	8f 77       	andi	r24, 0x7F	; 127
    2346:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <__addsf3>
    234a:	ef e1       	ldi	r30, 0x1F	; 31
    234c:	f1 e0       	ldi	r31, 0x01	; 1
    234e:	04 c0       	rjmp	.+8      	; 0x2358 <log+0x50>
    2350:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <__addsf3>
    2354:	ec e4       	ldi	r30, 0x4C	; 76
    2356:	f1 e0       	ldi	r31, 0x01	; 1
    2358:	0e 94 62 0f 	call	0x1ec4	; 0x1ec4 <__fp_powser>
    235c:	8b 01       	movw	r16, r22
    235e:	be 01       	movw	r22, r28
    2360:	ec 01       	movw	r28, r24
    2362:	fb 2e       	mov	r15, r27
    2364:	6f 57       	subi	r22, 0x7F	; 127
    2366:	71 09       	sbc	r23, r1
    2368:	75 95       	asr	r23
    236a:	77 1f       	adc	r23, r23
    236c:	88 0b       	sbc	r24, r24
    236e:	99 0b       	sbc	r25, r25
    2370:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <__floatsisf>
    2374:	28 e1       	ldi	r18, 0x18	; 24
    2376:	32 e7       	ldi	r19, 0x72	; 114
    2378:	41 e3       	ldi	r20, 0x31	; 49
    237a:	5f e3       	ldi	r21, 0x3F	; 63
    237c:	0e 94 30 10 	call	0x2060	; 0x2060 <__mulsf3x>
    2380:	af 2d       	mov	r26, r15
    2382:	98 01       	movw	r18, r16
    2384:	ae 01       	movw	r20, r28
    2386:	ff 90       	pop	r15
    2388:	0f 91       	pop	r16
    238a:	1f 91       	pop	r17
    238c:	cf 91       	pop	r28
    238e:	df 91       	pop	r29
    2390:	0e 94 7f 0d 	call	0x1afe	; 0x1afe <__addsf3x>
    2394:	0c 94 c2 0f 	jmp	0x1f84	; 0x1f84 <__fp_round>

00002398 <modf>:
    2398:	fa 01       	movw	r30, r20
    239a:	dc 01       	movw	r26, r24
    239c:	aa 0f       	add	r26, r26
    239e:	bb 1f       	adc	r27, r27
    23a0:	9b 01       	movw	r18, r22
    23a2:	ac 01       	movw	r20, r24
    23a4:	bf 57       	subi	r27, 0x7F	; 127
    23a6:	28 f4       	brcc	.+10     	; 0x23b2 <modf+0x1a>
    23a8:	22 27       	eor	r18, r18
    23aa:	33 27       	eor	r19, r19
    23ac:	44 27       	eor	r20, r20
    23ae:	50 78       	andi	r21, 0x80	; 128
    23b0:	20 c0       	rjmp	.+64     	; 0x23f2 <modf+0x5a>
    23b2:	b7 51       	subi	r27, 0x17	; 23
    23b4:	90 f4       	brcc	.+36     	; 0x23da <modf+0x42>
    23b6:	ab 2f       	mov	r26, r27
    23b8:	00 24       	eor	r0, r0
    23ba:	46 95       	lsr	r20
    23bc:	37 95       	ror	r19
    23be:	27 95       	ror	r18
    23c0:	01 1c       	adc	r0, r1
    23c2:	a3 95       	inc	r26
    23c4:	d2 f3       	brmi	.-12     	; 0x23ba <modf+0x22>
    23c6:	00 20       	and	r0, r0
    23c8:	71 f0       	breq	.+28     	; 0x23e6 <modf+0x4e>
    23ca:	22 0f       	add	r18, r18
    23cc:	33 1f       	adc	r19, r19
    23ce:	44 1f       	adc	r20, r20
    23d0:	b3 95       	inc	r27
    23d2:	da f3       	brmi	.-10     	; 0x23ca <modf+0x32>
    23d4:	0e d0       	rcall	.+28     	; 0x23f2 <modf+0x5a>
    23d6:	0c 94 67 0d 	jmp	0x1ace	; 0x1ace <__subsf3>
    23da:	61 30       	cpi	r22, 0x01	; 1
    23dc:	71 05       	cpc	r23, r1
    23de:	a0 e8       	ldi	r26, 0x80	; 128
    23e0:	8a 07       	cpc	r24, r26
    23e2:	b9 46       	sbci	r27, 0x69	; 105
    23e4:	30 f4       	brcc	.+12     	; 0x23f2 <modf+0x5a>
    23e6:	9b 01       	movw	r18, r22
    23e8:	ac 01       	movw	r20, r24
    23ea:	66 27       	eor	r22, r22
    23ec:	77 27       	eor	r23, r23
    23ee:	88 27       	eor	r24, r24
    23f0:	90 78       	andi	r25, 0x80	; 128
    23f2:	30 96       	adiw	r30, 0x00	; 0
    23f4:	21 f0       	breq	.+8      	; 0x23fe <modf+0x66>
    23f6:	20 83       	st	Z, r18
    23f8:	31 83       	std	Z+1, r19	; 0x01
    23fa:	42 83       	std	Z+2, r20	; 0x02
    23fc:	53 83       	std	Z+3, r21	; 0x03
    23fe:	08 95       	ret

00002400 <__itoa_ncheck>:
    2400:	bb 27       	eor	r27, r27
    2402:	4a 30       	cpi	r20, 0x0A	; 10
    2404:	31 f4       	brne	.+12     	; 0x2412 <__itoa_ncheck+0x12>
    2406:	99 23       	and	r25, r25
    2408:	22 f4       	brpl	.+8      	; 0x2412 <__itoa_ncheck+0x12>
    240a:	bd e2       	ldi	r27, 0x2D	; 45
    240c:	90 95       	com	r25
    240e:	81 95       	neg	r24
    2410:	9f 4f       	sbci	r25, 0xFF	; 255
    2412:	0c 94 0c 12 	jmp	0x2418	; 0x2418 <__utoa_common>

00002416 <__utoa_ncheck>:
    2416:	bb 27       	eor	r27, r27

00002418 <__utoa_common>:
    2418:	fb 01       	movw	r30, r22
    241a:	55 27       	eor	r21, r21
    241c:	aa 27       	eor	r26, r26
    241e:	88 0f       	add	r24, r24
    2420:	99 1f       	adc	r25, r25
    2422:	aa 1f       	adc	r26, r26
    2424:	a4 17       	cp	r26, r20
    2426:	10 f0       	brcs	.+4      	; 0x242c <__utoa_common+0x14>
    2428:	a4 1b       	sub	r26, r20
    242a:	83 95       	inc	r24
    242c:	50 51       	subi	r21, 0x10	; 16
    242e:	b9 f7       	brne	.-18     	; 0x241e <__utoa_common+0x6>
    2430:	a0 5d       	subi	r26, 0xD0	; 208
    2432:	aa 33       	cpi	r26, 0x3A	; 58
    2434:	08 f0       	brcs	.+2      	; 0x2438 <__utoa_common+0x20>
    2436:	a9 5d       	subi	r26, 0xD9	; 217
    2438:	a1 93       	st	Z+, r26
    243a:	00 97       	sbiw	r24, 0x00	; 0
    243c:	79 f7       	brne	.-34     	; 0x241c <__utoa_common+0x4>
    243e:	b1 11       	cpse	r27, r1
    2440:	b1 93       	st	Z+, r27
    2442:	11 92       	st	Z+, r1
    2444:	cb 01       	movw	r24, r22
    2446:	0c 94 25 12 	jmp	0x244a	; 0x244a <strrev>

0000244a <strrev>:
    244a:	dc 01       	movw	r26, r24
    244c:	fc 01       	movw	r30, r24
    244e:	67 2f       	mov	r22, r23
    2450:	71 91       	ld	r23, Z+
    2452:	77 23       	and	r23, r23
    2454:	e1 f7       	brne	.-8      	; 0x244e <strrev+0x4>
    2456:	32 97       	sbiw	r30, 0x02	; 2
    2458:	04 c0       	rjmp	.+8      	; 0x2462 <strrev+0x18>
    245a:	7c 91       	ld	r23, X
    245c:	6d 93       	st	X+, r22
    245e:	70 83       	st	Z, r23
    2460:	62 91       	ld	r22, -Z
    2462:	ae 17       	cp	r26, r30
    2464:	bf 07       	cpc	r27, r31
    2466:	c8 f3       	brcs	.-14     	; 0x245a <strrev+0x10>
    2468:	08 95       	ret

0000246a <_exit>:
    246a:	f8 94       	cli

0000246c <__stop_program>:
    246c:	ff cf       	rjmp	.-2      	; 0x246c <__stop_program>
