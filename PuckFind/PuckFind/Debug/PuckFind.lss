
PuckFind.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  00000bcc  00000c60  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000bcc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800108  00800108  00000c68  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000c68  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000c98  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000178  00000000  00000000  00000cd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000229e  00000000  00000000  00000e50  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001090  00000000  00000000  000030ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000016e4  00000000  00000000  0000417e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000474  00000000  00000000  00005864  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a3b  00000000  00000000  00005cd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001e7b  00000000  00000000  00006713  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001b8  00000000  00000000  0000858e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__ctors_end>
   4:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__bad_interrupt>
   8:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__bad_interrupt>
   c:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__bad_interrupt>
  10:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__bad_interrupt>
  14:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__bad_interrupt>
  18:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__bad_interrupt>
  1c:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__bad_interrupt>
  20:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__bad_interrupt>
  24:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__bad_interrupt>
  28:	0c 94 01 02 	jmp	0x402	; 0x402 <__vector_10>
  2c:	0c 94 3f 02 	jmp	0x47e	; 0x47e <__vector_11>
  30:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__bad_interrupt>
  34:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__bad_interrupt>
  38:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__bad_interrupt>
  3c:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__bad_interrupt>
  40:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__bad_interrupt>
  44:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__bad_interrupt>
  48:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__bad_interrupt>
  4c:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__bad_interrupt>
  50:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__bad_interrupt>
  54:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__bad_interrupt>
  58:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__bad_interrupt>
  5c:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__bad_interrupt>
  60:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__bad_interrupt>
  64:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__bad_interrupt>
  68:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__bad_interrupt>
  6c:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__bad_interrupt>
  70:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__bad_interrupt>
  74:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__bad_interrupt>
  78:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__bad_interrupt>
  7c:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__bad_interrupt>
  80:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__bad_interrupt>
  84:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__bad_interrupt>
  88:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__bad_interrupt>
  8c:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__bad_interrupt>
  90:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__bad_interrupt>
  94:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__bad_interrupt>
  98:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__bad_interrupt>
  9c:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__bad_interrupt>
  a0:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__bad_interrupt>
  a4:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__bad_interrupt>
  a8:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__bad_interrupt>

000000ac <__trampolines_end>:
  ac:	00 01       	movw	r0, r0
  ae:	00 00       	nop
  b0:	43 01       	movw	r8, r6
  b2:	12 00       	.word	0x0012	; ????
  b4:	02 00       	.word	0x0002	; ????
  b6:	00 00       	nop
  b8:	01 43       	sbci	r16, 0x31	; 49
  ba:	00 03       	mulsu	r16, r16
  bc:	00 00       	nop
  be:	fc 00       	.word	0x00fc	; ????
  c0:	04 01       	movw	r0, r8
  c2:	03 09       	sbc	r16, r3
  c4:	04 e8       	ldi	r16, 0x84	; 132
  c6:	00 12       	cpse	r0, r16
  c8:	02 03       	mulsu	r16, r18
  ca:	09 04       	cpc	r0, r9
  cc:	e0 00       	.word	0x00e0	; ????
  ce:	06 03       	mulsu	r16, r22
  d0:	03 09       	sbc	r16, r3
  d2:	04 d6       	rcall	.+3080   	; 0xcdc <__data_load_end+0x108>
  d4:	00 08       	sbc	r0, r0

000000d6 <string3>:
  d6:	08 03 34 00 31 00 30 00 00 00                       ..4.1.0...

000000e0 <string2>:
  e0:	06 03 4d 00 32 00 00 00                             ..M.2...

000000e8 <string1>:
  e8:	12 03 4a 00 2e 00 20 00 46 00 69 00 65 00 6e 00     ..J... .F.i.e.n.
  f8:	65 00 00 00                                         e...

000000fc <string0>:
  fc:	04 03 09 04                                         ....

00000100 <config1_descriptor>:
 100:	09 02 43 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..C.....2.......
 110:	01 00 05 24 00 10 01 05 24 01 01 01 04 24 02 06     ...$....$....$..
 120:	05 24 06 00 01 07 05 82 03 10 00 40 09 04 01 00     .$.........@....
 130:	02 0a 00 00 00 07 05 03 02 40 00 00 07 05 84 02     .........@......
 140:	40 00 00                                            @..

00000143 <device_descriptor>:
 143:	12 01 00 02 02 00 00 10 c0 16 7a 04 00 01 01 02     ..........z.....
 153:	03 01                                               ..

00000155 <endpoint_config_table>:
 155:	00 01 c1 12 01 80 36 01 81 36                       ......6..6

0000015f <__c.2050>:
 15f:	20 20 20 2d 2d 2d 20 20 20 00                          ---   .

00000169 <__c.2048>:
 169:	46 36 3a 20 00                                      F6: .

0000016e <__c.2046>:
 16e:	20 20 20 2d 2d 2d 20 20 20 00                          ---   .

00000178 <__c.2044>:
 178:	46 35 3a 20 00                                      F5: .

0000017d <__c.2042>:
 17d:	20 20 20 2d 2d 2d 20 20 20 00                          ---   .

00000187 <__c.2040>:
 187:	46 34 3a 20 00                                      F4: .

0000018c <__c.2038>:
 18c:	20 20 20 2d 2d 2d 20 20 20 00                          ---   .

00000196 <__c.2036>:
 196:	46 31 3a 20 00                                      F1: .

0000019b <__c.2034>:
 19b:	20 20 20 2d 2d 2d 20 20 20 00                          ---   .

000001a5 <__c.2032>:
 1a5:	46 30 3a 20 00                                      F0: .

000001aa <__c.2030>:
 1aa:	20 20 20 2d 2d 2d 20 20 20 00                          ---   .

000001b4 <__ctors_end>:
 1b4:	11 24       	eor	r1, r1
 1b6:	1f be       	out	0x3f, r1	; 63
 1b8:	cf ef       	ldi	r28, 0xFF	; 255
 1ba:	da e0       	ldi	r29, 0x0A	; 10
 1bc:	de bf       	out	0x3e, r29	; 62
 1be:	cd bf       	out	0x3d, r28	; 61

000001c0 <__do_copy_data>:
 1c0:	11 e0       	ldi	r17, 0x01	; 1
 1c2:	a0 e0       	ldi	r26, 0x00	; 0
 1c4:	b1 e0       	ldi	r27, 0x01	; 1
 1c6:	ec ec       	ldi	r30, 0xCC	; 204
 1c8:	fb e0       	ldi	r31, 0x0B	; 11
 1ca:	02 c0       	rjmp	.+4      	; 0x1d0 <__do_copy_data+0x10>
 1cc:	05 90       	lpm	r0, Z+
 1ce:	0d 92       	st	X+, r0
 1d0:	a8 30       	cpi	r26, 0x08	; 8
 1d2:	b1 07       	cpc	r27, r17
 1d4:	d9 f7       	brne	.-10     	; 0x1cc <__do_copy_data+0xc>

000001d6 <__do_clear_bss>:
 1d6:	21 e0       	ldi	r18, 0x01	; 1
 1d8:	a8 e0       	ldi	r26, 0x08	; 8
 1da:	b1 e0       	ldi	r27, 0x01	; 1
 1dc:	01 c0       	rjmp	.+2      	; 0x1e0 <.do_clear_bss_start>

000001de <.do_clear_bss_loop>:
 1de:	1d 92       	st	X+, r1

000001e0 <.do_clear_bss_start>:
 1e0:	ac 30       	cpi	r26, 0x0C	; 12
 1e2:	b2 07       	cpc	r27, r18
 1e4:	e1 f7       	brne	.-8      	; 0x1de <.do_clear_bss_loop>
 1e6:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <main>
 1ea:	0c 94 e4 05 	jmp	0xbc8	; 0xbc8 <_exit>

000001ee <__bad_interrupt>:
 1ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001f2 <main>:
#include "m_general.h"
#include "m_usb.h"
#include "puck_find.h"

int main(void)
{
 1f2:	cf 93       	push	r28
 1f4:	df 93       	push	r29
 1f6:	cd b7       	in	r28, 0x3d	; 61
 1f8:	de b7       	in	r29, 0x3e	; 62
 1fa:	2a 97       	sbiw	r28, 0x0a	; 10
 1fc:	0f b6       	in	r0, 0x3f	; 63
 1fe:	f8 94       	cli
 200:	de bf       	out	0x3e, r29	; 62
 202:	0f be       	out	0x3f, r0	; 63
 204:	cd bf       	out	0x3d, r28	; 61
	// System prescaler
	m_clockdivide(3);
 206:	e1 e6       	ldi	r30, 0x61	; 97
 208:	f0 e0       	ldi	r31, 0x00	; 0
 20a:	80 e8       	ldi	r24, 0x80	; 128
 20c:	80 83       	st	Z, r24
 20e:	83 e0       	ldi	r24, 0x03	; 3
 210:	80 83       	st	Z, r24
	// Initialize usb
	m_usb_init();
 212:	0e 94 8d 01 	call	0x31a	; 0x31a <m_usb_init>
	// Initialize motor
	motor_init();
 216:	0e 94 2e 01 	call	0x25c	; 0x25c <motor_init>
	// Array for phototransistor readings
	int input[5];
	// Find puck direction and turn to face it
	while (1) {
		readPhototransistors(input); // Get ADC phototransistor inputs
 21a:	ce 01       	movw	r24, r28
 21c:	01 96       	adiw	r24, 0x01	; 1
 21e:	0e 94 12 04 	call	0x824	; 0x824 <readPhototransistors>
		printADC(input); // Print ADC values
 222:	ce 01       	movw	r24, r28
 224:	01 96       	adiw	r24, 0x01	; 1
 226:	0e 94 66 05 	call	0xacc	; 0xacc <printADC>
		// If facing puck, turn on green light
		if (isInFront(input) == 0) {
 22a:	ce 01       	movw	r24, r28
 22c:	01 96       	adiw	r24, 0x01	; 1
 22e:	0e 94 ff 04 	call	0x9fe	; 0x9fe <isInFront>
 232:	89 2b       	or	r24, r25
 234:	29 f4       	brne	.+10     	; 0x240 <main+0x4e>
			motor_stop();
 236:	0e 94 68 01 	call	0x2d0	; 0x2d0 <motor_stop>
			m_green(ON);
 23a:	6a 9a       	sbi	0x0d, 2	; 13
 23c:	72 98       	cbi	0x0e, 2	; 14
 23e:	04 c0       	rjmp	.+8      	; 0x248 <main+0x56>
		} else {
			turnToPuck(input); // Turn to face puck
 240:	ce 01       	movw	r24, r28
 242:	01 96       	adiw	r24, 0x01	; 1
 244:	0e 94 57 05 	call	0xaae	; 0xaae <turnToPuck>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 248:	2f e9       	ldi	r18, 0x9F	; 159
 24a:	86 e8       	ldi	r24, 0x86	; 134
 24c:	91 e0       	ldi	r25, 0x01	; 1
 24e:	21 50       	subi	r18, 0x01	; 1
 250:	80 40       	sbci	r24, 0x00	; 0
 252:	90 40       	sbci	r25, 0x00	; 0
 254:	e1 f7       	brne	.-8      	; 0x24e <main+0x5c>
 256:	00 c0       	rjmp	.+0      	; 0x258 <main+0x66>
 258:	00 00       	nop
 25a:	df cf       	rjmp	.-66     	; 0x21a <main+0x28>

0000025c <motor_init>:
#define PI 3.14159

// Initialize motor
void motor_init() {
	// Digital output pins
	set(DDRB, 1); // A-IN 1
 25c:	21 9a       	sbi	0x04, 1	; 4
	set(DDRB, 2); // A-IN 2
 25e:	22 9a       	sbi	0x04, 2	; 4
	set(DDRB, 3); // B-IN 1
 260:	23 9a       	sbi	0x04, 3	; 4
	set(DDRB, 7); // B-IN 2
 262:	27 9a       	sbi	0x04, 7	; 4

	set(PORTB, 1);
 264:	29 9a       	sbi	0x05, 1	; 5
	clear(PORTB, 2);
 266:	2a 98       	cbi	0x05, 2	; 5
	set(PORTB, 3);
 268:	2b 9a       	sbi	0x05, 3	; 5
	clear(PORTB, 7);
 26a:	2f 98       	cbi	0x05, 7	; 5

	// Timer 1
	// Prescale timer clock
	clear(TCCR1B, CS12);
 26c:	e1 e8       	ldi	r30, 0x81	; 129
 26e:	f0 e0       	ldi	r31, 0x00	; 0
 270:	80 81       	ld	r24, Z
 272:	8b 7f       	andi	r24, 0xFB	; 251
 274:	80 83       	st	Z, r24
	set(TCCR1B, CS11);
 276:	80 81       	ld	r24, Z
 278:	82 60       	ori	r24, 0x02	; 2
 27a:	80 83       	st	Z, r24
	clear(TCCR1B, CS10);
 27c:	80 81       	ld	r24, Z
 27e:	8e 7f       	andi	r24, 0xFE	; 254
 280:	80 83       	st	Z, r24

	// Set timer mode (UP to 0x00FF, PWM mode)
	clear(TCCR1B, WGM13);
 282:	80 81       	ld	r24, Z
 284:	8f 7e       	andi	r24, 0xEF	; 239
 286:	80 83       	st	Z, r24
	set(TCCR1B, WGM12);
 288:	80 81       	ld	r24, Z
 28a:	88 60       	ori	r24, 0x08	; 8
 28c:	80 83       	st	Z, r24
	clear(TCCR1A, WGM11);
 28e:	e0 e8       	ldi	r30, 0x80	; 128
 290:	f0 e0       	ldi	r31, 0x00	; 0
 292:	80 81       	ld	r24, Z
 294:	8d 7f       	andi	r24, 0xFD	; 253
 296:	80 83       	st	Z, r24
	set(TCCR1A, WGM10);
 298:	80 81       	ld	r24, Z
 29a:	81 60       	ori	r24, 0x01	; 1
 29c:	80 83       	st	Z, r24

	// Set Channel A compare output (Set at OCR1A, clear at rollover)
	set(TCCR1A, COM1A1);
 29e:	80 81       	ld	r24, Z
 2a0:	80 68       	ori	r24, 0x80	; 128
 2a2:	80 83       	st	Z, r24
	set(TCCR1A, COM1A0);
 2a4:	80 81       	ld	r24, Z
 2a6:	80 64       	ori	r24, 0x40	; 64
 2a8:	80 83       	st	Z, r24

	// Set Channel B compare output (Set at OCR1B, clear at rollover)
	set(TCCR1A, COM1B1);
 2aa:	80 81       	ld	r24, Z
 2ac:	80 62       	ori	r24, 0x20	; 32
 2ae:	80 83       	st	Z, r24
	set(TCCR1A, COM1B0);
 2b0:	80 81       	ld	r24, Z
 2b2:	80 61       	ori	r24, 0x10	; 16
 2b4:	80 83       	st	Z, r24

	// Initialize OCR1A/B
	OCR1A = 0xBF;
 2b6:	8f eb       	ldi	r24, 0xBF	; 191
 2b8:	90 e0       	ldi	r25, 0x00	; 0
 2ba:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 2be:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	OCR1B = 0xBF;
 2c2:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
 2c6:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>

	// Enable B5/6 output
	set(DDRB, 6);
 2ca:	26 9a       	sbi	0x04, 6	; 4
	set(DDRB, 5);
 2cc:	25 9a       	sbi	0x04, 5	; 4
 2ce:	08 95       	ret

000002d0 <motor_stop>:
}

// Stop motor
void motor_stop() {
	clear(PORTB, 1);
 2d0:	29 98       	cbi	0x05, 1	; 5
	clear(PORTB, 2);
 2d2:	2a 98       	cbi	0x05, 2	; 5
	clear(PORTB, 3);
 2d4:	2b 98       	cbi	0x05, 3	; 5
	clear(PORTB, 7);
 2d6:	2f 98       	cbi	0x05, 7	; 5
 2d8:	08 95       	ret

000002da <turn_in_place>:
}

// Turn in place - right if true or left if false
void turn_in_place(bool right) {
	if (right) {
 2da:	88 23       	and	r24, r24
 2dc:	79 f0       	breq	.+30     	; 0x2fc <turn_in_place+0x22>
		OCR1A = 0xBF;
 2de:	8f eb       	ldi	r24, 0xBF	; 191
 2e0:	90 e0       	ldi	r25, 0x00	; 0
 2e2:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 2e6:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
		OCR1B = 0xBF;
 2ea:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
 2ee:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
		set(PORTB, 1);
 2f2:	29 9a       	sbi	0x05, 1	; 5
		clear(PORTB, 2);
 2f4:	2a 98       	cbi	0x05, 2	; 5
		clear(PORTB, 3);
 2f6:	2b 98       	cbi	0x05, 3	; 5
		set(PORTB, 7);
 2f8:	2f 9a       	sbi	0x05, 7	; 5
 2fa:	08 95       	ret
	} else {
		OCR1A = 0xBF;
 2fc:	8f eb       	ldi	r24, 0xBF	; 191
 2fe:	90 e0       	ldi	r25, 0x00	; 0
 300:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 304:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
		OCR1B = 0xBF;
 308:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
 30c:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
		clear(PORTB, 1);
 310:	29 98       	cbi	0x05, 1	; 5
		set(PORTB, 2);
 312:	2a 9a       	sbi	0x05, 2	; 5
		set(PORTB, 3);
 314:	2b 9a       	sbi	0x05, 3	; 5
		clear(PORTB, 7);
 316:	2f 98       	cbi	0x05, 7	; 5
 318:	08 95       	ret

0000031a <m_usb_init>:
	phex(i);
}

void m_usb_tx_hexchar(unsigned char i)
{
	phex(i);
 31a:	81 e0       	ldi	r24, 0x01	; 1
 31c:	80 93 d7 00 	sts	0x00D7, r24	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
 320:	80 ea       	ldi	r24, 0xA0	; 160
 322:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
 326:	82 e1       	ldi	r24, 0x12	; 18
 328:	89 bd       	out	0x29, r24	; 41
 32a:	09 b4       	in	r0, 0x29	; 41
 32c:	00 fe       	sbrs	r0, 0
 32e:	fd cf       	rjmp	.-6      	; 0x32a <m_usb_init+0x10>
 330:	80 e9       	ldi	r24, 0x90	; 144
 332:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
 336:	10 92 e0 00 	sts	0x00E0, r1	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
 33a:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <usb_configuration>
 33e:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <__data_end>
 342:	8c e0       	ldi	r24, 0x0C	; 12
 344:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 348:	78 94       	sei
 34a:	08 95       	ret

0000034c <m_usb_tx_char>:
 34c:	cf 93       	push	r28
 34e:	df 93       	push	r29
 350:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <usb_configuration>
 354:	99 23       	and	r25, r25
 356:	09 f4       	brne	.+2      	; 0x35a <m_usb_tx_char+0xe>
 358:	4c c0       	rjmp	.+152    	; 0x3f2 <m_usb_tx_char+0xa6>
 35a:	9f b7       	in	r25, 0x3f	; 63
 35c:	f8 94       	cli
 35e:	24 e0       	ldi	r18, 0x04	; 4
 360:	20 93 e9 00 	sts	0x00E9, r18	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
 364:	20 91 09 01 	lds	r18, 0x0109	; 0x800109 <transmit_previous_timeout>
 368:	22 23       	and	r18, r18
 36a:	49 f0       	breq	.+18     	; 0x37e <m_usb_tx_char+0x32>
 36c:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 370:	25 fd       	sbrc	r18, 5
 372:	03 c0       	rjmp	.+6      	; 0x37a <m_usb_tx_char+0x2e>
 374:	9f bf       	out	0x3f, r25	; 63
 376:	8f ef       	ldi	r24, 0xFF	; 255
 378:	41 c0       	rjmp	.+130    	; 0x3fc <m_usb_tx_char+0xb0>
 37a:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <transmit_previous_timeout>
 37e:	30 91 e4 00 	lds	r19, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
 382:	37 5e       	subi	r19, 0xE7	; 231
 384:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 388:	25 fd       	sbrc	r18, 5
 38a:	24 c0       	rjmp	.+72     	; 0x3d4 <m_usb_tx_char+0x88>
 38c:	9f bf       	out	0x3f, r25	; 63
 38e:	90 91 e4 00 	lds	r25, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
 392:	93 17       	cp	r25, r19
 394:	81 f0       	breq	.+32     	; 0x3b6 <m_usb_tx_char+0x6a>
 396:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <usb_configuration>
 39a:	99 23       	and	r25, r25
 39c:	61 f1       	breq	.+88     	; 0x3f6 <m_usb_tx_char+0xaa>
 39e:	a9 ee       	ldi	r26, 0xE9	; 233
 3a0:	b0 e0       	ldi	r27, 0x00	; 0
 3a2:	44 e0       	ldi	r20, 0x04	; 4
 3a4:	e8 ee       	ldi	r30, 0xE8	; 232
 3a6:	f0 e0       	ldi	r31, 0x00	; 0
 3a8:	c4 ee       	ldi	r28, 0xE4	; 228
 3aa:	d0 e0       	ldi	r29, 0x00	; 0
 3ac:	0d c0       	rjmp	.+26     	; 0x3c8 <m_usb_tx_char+0x7c>
 3ae:	9f bf       	out	0x3f, r25	; 63
 3b0:	98 81       	ld	r25, Y
 3b2:	93 13       	cpse	r25, r19
 3b4:	05 c0       	rjmp	.+10     	; 0x3c0 <m_usb_tx_char+0x74>
 3b6:	81 e0       	ldi	r24, 0x01	; 1
 3b8:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <transmit_previous_timeout>
 3bc:	8f ef       	ldi	r24, 0xFF	; 255
 3be:	1e c0       	rjmp	.+60     	; 0x3fc <m_usb_tx_char+0xb0>
 3c0:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <usb_configuration>
 3c4:	99 23       	and	r25, r25
 3c6:	c9 f0       	breq	.+50     	; 0x3fa <m_usb_tx_char+0xae>
 3c8:	9f b7       	in	r25, 0x3f	; 63
 3ca:	f8 94       	cli
 3cc:	4c 93       	st	X, r20
 3ce:	20 81       	ld	r18, Z
 3d0:	25 ff       	sbrs	r18, 5
 3d2:	ed cf       	rjmp	.-38     	; 0x3ae <m_usb_tx_char+0x62>
 3d4:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
 3d8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 3dc:	85 fd       	sbrc	r24, 5
 3de:	03 c0       	rjmp	.+6      	; 0x3e6 <m_usb_tx_char+0x9a>
 3e0:	8a e3       	ldi	r24, 0x3A	; 58
 3e2:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 3e6:	85 e0       	ldi	r24, 0x05	; 5
 3e8:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <transmit_flush_timer>
 3ec:	9f bf       	out	0x3f, r25	; 63
 3ee:	80 e0       	ldi	r24, 0x00	; 0
 3f0:	05 c0       	rjmp	.+10     	; 0x3fc <m_usb_tx_char+0xb0>
 3f2:	8f ef       	ldi	r24, 0xFF	; 255
 3f4:	03 c0       	rjmp	.+6      	; 0x3fc <m_usb_tx_char+0xb0>
 3f6:	8f ef       	ldi	r24, 0xFF	; 255
 3f8:	01 c0       	rjmp	.+2      	; 0x3fc <m_usb_tx_char+0xb0>
 3fa:	8f ef       	ldi	r24, 0xFF	; 255
 3fc:	df 91       	pop	r29
 3fe:	cf 91       	pop	r28
 400:	08 95       	ret

00000402 <__vector_10>:
 402:	1f 92       	push	r1
 404:	0f 92       	push	r0
 406:	0f b6       	in	r0, 0x3f	; 63
 408:	0f 92       	push	r0
 40a:	11 24       	eor	r1, r1
 40c:	8f 93       	push	r24
 40e:	9f 93       	push	r25
 410:	ef 93       	push	r30
 412:	ff 93       	push	r31
 414:	e1 ee       	ldi	r30, 0xE1	; 225
 416:	f0 e0       	ldi	r31, 0x00	; 0
 418:	80 81       	ld	r24, Z
 41a:	10 82       	st	Z, r1
 41c:	83 ff       	sbrs	r24, 3
 41e:	11 c0       	rjmp	.+34     	; 0x442 <__vector_10+0x40>
 420:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
 424:	91 e0       	ldi	r25, 0x01	; 1
 426:	90 93 eb 00 	sts	0x00EB, r25	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 42a:	10 92 ec 00 	sts	0x00EC, r1	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
 42e:	92 e1       	ldi	r25, 0x12	; 18
 430:	90 93 ed 00 	sts	0x00ED, r25	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
 434:	98 e0       	ldi	r25, 0x08	; 8
 436:	90 93 f0 00 	sts	0x00F0, r25	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
 43a:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <usb_configuration>
 43e:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <__data_end>
 442:	82 ff       	sbrs	r24, 2
 444:	13 c0       	rjmp	.+38     	; 0x46c <__vector_10+0x6a>
 446:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <usb_configuration>
 44a:	88 23       	and	r24, r24
 44c:	79 f0       	breq	.+30     	; 0x46c <__vector_10+0x6a>
 44e:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <transmit_flush_timer>
 452:	88 23       	and	r24, r24
 454:	59 f0       	breq	.+22     	; 0x46c <__vector_10+0x6a>
 456:	81 50       	subi	r24, 0x01	; 1
 458:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <transmit_flush_timer>
 45c:	81 11       	cpse	r24, r1
 45e:	06 c0       	rjmp	.+12     	; 0x46c <__vector_10+0x6a>
 460:	84 e0       	ldi	r24, 0x04	; 4
 462:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
 466:	8a e3       	ldi	r24, 0x3A	; 58
 468:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 46c:	ff 91       	pop	r31
 46e:	ef 91       	pop	r30
 470:	9f 91       	pop	r25
 472:	8f 91       	pop	r24
 474:	0f 90       	pop	r0
 476:	0f be       	out	0x3f, r0	; 63
 478:	0f 90       	pop	r0
 47a:	1f 90       	pop	r1
 47c:	18 95       	reti

0000047e <__vector_11>:
 47e:	1f 92       	push	r1
 480:	0f 92       	push	r0
 482:	0f b6       	in	r0, 0x3f	; 63
 484:	0f 92       	push	r0
 486:	11 24       	eor	r1, r1
 488:	0f 93       	push	r16
 48a:	1f 93       	push	r17
 48c:	2f 93       	push	r18
 48e:	3f 93       	push	r19
 490:	4f 93       	push	r20
 492:	5f 93       	push	r21
 494:	6f 93       	push	r22
 496:	7f 93       	push	r23
 498:	8f 93       	push	r24
 49a:	9f 93       	push	r25
 49c:	af 93       	push	r26
 49e:	bf 93       	push	r27
 4a0:	cf 93       	push	r28
 4a2:	df 93       	push	r29
 4a4:	ef 93       	push	r30
 4a6:	ff 93       	push	r31
 4a8:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
 4ac:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 4b0:	83 ff       	sbrs	r24, 3
 4b2:	4c c1       	rjmp	.+664    	; 0x74c <__vector_11+0x2ce>
 4b4:	e1 ef       	ldi	r30, 0xF1	; 241
 4b6:	f0 e0       	ldi	r31, 0x00	; 0
 4b8:	60 81       	ld	r22, Z
 4ba:	80 81       	ld	r24, Z
 4bc:	20 81       	ld	r18, Z
 4be:	90 81       	ld	r25, Z
 4c0:	30 e0       	ldi	r19, 0x00	; 0
 4c2:	39 2b       	or	r19, r25
 4c4:	40 81       	ld	r20, Z
 4c6:	90 81       	ld	r25, Z
 4c8:	50 e0       	ldi	r21, 0x00	; 0
 4ca:	59 2b       	or	r21, r25
 4cc:	70 81       	ld	r23, Z
 4ce:	c0 81       	ld	r28, Z
 4d0:	92 ef       	ldi	r25, 0xF2	; 242
 4d2:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 4d6:	86 30       	cpi	r24, 0x06	; 6
 4d8:	09 f0       	breq	.+2      	; 0x4dc <__vector_11+0x5e>
 4da:	58 c0       	rjmp	.+176    	; 0x58c <__vector_11+0x10e>
 4dc:	04 c0       	rjmp	.+8      	; 0x4e6 <__vector_11+0x68>
 4de:	81 e2       	ldi	r24, 0x21	; 33
 4e0:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 4e4:	3a c1       	rjmp	.+628    	; 0x75a <__vector_11+0x2dc>
 4e6:	66 e0       	ldi	r22, 0x06	; 6
 4e8:	8c ea       	ldi	r24, 0xAC	; 172
 4ea:	90 e0       	ldi	r25, 0x00	; 0
 4ec:	fc 01       	movw	r30, r24
 4ee:	a5 91       	lpm	r26, Z+
 4f0:	b4 91       	lpm	r27, Z
 4f2:	2a 17       	cp	r18, r26
 4f4:	3b 07       	cpc	r19, r27
 4f6:	11 f0       	breq	.+4      	; 0x4fc <__vector_11+0x7e>
 4f8:	07 96       	adiw	r24, 0x07	; 7
 4fa:	23 c0       	rjmp	.+70     	; 0x542 <__vector_11+0xc4>
 4fc:	fc 01       	movw	r30, r24
 4fe:	32 96       	adiw	r30, 0x02	; 2
 500:	a5 91       	lpm	r26, Z+
 502:	b4 91       	lpm	r27, Z
 504:	4a 17       	cp	r20, r26
 506:	5b 07       	cpc	r21, r27
 508:	11 f0       	breq	.+4      	; 0x50e <__vector_11+0x90>
 50a:	07 96       	adiw	r24, 0x07	; 7
 50c:	1a c0       	rjmp	.+52     	; 0x542 <__vector_11+0xc4>
 50e:	fc 01       	movw	r30, r24
 510:	34 96       	adiw	r30, 0x04	; 4
 512:	45 91       	lpm	r20, Z+
 514:	54 91       	lpm	r21, Z
 516:	fc 01       	movw	r30, r24
 518:	36 96       	adiw	r30, 0x06	; 6
 51a:	24 91       	lpm	r18, Z
 51c:	87 2f       	mov	r24, r23
 51e:	90 e0       	ldi	r25, 0x00	; 0
 520:	9c 2b       	or	r25, r28
 522:	8f 3f       	cpi	r24, 0xFF	; 255
 524:	91 05       	cpc	r25, r1
 526:	19 f0       	breq	.+6      	; 0x52e <__vector_11+0xb0>
 528:	10 f0       	brcs	.+4      	; 0x52e <__vector_11+0xb0>
 52a:	8f ef       	ldi	r24, 0xFF	; 255
 52c:	90 e0       	ldi	r25, 0x00	; 0
 52e:	82 17       	cp	r24, r18
 530:	08 f4       	brcc	.+2      	; 0x534 <__vector_11+0xb6>
 532:	28 2f       	mov	r18, r24
 534:	a8 ee       	ldi	r26, 0xE8	; 232
 536:	b0 e0       	ldi	r27, 0x00	; 0
 538:	70 e1       	ldi	r23, 0x10	; 16
 53a:	6e ef       	ldi	r22, 0xFE	; 254
 53c:	c1 ef       	ldi	r28, 0xF1	; 241
 53e:	d0 e0       	ldi	r29, 0x00	; 0
 540:	03 c0       	rjmp	.+6      	; 0x548 <__vector_11+0xca>
 542:	61 50       	subi	r22, 0x01	; 1
 544:	99 f6       	brne	.-90     	; 0x4ec <__vector_11+0x6e>
 546:	cb cf       	rjmp	.-106    	; 0x4de <__vector_11+0x60>
 548:	8c 91       	ld	r24, X
 54a:	98 2f       	mov	r25, r24
 54c:	95 70       	andi	r25, 0x05	; 5
 54e:	e1 f3       	breq	.-8      	; 0x548 <__vector_11+0xca>
 550:	82 fd       	sbrc	r24, 2
 552:	03 c1       	rjmp	.+518    	; 0x75a <__vector_11+0x2dc>
 554:	32 2f       	mov	r19, r18
 556:	21 31       	cpi	r18, 0x11	; 17
 558:	08 f0       	brcs	.+2      	; 0x55c <__vector_11+0xde>
 55a:	37 2f       	mov	r19, r23
 55c:	33 23       	and	r19, r19
 55e:	09 f4       	brne	.+2      	; 0x562 <__vector_11+0xe4>
 560:	f9 c0       	rjmp	.+498    	; 0x754 <__vector_11+0x2d6>
 562:	fa 01       	movw	r30, r20
 564:	83 2f       	mov	r24, r19
 566:	94 91       	lpm	r25, Z
 568:	98 83       	st	Y, r25
 56a:	81 50       	subi	r24, 0x01	; 1
 56c:	31 96       	adiw	r30, 0x01	; 1
 56e:	81 11       	cpse	r24, r1
 570:	fa cf       	rjmp	.-12     	; 0x566 <__vector_11+0xe8>
 572:	8f ef       	ldi	r24, 0xFF	; 255
 574:	83 0f       	add	r24, r19
 576:	90 e0       	ldi	r25, 0x00	; 0
 578:	01 96       	adiw	r24, 0x01	; 1
 57a:	48 0f       	add	r20, r24
 57c:	59 1f       	adc	r21, r25
 57e:	23 1b       	sub	r18, r19
 580:	6c 93       	st	X, r22
 582:	21 11       	cpse	r18, r1
 584:	e1 cf       	rjmp	.-62     	; 0x548 <__vector_11+0xca>
 586:	30 31       	cpi	r19, 0x10	; 16
 588:	f9 f2       	breq	.-66     	; 0x548 <__vector_11+0xca>
 58a:	e7 c0       	rjmp	.+462    	; 0x75a <__vector_11+0x2dc>
 58c:	85 30       	cpi	r24, 0x05	; 5
 58e:	61 f4       	brne	.+24     	; 0x5a8 <__vector_11+0x12a>
 590:	8e ef       	ldi	r24, 0xFE	; 254
 592:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 596:	e8 ee       	ldi	r30, 0xE8	; 232
 598:	f0 e0       	ldi	r31, 0x00	; 0
 59a:	80 81       	ld	r24, Z
 59c:	80 ff       	sbrs	r24, 0
 59e:	fd cf       	rjmp	.-6      	; 0x59a <__vector_11+0x11c>
 5a0:	20 68       	ori	r18, 0x80	; 128
 5a2:	20 93 e3 00 	sts	0x00E3, r18	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
 5a6:	d9 c0       	rjmp	.+434    	; 0x75a <__vector_11+0x2dc>
 5a8:	89 30       	cpi	r24, 0x09	; 9
 5aa:	09 f0       	breq	.+2      	; 0x5ae <__vector_11+0x130>
 5ac:	35 c0       	rjmp	.+106    	; 0x618 <__vector_11+0x19a>
 5ae:	61 11       	cpse	r22, r1
 5b0:	cd c0       	rjmp	.+410    	; 0x74c <__vector_11+0x2ce>
 5b2:	20 93 0b 01 	sts	0x010B, r18	; 0x80010b <usb_configuration>
 5b6:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <__data_end>
 5ba:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <transmit_flush_timer>
 5be:	8e ef       	ldi	r24, 0xFE	; 254
 5c0:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 5c4:	81 e0       	ldi	r24, 0x01	; 1
 5c6:	25 e5       	ldi	r18, 0x55	; 85
 5c8:	31 e0       	ldi	r19, 0x01	; 1
 5ca:	c9 ee       	ldi	r28, 0xE9	; 233
 5cc:	d0 e0       	ldi	r29, 0x00	; 0
 5ce:	ab ee       	ldi	r26, 0xEB	; 235
 5d0:	b0 e0       	ldi	r27, 0x00	; 0
 5d2:	0c ee       	ldi	r16, 0xEC	; 236
 5d4:	10 e0       	ldi	r17, 0x00	; 0
 5d6:	6d ee       	ldi	r22, 0xED	; 237
 5d8:	70 e0       	ldi	r23, 0x00	; 0
 5da:	88 83       	st	Y, r24
 5dc:	a9 01       	movw	r20, r18
 5de:	4f 5f       	subi	r20, 0xFF	; 255
 5e0:	5f 4f       	sbci	r21, 0xFF	; 255
 5e2:	f9 01       	movw	r30, r18
 5e4:	94 91       	lpm	r25, Z
 5e6:	9c 93       	st	X, r25
 5e8:	99 23       	and	r25, r25
 5ea:	61 f0       	breq	.+24     	; 0x604 <__vector_11+0x186>
 5ec:	fa 01       	movw	r30, r20
 5ee:	44 91       	lpm	r20, Z
 5f0:	f8 01       	movw	r30, r16
 5f2:	40 83       	st	Z, r20
 5f4:	f9 01       	movw	r30, r18
 5f6:	32 96       	adiw	r30, 0x02	; 2
 5f8:	94 91       	lpm	r25, Z
 5fa:	2d 5f       	subi	r18, 0xFD	; 253
 5fc:	3f 4f       	sbci	r19, 0xFF	; 255
 5fe:	fb 01       	movw	r30, r22
 600:	90 83       	st	Z, r25
 602:	01 c0       	rjmp	.+2      	; 0x606 <__vector_11+0x188>
 604:	9a 01       	movw	r18, r20
 606:	8f 5f       	subi	r24, 0xFF	; 255
 608:	85 30       	cpi	r24, 0x05	; 5
 60a:	39 f7       	brne	.-50     	; 0x5da <__vector_11+0x15c>
 60c:	ea ee       	ldi	r30, 0xEA	; 234
 60e:	f0 e0       	ldi	r31, 0x00	; 0
 610:	8e e1       	ldi	r24, 0x1E	; 30
 612:	80 83       	st	Z, r24
 614:	10 82       	st	Z, r1
 616:	a1 c0       	rjmp	.+322    	; 0x75a <__vector_11+0x2dc>
 618:	88 30       	cpi	r24, 0x08	; 8
 61a:	81 f4       	brne	.+32     	; 0x63c <__vector_11+0x1be>
 61c:	60 38       	cpi	r22, 0x80	; 128
 61e:	09 f0       	breq	.+2      	; 0x622 <__vector_11+0x1a4>
 620:	95 c0       	rjmp	.+298    	; 0x74c <__vector_11+0x2ce>
 622:	e8 ee       	ldi	r30, 0xE8	; 232
 624:	f0 e0       	ldi	r31, 0x00	; 0
 626:	80 81       	ld	r24, Z
 628:	80 ff       	sbrs	r24, 0
 62a:	fd cf       	rjmp	.-6      	; 0x626 <__vector_11+0x1a8>
 62c:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <usb_configuration>
 630:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
 634:	8e ef       	ldi	r24, 0xFE	; 254
 636:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 63a:	8f c0       	rjmp	.+286    	; 0x75a <__vector_11+0x2dc>
 63c:	81 32       	cpi	r24, 0x21	; 33
 63e:	b9 f4       	brne	.+46     	; 0x66e <__vector_11+0x1f0>
 640:	61 3a       	cpi	r22, 0xA1	; 161
 642:	09 f0       	breq	.+2      	; 0x646 <__vector_11+0x1c8>
 644:	83 c0       	rjmp	.+262    	; 0x74c <__vector_11+0x2ce>
 646:	e8 ee       	ldi	r30, 0xE8	; 232
 648:	f0 e0       	ldi	r31, 0x00	; 0
 64a:	80 81       	ld	r24, Z
 64c:	80 ff       	sbrs	r24, 0
 64e:	fd cf       	rjmp	.-6      	; 0x64a <__vector_11+0x1cc>
 650:	e0 e0       	ldi	r30, 0x00	; 0
 652:	f1 e0       	ldi	r31, 0x01	; 1
 654:	27 e0       	ldi	r18, 0x07	; 7
 656:	31 e0       	ldi	r19, 0x01	; 1
 658:	a1 ef       	ldi	r26, 0xF1	; 241
 65a:	b0 e0       	ldi	r27, 0x00	; 0
 65c:	81 91       	ld	r24, Z+
 65e:	8c 93       	st	X, r24
 660:	e2 17       	cp	r30, r18
 662:	f3 07       	cpc	r31, r19
 664:	d9 f7       	brne	.-10     	; 0x65c <__vector_11+0x1de>
 666:	8e ef       	ldi	r24, 0xFE	; 254
 668:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 66c:	76 c0       	rjmp	.+236    	; 0x75a <__vector_11+0x2dc>
 66e:	80 32       	cpi	r24, 0x20	; 32
 670:	d1 f4       	brne	.+52     	; 0x6a6 <__vector_11+0x228>
 672:	61 32       	cpi	r22, 0x21	; 33
 674:	09 f0       	breq	.+2      	; 0x678 <__vector_11+0x1fa>
 676:	6a c0       	rjmp	.+212    	; 0x74c <__vector_11+0x2ce>
 678:	e8 ee       	ldi	r30, 0xE8	; 232
 67a:	f0 e0       	ldi	r31, 0x00	; 0
 67c:	80 81       	ld	r24, Z
 67e:	82 ff       	sbrs	r24, 2
 680:	fd cf       	rjmp	.-6      	; 0x67c <__vector_11+0x1fe>
 682:	e0 e0       	ldi	r30, 0x00	; 0
 684:	f1 e0       	ldi	r31, 0x01	; 1
 686:	27 e0       	ldi	r18, 0x07	; 7
 688:	31 e0       	ldi	r19, 0x01	; 1
 68a:	a1 ef       	ldi	r26, 0xF1	; 241
 68c:	b0 e0       	ldi	r27, 0x00	; 0
 68e:	8c 91       	ld	r24, X
 690:	81 93       	st	Z+, r24
 692:	e2 17       	cp	r30, r18
 694:	f3 07       	cpc	r31, r19
 696:	d9 f7       	brne	.-10     	; 0x68e <__vector_11+0x210>
 698:	e8 ee       	ldi	r30, 0xE8	; 232
 69a:	f0 e0       	ldi	r31, 0x00	; 0
 69c:	8b ef       	ldi	r24, 0xFB	; 251
 69e:	80 83       	st	Z, r24
 6a0:	8e ef       	ldi	r24, 0xFE	; 254
 6a2:	80 83       	st	Z, r24
 6a4:	5a c0       	rjmp	.+180    	; 0x75a <__vector_11+0x2dc>
 6a6:	82 32       	cpi	r24, 0x22	; 34
 6a8:	71 f4       	brne	.+28     	; 0x6c6 <__vector_11+0x248>
 6aa:	61 32       	cpi	r22, 0x21	; 33
 6ac:	09 f0       	breq	.+2      	; 0x6b0 <__vector_11+0x232>
 6ae:	4e c0       	rjmp	.+156    	; 0x74c <__vector_11+0x2ce>
 6b0:	20 93 08 01 	sts	0x0108, r18	; 0x800108 <__data_end>
 6b4:	e8 ee       	ldi	r30, 0xE8	; 232
 6b6:	f0 e0       	ldi	r31, 0x00	; 0
 6b8:	80 81       	ld	r24, Z
 6ba:	80 ff       	sbrs	r24, 0
 6bc:	fd cf       	rjmp	.-6      	; 0x6b8 <__vector_11+0x23a>
 6be:	8e ef       	ldi	r24, 0xFE	; 254
 6c0:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 6c4:	4a c0       	rjmp	.+148    	; 0x75a <__vector_11+0x2dc>
 6c6:	81 11       	cpse	r24, r1
 6c8:	1a c0       	rjmp	.+52     	; 0x6fe <__vector_11+0x280>
 6ca:	e8 ee       	ldi	r30, 0xE8	; 232
 6cc:	f0 e0       	ldi	r31, 0x00	; 0
 6ce:	80 81       	ld	r24, Z
 6d0:	80 ff       	sbrs	r24, 0
 6d2:	fd cf       	rjmp	.-6      	; 0x6ce <__vector_11+0x250>
 6d4:	62 38       	cpi	r22, 0x82	; 130
 6d6:	51 f4       	brne	.+20     	; 0x6ec <__vector_11+0x26e>
 6d8:	e9 ee       	ldi	r30, 0xE9	; 233
 6da:	f0 e0       	ldi	r31, 0x00	; 0
 6dc:	40 83       	st	Z, r20
 6de:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 6e2:	85 fb       	bst	r24, 5
 6e4:	88 27       	eor	r24, r24
 6e6:	80 f9       	bld	r24, 0
 6e8:	10 82       	st	Z, r1
 6ea:	01 c0       	rjmp	.+2      	; 0x6ee <__vector_11+0x270>
 6ec:	80 e0       	ldi	r24, 0x00	; 0
 6ee:	e1 ef       	ldi	r30, 0xF1	; 241
 6f0:	f0 e0       	ldi	r31, 0x00	; 0
 6f2:	80 83       	st	Z, r24
 6f4:	10 82       	st	Z, r1
 6f6:	8e ef       	ldi	r24, 0xFE	; 254
 6f8:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 6fc:	2e c0       	rjmp	.+92     	; 0x75a <__vector_11+0x2dc>
 6fe:	98 2f       	mov	r25, r24
 700:	9d 7f       	andi	r25, 0xFD	; 253
 702:	91 30       	cpi	r25, 0x01	; 1
 704:	19 f5       	brne	.+70     	; 0x74c <__vector_11+0x2ce>
 706:	62 30       	cpi	r22, 0x02	; 2
 708:	09 f5       	brne	.+66     	; 0x74c <__vector_11+0x2ce>
 70a:	23 2b       	or	r18, r19
 70c:	f9 f4       	brne	.+62     	; 0x74c <__vector_11+0x2ce>
 70e:	4f 77       	andi	r20, 0x7F	; 127
 710:	9f ef       	ldi	r25, 0xFF	; 255
 712:	94 0f       	add	r25, r20
 714:	94 30       	cpi	r25, 0x04	; 4
 716:	d0 f4       	brcc	.+52     	; 0x74c <__vector_11+0x2ce>
 718:	9e ef       	ldi	r25, 0xFE	; 254
 71a:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 71e:	40 93 e9 00 	sts	0x00E9, r20	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
 722:	83 30       	cpi	r24, 0x03	; 3
 724:	21 f4       	brne	.+8      	; 0x72e <__vector_11+0x2b0>
 726:	81 e2       	ldi	r24, 0x21	; 33
 728:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 72c:	16 c0       	rjmp	.+44     	; 0x75a <__vector_11+0x2dc>
 72e:	89 e1       	ldi	r24, 0x19	; 25
 730:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 734:	81 e0       	ldi	r24, 0x01	; 1
 736:	90 e0       	ldi	r25, 0x00	; 0
 738:	02 c0       	rjmp	.+4      	; 0x73e <__vector_11+0x2c0>
 73a:	88 0f       	add	r24, r24
 73c:	99 1f       	adc	r25, r25
 73e:	4a 95       	dec	r20
 740:	e2 f7       	brpl	.-8      	; 0x73a <__vector_11+0x2bc>
 742:	ea ee       	ldi	r30, 0xEA	; 234
 744:	f0 e0       	ldi	r31, 0x00	; 0
 746:	80 83       	st	Z, r24
 748:	10 82       	st	Z, r1
 74a:	07 c0       	rjmp	.+14     	; 0x75a <__vector_11+0x2dc>
 74c:	81 e2       	ldi	r24, 0x21	; 33
 74e:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 752:	03 c0       	rjmp	.+6      	; 0x75a <__vector_11+0x2dc>
 754:	6c 93       	st	X, r22
 756:	21 11       	cpse	r18, r1
 758:	f7 ce       	rjmp	.-530    	; 0x548 <__vector_11+0xca>
 75a:	ff 91       	pop	r31
 75c:	ef 91       	pop	r30
 75e:	df 91       	pop	r29
 760:	cf 91       	pop	r28
 762:	bf 91       	pop	r27
 764:	af 91       	pop	r26
 766:	9f 91       	pop	r25
 768:	8f 91       	pop	r24
 76a:	7f 91       	pop	r23
 76c:	6f 91       	pop	r22
 76e:	5f 91       	pop	r21
 770:	4f 91       	pop	r20
 772:	3f 91       	pop	r19
 774:	2f 91       	pop	r18
 776:	1f 91       	pop	r17
 778:	0f 91       	pop	r16
 77a:	0f 90       	pop	r0
 77c:	0f be       	out	0x3f, r0	; 63
 77e:	0f 90       	pop	r0
 780:	1f 90       	pop	r1
 782:	18 95       	reti

00000784 <print_P>:
 784:	0f 93       	push	r16
 786:	1f 93       	push	r17
 788:	cf 93       	push	r28
 78a:	8c 01       	movw	r16, r24
 78c:	0f 5f       	subi	r16, 0xFF	; 255
 78e:	1f 4f       	sbci	r17, 0xFF	; 255
 790:	fc 01       	movw	r30, r24
 792:	c4 91       	lpm	r28, Z
 794:	cc 23       	and	r28, r28
 796:	71 f0       	breq	.+28     	; 0x7b4 <print_P+0x30>
 798:	ca 30       	cpi	r28, 0x0A	; 10
 79a:	19 f4       	brne	.+6      	; 0x7a2 <print_P+0x1e>
 79c:	8d e0       	ldi	r24, 0x0D	; 13
 79e:	0e 94 a6 01 	call	0x34c	; 0x34c <m_usb_tx_char>
 7a2:	8c 2f       	mov	r24, r28
 7a4:	0e 94 a6 01 	call	0x34c	; 0x34c <m_usb_tx_char>
 7a8:	f8 01       	movw	r30, r16
 7aa:	c4 91       	lpm	r28, Z
 7ac:	0f 5f       	subi	r16, 0xFF	; 255
 7ae:	1f 4f       	sbci	r17, 0xFF	; 255
 7b0:	c1 11       	cpse	r28, r1
 7b2:	f2 cf       	rjmp	.-28     	; 0x798 <print_P+0x14>
 7b4:	cf 91       	pop	r28
 7b6:	1f 91       	pop	r17
 7b8:	0f 91       	pop	r16
 7ba:	08 95       	ret

000007bc <m_usb_tx_int>:
}

void m_usb_tx_int(int i)
{
 7bc:	ef 92       	push	r14
 7be:	ff 92       	push	r15
 7c0:	0f 93       	push	r16
 7c2:	1f 93       	push	r17
 7c4:	cf 93       	push	r28
 7c6:	df 93       	push	r29
 7c8:	cd b7       	in	r28, 0x3d	; 61
 7ca:	de b7       	in	r29, 0x3e	; 62
 7cc:	27 97       	sbiw	r28, 0x07	; 7
 7ce:	0f b6       	in	r0, 0x3f	; 63
 7d0:	f8 94       	cli
 7d2:	de bf       	out	0x3e, r29	; 62
 7d4:	0f be       	out	0x3f, r0	; 63
 7d6:	cd bf       	out	0x3d, r28	; 61
	char string[7] = {0,0,0,0,0,0,0};
 7d8:	8e 01       	movw	r16, r28
 7da:	0f 5f       	subi	r16, 0xFF	; 255
 7dc:	1f 4f       	sbci	r17, 0xFF	; 255
 7de:	27 e0       	ldi	r18, 0x07	; 7
 7e0:	f8 01       	movw	r30, r16
 7e2:	11 92       	st	Z+, r1
 7e4:	2a 95       	dec	r18
 7e6:	e9 f7       	brne	.-6      	; 0x7e2 <m_usb_tx_int+0x26>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 7e8:	4a e0       	ldi	r20, 0x0A	; 10
 7ea:	b8 01       	movw	r22, r16
 7ec:	0e 94 af 05 	call	0xb5e	; 0xb5e <__itoa_ncheck>
 7f0:	7e 01       	movw	r14, r28
 7f2:	f8 e0       	ldi	r31, 0x08	; 8
 7f4:	ef 0e       	add	r14, r31
 7f6:	f1 1c       	adc	r15, r1
	itoa(i,string,10);
	for(i=0;i<7;i++){
        if(string[i]){
 7f8:	f8 01       	movw	r30, r16
 7fa:	81 91       	ld	r24, Z+
 7fc:	8f 01       	movw	r16, r30
 7fe:	81 11       	cpse	r24, r1
            m_usb_tx_char(string[i]);
 800:	0e 94 a6 01 	call	0x34c	; 0x34c <m_usb_tx_char>

void m_usb_tx_int(int i)
{
	char string[7] = {0,0,0,0,0,0,0};
	itoa(i,string,10);
	for(i=0;i<7;i++){
 804:	0e 15       	cp	r16, r14
 806:	1f 05       	cpc	r17, r15
 808:	b9 f7       	brne	.-18     	; 0x7f8 <m_usb_tx_int+0x3c>
        if(string[i]){
            m_usb_tx_char(string[i]);
        }
	}
}
 80a:	27 96       	adiw	r28, 0x07	; 7
 80c:	0f b6       	in	r0, 0x3f	; 63
 80e:	f8 94       	cli
 810:	de bf       	out	0x3e, r29	; 62
 812:	0f be       	out	0x3f, r0	; 63
 814:	cd bf       	out	0x3d, r28	; 61
 816:	df 91       	pop	r29
 818:	cf 91       	pop	r28
 81a:	1f 91       	pop	r17
 81c:	0f 91       	pop	r16
 81e:	ff 90       	pop	r15
 820:	ef 90       	pop	r14
 822:	08 95       	ret

00000824 <readPhototransistors>:

// Defines the maximum ADC difference allowed between the front two while still being considered "forwards"
#define DIFFERENCE_LIM 50

// Read in ADC values from pins F0, F1, F4, F5 & F6
void readPhototransistors(int input[]) {
 824:	cf 93       	push	r28
 826:	df 93       	push	r29
 828:	ac 01       	movw	r20, r24
	
	////// Analog to Digital Input Conversion //////
	// Set reference voltage to VCC
	clear(ADMUX, REFS1);
 82a:	cc e7       	ldi	r28, 0x7C	; 124
 82c:	d0 e0       	ldi	r29, 0x00	; 0
 82e:	88 81       	ld	r24, Y
 830:	8f 77       	andi	r24, 0x7F	; 127
 832:	88 83       	st	Y, r24
	set(ADMUX, REFS0);
 834:	88 81       	ld	r24, Y
 836:	80 64       	ori	r24, 0x40	; 64
 838:	88 83       	st	Y, r24
	// Prescale clock
	set(ADCSRA, ADPS2);
 83a:	ea e7       	ldi	r30, 0x7A	; 122
 83c:	f0 e0       	ldi	r31, 0x00	; 0
 83e:	80 81       	ld	r24, Z
 840:	84 60       	ori	r24, 0x04	; 4
 842:	80 83       	st	Z, r24
	clear(ADCSRA, ADPS1);
 844:	80 81       	ld	r24, Z
 846:	8d 7f       	andi	r24, 0xFD	; 253
 848:	80 83       	st	Z, r24
	set(ADCSRA, ADPS0);
 84a:	80 81       	ld	r24, Z
 84c:	81 60       	ori	r24, 0x01	; 1
 84e:	80 83       	st	Z, r24
	// Disable digital input
	set(DIDR0, ADC0D); // F0
 850:	8e e7       	ldi	r24, 0x7E	; 126
 852:	90 e0       	ldi	r25, 0x00	; 0
 854:	dc 01       	movw	r26, r24
 856:	2c 91       	ld	r18, X
 858:	21 60       	ori	r18, 0x01	; 1
 85a:	2c 93       	st	X, r18
	set(DIDR0, ADC1D); // F1
 85c:	2c 91       	ld	r18, X
 85e:	22 60       	ori	r18, 0x02	; 2
 860:	2c 93       	st	X, r18
	set(DIDR0, ADC4D); // F4
 862:	2c 91       	ld	r18, X
 864:	20 61       	ori	r18, 0x10	; 16
 866:	2c 93       	st	X, r18
	set(DIDR0, ADC5D); // F5
 868:	2c 91       	ld	r18, X
 86a:	20 62       	ori	r18, 0x20	; 32
 86c:	2c 93       	st	X, r18
	set(DIDR0, ADC6D); // F6
 86e:	2c 91       	ld	r18, X
 870:	20 64       	ori	r18, 0x40	; 64
 872:	2c 93       	st	X, r18

	// ADC to free-running
	set(ADCSRA, ADATE);
 874:	80 81       	ld	r24, Z
 876:	80 62       	ori	r24, 0x20	; 32
 878:	80 83       	st	Z, r24
	// Set MUX -> input is F0
	clear(ADCSRA, ADEN);
 87a:	80 81       	ld	r24, Z
 87c:	8f 77       	andi	r24, 0x7F	; 127
 87e:	80 83       	st	Z, r24
	clear(ADCSRB, MUX5);
 880:	2b e7       	ldi	r18, 0x7B	; 123
 882:	30 e0       	ldi	r19, 0x00	; 0
 884:	d9 01       	movw	r26, r18
 886:	8c 91       	ld	r24, X
 888:	8f 7d       	andi	r24, 0xDF	; 223
 88a:	8c 93       	st	X, r24
	clear(ADMUX, MUX2);
 88c:	88 81       	ld	r24, Y
 88e:	8b 7f       	andi	r24, 0xFB	; 251
 890:	88 83       	st	Y, r24
	clear(ADMUX, MUX1);
 892:	88 81       	ld	r24, Y
 894:	8d 7f       	andi	r24, 0xFD	; 253
 896:	88 83       	st	Y, r24
	clear(ADMUX, MUX0);
 898:	88 81       	ld	r24, Y
 89a:	8e 7f       	andi	r24, 0xFE	; 254
 89c:	88 83       	st	Y, r24
	// Start conversion process
	set(ADCSRA, ADEN);
 89e:	80 81       	ld	r24, Z
 8a0:	80 68       	ori	r24, 0x80	; 128
 8a2:	80 83       	st	Z, r24
	set(ADCSRA, ADSC);
 8a4:	80 81       	ld	r24, Z
 8a6:	80 64       	ori	r24, 0x40	; 64
 8a8:	80 83       	st	Z, r24
	// Wait until value is read
	while (!check(ADCSRA, ADIF)) {}
 8aa:	90 81       	ld	r25, Z
 8ac:	94 ff       	sbrs	r25, 4
 8ae:	fd cf       	rjmp	.-6      	; 0x8aa <readPhototransistors+0x86>
	// Read value
	input[0] =  ADC;
 8b0:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 8b4:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 8b8:	fa 01       	movw	r30, r20
 8ba:	91 83       	std	Z+1, r25	; 0x01
 8bc:	80 83       	st	Z, r24
	// Reset flag
	clear(ADCSRA, ADIF);
 8be:	ea e7       	ldi	r30, 0x7A	; 122
 8c0:	f0 e0       	ldi	r31, 0x00	; 0
 8c2:	80 81       	ld	r24, Z
 8c4:	8f 7e       	andi	r24, 0xEF	; 239
 8c6:	80 83       	st	Z, r24
 8c8:	89 ef       	ldi	r24, 0xF9	; 249
 8ca:	90 e0       	ldi	r25, 0x00	; 0
 8cc:	01 97       	sbiw	r24, 0x01	; 1
 8ce:	f1 f7       	brne	.-4      	; 0x8cc <readPhototransistors+0xa8>
 8d0:	00 c0       	rjmp	.+0      	; 0x8d2 <readPhototransistors+0xae>
 8d2:	00 00       	nop
	m_wait(1);

	// Set MUX -> input is F1
	clear(ADCSRA, ADEN);
 8d4:	80 81       	ld	r24, Z
 8d6:	8f 77       	andi	r24, 0x7F	; 127
 8d8:	80 83       	st	Z, r24
	set(ADMUX, MUX0);
 8da:	cc e7       	ldi	r28, 0x7C	; 124
 8dc:	d0 e0       	ldi	r29, 0x00	; 0
 8de:	88 81       	ld	r24, Y
 8e0:	81 60       	ori	r24, 0x01	; 1
 8e2:	88 83       	st	Y, r24
	set(ADCSRA, ADEN);
 8e4:	80 81       	ld	r24, Z
 8e6:	80 68       	ori	r24, 0x80	; 128
 8e8:	80 83       	st	Z, r24
	set(ADCSRA, ADSC);
 8ea:	80 81       	ld	r24, Z
 8ec:	80 64       	ori	r24, 0x40	; 64
 8ee:	80 83       	st	Z, r24
	while (!check(ADCSRA, ADIF)) {}
 8f0:	90 81       	ld	r25, Z
 8f2:	94 ff       	sbrs	r25, 4
 8f4:	fd cf       	rjmp	.-6      	; 0x8f0 <readPhototransistors+0xcc>
	input[1] =  ADC;
 8f6:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 8fa:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 8fe:	da 01       	movw	r26, r20
 900:	13 96       	adiw	r26, 0x03	; 3
 902:	9c 93       	st	X, r25
 904:	8e 93       	st	-X, r24
 906:	12 97       	sbiw	r26, 0x02	; 2
	clear(ADCSRA, ADIF);
 908:	ea e7       	ldi	r30, 0x7A	; 122
 90a:	f0 e0       	ldi	r31, 0x00	; 0
 90c:	80 81       	ld	r24, Z
 90e:	8f 7e       	andi	r24, 0xEF	; 239
 910:	80 83       	st	Z, r24

	// Set MUX -> input is F4
	clear(ADCSRA, ADEN);
 912:	80 81       	ld	r24, Z
 914:	8f 77       	andi	r24, 0x7F	; 127
 916:	80 83       	st	Z, r24
	set(ADMUX, MUX2);
 918:	cc e7       	ldi	r28, 0x7C	; 124
 91a:	d0 e0       	ldi	r29, 0x00	; 0
 91c:	88 81       	ld	r24, Y
 91e:	84 60       	ori	r24, 0x04	; 4
 920:	88 83       	st	Y, r24
	clear(ADMUX, MUX0);
 922:	88 81       	ld	r24, Y
 924:	8e 7f       	andi	r24, 0xFE	; 254
 926:	88 83       	st	Y, r24
	set(ADCSRA, ADEN);
 928:	80 81       	ld	r24, Z
 92a:	80 68       	ori	r24, 0x80	; 128
 92c:	80 83       	st	Z, r24
	set(ADCSRA, ADSC);
 92e:	80 81       	ld	r24, Z
 930:	80 64       	ori	r24, 0x40	; 64
 932:	80 83       	st	Z, r24
	while (!check(ADCSRA, ADIF)) {}
 934:	90 81       	ld	r25, Z
 936:	94 ff       	sbrs	r25, 4
 938:	fd cf       	rjmp	.-6      	; 0x934 <readPhototransistors+0x110>
	input[2] =  ADC;
 93a:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 93e:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 942:	fa 01       	movw	r30, r20
 944:	95 83       	std	Z+5, r25	; 0x05
 946:	84 83       	std	Z+4, r24	; 0x04
	clear(ADCSRA, ADIF);
 948:	ea e7       	ldi	r30, 0x7A	; 122
 94a:	f0 e0       	ldi	r31, 0x00	; 0
 94c:	80 81       	ld	r24, Z
 94e:	8f 7e       	andi	r24, 0xEF	; 239
 950:	80 83       	st	Z, r24
 952:	89 ef       	ldi	r24, 0xF9	; 249
 954:	90 e0       	ldi	r25, 0x00	; 0
 956:	01 97       	sbiw	r24, 0x01	; 1
 958:	f1 f7       	brne	.-4      	; 0x956 <readPhototransistors+0x132>
 95a:	00 c0       	rjmp	.+0      	; 0x95c <readPhototransistors+0x138>
 95c:	00 00       	nop
	m_wait(1);

	// Set MUX -> input is F5
	clear(ADCSRA, ADEN);
 95e:	80 81       	ld	r24, Z
 960:	8f 77       	andi	r24, 0x7F	; 127
 962:	80 83       	st	Z, r24
	set(ADCSRB, MUX0);
 964:	cb e7       	ldi	r28, 0x7B	; 123
 966:	d0 e0       	ldi	r29, 0x00	; 0
 968:	88 81       	ld	r24, Y
 96a:	81 60       	ori	r24, 0x01	; 1
 96c:	88 83       	st	Y, r24
	set(ADCSRA, ADEN);
 96e:	80 81       	ld	r24, Z
 970:	80 68       	ori	r24, 0x80	; 128
 972:	80 83       	st	Z, r24
	set(ADCSRA, ADSC);
 974:	80 81       	ld	r24, Z
 976:	80 64       	ori	r24, 0x40	; 64
 978:	80 83       	st	Z, r24
	while (!check(ADCSRA, ADIF)) {}
 97a:	90 81       	ld	r25, Z
 97c:	94 ff       	sbrs	r25, 4
 97e:	fd cf       	rjmp	.-6      	; 0x97a <readPhototransistors+0x156>
	input[3] =  ADC;
 980:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 984:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 988:	da 01       	movw	r26, r20
 98a:	17 96       	adiw	r26, 0x07	; 7
 98c:	9c 93       	st	X, r25
 98e:	8e 93       	st	-X, r24
 990:	16 97       	sbiw	r26, 0x06	; 6
	clear(ADCSRA, ADIF);
 992:	ea e7       	ldi	r30, 0x7A	; 122
 994:	f0 e0       	ldi	r31, 0x00	; 0
 996:	80 81       	ld	r24, Z
 998:	8f 7e       	andi	r24, 0xEF	; 239
 99a:	80 83       	st	Z, r24
 99c:	89 ef       	ldi	r24, 0xF9	; 249
 99e:	90 e0       	ldi	r25, 0x00	; 0
 9a0:	01 97       	sbiw	r24, 0x01	; 1
 9a2:	f1 f7       	brne	.-4      	; 0x9a0 <readPhototransistors+0x17c>
 9a4:	00 c0       	rjmp	.+0      	; 0x9a6 <readPhototransistors+0x182>
 9a6:	00 00       	nop
	m_wait(1);

	// Set MUX -> input is F6
	clear(ADCSRA, ADEN);
 9a8:	80 81       	ld	r24, Z
 9aa:	8f 77       	andi	r24, 0x7F	; 127
 9ac:	80 83       	st	Z, r24
	set(ADMUX, MUX1);
 9ae:	cc e7       	ldi	r28, 0x7C	; 124
 9b0:	d0 e0       	ldi	r29, 0x00	; 0
 9b2:	88 81       	ld	r24, Y
 9b4:	82 60       	ori	r24, 0x02	; 2
 9b6:	88 83       	st	Y, r24
	clear(ADMUX, MUX0);
 9b8:	88 81       	ld	r24, Y
 9ba:	8e 7f       	andi	r24, 0xFE	; 254
 9bc:	88 83       	st	Y, r24
	set(ADCSRA, ADEN);
 9be:	80 81       	ld	r24, Z
 9c0:	80 68       	ori	r24, 0x80	; 128
 9c2:	80 83       	st	Z, r24
	set(ADCSRA, ADSC);
 9c4:	80 81       	ld	r24, Z
 9c6:	80 64       	ori	r24, 0x40	; 64
 9c8:	80 83       	st	Z, r24
	while (!check(ADCSRA, ADIF)) {}
 9ca:	90 81       	ld	r25, Z
 9cc:	94 ff       	sbrs	r25, 4
 9ce:	fd cf       	rjmp	.-6      	; 0x9ca <readPhototransistors+0x1a6>
	input[4] =  ADC;
 9d0:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 9d4:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 9d8:	da 01       	movw	r26, r20
 9da:	19 96       	adiw	r26, 0x09	; 9
 9dc:	9c 93       	st	X, r25
 9de:	8e 93       	st	-X, r24
 9e0:	18 97       	sbiw	r26, 0x08	; 8
	clear(ADCSRA, ADIF);
 9e2:	ea e7       	ldi	r30, 0x7A	; 122
 9e4:	f0 e0       	ldi	r31, 0x00	; 0
 9e6:	80 81       	ld	r24, Z
 9e8:	8f 7e       	andi	r24, 0xEF	; 239
 9ea:	80 83       	st	Z, r24
 9ec:	e9 ef       	ldi	r30, 0xF9	; 249
 9ee:	f0 e0       	ldi	r31, 0x00	; 0
 9f0:	31 97       	sbiw	r30, 0x01	; 1
 9f2:	f1 f7       	brne	.-4      	; 0x9f0 <readPhototransistors+0x1cc>
 9f4:	00 c0       	rjmp	.+0      	; 0x9f6 <readPhototransistors+0x1d2>
 9f6:	00 00       	nop
	m_wait(1);

}
 9f8:	df 91       	pop	r29
 9fa:	cf 91       	pop	r28
 9fc:	08 95       	ret

000009fe <isInFront>:

// Returns the direction of the puck (-1, 0, 1)
int isInFront(int input[]) {
 9fe:	cf 93       	push	r28
 a00:	df 93       	push	r29
 a02:	dc 01       	movw	r26, r24
 a04:	12 96       	adiw	r26, 0x02	; 2
	// Get index of max reading
	int max_index = 0;
	for (int i = 1; i < 5; i++) {
 a06:	21 e0       	ldi	r18, 0x01	; 1
 a08:	30 e0       	ldi	r19, 0x00	; 0
}

// Returns the direction of the puck (-1, 0, 1)
int isInFront(int input[]) {
	// Get index of max reading
	int max_index = 0;
 a0a:	40 e0       	ldi	r20, 0x00	; 0
 a0c:	50 e0       	ldi	r21, 0x00	; 0
	for (int i = 1; i < 5; i++) {
		if (input[i] > input[max_index]) {
 a0e:	cd 91       	ld	r28, X+
 a10:	dd 91       	ld	r29, X+
 a12:	fa 01       	movw	r30, r20
 a14:	ee 0f       	add	r30, r30
 a16:	ff 1f       	adc	r31, r31
 a18:	e8 0f       	add	r30, r24
 a1a:	f9 1f       	adc	r31, r25
 a1c:	60 81       	ld	r22, Z
 a1e:	71 81       	ldd	r23, Z+1	; 0x01
 a20:	6c 17       	cp	r22, r28
 a22:	7d 07       	cpc	r23, r29
 a24:	0c f4       	brge	.+2      	; 0xa28 <isInFront+0x2a>
 a26:	a9 01       	movw	r20, r18

// Returns the direction of the puck (-1, 0, 1)
int isInFront(int input[]) {
	// Get index of max reading
	int max_index = 0;
	for (int i = 1; i < 5; i++) {
 a28:	2f 5f       	subi	r18, 0xFF	; 255
 a2a:	3f 4f       	sbci	r19, 0xFF	; 255
 a2c:	25 30       	cpi	r18, 0x05	; 5
 a2e:	31 05       	cpc	r19, r1
 a30:	71 f7       	brne	.-36     	; 0xa0e <isInFront+0x10>
		if (input[i] > input[max_index]) {
			max_index = i;
		}
	}
	// If one of the front phototransistors, get difference between them
	if (max_index == 0 || max_index == 1) {
 a32:	42 30       	cpi	r20, 0x02	; 2
 a34:	51 05       	cpc	r21, r1
 a36:	a8 f4       	brcc	.+42     	; 0xa62 <isInFront+0x64>
		int difference = input[0] - input[1];
 a38:	fc 01       	movw	r30, r24
 a3a:	20 81       	ld	r18, Z
 a3c:	31 81       	ldd	r19, Z+1	; 0x01
 a3e:	82 81       	ldd	r24, Z+2	; 0x02
 a40:	93 81       	ldd	r25, Z+3	; 0x03
 a42:	a9 01       	movw	r20, r18
 a44:	48 1b       	sub	r20, r24
 a46:	59 0b       	sbc	r21, r25
 a48:	ca 01       	movw	r24, r20
		// If difference is within difference limit, return 0
		if (abs(difference) < DIFFERENCE_LIM) {
 a4a:	9a 01       	movw	r18, r20
 a4c:	2f 5c       	subi	r18, 0xCF	; 207
 a4e:	3f 4f       	sbci	r19, 0xFF	; 255
 a50:	23 36       	cpi	r18, 0x63	; 99
 a52:	31 05       	cpc	r19, r1
 a54:	d8 f0       	brcs	.+54     	; 0xa8c <isInFront+0x8e>
			return 0;
		// Otherwise return direction of puck
		} else if (difference > 0) {
 a56:	18 16       	cp	r1, r24
 a58:	19 06       	cpc	r1, r25
 a5a:	dc f0       	brlt	.+54     	; 0xa92 <isInFront+0x94>
			return 1;
		} else {
			return -1;
 a5c:	8f ef       	ldi	r24, 0xFF	; 255
 a5e:	9f ef       	ldi	r25, 0xFF	; 255
 a60:	23 c0       	rjmp	.+70     	; 0xaa8 <isInFront+0xaa>
		}
	}
	// If maximum reading is from right or left, return direction
	if (max_index == 2) return 1;
 a62:	42 30       	cpi	r20, 0x02	; 2
 a64:	51 05       	cpc	r21, r1
 a66:	c1 f0       	breq	.+48     	; 0xa98 <isInFront+0x9a>
	if (max_index == 3) return -1;
 a68:	43 30       	cpi	r20, 0x03	; 3
 a6a:	51 05       	cpc	r21, r1
 a6c:	c1 f0       	breq	.+48     	; 0xa9e <isInFront+0xa0>
	// If the back phototransistor find the higher value of the side readings
	if (max_index == 4) {
 a6e:	44 30       	cpi	r20, 0x04	; 4
 a70:	51 05       	cpc	r21, r1
 a72:	59 f4       	brne	.+22     	; 0xa8a <isInFront+0x8c>
		if (input[2] > input[3]) {
 a74:	fc 01       	movw	r30, r24
 a76:	24 81       	ldd	r18, Z+4	; 0x04
 a78:	35 81       	ldd	r19, Z+5	; 0x05
 a7a:	86 81       	ldd	r24, Z+6	; 0x06
 a7c:	97 81       	ldd	r25, Z+7	; 0x07
 a7e:	82 17       	cp	r24, r18
 a80:	93 07       	cpc	r25, r19
 a82:	84 f0       	brlt	.+32     	; 0xaa4 <isInFront+0xa6>
			return 1;
		} else {
			return -1;
 a84:	8f ef       	ldi	r24, 0xFF	; 255
 a86:	9f ef       	ldi	r25, 0xFF	; 255
 a88:	0f c0       	rjmp	.+30     	; 0xaa8 <isInFront+0xaa>
 a8a:	0e c0       	rjmp	.+28     	; 0xaa8 <isInFront+0xaa>
	// If one of the front phototransistors, get difference between them
	if (max_index == 0 || max_index == 1) {
		int difference = input[0] - input[1];
		// If difference is within difference limit, return 0
		if (abs(difference) < DIFFERENCE_LIM) {
			return 0;
 a8c:	80 e0       	ldi	r24, 0x00	; 0
 a8e:	90 e0       	ldi	r25, 0x00	; 0
 a90:	0b c0       	rjmp	.+22     	; 0xaa8 <isInFront+0xaa>
		// Otherwise return direction of puck
		} else if (difference > 0) {
			return 1;
 a92:	81 e0       	ldi	r24, 0x01	; 1
 a94:	90 e0       	ldi	r25, 0x00	; 0
 a96:	08 c0       	rjmp	.+16     	; 0xaa8 <isInFront+0xaa>
		} else {
			return -1;
		}
	}
	// If maximum reading is from right or left, return direction
	if (max_index == 2) return 1;
 a98:	81 e0       	ldi	r24, 0x01	; 1
 a9a:	90 e0       	ldi	r25, 0x00	; 0
 a9c:	05 c0       	rjmp	.+10     	; 0xaa8 <isInFront+0xaa>
	if (max_index == 3) return -1;
 a9e:	8f ef       	ldi	r24, 0xFF	; 255
 aa0:	9f ef       	ldi	r25, 0xFF	; 255
 aa2:	02 c0       	rjmp	.+4      	; 0xaa8 <isInFront+0xaa>
	// If the back phototransistor find the higher value of the side readings
	if (max_index == 4) {
		if (input[2] > input[3]) {
			return 1;
 aa4:	81 e0       	ldi	r24, 0x01	; 1
 aa6:	90 e0       	ldi	r25, 0x00	; 0
		} else {
			return -1;
		}
	}
}
 aa8:	df 91       	pop	r29
 aaa:	cf 91       	pop	r28
 aac:	08 95       	ret

00000aae <turnToPuck>:

// Uses motor controls and isInFront to turn to face the puck
void turnToPuck(int input[]) {
	if (isInFront(input) < 0) {
 aae:	0e 94 ff 04 	call	0x9fe	; 0x9fe <isInFront>
 ab2:	99 23       	and	r25, r25
 ab4:	24 f4       	brge	.+8      	; 0xabe <turnToPuck+0x10>
		turn_in_place(false);
 ab6:	80 e0       	ldi	r24, 0x00	; 0
 ab8:	0e 94 6d 01 	call	0x2da	; 0x2da <turn_in_place>
 abc:	08 95       	ret
	} else if (isInFront(input) > 0) {
 abe:	18 16       	cp	r1, r24
 ac0:	19 06       	cpc	r1, r25
 ac2:	1c f4       	brge	.+6      	; 0xaca <turnToPuck+0x1c>
		turn_in_place(true);
 ac4:	81 e0       	ldi	r24, 0x01	; 1
 ac6:	0e 94 6d 01 	call	0x2da	; 0x2da <turn_in_place>
 aca:	08 95       	ret

00000acc <printADC>:
	}
}

// Prints out ADC readings to usb
void printADC(int input[]) {
 acc:	cf 93       	push	r28
 ace:	df 93       	push	r29
 ad0:	ec 01       	movw	r28, r24
	m_usb_tx_string("   ---   ");
 ad2:	8a ea       	ldi	r24, 0xAA	; 170
 ad4:	91 e0       	ldi	r25, 0x01	; 1
 ad6:	0e 94 c2 03 	call	0x784	; 0x784 <print_P>
	m_usb_tx_string("F0: ");
 ada:	85 ea       	ldi	r24, 0xA5	; 165
 adc:	91 e0       	ldi	r25, 0x01	; 1
 ade:	0e 94 c2 03 	call	0x784	; 0x784 <print_P>
	m_usb_tx_int(input[0]);
 ae2:	88 81       	ld	r24, Y
 ae4:	99 81       	ldd	r25, Y+1	; 0x01
 ae6:	0e 94 de 03 	call	0x7bc	; 0x7bc <m_usb_tx_int>
	m_usb_tx_string("   ---   ");
 aea:	8b e9       	ldi	r24, 0x9B	; 155
 aec:	91 e0       	ldi	r25, 0x01	; 1
 aee:	0e 94 c2 03 	call	0x784	; 0x784 <print_P>
	m_usb_tx_string("F1: ");
 af2:	86 e9       	ldi	r24, 0x96	; 150
 af4:	91 e0       	ldi	r25, 0x01	; 1
 af6:	0e 94 c2 03 	call	0x784	; 0x784 <print_P>
	m_usb_tx_int(input[1]);
 afa:	8a 81       	ldd	r24, Y+2	; 0x02
 afc:	9b 81       	ldd	r25, Y+3	; 0x03
 afe:	0e 94 de 03 	call	0x7bc	; 0x7bc <m_usb_tx_int>
	m_usb_tx_string("   ---   ");
 b02:	8c e8       	ldi	r24, 0x8C	; 140
 b04:	91 e0       	ldi	r25, 0x01	; 1
 b06:	0e 94 c2 03 	call	0x784	; 0x784 <print_P>
	m_usb_tx_string("F4: ");
 b0a:	87 e8       	ldi	r24, 0x87	; 135
 b0c:	91 e0       	ldi	r25, 0x01	; 1
 b0e:	0e 94 c2 03 	call	0x784	; 0x784 <print_P>
	m_usb_tx_int(input[2]);
 b12:	8c 81       	ldd	r24, Y+4	; 0x04
 b14:	9d 81       	ldd	r25, Y+5	; 0x05
 b16:	0e 94 de 03 	call	0x7bc	; 0x7bc <m_usb_tx_int>
	m_usb_tx_string("   ---   ");
 b1a:	8d e7       	ldi	r24, 0x7D	; 125
 b1c:	91 e0       	ldi	r25, 0x01	; 1
 b1e:	0e 94 c2 03 	call	0x784	; 0x784 <print_P>
	m_usb_tx_string("F5: ");
 b22:	88 e7       	ldi	r24, 0x78	; 120
 b24:	91 e0       	ldi	r25, 0x01	; 1
 b26:	0e 94 c2 03 	call	0x784	; 0x784 <print_P>
	m_usb_tx_int(input[3]);
 b2a:	8e 81       	ldd	r24, Y+6	; 0x06
 b2c:	9f 81       	ldd	r25, Y+7	; 0x07
 b2e:	0e 94 de 03 	call	0x7bc	; 0x7bc <m_usb_tx_int>
	m_usb_tx_string("   ---   ");
 b32:	8e e6       	ldi	r24, 0x6E	; 110
 b34:	91 e0       	ldi	r25, 0x01	; 1
 b36:	0e 94 c2 03 	call	0x784	; 0x784 <print_P>
	m_usb_tx_string("F6: ");
 b3a:	89 e6       	ldi	r24, 0x69	; 105
 b3c:	91 e0       	ldi	r25, 0x01	; 1
 b3e:	0e 94 c2 03 	call	0x784	; 0x784 <print_P>
	m_usb_tx_int(input[4]);
 b42:	88 85       	ldd	r24, Y+8	; 0x08
 b44:	99 85       	ldd	r25, Y+9	; 0x09
 b46:	0e 94 de 03 	call	0x7bc	; 0x7bc <m_usb_tx_int>
	m_usb_tx_string("   ---   ");
 b4a:	8f e5       	ldi	r24, 0x5F	; 95
 b4c:	91 e0       	ldi	r25, 0x01	; 1
 b4e:	0e 94 c2 03 	call	0x784	; 0x784 <print_P>
	m_usb_tx_char(13);
 b52:	8d e0       	ldi	r24, 0x0D	; 13
 b54:	0e 94 a6 01 	call	0x34c	; 0x34c <m_usb_tx_char>
 b58:	df 91       	pop	r29
 b5a:	cf 91       	pop	r28
 b5c:	08 95       	ret

00000b5e <__itoa_ncheck>:
 b5e:	bb 27       	eor	r27, r27
 b60:	4a 30       	cpi	r20, 0x0A	; 10
 b62:	31 f4       	brne	.+12     	; 0xb70 <__itoa_ncheck+0x12>
 b64:	99 23       	and	r25, r25
 b66:	22 f4       	brpl	.+8      	; 0xb70 <__itoa_ncheck+0x12>
 b68:	bd e2       	ldi	r27, 0x2D	; 45
 b6a:	90 95       	com	r25
 b6c:	81 95       	neg	r24
 b6e:	9f 4f       	sbci	r25, 0xFF	; 255
 b70:	0c 94 bb 05 	jmp	0xb76	; 0xb76 <__utoa_common>

00000b74 <__utoa_ncheck>:
 b74:	bb 27       	eor	r27, r27

00000b76 <__utoa_common>:
 b76:	fb 01       	movw	r30, r22
 b78:	55 27       	eor	r21, r21
 b7a:	aa 27       	eor	r26, r26
 b7c:	88 0f       	add	r24, r24
 b7e:	99 1f       	adc	r25, r25
 b80:	aa 1f       	adc	r26, r26
 b82:	a4 17       	cp	r26, r20
 b84:	10 f0       	brcs	.+4      	; 0xb8a <__utoa_common+0x14>
 b86:	a4 1b       	sub	r26, r20
 b88:	83 95       	inc	r24
 b8a:	50 51       	subi	r21, 0x10	; 16
 b8c:	b9 f7       	brne	.-18     	; 0xb7c <__utoa_common+0x6>
 b8e:	a0 5d       	subi	r26, 0xD0	; 208
 b90:	aa 33       	cpi	r26, 0x3A	; 58
 b92:	08 f0       	brcs	.+2      	; 0xb96 <__utoa_common+0x20>
 b94:	a9 5d       	subi	r26, 0xD9	; 217
 b96:	a1 93       	st	Z+, r26
 b98:	00 97       	sbiw	r24, 0x00	; 0
 b9a:	79 f7       	brne	.-34     	; 0xb7a <__utoa_common+0x4>
 b9c:	b1 11       	cpse	r27, r1
 b9e:	b1 93       	st	Z+, r27
 ba0:	11 92       	st	Z+, r1
 ba2:	cb 01       	movw	r24, r22
 ba4:	0c 94 d4 05 	jmp	0xba8	; 0xba8 <strrev>

00000ba8 <strrev>:
 ba8:	dc 01       	movw	r26, r24
 baa:	fc 01       	movw	r30, r24
 bac:	67 2f       	mov	r22, r23
 bae:	71 91       	ld	r23, Z+
 bb0:	77 23       	and	r23, r23
 bb2:	e1 f7       	brne	.-8      	; 0xbac <strrev+0x4>
 bb4:	32 97       	sbiw	r30, 0x02	; 2
 bb6:	04 c0       	rjmp	.+8      	; 0xbc0 <strrev+0x18>
 bb8:	7c 91       	ld	r23, X
 bba:	6d 93       	st	X+, r22
 bbc:	70 83       	st	Z, r23
 bbe:	62 91       	ld	r22, -Z
 bc0:	ae 17       	cp	r26, r30
 bc2:	bf 07       	cpc	r27, r31
 bc4:	c8 f3       	brcs	.-14     	; 0xbb8 <strrev+0x10>
 bc6:	08 95       	ret

00000bc8 <_exit>:
 bc8:	f8 94       	cli

00000bca <__stop_program>:
 bca:	ff cf       	rjmp	.-2      	; 0xbca <__stop_program>
