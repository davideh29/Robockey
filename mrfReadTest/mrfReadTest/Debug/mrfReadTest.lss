
mrfReadTest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  00000772  00000806  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000772  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000d  00800108  00800108  0000080e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000080e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000840  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000190  00000000  00000000  00000880  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002079  00000000  00000000  00000a10  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f9b  00000000  00000000  00002a89  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001697  00000000  00000000  00003a24  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004c8  00000000  00000000  000050bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a2c  00000000  00000000  00005584  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001e98  00000000  00000000  00005fb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001a0  00000000  00000000  00007e48  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 b0 00 	jmp	0x160	; 0x160 <__ctors_end>
   4:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
   8:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
   c:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__vector_3>
  10:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  14:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  18:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  1c:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  20:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  24:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  28:	0c 94 f6 01 	jmp	0x3ec	; 0x3ec <__vector_10>
  2c:	0c 94 34 02 	jmp	0x468	; 0x468 <__vector_11>
  30:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  34:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  38:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  3c:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  40:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  44:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  48:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  4c:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  50:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  54:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  58:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  5c:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  60:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  64:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  68:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  6c:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  70:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  74:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  78:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  7c:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  80:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  84:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  88:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  8c:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  90:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  94:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  98:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  9c:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  a0:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  a4:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  a8:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>

000000ac <__trampolines_end>:
  ac:	00 01       	movw	r0, r0
  ae:	00 00       	nop
  b0:	43 01       	movw	r8, r6
  b2:	12 00       	.word	0x0012	; ????
  b4:	02 00       	.word	0x0002	; ????
  b6:	00 00       	nop
  b8:	01 43       	sbci	r16, 0x31	; 49
  ba:	00 03       	mulsu	r16, r16
  bc:	00 00       	nop
  be:	fc 00       	.word	0x00fc	; ????
  c0:	04 01       	movw	r0, r8
  c2:	03 09       	sbc	r16, r3
  c4:	04 e8       	ldi	r16, 0x84	; 132
  c6:	00 12       	cpse	r0, r16
  c8:	02 03       	mulsu	r16, r18
  ca:	09 04       	cpc	r0, r9
  cc:	e0 00       	.word	0x00e0	; ????
  ce:	06 03       	mulsu	r16, r22
  d0:	03 09       	sbc	r16, r3
  d2:	04 d6       	rcall	.+3080   	; 0xcdc <__stack+0x1dd>
  d4:	00 08       	sbc	r0, r0

000000d6 <string3>:
  d6:	08 03 34 00 31 00 30 00 00 00                       ..4.1.0...

000000e0 <string2>:
  e0:	06 03 4d 00 32 00 00 00                             ..M.2...

000000e8 <string1>:
  e8:	12 03 4a 00 2e 00 20 00 46 00 69 00 65 00 6e 00     ..J... .F.i.e.n.
  f8:	65 00 00 00                                         e...

000000fc <string0>:
  fc:	04 03 09 04                                         ....

00000100 <config1_descriptor>:
 100:	09 02 43 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..C.....2.......
 110:	01 00 05 24 00 10 01 05 24 01 01 01 04 24 02 06     ...$....$....$..
 120:	05 24 06 00 01 07 05 82 03 10 00 40 09 04 01 00     .$.........@....
 130:	02 0a 00 00 00 07 05 03 02 40 00 00 07 05 84 02     .........@......
 140:	40 00 00                                            @..

00000143 <device_descriptor>:
 143:	12 01 00 02 02 00 00 10 c0 16 7a 04 00 01 01 02     ..........z.....
 153:	03 01                                               ..

00000155 <endpoint_config_table>:
 155:	00 01 c1 12 01 80 36 01 81 36 00                    ......6..6.

00000160 <__ctors_end>:
 160:	11 24       	eor	r1, r1
 162:	1f be       	out	0x3f, r1	; 63
 164:	cf ef       	ldi	r28, 0xFF	; 255
 166:	da e0       	ldi	r29, 0x0A	; 10
 168:	de bf       	out	0x3e, r29	; 62
 16a:	cd bf       	out	0x3d, r28	; 61

0000016c <__do_copy_data>:
 16c:	11 e0       	ldi	r17, 0x01	; 1
 16e:	a0 e0       	ldi	r26, 0x00	; 0
 170:	b1 e0       	ldi	r27, 0x01	; 1
 172:	e2 e7       	ldi	r30, 0x72	; 114
 174:	f7 e0       	ldi	r31, 0x07	; 7
 176:	02 c0       	rjmp	.+4      	; 0x17c <__do_copy_data+0x10>
 178:	05 90       	lpm	r0, Z+
 17a:	0d 92       	st	X+, r0
 17c:	a8 30       	cpi	r26, 0x08	; 8
 17e:	b1 07       	cpc	r27, r17
 180:	d9 f7       	brne	.-10     	; 0x178 <__do_copy_data+0xc>

00000182 <__do_clear_bss>:
 182:	21 e0       	ldi	r18, 0x01	; 1
 184:	a8 e0       	ldi	r26, 0x08	; 8
 186:	b1 e0       	ldi	r27, 0x01	; 1
 188:	01 c0       	rjmp	.+2      	; 0x18c <.do_clear_bss_start>

0000018a <.do_clear_bss_loop>:
 18a:	1d 92       	st	X+, r1

0000018c <.do_clear_bss_start>:
 18c:	a5 31       	cpi	r26, 0x15	; 21
 18e:	b2 07       	cpc	r27, r18
 190:	e1 f7       	brne	.-8      	; 0x18a <.do_clear_bss_loop>
 192:	0e 94 fe 00 	call	0x1fc	; 0x1fc <main>
 196:	0c 94 b7 03 	jmp	0x76e	; 0x76e <_exit>

0000019a <__bad_interrupt>:
 19a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000019e <__vector_3>:

volatile bool active = false;
char buffer[10] = {0,0,0,0,0,0,0,0,0,0};


ISR (INT2_vect) {
 19e:	1f 92       	push	r1
 1a0:	0f 92       	push	r0
 1a2:	0f b6       	in	r0, 0x3f	; 63
 1a4:	0f 92       	push	r0
 1a6:	11 24       	eor	r1, r1
 1a8:	2f 93       	push	r18
 1aa:	3f 93       	push	r19
 1ac:	4f 93       	push	r20
 1ae:	5f 93       	push	r21
 1b0:	6f 93       	push	r22
 1b2:	7f 93       	push	r23
 1b4:	8f 93       	push	r24
 1b6:	9f 93       	push	r25
 1b8:	af 93       	push	r26
 1ba:	bf 93       	push	r27
 1bc:	ef 93       	push	r30
 1be:	ff 93       	push	r31
	m_rf_read(buffer, 10);
 1c0:	6a e0       	ldi	r22, 0x0A	; 10
 1c2:	88 e0       	ldi	r24, 0x08	; 8
 1c4:	91 e0       	ldi	r25, 0x01	; 1
 1c6:	0e 94 92 01 	call	0x324	; 0x324 <m_rf_read>
	m_green(ON);
 1ca:	6a 9a       	sbi	0x0d, 2	; 13
 1cc:	72 98       	cbi	0x0e, 2	; 14
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1ce:	8f e4       	ldi	r24, 0x4F	; 79
 1d0:	93 ec       	ldi	r25, 0xC3	; 195
 1d2:	01 97       	sbiw	r24, 0x01	; 1
 1d4:	f1 f7       	brne	.-4      	; 0x1d2 <__vector_3+0x34>
 1d6:	00 c0       	rjmp	.+0      	; 0x1d8 <__vector_3+0x3a>
 1d8:	00 00       	nop
	m_wait(200);
}
 1da:	ff 91       	pop	r31
 1dc:	ef 91       	pop	r30
 1de:	bf 91       	pop	r27
 1e0:	af 91       	pop	r26
 1e2:	9f 91       	pop	r25
 1e4:	8f 91       	pop	r24
 1e6:	7f 91       	pop	r23
 1e8:	6f 91       	pop	r22
 1ea:	5f 91       	pop	r21
 1ec:	4f 91       	pop	r20
 1ee:	3f 91       	pop	r19
 1f0:	2f 91       	pop	r18
 1f2:	0f 90       	pop	r0
 1f4:	0f be       	out	0x3f, r0	; 63
 1f6:	0f 90       	pop	r0
 1f8:	1f 90       	pop	r1
 1fa:	18 95       	reti

000001fc <main>:

int main(void)
{
	m_clockdivide(3);
 1fc:	e1 e6       	ldi	r30, 0x61	; 97
 1fe:	f0 e0       	ldi	r31, 0x00	; 0
 200:	80 e8       	ldi	r24, 0x80	; 128
 202:	80 83       	st	Z, r24
 204:	83 e0       	ldi	r24, 0x03	; 3
 206:	80 83       	st	Z, r24
	m_bus_init();
 208:	0e 94 2b 01 	call	0x256	; 0x256 <m_bus_init>
	m_red(ON);
 20c:	6e 9a       	sbi	0x0d, 6	; 13
 20e:	76 98       	cbi	0x0e, 6	; 14
 210:	2f e7       	ldi	r18, 0x7F	; 127
 212:	8a e1       	ldi	r24, 0x1A	; 26
 214:	96 e0       	ldi	r25, 0x06	; 6
 216:	21 50       	subi	r18, 0x01	; 1
 218:	80 40       	sbci	r24, 0x00	; 0
 21a:	90 40       	sbci	r25, 0x00	; 0
 21c:	e1 f7       	brne	.-8      	; 0x216 <main+0x1a>
 21e:	00 c0       	rjmp	.+0      	; 0x220 <main+0x24>
 220:	00 00       	nop
	m_wait(2000);
	while (!m_rf_open(1, 65, 10)) { }
 222:	4a e0       	ldi	r20, 0x0A	; 10
 224:	61 e4       	ldi	r22, 0x41	; 65
 226:	81 e0       	ldi	r24, 0x01	; 1
 228:	0e 94 3c 01 	call	0x278	; 0x278 <m_rf_open>
 22c:	88 23       	and	r24, r24
 22e:	c9 f3       	breq	.-14     	; 0x222 <main+0x26>
	sei();
 230:	78 94       	sei
	m_red(OFF);
 232:	6e 9a       	sbi	0x0d, 6	; 13
 234:	76 9a       	sbi	0x0e, 6	; 14
    /* Replace with your application code */
    while (1) 
    {
		m_green(OFF);
		if (buffer[0] == 0xA0) {
 236:	e8 e0       	ldi	r30, 0x08	; 8
 238:	f1 e0       	ldi	r31, 0x01	; 1
	sei();
	m_red(OFF);
    /* Replace with your application code */
    while (1) 
    {
		m_green(OFF);
 23a:	6a 9a       	sbi	0x0d, 2	; 13
 23c:	72 9a       	sbi	0x0e, 2	; 14
		if (buffer[0] == 0xA0) {
 23e:	80 81       	ld	r24, Z
 240:	80 3a       	cpi	r24, 0xA0	; 160
 242:	11 f4       	brne	.+4      	; 0x248 <main+0x4c>
			m_red(ON);
 244:	6e 9a       	sbi	0x0d, 6	; 13
 246:	76 98       	cbi	0x0e, 6	; 14
 248:	8f e4       	ldi	r24, 0x4F	; 79
 24a:	93 ec       	ldi	r25, 0xC3	; 195
 24c:	01 97       	sbiw	r24, 0x01	; 1
 24e:	f1 f7       	brne	.-4      	; 0x24c <main+0x50>
 250:	00 c0       	rjmp	.+0      	; 0x252 <main+0x56>
 252:	00 00       	nop
 254:	f2 cf       	rjmp	.-28     	; 0x23a <main+0x3e>

00000256 <m_bus_init>:

// PUBLIC FUNCTIONS
void m_bus_init(void)
{
	// ENABLE PULLUPS
	set(PORTD,0);
 256:	58 9a       	sbi	0x0b, 0	; 11
	set(PORTD,1);
 258:	59 9a       	sbi	0x0b, 1	; 11
	set(PORTD,2);
 25a:	5a 9a       	sbi	0x0b, 2	; 11
	
	// CONFIGURE THE CLOCK
	TWBR = 12;	// CLK freq = CPU clock / (16 + 2*TWBR*(4^TWPS)), 16MHz clock, TWBR=12, TWPS=00 -> 400kHz
 25c:	8c e0       	ldi	r24, 0x0C	; 12
 25e:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>

	// ENABLE interrupts in INT2 (D2)
	set(EICRA,ISC21); clear(EICRA,ISC20); // trigger on falling edge
 262:	e9 e6       	ldi	r30, 0x69	; 105
 264:	f0 e0       	ldi	r31, 0x00	; 0
 266:	80 81       	ld	r24, Z
 268:	80 62       	ori	r24, 0x20	; 32
 26a:	80 83       	st	Z, r24
 26c:	80 81       	ld	r24, Z
 26e:	8f 7e       	andi	r24, 0xEF	; 239
 270:	80 83       	st	Z, r24
	set(EIMSK,INT2); // demask the interrupt
 272:	ea 9a       	sbi	0x1d, 2	; 29
	sei(); // enable global interrupts
 274:	78 94       	sei
 276:	08 95       	ret

00000278 <m_rf_open>:
#define MRFINIT			0x01
#define	MRFREAD			0x02
#define MRFSEND			0x03

char m_rf_open(char channel, char RXaddress, char packet_length)
{	
 278:	1f 93       	push	r17
 27a:	cf 93       	push	r28
 27c:	df 93       	push	r29
 27e:	18 2f       	mov	r17, r24
 280:	d6 2f       	mov	r29, r22
 282:	c4 2f       	mov	r28, r20
	// START | MRFTWIADDR | MRFINIT | channel | RXaddress | packet_length | STOP
	
	m_bus_init();
 284:	0e 94 2b 01 	call	0x256	; 0x256 <m_bus_init>
	
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
 288:	94 ea       	ldi	r25, 0xA4	; 164
 28a:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
 28e:	ec eb       	ldi	r30, 0xBC	; 188
 290:	f0 e0       	ldi	r31, 0x00	; 0
 292:	90 81       	ld	r25, Z
 294:	99 23       	and	r25, r25
 296:	ec f7       	brge	.-6      	; 0x292 <m_rf_open+0x1a>
	
	// ADDRESS
	TWDR = MRFTWIADDR<<1;
 298:	90 e5       	ldi	r25, 0x50	; 80
 29a:	90 93 bb 00 	sts	0x00BB, r25	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR = (1<<TWINT) | (1<<TWEN);
 29e:	94 e8       	ldi	r25, 0x84	; 132
 2a0:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
 2a4:	ec eb       	ldi	r30, 0xBC	; 188
 2a6:	f0 e0       	ldi	r31, 0x00	; 0
 2a8:	90 81       	ld	r25, Z
 2aa:	99 23       	and	r25, r25
 2ac:	ec f7       	brge	.-6      	; 0x2a8 <m_rf_open+0x30>
	if((TWSR & 0xF8)== 0x20){ // ACK was not received - may not be connected/listening
 2ae:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 2b2:	98 7f       	andi	r25, 0xF8	; 248
 2b4:	90 32       	cpi	r25, 0x20	; 32
 2b6:	29 f4       	brne	.+10     	; 0x2c2 <m_rf_open+0x4a>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
 2b8:	84 e9       	ldi	r24, 0x94	; 148
 2ba:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
		return 0;
 2be:	80 e0       	ldi	r24, 0x00	; 0
 2c0:	2d c0       	rjmp	.+90     	; 0x31c <m_rf_open+0xa4>
	}
	
	// SEND THE DESIRED MRF MODE
	TWDR = MRFINIT;
 2c2:	81 e0       	ldi	r24, 0x01	; 1
 2c4:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR = (1<<TWINT) | (1<<TWEN);
 2c8:	84 e8       	ldi	r24, 0x84	; 132
 2ca:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
 2ce:	ec eb       	ldi	r30, 0xBC	; 188
 2d0:	f0 e0       	ldi	r31, 0x00	; 0
 2d2:	90 81       	ld	r25, Z
 2d4:	99 23       	and	r25, r25
 2d6:	ec f7       	brge	.-6      	; 0x2d2 <m_rf_open+0x5a>
	
	// SEND DATA
	TWDR = channel;
 2d8:	10 93 bb 00 	sts	0x00BB, r17	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR = (1<<TWINT) | (1<<TWEN);
 2dc:	84 e8       	ldi	r24, 0x84	; 132
 2de:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
 2e2:	ec eb       	ldi	r30, 0xBC	; 188
 2e4:	f0 e0       	ldi	r31, 0x00	; 0
 2e6:	80 81       	ld	r24, Z
 2e8:	88 23       	and	r24, r24
 2ea:	ec f7       	brge	.-6      	; 0x2e6 <m_rf_open+0x6e>
	
	TWDR = RXaddress;
 2ec:	d0 93 bb 00 	sts	0x00BB, r29	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR = (1<<TWINT) | (1<<TWEN);
 2f0:	84 e8       	ldi	r24, 0x84	; 132
 2f2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
 2f6:	ec eb       	ldi	r30, 0xBC	; 188
 2f8:	f0 e0       	ldi	r31, 0x00	; 0
 2fa:	80 81       	ld	r24, Z
 2fc:	88 23       	and	r24, r24
 2fe:	ec f7       	brge	.-6      	; 0x2fa <m_rf_open+0x82>
	
	TWDR = packet_length;
 300:	c0 93 bb 00 	sts	0x00BB, r28	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR = (1<<TWINT) | (1<<TWEN);
 304:	84 e8       	ldi	r24, 0x84	; 132
 306:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
 30a:	ec eb       	ldi	r30, 0xBC	; 188
 30c:	f0 e0       	ldi	r31, 0x00	; 0
 30e:	80 81       	ld	r24, Z
 310:	88 23       	and	r24, r24
 312:	ec f7       	brge	.-6      	; 0x30e <m_rf_open+0x96>
	
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
 314:	84 e9       	ldi	r24, 0x94	; 148
 316:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	
	return 1;
 31a:	81 e0       	ldi	r24, 0x01	; 1
}
 31c:	df 91       	pop	r29
 31e:	cf 91       	pop	r28
 320:	1f 91       	pop	r17
 322:	08 95       	ret

00000324 <m_rf_read>:

char m_rf_read(char* buffer, char packet_length)
{
 324:	cf 93       	push	r28
 326:	df 93       	push	r29
 328:	9c 01       	movw	r18, r24

	char bytes;
	int i;

	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
 32a:	84 ea       	ldi	r24, 0xA4	; 164
 32c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
 330:	ec eb       	ldi	r30, 0xBC	; 188
 332:	f0 e0       	ldi	r31, 0x00	; 0
 334:	90 81       	ld	r25, Z
 336:	99 23       	and	r25, r25
 338:	ec f7       	brge	.-6      	; 0x334 <m_rf_read+0x10>
	
	// ADDRESS (in Master-Receiver Mode)
	TWDR = ((MRFTWIADDR<<1)|1);
 33a:	81 e5       	ldi	r24, 0x51	; 81
 33c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR = (1<<TWINT) | (1<<TWEN);
 340:	84 e8       	ldi	r24, 0x84	; 132
 342:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){}; // wait until finished sending address
 346:	ec eb       	ldi	r30, 0xBC	; 188
 348:	f0 e0       	ldi	r31, 0x00	; 0
 34a:	90 81       	ld	r25, Z
 34c:	99 23       	and	r25, r25
 34e:	ec f7       	brge	.-6      	; 0x34a <m_rf_read+0x26>
	if((TWSR & 0xF8)== 0x48){ // ACK was not received
 350:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 354:	88 7f       	andi	r24, 0xF8	; 248
 356:	88 34       	cpi	r24, 0x48	; 72
 358:	29 f4       	brne	.+10     	; 0x364 <m_rf_read+0x40>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
 35a:	84 e9       	ldi	r24, 0x94	; 148
 35c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
		return 0; // not connected/listening
 360:	80 e0       	ldi	r24, 0x00	; 0
 362:	41 c0       	rjmp	.+130    	; 0x3e6 <m_rf_read+0xc2>
	}
	

	// (BYTES)
	TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
 364:	84 ec       	ldi	r24, 0xC4	; 196
 366:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
 36a:	ec eb       	ldi	r30, 0xBC	; 188
 36c:	f0 e0       	ldi	r31, 0x00	; 0
 36e:	90 81       	ld	r25, Z
 370:	99 23       	and	r25, r25
 372:	ec f7       	brge	.-6      	; 0x36e <m_rf_read+0x4a>
	bytes = TWDR;
 374:	40 91 bb 00 	lds	r20, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	if(bytes != packet_length){
 378:	46 13       	cpse	r20, r22
 37a:	09 c0       	rjmp	.+18     	; 0x38e <m_rf_read+0x6a>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
		return 0; // indicate length mismatch
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
 37c:	84 2f       	mov	r24, r20
 37e:	90 e0       	ldi	r25, 0x00	; 0
 380:	01 97       	sbiw	r24, 0x01	; 1
 382:	18 16       	cp	r1, r24
 384:	19 06       	cpc	r1, r25
 386:	44 f0       	brlt	.+16     	; 0x398 <m_rf_read+0x74>
 388:	40 e0       	ldi	r20, 0x00	; 0
 38a:	50 e0       	ldi	r21, 0x00	; 0
 38c:	1a c0       	rjmp	.+52     	; 0x3c2 <m_rf_read+0x9e>
	// (BYTES)
	TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
	bytes = TWDR;
	if(bytes != packet_length){
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
 38e:	84 e9       	ldi	r24, 0x94	; 148
 390:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
		return 0; // indicate length mismatch
 394:	80 e0       	ldi	r24, 0x00	; 0
 396:	27 c0       	rjmp	.+78     	; 0x3e6 <m_rf_read+0xc2>
 398:	d9 01       	movw	r26, r18
 39a:	50 e0       	ldi	r21, 0x00	; 0
 39c:	41 50       	subi	r20, 0x01	; 1
 39e:	51 09       	sbc	r21, r1
 3a0:	b9 01       	movw	r22, r18
 3a2:	64 0f       	add	r22, r20
 3a4:	75 1f       	adc	r23, r21
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
 3a6:	ec eb       	ldi	r30, 0xBC	; 188
 3a8:	f0 e0       	ldi	r31, 0x00	; 0
 3aa:	84 ec       	ldi	r24, 0xC4	; 196
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		buffer[i] = TWDR;
 3ac:	cb eb       	ldi	r28, 0xBB	; 187
 3ae:	d0 e0       	ldi	r29, 0x00	; 0
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
 3b0:	80 83       	st	Z, r24
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
 3b2:	90 81       	ld	r25, Z
 3b4:	99 23       	and	r25, r25
 3b6:	ec f7       	brge	.-6      	; 0x3b2 <m_rf_read+0x8e>
		buffer[i] = TWDR;
 3b8:	98 81       	ld	r25, Y
 3ba:	9d 93       	st	X+, r25
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
		return 0; // indicate length mismatch
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
 3bc:	a6 17       	cp	r26, r22
 3be:	b7 07       	cpc	r27, r23
 3c0:	b9 f7       	brne	.-18     	; 0x3b0 <m_rf_read+0x8c>
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		buffer[i] = TWDR;
	}
	TWCR = (1<<TWINT) | (1<<TWEN);	// clear the flag, no ACK, and wait for another byte
 3c2:	84 e8       	ldi	r24, 0x84	; 132
 3c4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
 3c8:	ec eb       	ldi	r30, 0xBC	; 188
 3ca:	f0 e0       	ldi	r31, 0x00	; 0
 3cc:	90 81       	ld	r25, Z
 3ce:	99 23       	and	r25, r25
 3d0:	ec f7       	brge	.-6      	; 0x3cc <m_rf_read+0xa8>
	buffer[i++] = TWDR;
 3d2:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 3d6:	f9 01       	movw	r30, r18
 3d8:	e4 0f       	add	r30, r20
 3da:	f5 1f       	adc	r31, r21
 3dc:	80 83       	st	Z, r24
	
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
 3de:	84 e9       	ldi	r24, 0x94	; 148
 3e0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

	return 1;
 3e4:	81 e0       	ldi	r24, 0x01	; 1
}
 3e6:	df 91       	pop	r29
 3e8:	cf 91       	pop	r28
 3ea:	08 95       	ret

000003ec <__vector_10>:

// USB Device Interrupt - handle all device-level events
// the transmit buffer flushing is triggered by the start of frame
//
ISR(USB_GEN_vect)
{
 3ec:	1f 92       	push	r1
 3ee:	0f 92       	push	r0
 3f0:	0f b6       	in	r0, 0x3f	; 63
 3f2:	0f 92       	push	r0
 3f4:	11 24       	eor	r1, r1
 3f6:	8f 93       	push	r24
 3f8:	9f 93       	push	r25
 3fa:	ef 93       	push	r30
 3fc:	ff 93       	push	r31
	uint8_t intbits, t;

        intbits = UDINT;
 3fe:	e1 ee       	ldi	r30, 0xE1	; 225
 400:	f0 e0       	ldi	r31, 0x00	; 0
 402:	80 81       	ld	r24, Z
        UDINT = 0;
 404:	10 82       	st	Z, r1
        if (intbits & (1<<EORSTI)) {
 406:	83 ff       	sbrs	r24, 3
 408:	11 c0       	rjmp	.+34     	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
		UENUM = 0;
 40a:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
		UECONX = 1;
 40e:	91 e0       	ldi	r25, 0x01	; 1
 410:	90 93 eb 00 	sts	0x00EB, r25	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
		UECFG0X = EP_TYPE_CONTROL;
 414:	10 92 ec 00 	sts	0x00EC, r1	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
		UECFG1X = EP_SIZE(ENDPOINT0_SIZE) | EP_SINGLE_BUFFER;
 418:	92 e1       	ldi	r25, 0x12	; 18
 41a:	90 93 ed 00 	sts	0x00ED, r25	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
		UEIENX = (1<<RXSTPE);
 41e:	98 e0       	ldi	r25, 0x08	; 8
 420:	90 93 f0 00 	sts	0x00F0, r25	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
		usb_configuration = 0;
 424:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <usb_configuration>
		cdc_line_rtsdtr = 0;
 428:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <cdc_line_rtsdtr>
        }
	if (intbits & (1<<SOFI)) {
 42c:	82 ff       	sbrs	r24, 2
 42e:	13 c0       	rjmp	.+38     	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
		if (usb_configuration) {
 430:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <usb_configuration>
 434:	88 23       	and	r24, r24
 436:	79 f0       	breq	.+30     	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
			t = transmit_flush_timer;
 438:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <transmit_flush_timer>
			if (t) {
 43c:	88 23       	and	r24, r24
 43e:	59 f0       	breq	.+22     	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
				transmit_flush_timer = --t;
 440:	81 50       	subi	r24, 0x01	; 1
 442:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <transmit_flush_timer>
				if (!t) {
 446:	81 11       	cpse	r24, r1
 448:	06 c0       	rjmp	.+12     	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
					UENUM = CDC_TX_ENDPOINT;
 44a:	84 e0       	ldi	r24, 0x04	; 4
 44c:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
					UEINTX = 0x3A;
 450:	8a e3       	ldi	r24, 0x3A	; 58
 452:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				}
			}
		}
	}
}
 456:	ff 91       	pop	r31
 458:	ef 91       	pop	r30
 45a:	9f 91       	pop	r25
 45c:	8f 91       	pop	r24
 45e:	0f 90       	pop	r0
 460:	0f be       	out	0x3f, r0	; 63
 462:	0f 90       	pop	r0
 464:	1f 90       	pop	r1
 466:	18 95       	reti

00000468 <__vector_11>:
// USB Endpoint Interrupt - endpoint 0 is handled here.  The
// other endpoints are manipulated by the user-callable
// functions, and the start-of-frame interrupt.
//
ISR(USB_COM_vect)
{
 468:	1f 92       	push	r1
 46a:	0f 92       	push	r0
 46c:	0f b6       	in	r0, 0x3f	; 63
 46e:	0f 92       	push	r0
 470:	11 24       	eor	r1, r1
 472:	0f 93       	push	r16
 474:	1f 93       	push	r17
 476:	2f 93       	push	r18
 478:	3f 93       	push	r19
 47a:	4f 93       	push	r20
 47c:	5f 93       	push	r21
 47e:	6f 93       	push	r22
 480:	7f 93       	push	r23
 482:	8f 93       	push	r24
 484:	9f 93       	push	r25
 486:	af 93       	push	r26
 488:	bf 93       	push	r27
 48a:	cf 93       	push	r28
 48c:	df 93       	push	r29
 48e:	ef 93       	push	r30
 490:	ff 93       	push	r31
	uint16_t wLength;
	uint16_t desc_val;
	const uint8_t *desc_addr;
	uint8_t	desc_length;

        UENUM = 0;
 492:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
        intbits = UEINTX;
 496:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
        if (intbits & (1<<RXSTPI)) {
 49a:	83 ff       	sbrs	r24, 3
 49c:	4c c1       	rjmp	.+664    	; 0x736 <__vector_11+0x2ce>
                bmRequestType = UEDATX;
 49e:	e1 ef       	ldi	r30, 0xF1	; 241
 4a0:	f0 e0       	ldi	r31, 0x00	; 0
 4a2:	60 81       	ld	r22, Z
                bRequest = UEDATX;
 4a4:	80 81       	ld	r24, Z
                wValue = UEDATX;
 4a6:	20 81       	ld	r18, Z
                wValue |= (UEDATX << 8);
 4a8:	90 81       	ld	r25, Z
 4aa:	30 e0       	ldi	r19, 0x00	; 0
 4ac:	39 2b       	or	r19, r25
                wIndex = UEDATX;
 4ae:	40 81       	ld	r20, Z
                wIndex |= (UEDATX << 8);
 4b0:	90 81       	ld	r25, Z
 4b2:	50 e0       	ldi	r21, 0x00	; 0
 4b4:	59 2b       	or	r21, r25
                wLength = UEDATX;
 4b6:	70 81       	ld	r23, Z
                wLength |= (UEDATX << 8);
 4b8:	c0 81       	ld	r28, Z
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
 4ba:	92 ef       	ldi	r25, 0xF2	; 242
 4bc:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
                if (bRequest == GET_DESCRIPTOR) {
 4c0:	86 30       	cpi	r24, 0x06	; 6
 4c2:	09 f0       	breq	.+2      	; 0x4c6 <__vector_11+0x5e>
 4c4:	58 c0       	rjmp	.+176    	; 0x576 <__vector_11+0x10e>
 4c6:	04 c0       	rjmp	.+8      	; 0x4d0 <__vector_11+0x68>
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
					UECONX = (1<<STALLRQ)|(1<<EPEN);  //stall
 4c8:	81 e2       	ldi	r24, 0x21	; 33
 4ca:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
					return;
 4ce:	3a c1       	rjmp	.+628    	; 0x744 <__vector_11+0x2dc>
 4d0:	66 e0       	ldi	r22, 0x06	; 6
 4d2:	8c ea       	ldi	r24, 0xAC	; 172
 4d4:	90 e0       	ldi	r25, 0x00	; 0
				}
				desc_val = pgm_read_word(list);
 4d6:	fc 01       	movw	r30, r24
 4d8:	a5 91       	lpm	r26, Z+
 4da:	b4 91       	lpm	r27, Z
				if (desc_val != wValue) {
 4dc:	2a 17       	cp	r18, r26
 4de:	3b 07       	cpc	r19, r27
 4e0:	11 f0       	breq	.+4      	; 0x4e6 <__vector_11+0x7e>
					list += sizeof(struct descriptor_list_struct);
 4e2:	07 96       	adiw	r24, 0x07	; 7
					continue;
 4e4:	23 c0       	rjmp	.+70     	; 0x52c <__vector_11+0xc4>
				}
				list += 2;
 4e6:	fc 01       	movw	r30, r24
 4e8:	32 96       	adiw	r30, 0x02	; 2
				desc_val = pgm_read_word(list);
 4ea:	a5 91       	lpm	r26, Z+
 4ec:	b4 91       	lpm	r27, Z
				if (desc_val != wIndex) {
 4ee:	4a 17       	cp	r20, r26
 4f0:	5b 07       	cpc	r21, r27
 4f2:	11 f0       	breq	.+4      	; 0x4f8 <__vector_11+0x90>
					list += sizeof(struct descriptor_list_struct)-2;
 4f4:	07 96       	adiw	r24, 0x07	; 7
					continue;
 4f6:	1a c0       	rjmp	.+52     	; 0x52c <__vector_11+0xc4>
				}
				list += 2;
 4f8:	fc 01       	movw	r30, r24
 4fa:	34 96       	adiw	r30, 0x04	; 4
				desc_addr = (const uint8_t *)pgm_read_word(list);
 4fc:	45 91       	lpm	r20, Z+
 4fe:	54 91       	lpm	r21, Z
				list += 2;
 500:	fc 01       	movw	r30, r24
 502:	36 96       	adiw	r30, 0x06	; 6
				desc_length = pgm_read_byte(list);
 504:	24 91       	lpm	r18, Z
                wValue = UEDATX;
                wValue |= (UEDATX << 8);
                wIndex = UEDATX;
                wIndex |= (UEDATX << 8);
                wLength = UEDATX;
                wLength |= (UEDATX << 8);
 506:	87 2f       	mov	r24, r23
 508:	90 e0       	ldi	r25, 0x00	; 0
 50a:	9c 2b       	or	r25, r28
				desc_addr = (const uint8_t *)pgm_read_word(list);
				list += 2;
				desc_length = pgm_read_byte(list);
				break;
			}
			len = (wLength < 256) ? wLength : 255;
 50c:	8f 3f       	cpi	r24, 0xFF	; 255
 50e:	91 05       	cpc	r25, r1
 510:	19 f0       	breq	.+6      	; 0x518 <__vector_11+0xb0>
 512:	10 f0       	brcs	.+4      	; 0x518 <__vector_11+0xb0>
 514:	8f ef       	ldi	r24, 0xFF	; 255
 516:	90 e0       	ldi	r25, 0x00	; 0
 518:	82 17       	cp	r24, r18
 51a:	08 f4       	brcc	.+2      	; 0x51e <__vector_11+0xb6>
 51c:	28 2f       	mov	r18, r24
			if (len > desc_length) len = desc_length;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
 51e:	a8 ee       	ldi	r26, 0xE8	; 232
 520:	b0 e0       	ldi	r27, 0x00	; 0
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
 522:	70 e1       	ldi	r23, 0x10	; 16
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 524:	6e ef       	ldi	r22, 0xFE	; 254
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
 526:	c1 ef       	ldi	r28, 0xF1	; 241
 528:	d0 e0       	ldi	r29, 0x00	; 0
 52a:	03 c0       	rjmp	.+6      	; 0x532 <__vector_11+0xca>
 52c:	61 50       	subi	r22, 0x01	; 1
                wLength |= (UEDATX << 8);
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
                if (bRequest == GET_DESCRIPTOR) {
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
 52e:	99 f6       	brne	.-90     	; 0x4d6 <__vector_11+0x6e>
 530:	cb cf       	rjmp	.-106    	; 0x4c8 <__vector_11+0x60>
			len = (wLength < 256) ? wLength : 255;
			if (len > desc_length) len = desc_length;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
 532:	8c 91       	ld	r24, X
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
 534:	98 2f       	mov	r25, r24
 536:	95 70       	andi	r25, 0x05	; 5
 538:	e1 f3       	breq	.-8      	; 0x532 <__vector_11+0xca>
				if (i & (1<<RXOUTI)) return;	// abort
 53a:	82 fd       	sbrc	r24, 2
 53c:	03 c1       	rjmp	.+518    	; 0x744 <__vector_11+0x2dc>
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
 53e:	32 2f       	mov	r19, r18
 540:	21 31       	cpi	r18, 0x11	; 17
 542:	08 f0       	brcs	.+2      	; 0x546 <__vector_11+0xde>
 544:	37 2f       	mov	r19, r23
				for (i = n; i; i--) {
 546:	33 23       	and	r19, r19
 548:	09 f4       	brne	.+2      	; 0x54c <__vector_11+0xe4>
 54a:	f9 c0       	rjmp	.+498    	; 0x73e <__vector_11+0x2d6>
 54c:	fa 01       	movw	r30, r20
 54e:	83 2f       	mov	r24, r19
					UEDATX = pgm_read_byte(desc_addr++);
 550:	94 91       	lpm	r25, Z
 552:	98 83       	st	Y, r25
					i = UEINTX;
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
 554:	81 50       	subi	r24, 0x01	; 1
 556:	31 96       	adiw	r30, 0x01	; 1
 558:	81 11       	cpse	r24, r1
 55a:	fa cf       	rjmp	.-12     	; 0x550 <__vector_11+0xe8>
 55c:	8f ef       	ldi	r24, 0xFF	; 255
 55e:	83 0f       	add	r24, r19
 560:	90 e0       	ldi	r25, 0x00	; 0
 562:	01 96       	adiw	r24, 0x01	; 1
 564:	48 0f       	add	r20, r24
 566:	59 1f       	adc	r21, r25
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
 568:	23 1b       	sub	r18, r19
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 56a:	6c 93       	st	X, r22
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
 56c:	21 11       	cpse	r18, r1
 56e:	e1 cf       	rjmp	.-62     	; 0x532 <__vector_11+0xca>
 570:	30 31       	cpi	r19, 0x10	; 16
 572:	f9 f2       	breq	.-66     	; 0x532 <__vector_11+0xca>
 574:	e7 c0       	rjmp	.+462    	; 0x744 <__vector_11+0x2dc>
			return;
                }
		if (bRequest == SET_ADDRESS) {
 576:	85 30       	cpi	r24, 0x05	; 5
 578:	61 f4       	brne	.+24     	; 0x592 <__vector_11+0x12a>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 57a:	8e ef       	ldi	r24, 0xFE	; 254
 57c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 580:	e8 ee       	ldi	r30, 0xE8	; 232
 582:	f0 e0       	ldi	r31, 0x00	; 0
 584:	80 81       	ld	r24, Z
 586:	80 ff       	sbrs	r24, 0
 588:	fd cf       	rjmp	.-6      	; 0x584 <__vector_11+0x11c>
			return;
                }
		if (bRequest == SET_ADDRESS) {
			usb_send_in();
			usb_wait_in_ready();
			UDADDR = wValue | (1<<ADDEN);
 58a:	20 68       	ori	r18, 0x80	; 128
 58c:	20 93 e3 00 	sts	0x00E3, r18	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
			return;
 590:	d9 c0       	rjmp	.+434    	; 0x744 <__vector_11+0x2dc>
		}
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
 592:	89 30       	cpi	r24, 0x09	; 9
 594:	09 f0       	breq	.+2      	; 0x598 <__vector_11+0x130>
 596:	35 c0       	rjmp	.+106    	; 0x602 <__vector_11+0x19a>
 598:	61 11       	cpse	r22, r1
 59a:	cd c0       	rjmp	.+410    	; 0x736 <__vector_11+0x2ce>
			usb_configuration = wValue;
 59c:	20 93 14 01 	sts	0x0114, r18	; 0x800114 <usb_configuration>
			cdc_line_rtsdtr = 0;
 5a0:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <cdc_line_rtsdtr>
			transmit_flush_timer = 0;
 5a4:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <transmit_flush_timer>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 5a8:	8e ef       	ldi	r24, 0xFE	; 254
 5aa:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
 5ae:	81 e0       	ldi	r24, 0x01	; 1
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
 5b0:	25 e5       	ldi	r18, 0x55	; 85
 5b2:	31 e0       	ldi	r19, 0x01	; 1
			for (i=1; i<5; i++) {
				UENUM = i;
 5b4:	c9 ee       	ldi	r28, 0xE9	; 233
 5b6:	d0 e0       	ldi	r29, 0x00	; 0
				en = pgm_read_byte(cfg++);
				UECONX = en;
 5b8:	ab ee       	ldi	r26, 0xEB	; 235
 5ba:	b0 e0       	ldi	r27, 0x00	; 0
				if (en) {
					UECFG0X = pgm_read_byte(cfg++);
 5bc:	0c ee       	ldi	r16, 0xEC	; 236
 5be:	10 e0       	ldi	r17, 0x00	; 0
					UECFG1X = pgm_read_byte(cfg++);
 5c0:	6d ee       	ldi	r22, 0xED	; 237
 5c2:	70 e0       	ldi	r23, 0x00	; 0
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
				UENUM = i;
 5c4:	88 83       	st	Y, r24
				en = pgm_read_byte(cfg++);
 5c6:	a9 01       	movw	r20, r18
 5c8:	4f 5f       	subi	r20, 0xFF	; 255
 5ca:	5f 4f       	sbci	r21, 0xFF	; 255
 5cc:	f9 01       	movw	r30, r18
 5ce:	94 91       	lpm	r25, Z
				UECONX = en;
 5d0:	9c 93       	st	X, r25
				if (en) {
 5d2:	99 23       	and	r25, r25
 5d4:	61 f0       	breq	.+24     	; 0x5ee <__vector_11+0x186>
					UECFG0X = pgm_read_byte(cfg++);
 5d6:	fa 01       	movw	r30, r20
 5d8:	44 91       	lpm	r20, Z
 5da:	f8 01       	movw	r30, r16
 5dc:	40 83       	st	Z, r20
					UECFG1X = pgm_read_byte(cfg++);
 5de:	f9 01       	movw	r30, r18
 5e0:	32 96       	adiw	r30, 0x02	; 2
 5e2:	94 91       	lpm	r25, Z
 5e4:	2d 5f       	subi	r18, 0xFD	; 253
 5e6:	3f 4f       	sbci	r19, 0xFF	; 255
 5e8:	fb 01       	movw	r30, r22
 5ea:	90 83       	st	Z, r25
 5ec:	01 c0       	rjmp	.+2      	; 0x5f0 <__vector_11+0x188>
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
				UENUM = i;
				en = pgm_read_byte(cfg++);
 5ee:	9a 01       	movw	r18, r20
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
 5f0:	8f 5f       	subi	r24, 0xFF	; 255
 5f2:	85 30       	cpi	r24, 0x05	; 5
 5f4:	39 f7       	brne	.-50     	; 0x5c4 <__vector_11+0x15c>
				if (en) {
					UECFG0X = pgm_read_byte(cfg++);
					UECFG1X = pgm_read_byte(cfg++);
				}
			}
        		UERST = 0x1E;
 5f6:	ea ee       	ldi	r30, 0xEA	; 234
 5f8:	f0 e0       	ldi	r31, 0x00	; 0
 5fa:	8e e1       	ldi	r24, 0x1E	; 30
 5fc:	80 83       	st	Z, r24
        		UERST = 0;
 5fe:	10 82       	st	Z, r1
			return;
 600:	a1 c0       	rjmp	.+322    	; 0x744 <__vector_11+0x2dc>
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
 602:	88 30       	cpi	r24, 0x08	; 8
 604:	81 f4       	brne	.+32     	; 0x626 <__vector_11+0x1be>
 606:	60 38       	cpi	r22, 0x80	; 128
 608:	09 f0       	breq	.+2      	; 0x60c <__vector_11+0x1a4>
 60a:	95 c0       	rjmp	.+298    	; 0x736 <__vector_11+0x2ce>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 60c:	e8 ee       	ldi	r30, 0xE8	; 232
 60e:	f0 e0       	ldi	r31, 0x00	; 0
 610:	80 81       	ld	r24, Z
 612:	80 ff       	sbrs	r24, 0
 614:	fd cf       	rjmp	.-6      	; 0x610 <__vector_11+0x1a8>
        		UERST = 0;
			return;
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
			usb_wait_in_ready();
			UEDATX = usb_configuration;
 616:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <usb_configuration>
 61a:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 61e:	8e ef       	ldi	r24, 0xFE	; 254
 620:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 624:	8f c0       	rjmp	.+286    	; 0x744 <__vector_11+0x2dc>
			usb_wait_in_ready();
			UEDATX = usb_configuration;
			usb_send_in();
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
 626:	81 32       	cpi	r24, 0x21	; 33
 628:	b9 f4       	brne	.+46     	; 0x658 <__vector_11+0x1f0>
 62a:	61 3a       	cpi	r22, 0xA1	; 161
 62c:	09 f0       	breq	.+2      	; 0x630 <__vector_11+0x1c8>
 62e:	83 c0       	rjmp	.+262    	; 0x736 <__vector_11+0x2ce>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 630:	e8 ee       	ldi	r30, 0xE8	; 232
 632:	f0 e0       	ldi	r31, 0x00	; 0
 634:	80 81       	ld	r24, Z
 636:	80 ff       	sbrs	r24, 0
 638:	fd cf       	rjmp	.-6      	; 0x634 <__vector_11+0x1cc>
 63a:	e0 e0       	ldi	r30, 0x00	; 0
 63c:	f1 e0       	ldi	r31, 0x01	; 1
 63e:	27 e0       	ldi	r18, 0x07	; 7
 640:	31 e0       	ldi	r19, 0x01	; 1
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
				UEDATX = *p++;
 642:	a1 ef       	ldi	r26, 0xF1	; 241
 644:	b0 e0       	ldi	r27, 0x00	; 0
 646:	81 91       	ld	r24, Z+
 648:	8c 93       	st	X, r24
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
 64a:	e2 17       	cp	r30, r18
 64c:	f3 07       	cpc	r31, r19
 64e:	d9 f7       	brne	.-10     	; 0x646 <__vector_11+0x1de>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 650:	8e ef       	ldi	r24, 0xFE	; 254
 652:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 656:	76 c0       	rjmp	.+236    	; 0x744 <__vector_11+0x2dc>
				UEDATX = *p++;
			}
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
 658:	80 32       	cpi	r24, 0x20	; 32
 65a:	d1 f4       	brne	.+52     	; 0x690 <__vector_11+0x228>
 65c:	61 32       	cpi	r22, 0x21	; 33
 65e:	09 f0       	breq	.+2      	; 0x662 <__vector_11+0x1fa>
 660:	6a c0       	rjmp	.+212    	; 0x736 <__vector_11+0x2ce>
{
	UEINTX = ~(1<<TXINI);
}
static inline void usb_wait_receive_out(void)
{
	while (!(UEINTX & (1<<RXOUTI))) ;
 662:	e8 ee       	ldi	r30, 0xE8	; 232
 664:	f0 e0       	ldi	r31, 0x00	; 0
 666:	80 81       	ld	r24, Z
 668:	82 ff       	sbrs	r24, 2
 66a:	fd cf       	rjmp	.-6      	; 0x666 <__vector_11+0x1fe>
 66c:	e0 e0       	ldi	r30, 0x00	; 0
 66e:	f1 e0       	ldi	r31, 0x01	; 1
 670:	27 e0       	ldi	r18, 0x07	; 7
 672:	31 e0       	ldi	r19, 0x01	; 1
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
				*p++ = UEDATX;
 674:	a1 ef       	ldi	r26, 0xF1	; 241
 676:	b0 e0       	ldi	r27, 0x00	; 0
 678:	8c 91       	ld	r24, X
 67a:	81 93       	st	Z+, r24
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
 67c:	e2 17       	cp	r30, r18
 67e:	f3 07       	cpc	r31, r19
 680:	d9 f7       	brne	.-10     	; 0x678 <__vector_11+0x210>
{
	while (!(UEINTX & (1<<RXOUTI))) ;
}
static inline void usb_ack_out(void)
{
	UEINTX = ~(1<<RXOUTI);
 682:	e8 ee       	ldi	r30, 0xE8	; 232
 684:	f0 e0       	ldi	r31, 0x00	; 0
 686:	8b ef       	ldi	r24, 0xFB	; 251
 688:	80 83       	st	Z, r24
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 68a:	8e ef       	ldi	r24, 0xFE	; 254
 68c:	80 83       	st	Z, r24
 68e:	5a c0       	rjmp	.+180    	; 0x744 <__vector_11+0x2dc>
			}
			usb_ack_out();
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_CONTROL_LINE_STATE && bmRequestType == 0x21) {
 690:	82 32       	cpi	r24, 0x22	; 34
 692:	71 f4       	brne	.+28     	; 0x6b0 <__vector_11+0x248>
 694:	61 32       	cpi	r22, 0x21	; 33
 696:	09 f0       	breq	.+2      	; 0x69a <__vector_11+0x232>
 698:	4e c0       	rjmp	.+156    	; 0x736 <__vector_11+0x2ce>
			cdc_line_rtsdtr = wValue;
 69a:	20 93 12 01 	sts	0x0112, r18	; 0x800112 <cdc_line_rtsdtr>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 69e:	e8 ee       	ldi	r30, 0xE8	; 232
 6a0:	f0 e0       	ldi	r31, 0x00	; 0
 6a2:	80 81       	ld	r24, Z
 6a4:	80 ff       	sbrs	r24, 0
 6a6:	fd cf       	rjmp	.-6      	; 0x6a2 <__vector_11+0x23a>
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 6a8:	8e ef       	ldi	r24, 0xFE	; 254
 6aa:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 6ae:	4a c0       	rjmp	.+148    	; 0x744 <__vector_11+0x2dc>
			cdc_line_rtsdtr = wValue;
			usb_wait_in_ready();
			usb_send_in();
			return;
		}
		if (bRequest == GET_STATUS) {
 6b0:	81 11       	cpse	r24, r1
 6b2:	1a c0       	rjmp	.+52     	; 0x6e8 <__vector_11+0x280>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 6b4:	e8 ee       	ldi	r30, 0xE8	; 232
 6b6:	f0 e0       	ldi	r31, 0x00	; 0
 6b8:	80 81       	ld	r24, Z
 6ba:	80 ff       	sbrs	r24, 0
 6bc:	fd cf       	rjmp	.-6      	; 0x6b8 <__vector_11+0x250>
		}
		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
			#ifdef SUPPORT_ENDPOINT_HALT
			if (bmRequestType == 0x82) {
 6be:	62 38       	cpi	r22, 0x82	; 130
 6c0:	51 f4       	brne	.+20     	; 0x6d6 <__vector_11+0x26e>
				UENUM = wIndex;
 6c2:	e9 ee       	ldi	r30, 0xE9	; 233
 6c4:	f0 e0       	ldi	r31, 0x00	; 0
 6c6:	40 83       	st	Z, r20
				if (UECONX & (1<<STALLRQ)) i = 1;
 6c8:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 6cc:	85 fb       	bst	r24, 5
 6ce:	88 27       	eor	r24, r24
 6d0:	80 f9       	bld	r24, 0
				UENUM = 0;
 6d2:	10 82       	st	Z, r1
 6d4:	01 c0       	rjmp	.+2      	; 0x6d8 <__vector_11+0x270>
			usb_send_in();
			return;
		}
		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
 6d6:	80 e0       	ldi	r24, 0x00	; 0
				UENUM = wIndex;
				if (UECONX & (1<<STALLRQ)) i = 1;
				UENUM = 0;
			}
			#endif
			UEDATX = i;
 6d8:	e1 ef       	ldi	r30, 0xF1	; 241
 6da:	f0 e0       	ldi	r31, 0x00	; 0
 6dc:	80 83       	st	Z, r24
			UEDATX = 0;
 6de:	10 82       	st	Z, r1
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 6e0:	8e ef       	ldi	r24, 0xFE	; 254
 6e2:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 6e6:	2e c0       	rjmp	.+92     	; 0x744 <__vector_11+0x2dc>
			UEDATX = 0;
			usb_send_in();
			return;
		}
		#ifdef SUPPORT_ENDPOINT_HALT
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
 6e8:	98 2f       	mov	r25, r24
 6ea:	9d 7f       	andi	r25, 0xFD	; 253
 6ec:	91 30       	cpi	r25, 0x01	; 1
 6ee:	19 f5       	brne	.+70     	; 0x736 <__vector_11+0x2ce>
		  && bmRequestType == 0x02 && wValue == 0) {
 6f0:	62 30       	cpi	r22, 0x02	; 2
 6f2:	09 f5       	brne	.+66     	; 0x736 <__vector_11+0x2ce>
 6f4:	23 2b       	or	r18, r19
 6f6:	f9 f4       	brne	.+62     	; 0x736 <__vector_11+0x2ce>
			i = wIndex & 0x7F;
 6f8:	4f 77       	andi	r20, 0x7F	; 127
			if (i >= 1 && i <= MAX_ENDPOINT) {
 6fa:	9f ef       	ldi	r25, 0xFF	; 255
 6fc:	94 0f       	add	r25, r20
 6fe:	94 30       	cpi	r25, 0x04	; 4
 700:	d0 f4       	brcc	.+52     	; 0x736 <__vector_11+0x2ce>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 702:	9e ef       	ldi	r25, 0xFE	; 254
 704:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
		  && bmRequestType == 0x02 && wValue == 0) {
			i = wIndex & 0x7F;
			if (i >= 1 && i <= MAX_ENDPOINT) {
				usb_send_in();
				UENUM = i;
 708:	40 93 e9 00 	sts	0x00E9, r20	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				if (bRequest == SET_FEATURE) {
 70c:	83 30       	cpi	r24, 0x03	; 3
 70e:	21 f4       	brne	.+8      	; 0x718 <__vector_11+0x2b0>
					UECONX = (1<<STALLRQ)|(1<<EPEN);
 710:	81 e2       	ldi	r24, 0x21	; 33
 712:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 716:	16 c0       	rjmp	.+44     	; 0x744 <__vector_11+0x2dc>
				} else {
					UECONX = (1<<STALLRQC)|(1<<RSTDT)|(1<<EPEN);
 718:	89 e1       	ldi	r24, 0x19	; 25
 71a:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
					UERST = (1 << i);
 71e:	81 e0       	ldi	r24, 0x01	; 1
 720:	90 e0       	ldi	r25, 0x00	; 0
 722:	02 c0       	rjmp	.+4      	; 0x728 <__vector_11+0x2c0>
 724:	88 0f       	add	r24, r24
 726:	99 1f       	adc	r25, r25
 728:	4a 95       	dec	r20
 72a:	e2 f7       	brpl	.-8      	; 0x724 <__vector_11+0x2bc>
 72c:	ea ee       	ldi	r30, 0xEA	; 234
 72e:	f0 e0       	ldi	r31, 0x00	; 0
 730:	80 83       	st	Z, r24
					UERST = 0;
 732:	10 82       	st	Z, r1
 734:	07 c0       	rjmp	.+14     	; 0x744 <__vector_11+0x2dc>
				return;
			}
		}
		#endif
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
 736:	81 e2       	ldi	r24, 0x21	; 33
 738:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 73c:	03 c0       	rjmp	.+6      	; 0x744 <__vector_11+0x2dc>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 73e:	6c 93       	st	X, r22
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
 740:	21 11       	cpse	r18, r1
 742:	f7 ce       	rjmp	.-530    	; 0x532 <__vector_11+0xca>
			}
		}
		#endif
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
}
 744:	ff 91       	pop	r31
 746:	ef 91       	pop	r30
 748:	df 91       	pop	r29
 74a:	cf 91       	pop	r28
 74c:	bf 91       	pop	r27
 74e:	af 91       	pop	r26
 750:	9f 91       	pop	r25
 752:	8f 91       	pop	r24
 754:	7f 91       	pop	r23
 756:	6f 91       	pop	r22
 758:	5f 91       	pop	r21
 75a:	4f 91       	pop	r20
 75c:	3f 91       	pop	r19
 75e:	2f 91       	pop	r18
 760:	1f 91       	pop	r17
 762:	0f 91       	pop	r16
 764:	0f 90       	pop	r0
 766:	0f be       	out	0x3f, r0	; 63
 768:	0f 90       	pop	r0
 76a:	1f 90       	pop	r1
 76c:	18 95       	reti

0000076e <_exit>:
 76e:	f8 94       	cli

00000770 <__stop_program>:
 770:	ff cf       	rjmp	.-2      	; 0x770 <__stop_program>
