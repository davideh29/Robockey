
PuckFind.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001a  00800100  00002a8a  00002b1e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002a8a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000007a  0080011a  0080011a  00002b38  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002b38  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002b68  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000360  00000000  00000000  00002ba8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004624  00000000  00000000  00002f08  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001da8  00000000  00000000  0000752c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002c11  00000000  00000000  000092d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000009c4  00000000  00000000  0000bee8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000ea4  00000000  00000000  0000c8ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000038e4  00000000  00000000  0000d750  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000330  00000000  00000000  00011034  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 67 01 	jmp	0x2ce	; 0x2ce <__ctors_end>
       4:	0c 94 84 01 	jmp	0x308	; 0x308 <__bad_interrupt>
       8:	0c 94 84 01 	jmp	0x308	; 0x308 <__bad_interrupt>
       c:	0c 94 34 10 	jmp	0x2068	; 0x2068 <__vector_3>
      10:	0c 94 84 01 	jmp	0x308	; 0x308 <__bad_interrupt>
      14:	0c 94 84 01 	jmp	0x308	; 0x308 <__bad_interrupt>
      18:	0c 94 84 01 	jmp	0x308	; 0x308 <__bad_interrupt>
      1c:	0c 94 84 01 	jmp	0x308	; 0x308 <__bad_interrupt>
      20:	0c 94 84 01 	jmp	0x308	; 0x308 <__bad_interrupt>
      24:	0c 94 84 01 	jmp	0x308	; 0x308 <__bad_interrupt>
      28:	0c 94 e8 03 	jmp	0x7d0	; 0x7d0 <__vector_10>
      2c:	0c 94 26 04 	jmp	0x84c	; 0x84c <__vector_11>
      30:	0c 94 84 01 	jmp	0x308	; 0x308 <__bad_interrupt>
      34:	0c 94 84 01 	jmp	0x308	; 0x308 <__bad_interrupt>
      38:	0c 94 84 01 	jmp	0x308	; 0x308 <__bad_interrupt>
      3c:	0c 94 84 01 	jmp	0x308	; 0x308 <__bad_interrupt>
      40:	0c 94 84 01 	jmp	0x308	; 0x308 <__bad_interrupt>
      44:	0c 94 84 01 	jmp	0x308	; 0x308 <__bad_interrupt>
      48:	0c 94 84 01 	jmp	0x308	; 0x308 <__bad_interrupt>
      4c:	0c 94 84 01 	jmp	0x308	; 0x308 <__bad_interrupt>
      50:	0c 94 84 01 	jmp	0x308	; 0x308 <__bad_interrupt>
      54:	0c 94 84 01 	jmp	0x308	; 0x308 <__bad_interrupt>
      58:	0c 94 84 01 	jmp	0x308	; 0x308 <__bad_interrupt>
      5c:	0c 94 84 01 	jmp	0x308	; 0x308 <__bad_interrupt>
      60:	0c 94 84 01 	jmp	0x308	; 0x308 <__bad_interrupt>
      64:	0c 94 84 01 	jmp	0x308	; 0x308 <__bad_interrupt>
      68:	0c 94 84 01 	jmp	0x308	; 0x308 <__bad_interrupt>
      6c:	0c 94 84 01 	jmp	0x308	; 0x308 <__bad_interrupt>
      70:	0c 94 84 01 	jmp	0x308	; 0x308 <__bad_interrupt>
      74:	0c 94 84 01 	jmp	0x308	; 0x308 <__bad_interrupt>
      78:	0c 94 84 01 	jmp	0x308	; 0x308 <__bad_interrupt>
      7c:	0c 94 84 01 	jmp	0x308	; 0x308 <__bad_interrupt>
      80:	0c 94 84 01 	jmp	0x308	; 0x308 <__bad_interrupt>
      84:	0c 94 84 01 	jmp	0x308	; 0x308 <__bad_interrupt>
      88:	0c 94 84 01 	jmp	0x308	; 0x308 <__bad_interrupt>
      8c:	0c 94 84 01 	jmp	0x308	; 0x308 <__bad_interrupt>
      90:	0c 94 84 01 	jmp	0x308	; 0x308 <__bad_interrupt>
      94:	0c 94 84 01 	jmp	0x308	; 0x308 <__bad_interrupt>
      98:	0c 94 84 01 	jmp	0x308	; 0x308 <__bad_interrupt>
      9c:	0c 94 84 01 	jmp	0x308	; 0x308 <__bad_interrupt>
      a0:	0c 94 84 01 	jmp	0x308	; 0x308 <__bad_interrupt>
      a4:	0c 94 84 01 	jmp	0x308	; 0x308 <__bad_interrupt>
      a8:	0c 94 84 01 	jmp	0x308	; 0x308 <__bad_interrupt>
      ac:	08 4a       	sbci	r16, 0xA8	; 168
      ae:	d7 3b       	cpi	r29, 0xB7	; 183
      b0:	3b ce       	rjmp	.-906    	; 0xfffffd28 <__eeprom_end+0xff7efd28>
      b2:	01 6e       	ori	r16, 0xE1	; 225
      b4:	84 bc       	out	0x24, r8	; 36
      b6:	bf fd       	.word	0xfdbf	; ????
      b8:	c1 2f       	mov	r28, r17
      ba:	3d 6c       	ori	r19, 0xCD	; 205
      bc:	74 31       	cpi	r23, 0x14	; 20
      be:	9a bd       	out	0x2a, r25	; 42
      c0:	56 83       	std	Z+6, r21	; 0x06
      c2:	3d da       	rcall	.-2950   	; 0xfffff53e <__eeprom_end+0xff7ef53e>
      c4:	3d 00       	.word	0x003d	; ????
      c6:	c7 7f       	andi	r28, 0xF7	; 247
      c8:	11 be       	out	0x31, r1	; 49
      ca:	d9 e4       	ldi	r29, 0x49	; 73
      cc:	bb 4c       	sbci	r27, 0xCB	; 203
      ce:	3e 91       	ld	r19, -X
      d0:	6b aa       	std	Y+51, r6	; 0x33
      d2:	aa be       	out	0x3a, r10	; 58
      d4:	00 00       	nop
      d6:	00 80       	ld	r0, Z
      d8:	3f 05       	cpc	r19, r15
      da:	a8 4c       	sbci	r26, 0xC8	; 200
      dc:	cd b2       	in	r12, 0x1d	; 29
      de:	d4 4e       	sbci	r29, 0xE4	; 228
      e0:	b9 38       	cpi	r27, 0x89	; 137
      e2:	36 a9       	ldd	r19, Z+54	; 0x36
      e4:	02 0c       	add	r0, r2
      e6:	50 b9       	out	0x00, r21	; 0
      e8:	91 86       	std	Z+9, r9	; 0x09
      ea:	88 08       	sbc	r8, r8
      ec:	3c a6       	std	Y+44, r3	; 0x2c
      ee:	aa aa       	std	Y+50, r10	; 0x32
      f0:	2a be       	out	0x3a, r2	; 58
      f2:	00 00       	nop
      f4:	00 80       	ld	r0, Z
      f6:	3f 07       	cpc	r19, r31
      f8:	63 42       	sbci	r22, 0x23	; 35
      fa:	36 b7       	in	r19, 0x36	; 54
      fc:	9b d8       	rcall	.-3786   	; 0xfffff234 <__eeprom_end+0xff7ef234>
      fe:	a7 1a       	sub	r10, r23
     100:	39 68       	ori	r19, 0x89	; 137
     102:	56 18       	sub	r5, r6
     104:	ae ba       	out	0x1e, r10	; 30
     106:	ab 55       	subi	r26, 0x5B	; 91
     108:	8c 1d       	adc	r24, r12
     10a:	3c b7       	in	r19, 0x3c	; 60
     10c:	cc 57       	subi	r28, 0x7C	; 124
     10e:	63 bd       	out	0x23, r22	; 35
     110:	6d ed       	ldi	r22, 0xDD	; 221
     112:	fd 75       	andi	r31, 0x5D	; 93
     114:	3e f6       	brtc	.-114    	; 0xa4 <__SREG__+0x65>
     116:	17 72       	andi	r17, 0x27	; 39
     118:	31 bf       	out	0x31, r19	; 49
     11a:	00 00       	nop
     11c:	00 80       	ld	r0, Z
     11e:	3f 08       	sbc	r3, r15
     120:	00 00       	nop
     122:	00 be       	out	0x30, r0	; 48
     124:	92 24       	eor	r9, r2
     126:	49 12       	cpse	r4, r25
     128:	3e ab       	std	Y+54, r19	; 0x36
     12a:	aa aa       	std	Y+50, r10	; 0x32
     12c:	2a be       	out	0x3a, r2	; 58
     12e:	cd cc       	rjmp	.-1638   	; 0xfffffaca <__eeprom_end+0xff7efaca>
     130:	cc 4c       	sbci	r28, 0xCC	; 204
     132:	3e 00       	.word	0x003e	; ????
     134:	00 00       	nop
     136:	80 be       	out	0x30, r8	; 48
     138:	ab aa       	std	Y+51, r10	; 0x33
     13a:	aa aa       	std	Y+50, r10	; 0x32
     13c:	3e 00       	.word	0x003e	; ????
     13e:	00 00       	nop
     140:	00 bf       	out	0x30, r16	; 48
     142:	00 00       	nop
     144:	00 80       	ld	r0, Z
     146:	3f 00       	.word	0x003f	; ????
     148:	00 00       	nop
     14a:	00 00       	nop
     14c:	08 41       	sbci	r16, 0x18	; 24
     14e:	78 d3       	rcall	.+1776   	; 0x840 <__vector_10+0x70>
     150:	bb 43       	sbci	r27, 0x3B	; 59
     152:	87 d1       	rcall	.+782    	; 0x462 <turn_in_place+0x16>
     154:	13 3d       	cpi	r17, 0xD3	; 211
     156:	19 0e       	add	r1, r25
     158:	3c c3       	rjmp	.+1656   	; 0x7d2 <__vector_10+0x2>
     15a:	bd 42       	sbci	r27, 0x2D	; 45
     15c:	82 ad       	ldd	r24, Z+58	; 0x3a
     15e:	2b 3e       	cpi	r18, 0xEB	; 235
     160:	68 ec       	ldi	r22, 0xC8	; 200
     162:	82 76       	andi	r24, 0x62	; 98
     164:	be d9       	rcall	.-3204   	; 0xfffff4e2 <__eeprom_end+0xff7ef4e2>
     166:	8f e1       	ldi	r24, 0x1F	; 31
     168:	a9 3e       	cpi	r26, 0xE9	; 233
     16a:	4c 80       	ldd	r4, Y+4	; 0x04
     16c:	ef ff       	.word	0xffef	; ????
     16e:	be 01       	movw	r22, r28
     170:	c4 ff       	sbrs	r28, 4
     172:	7f 3f       	cpi	r23, 0xFF	; 255
     174:	00 00       	nop
     176:	00 00       	nop
	...

0000017a <__trampolines_end>:
     17a:	00 01       	movw	r0, r0
     17c:	00 00       	nop
     17e:	11 02       	muls	r17, r17
     180:	12 00       	.word	0x0012	; ????
     182:	02 00       	.word	0x0002	; ????
     184:	00 ce       	rjmp	.-1024   	; 0xfffffd86 <__eeprom_end+0xff7efd86>
     186:	01 43       	sbci	r16, 0x31	; 49
     188:	00 03       	mulsu	r16, r16
     18a:	00 00       	nop
     18c:	ca 01       	movw	r24, r20
     18e:	04 01       	movw	r0, r8
     190:	03 09       	sbc	r16, r3
     192:	04 b6       	in	r0, 0x34	; 52
     194:	01 12       	cpse	r0, r17
     196:	02 03       	mulsu	r16, r18
     198:	09 04       	cpc	r0, r9
     19a:	ae 01       	movw	r20, r28
     19c:	06 03       	mulsu	r16, r22
     19e:	03 09       	sbc	r16, r3
     1a0:	04 a4       	ldd	r0, Z+44	; 0x2c
     1a2:	01 08       	sbc	r0, r1

000001a4 <string3>:
     1a4:	08 03 34 00 31 00 30 00 00 00                       ..4.1.0...

000001ae <string2>:
     1ae:	06 03 4d 00 32 00 00 00                             ..M.2...

000001b6 <string1>:
     1b6:	12 03 4a 00 2e 00 20 00 46 00 69 00 65 00 6e 00     ..J... .F.i.e.n.
     1c6:	65 00 00 00                                         e...

000001ca <string0>:
     1ca:	04 03 09 04                                         ....

000001ce <config1_descriptor>:
     1ce:	09 02 43 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..C.....2.......
     1de:	01 00 05 24 00 10 01 05 24 01 01 01 04 24 02 06     ...$....$....$..
     1ee:	05 24 06 00 01 07 05 82 03 10 00 40 09 04 01 00     .$.........@....
     1fe:	02 0a 00 00 00 07 05 03 02 40 00 00 07 05 84 02     .........@......
     20e:	40 00 00                                            @..

00000211 <device_descriptor>:
     211:	12 01 00 02 02 00 00 10 c0 16 7a 04 00 01 01 02     ..........z.....
     221:	03 01                                               ..

00000223 <endpoint_config_table>:
     223:	00 01 c1 12 01 80 36 01 81 36                       ......6..6

0000022d <__c.2050>:
     22d:	20 20 20 2d 2d 2d 20 20 20 52 68 6f 3a 20 00           ---   Rho: .

0000023c <__c.2048>:
     23c:	20 20 20 2d 2d 2d 20 20 20 54 68 65 74 61 3a 20        ---   Theta: 
	...

0000024d <__c.2046>:
     24d:	20 29 00                                             ).

00000250 <__c.2044>:
     250:	2c 20 00                                            , .

00000253 <__c.2042>:
     253:	28 20 00                                            ( .

00000256 <__c.2040>:
     256:	20 20 20 2d 2d 2d 20 20 20 4e 65 77 20 66 72 61        ---   New fra
     266:	6d 65 3a 20 00                                      me: .

0000026b <__c.2038>:
     26b:	20 29 00                                             ).

0000026e <__c.2036>:
     26e:	2c 20 00                                            , .

00000271 <__c.2034>:
     271:	28 20 00                                            ( .

00000274 <__c.2032>:
     274:	20 20 20 2d 2d 2d 20 20 20 54 72 61 6e 73 6c 61        ---   Transla
     284:	74 69 6f 6e 3a 20 00                                tion: .

0000028b <__c.2030>:
     28b:	42 6f 74 74 6f 6d 20 49 6e 64 65 78 3a 20 00        Bottom Index: .

0000029a <__c.2028>:
     29a:	20 20 20 20 2d 2d 2d 2d 2d 2d 20 20 20 20 00            ------    .

000002a9 <__c.2026>:
     2a9:	54 6f 70 20 49 6e 64 65 78 3a 20 00                 Top Index: .

000002b5 <__c.2021>:
     2b5:	20 20 20 2d 2d 2d 20 20 20 00                          ---   .

000002bf <__c.2019>:
     2bf:	20 29 00                                             ).

000002c2 <__c.2017>:
     2c2:	2c 20 00                                            , .

000002c5 <__c.2015>:
     2c5:	28 20 00                                            ( .

000002c8 <__c.2012>:
     2c8:	20 2d 2d 2d 20 00                                    --- .

000002ce <__ctors_end>:
     2ce:	11 24       	eor	r1, r1
     2d0:	1f be       	out	0x3f, r1	; 63
     2d2:	cf ef       	ldi	r28, 0xFF	; 255
     2d4:	da e0       	ldi	r29, 0x0A	; 10
     2d6:	de bf       	out	0x3e, r29	; 62
     2d8:	cd bf       	out	0x3d, r28	; 61

000002da <__do_copy_data>:
     2da:	11 e0       	ldi	r17, 0x01	; 1
     2dc:	a0 e0       	ldi	r26, 0x00	; 0
     2de:	b1 e0       	ldi	r27, 0x01	; 1
     2e0:	ea e8       	ldi	r30, 0x8A	; 138
     2e2:	fa e2       	ldi	r31, 0x2A	; 42
     2e4:	02 c0       	rjmp	.+4      	; 0x2ea <__do_copy_data+0x10>
     2e6:	05 90       	lpm	r0, Z+
     2e8:	0d 92       	st	X+, r0
     2ea:	aa 31       	cpi	r26, 0x1A	; 26
     2ec:	b1 07       	cpc	r27, r17
     2ee:	d9 f7       	brne	.-10     	; 0x2e6 <__do_copy_data+0xc>

000002f0 <__do_clear_bss>:
     2f0:	21 e0       	ldi	r18, 0x01	; 1
     2f2:	aa e1       	ldi	r26, 0x1A	; 26
     2f4:	b1 e0       	ldi	r27, 0x01	; 1
     2f6:	01 c0       	rjmp	.+2      	; 0x2fa <.do_clear_bss_start>

000002f8 <.do_clear_bss_loop>:
     2f8:	1d 92       	st	X+, r1

000002fa <.do_clear_bss_start>:
     2fa:	a4 39       	cpi	r26, 0x94	; 148
     2fc:	b2 07       	cpc	r27, r18
     2fe:	e1 f7       	brne	.-8      	; 0x2f8 <.do_clear_bss_loop>
     300:	0e 94 86 01 	call	0x30c	; 0x30c <main>
     304:	0c 94 43 15 	jmp	0x2a86	; 0x2a86 <_exit>

00000308 <__bad_interrupt>:
     308:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000030c <main>:
 * Team DAYS (13)
 */ 

 #include "robockey.h"

int main(void){
     30c:	cf 93       	push	r28
     30e:	df 93       	push	r29
     310:	cd b7       	in	r28, 0x3d	; 61
     312:	de b7       	in	r29, 0x3e	; 62
     314:	a5 97       	sbiw	r28, 0x25	; 37
     316:	0f b6       	in	r0, 0x3f	; 63
     318:	f8 94       	cli
     31a:	de bf       	out	0x3e, r29	; 62
     31c:	0f be       	out	0x3f, r0	; 63
     31e:	cd bf       	out	0x3d, r28	; 61
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     320:	2f eb       	ldi	r18, 0xBF	; 191
     322:	87 e2       	ldi	r24, 0x27	; 39
     324:	99 e0       	ldi	r25, 0x09	; 9
     326:	21 50       	subi	r18, 0x01	; 1
     328:	80 40       	sbci	r24, 0x00	; 0
     32a:	90 40       	sbci	r25, 0x00	; 0
     32c:	e1 f7       	brne	.-8      	; 0x326 <main+0x1a>
     32e:	00 c0       	rjmp	.+0      	; 0x330 <main+0x24>
     330:	00 00       	nop
	m_wait(3000);
	// System prescaler
	m_clockdivide(3);
     332:	e1 e6       	ldi	r30, 0x61	; 97
     334:	f0 e0       	ldi	r31, 0x00	; 0
     336:	80 e8       	ldi	r24, 0x80	; 128
     338:	80 83       	st	Z, r24
     33a:	83 e0       	ldi	r24, 0x03	; 3
     33c:	80 83       	st	Z, r24
	// Initialize usb
	m_usb_init();
     33e:	0e 94 74 03 	call	0x6e8	; 0x6e8 <m_usb_init>
	// Initialize motor
	motor_init();
     342:	0e 94 e7 01 	call	0x3ce	; 0x3ce <motor_init>
	//Initialize m_wii
	char wiiOpen = m_wii_open();
     346:	0e 94 30 06 	call	0xc60	; 0xc60 <m_wii_open>
	while(!wiiOpen) {
     34a:	81 11       	cpse	r24, r1
     34c:	03 c0       	rjmp	.+6      	; 0x354 <main+0x48>
		m_red(ON);
     34e:	6e 9a       	sbi	0x0d, 6	; 13
     350:	76 98       	cbi	0x0e, 6	; 14
     352:	fd cf       	rjmp	.-6      	; 0x34e <main+0x42>
		//return 0;
	}

	
	Robot robot;	// Robot variable
	init_robot(&robot, 1);
     354:	61 e0       	ldi	r22, 0x01	; 1
     356:	70 e0       	ldi	r23, 0x00	; 0
     358:	ce 01       	movw	r24, r28
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	0e 94 38 0b 	call	0x1670	; 0x1670 <init_robot>

	///// FOR TESTING WITHOUT PLAY COMMAND //////////////////
	// init_rf(1);
	active = true;
     360:	81 e0       	ldi	r24, 0x01	; 1
     362:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <active>
	unsigned int star_array[12];
	/////////////////////////////////////////////////////////
	int k = 0;
	while (1) {
		if (k++ >= 40) {
     366:	01 e0       	ldi	r16, 0x01	; 1
     368:	10 e0       	ldi	r17, 0x00	; 0
			k = 0;
     36a:	e1 2c       	mov	r14, r1
     36c:	f1 2c       	mov	r15, r1
     36e:	13 c0       	rjmp	.+38     	; 0x396 <main+0x8a>
	active = true;
	unsigned int star_array[12];
	/////////////////////////////////////////////////////////
	int k = 0;
	while (1) {
		if (k++ >= 40) {
     370:	08 32       	cpi	r16, 0x28	; 40
     372:	11 05       	cpc	r17, r1
     374:	1c f4       	brge	.+6      	; 0x37c <main+0x70>
     376:	0f 5f       	subi	r16, 0xFF	; 255
     378:	1f 4f       	sbci	r17, 0xFF	; 255
     37a:	0d c0       	rjmp	.+26     	; 0x396 <main+0x8a>
			k = 0;
			m_wii_read(star_array);
     37c:	ce 01       	movw	r24, r28
     37e:	0e 96       	adiw	r24, 0x0e	; 14
     380:	0e 94 51 07 	call	0xea2	; 0xea2 <m_wii_read>
			interpret(&robot, star_array);
     384:	be 01       	movw	r22, r28
     386:	62 5f       	subi	r22, 0xF2	; 242
     388:	7f 4f       	sbci	r23, 0xFF	; 255
     38a:	ce 01       	movw	r24, r28
     38c:	01 96       	adiw	r24, 0x01	; 1
     38e:	0e 94 49 0b 	call	0x1692	; 0x1692 <interpret>
	unsigned int star_array[12];
	/////////////////////////////////////////////////////////
	int k = 0;
	while (1) {
		if (k++ >= 40) {
			k = 0;
     392:	0e 2d       	mov	r16, r14
     394:	1f 2d       	mov	r17, r15
			m_wii_read(star_array);
			interpret(&robot, star_array);
		}
		// Check if robot is active
		if(active){
     396:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <active>
     39a:	88 23       	and	r24, r24
     39c:	49 f3       	breq	.-46     	; 0x370 <main+0x64>
			// move to puck
			if(step_to_puck()){
     39e:	0e 94 50 09 	call	0x12a0	; 0x12a0 <step_to_puck>
     3a2:	88 23       	and	r24, r24
     3a4:	29 f3       	breq	.-54     	; 0x370 <main+0x64>
				motor_stop();
     3a6:	0e 94 21 02 	call	0x442	; 0x442 <motor_stop>
     3aa:	2f e7       	ldi	r18, 0x7F	; 127
     3ac:	8a e1       	ldi	r24, 0x1A	; 26
     3ae:	96 e0       	ldi	r25, 0x06	; 6
     3b0:	21 50       	subi	r18, 0x01	; 1
     3b2:	80 40       	sbci	r24, 0x00	; 0
     3b4:	90 40       	sbci	r25, 0x00	; 0
     3b6:	e1 f7       	brne	.-8      	; 0x3b0 <main+0xa4>
     3b8:	00 c0       	rjmp	.+0      	; 0x3ba <main+0xae>
     3ba:	00 00       	nop
				m_wait(2000);
				// if step_to_puck returns true, it means you have the puck!
				if(step_to_goal(&robot)) {
     3bc:	ce 01       	movw	r24, r28
     3be:	01 96       	adiw	r24, 0x01	; 1
     3c0:	0e 94 c3 0f 	call	0x1f86	; 0x1f86 <step_to_goal>
     3c4:	88 23       	and	r24, r24
     3c6:	a1 f2       	breq	.-88     	; 0x370 <main+0x64>
					// if step_to_goal returns true, it means you scored!
					m_green(ON);
     3c8:	6a 9a       	sbi	0x0d, 2	; 13
     3ca:	72 98       	cbi	0x0e, 2	; 14
     3cc:	d1 cf       	rjmp	.-94     	; 0x370 <main+0x64>

000003ce <motor_init>:
#define PI 3.14159

// Initialize motor
void motor_init() {
	// Digital output pins
	set(DDRB, 1); // A-IN 1
     3ce:	21 9a       	sbi	0x04, 1	; 4
	set(DDRB, 2); // A-IN 2
     3d0:	22 9a       	sbi	0x04, 2	; 4
	set(DDRB, 3); // B-IN 1
     3d2:	23 9a       	sbi	0x04, 3	; 4
	set(DDRB, 7); // B-IN 2
     3d4:	27 9a       	sbi	0x04, 7	; 4

	set(PORTB, 1);
     3d6:	29 9a       	sbi	0x05, 1	; 5
	clear(PORTB, 2);
     3d8:	2a 98       	cbi	0x05, 2	; 5
	set(PORTB, 3);
     3da:	2b 9a       	sbi	0x05, 3	; 5
	clear(PORTB, 7);
     3dc:	2f 98       	cbi	0x05, 7	; 5

	// Timer 1
	// Prescale timer clock
	clear(TCCR1B, CS12);
     3de:	e1 e8       	ldi	r30, 0x81	; 129
     3e0:	f0 e0       	ldi	r31, 0x00	; 0
     3e2:	80 81       	ld	r24, Z
     3e4:	8b 7f       	andi	r24, 0xFB	; 251
     3e6:	80 83       	st	Z, r24
	set(TCCR1B, CS11);
     3e8:	80 81       	ld	r24, Z
     3ea:	82 60       	ori	r24, 0x02	; 2
     3ec:	80 83       	st	Z, r24
	clear(TCCR1B, CS10);
     3ee:	80 81       	ld	r24, Z
     3f0:	8e 7f       	andi	r24, 0xFE	; 254
     3f2:	80 83       	st	Z, r24

	// Set timer mode (UP to 0x00FF, PWM mode)
	clear(TCCR1B, WGM13);
     3f4:	80 81       	ld	r24, Z
     3f6:	8f 7e       	andi	r24, 0xEF	; 239
     3f8:	80 83       	st	Z, r24
	set(TCCR1B, WGM12);
     3fa:	80 81       	ld	r24, Z
     3fc:	88 60       	ori	r24, 0x08	; 8
     3fe:	80 83       	st	Z, r24
	clear(TCCR1A, WGM11);
     400:	e0 e8       	ldi	r30, 0x80	; 128
     402:	f0 e0       	ldi	r31, 0x00	; 0
     404:	80 81       	ld	r24, Z
     406:	8d 7f       	andi	r24, 0xFD	; 253
     408:	80 83       	st	Z, r24
	set(TCCR1A, WGM10);
     40a:	80 81       	ld	r24, Z
     40c:	81 60       	ori	r24, 0x01	; 1
     40e:	80 83       	st	Z, r24

	// Set Channel A compare output (Set at OCR1A, clear at rollover)
	set(TCCR1A, COM1A1);
     410:	80 81       	ld	r24, Z
     412:	80 68       	ori	r24, 0x80	; 128
     414:	80 83       	st	Z, r24
	set(TCCR1A, COM1A0);
     416:	80 81       	ld	r24, Z
     418:	80 64       	ori	r24, 0x40	; 64
     41a:	80 83       	st	Z, r24

	// Set Channel B compare output (Set at OCR1B, clear at rollover)
	set(TCCR1A, COM1B1);
     41c:	80 81       	ld	r24, Z
     41e:	80 62       	ori	r24, 0x20	; 32
     420:	80 83       	st	Z, r24
	set(TCCR1A, COM1B0);
     422:	80 81       	ld	r24, Z
     424:	80 61       	ori	r24, 0x10	; 16
     426:	80 83       	st	Z, r24

	// Initialize OCR1A/B
	OCR1A = 0xBF;
     428:	8f eb       	ldi	r24, 0xBF	; 191
     42a:	90 e0       	ldi	r25, 0x00	; 0
     42c:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     430:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	OCR1B = 0xBF;
     434:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
     438:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>

	// Enable B5/6 output
	set(DDRB, 6);
     43c:	26 9a       	sbi	0x04, 6	; 4
	set(DDRB, 5);
     43e:	25 9a       	sbi	0x04, 5	; 4
     440:	08 95       	ret

00000442 <motor_stop>:
}

// Stop motor
void motor_stop() {
	clear(PORTB, 1);
     442:	29 98       	cbi	0x05, 1	; 5
	clear(PORTB, 2);
     444:	2a 98       	cbi	0x05, 2	; 5
	clear(PORTB, 3);
     446:	2b 98       	cbi	0x05, 3	; 5
	clear(PORTB, 7);
     448:	2f 98       	cbi	0x05, 7	; 5
     44a:	08 95       	ret

0000044c <turn_in_place>:
}

// Turn in place - right if true or left if false
// Speed is an int between 0 and 255
void turn_in_place(bool right, int speed) {
	if (right) {
     44c:	88 23       	and	r24, r24
     44e:	89 f0       	breq	.+34     	; 0x472 <turn_in_place+0x26>
		OCR1A = 255 - speed;
     450:	8f ef       	ldi	r24, 0xFF	; 255
     452:	90 e0       	ldi	r25, 0x00	; 0
     454:	86 1b       	sub	r24, r22
     456:	97 0b       	sbc	r25, r23
     458:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     45c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
		OCR1B = 255 - speed;
     460:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
     464:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
		set(PORTB, 1);
     468:	29 9a       	sbi	0x05, 1	; 5
		clear(PORTB, 2);
     46a:	2a 98       	cbi	0x05, 2	; 5
		clear(PORTB, 3);
     46c:	2b 98       	cbi	0x05, 3	; 5
		set(PORTB, 7);
     46e:	2f 9a       	sbi	0x05, 7	; 5
     470:	08 95       	ret
	} else {
		OCR1A = 255 - speed;
     472:	8f ef       	ldi	r24, 0xFF	; 255
     474:	90 e0       	ldi	r25, 0x00	; 0
     476:	86 1b       	sub	r24, r22
     478:	97 0b       	sbc	r25, r23
     47a:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     47e:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
		OCR1B = 255 - speed;
     482:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
     486:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
		clear(PORTB, 1);
     48a:	29 98       	cbi	0x05, 1	; 5
		set(PORTB, 2);
     48c:	2a 9a       	sbi	0x05, 2	; 5
		set(PORTB, 3);
     48e:	2b 9a       	sbi	0x05, 3	; 5
		clear(PORTB, 7);
     490:	2f 98       	cbi	0x05, 7	; 5
     492:	08 95       	ret

00000494 <turn>:
}

// -50 to -1 left, 0 forward, 1 to 50 right
// Absolute value of input determines how "sharp" the turn is
void turn(int direction) {
	clear(PORTB, 1);
     494:	29 98       	cbi	0x05, 1	; 5
	set(PORTB, 2);
     496:	2a 9a       	sbi	0x05, 2	; 5
	clear(PORTB, 3);
     498:	2b 98       	cbi	0x05, 3	; 5
	set(PORTB, 7);
     49a:	2f 9a       	sbi	0x05, 7	; 5
	if (direction == 0) {
     49c:	00 97       	sbiw	r24, 0x00	; 0
     49e:	69 f4       	brne	.+26     	; 0x4ba <turn+0x26>
		OCR1A = 0x37;
     4a0:	87 e3       	ldi	r24, 0x37	; 55
     4a2:	90 e0       	ldi	r25, 0x00	; 0
     4a4:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     4a8:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
		OCR1B = 0x3F;
     4ac:	8f e3       	ldi	r24, 0x3F	; 63
     4ae:	90 e0       	ldi	r25, 0x00	; 0
     4b0:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
     4b4:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
     4b8:	08 95       	ret
     4ba:	bc 01       	movw	r22, r24
	} else if (direction > 0) {
     4bc:	18 16       	cp	r1, r24
     4be:	19 06       	cpc	r1, r25
     4c0:	ec f4       	brge	.+58     	; 0x4fc <turn+0x68>
		OCR1A = 0x00;
     4c2:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     4c6:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
		OCR1B = (int) (255.0 * (float) direction / 50.0);
     4ca:	07 2e       	mov	r0, r23
     4cc:	00 0c       	add	r0, r0
     4ce:	88 0b       	sbc	r24, r24
     4d0:	99 0b       	sbc	r25, r25
     4d2:	0e 94 08 12 	call	0x2410	; 0x2410 <__floatsisf>
     4d6:	20 e0       	ldi	r18, 0x00	; 0
     4d8:	30 e0       	ldi	r19, 0x00	; 0
     4da:	4f e7       	ldi	r20, 0x7F	; 127
     4dc:	53 e4       	ldi	r21, 0x43	; 67
     4de:	0e 94 2b 13 	call	0x2656	; 0x2656 <__mulsf3>
     4e2:	20 e0       	ldi	r18, 0x00	; 0
     4e4:	30 e0       	ldi	r19, 0x00	; 0
     4e6:	48 e4       	ldi	r20, 0x48	; 72
     4e8:	52 e4       	ldi	r21, 0x42	; 66
     4ea:	0e 94 5e 11 	call	0x22bc	; 0x22bc <__divsf3>
     4ee:	0e 94 d0 11 	call	0x23a0	; 0x23a0 <__fixsfsi>
     4f2:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
     4f6:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
     4fa:	08 95       	ret
	} else {
		OCR1A = (int) (255.0 * (float) -direction / 50.0);
     4fc:	71 95       	neg	r23
     4fe:	61 95       	neg	r22
     500:	71 09       	sbc	r23, r1
     502:	07 2e       	mov	r0, r23
     504:	00 0c       	add	r0, r0
     506:	88 0b       	sbc	r24, r24
     508:	99 0b       	sbc	r25, r25
     50a:	0e 94 08 12 	call	0x2410	; 0x2410 <__floatsisf>
     50e:	20 e0       	ldi	r18, 0x00	; 0
     510:	30 e0       	ldi	r19, 0x00	; 0
     512:	4f e7       	ldi	r20, 0x7F	; 127
     514:	53 e4       	ldi	r21, 0x43	; 67
     516:	0e 94 2b 13 	call	0x2656	; 0x2656 <__mulsf3>
     51a:	20 e0       	ldi	r18, 0x00	; 0
     51c:	30 e0       	ldi	r19, 0x00	; 0
     51e:	48 e4       	ldi	r20, 0x48	; 72
     520:	52 e4       	ldi	r21, 0x42	; 66
     522:	0e 94 5e 11 	call	0x22bc	; 0x22bc <__divsf3>
     526:	0e 94 d0 11 	call	0x23a0	; 0x23a0 <__fixsfsi>
     52a:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     52e:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
		OCR1B = 0x00;
     532:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
     536:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
     53a:	08 95       	ret

0000053c <facing_goal>:
	}
}

// Turn to face opponent's goal
bool facing_goal(Robot* robot, float opponent_x, float opponent_y) {
     53c:	8f 92       	push	r8
     53e:	9f 92       	push	r9
     540:	af 92       	push	r10
     542:	bf 92       	push	r11
     544:	cf 92       	push	r12
     546:	df 92       	push	r13
     548:	ef 92       	push	r14
     54a:	ff 92       	push	r15
     54c:	0f 93       	push	r16
     54e:	1f 93       	push	r17
     550:	cf 93       	push	r28
     552:	df 93       	push	r29
     554:	ec 01       	movw	r28, r24
     556:	48 01       	movw	r8, r16
     558:	59 01       	movw	r10, r18
	float opponent_angle = (PI - atan2f(-(robot->y - opponent_y), robot->x - opponent_x));
     55a:	9a 01       	movw	r18, r20
     55c:	ab 01       	movw	r20, r22
     55e:	69 81       	ldd	r22, Y+1	; 0x01
     560:	7a 81       	ldd	r23, Y+2	; 0x02
     562:	8b 81       	ldd	r24, Y+3	; 0x03
     564:	9c 81       	ldd	r25, Y+4	; 0x04
     566:	0e 94 75 10 	call	0x20ea	; 0x20ea <__subsf3>
     56a:	6b 01       	movw	r12, r22
     56c:	7c 01       	movw	r14, r24
     56e:	a5 01       	movw	r20, r10
     570:	94 01       	movw	r18, r8
     572:	6d 81       	ldd	r22, Y+5	; 0x05
     574:	7e 81       	ldd	r23, Y+6	; 0x06
     576:	8f 81       	ldd	r24, Y+7	; 0x07
     578:	98 85       	ldd	r25, Y+8	; 0x08
     57a:	0e 94 75 10 	call	0x20ea	; 0x20ea <__subsf3>
     57e:	90 58       	subi	r25, 0x80	; 128
     580:	a7 01       	movw	r20, r14
     582:	96 01       	movw	r18, r12
     584:	0e 94 f5 10 	call	0x21ea	; 0x21ea <atan2>
     588:	9b 01       	movw	r18, r22
     58a:	ac 01       	movw	r20, r24
     58c:	60 ed       	ldi	r22, 0xD0	; 208
     58e:	7f e0       	ldi	r23, 0x0F	; 15
     590:	89 e4       	ldi	r24, 0x49	; 73
     592:	90 e4       	ldi	r25, 0x40	; 64
     594:	0e 94 75 10 	call	0x20ea	; 0x20ea <__subsf3>
     598:	4b 01       	movw	r8, r22
     59a:	5c 01       	movw	r10, r24
	// Near -PI
	if (opponent_angle < high_bound && opponent_angle < PI && low_bound >= PI - error) {
		return true;
	}*/
	// Normal case
	return (robot->o > low_bound && robot->o < high_bound);
     59c:	c9 84       	ldd	r12, Y+9	; 0x09
     59e:	da 84       	ldd	r13, Y+10	; 0x0a
     5a0:	eb 84       	ldd	r14, Y+11	; 0x0b
     5a2:	fc 84       	ldd	r15, Y+12	; 0x0c

// Turn to face opponent's goal
bool facing_goal(Robot* robot, float opponent_x, float opponent_y) {
	float opponent_angle = (PI - atan2f(-(robot->y - opponent_y), robot->x - opponent_x));
	float error = PI / 45.0;
	float low_bound = opponent_angle - error;
     5a4:	2e e2       	ldi	r18, 0x2E	; 46
     5a6:	3a ef       	ldi	r19, 0xFA	; 250
     5a8:	4e e8       	ldi	r20, 0x8E	; 142
     5aa:	5d e3       	ldi	r21, 0x3D	; 61
     5ac:	0e 94 75 10 	call	0x20ea	; 0x20ea <__subsf3>
	// Near -PI
	if (opponent_angle < high_bound && opponent_angle < PI && low_bound >= PI - error) {
		return true;
	}*/
	// Normal case
	return (robot->o > low_bound && robot->o < high_bound);
     5b0:	a7 01       	movw	r20, r14
     5b2:	96 01       	movw	r18, r12
     5b4:	0e 94 54 11 	call	0x22a8	; 0x22a8 <__cmpsf2>
     5b8:	88 23       	and	r24, r24
     5ba:	94 f4       	brge	.+36     	; 0x5e0 <facing_goal+0xa4>
// Turn to face opponent's goal
bool facing_goal(Robot* robot, float opponent_x, float opponent_y) {
	float opponent_angle = (PI - atan2f(-(robot->y - opponent_y), robot->x - opponent_x));
	float error = PI / 45.0;
	float low_bound = opponent_angle - error;
	float high_bound = opponent_angle + error;
     5bc:	2e e2       	ldi	r18, 0x2E	; 46
     5be:	3a ef       	ldi	r19, 0xFA	; 250
     5c0:	4e e8       	ldi	r20, 0x8E	; 142
     5c2:	5d e3       	ldi	r21, 0x3D	; 61
     5c4:	c5 01       	movw	r24, r10
     5c6:	b4 01       	movw	r22, r8
     5c8:	0e 94 76 10 	call	0x20ec	; 0x20ec <__addsf3>
	// Near -PI
	if (opponent_angle < high_bound && opponent_angle < PI && low_bound >= PI - error) {
		return true;
	}*/
	// Normal case
	return (robot->o > low_bound && robot->o < high_bound);
     5cc:	c1 e0       	ldi	r28, 0x01	; 1
     5ce:	a7 01       	movw	r20, r14
     5d0:	96 01       	movw	r18, r12
     5d2:	0e 94 1e 13 	call	0x263c	; 0x263c <__gesf2>
     5d6:	18 16       	cp	r1, r24
     5d8:	0c f0       	brlt	.+2      	; 0x5dc <facing_goal+0xa0>
     5da:	c0 e0       	ldi	r28, 0x00	; 0
     5dc:	8c 2f       	mov	r24, r28
     5de:	01 c0       	rjmp	.+2      	; 0x5e2 <facing_goal+0xa6>
     5e0:	80 e0       	ldi	r24, 0x00	; 0
}
     5e2:	81 70       	andi	r24, 0x01	; 1
     5e4:	df 91       	pop	r29
     5e6:	cf 91       	pop	r28
     5e8:	1f 91       	pop	r17
     5ea:	0f 91       	pop	r16
     5ec:	ff 90       	pop	r15
     5ee:	ef 90       	pop	r14
     5f0:	df 90       	pop	r13
     5f2:	cf 90       	pop	r12
     5f4:	bf 90       	pop	r11
     5f6:	af 90       	pop	r10
     5f8:	9f 90       	pop	r9
     5fa:	8f 90       	pop	r8
     5fc:	08 95       	ret

000005fe <m_bus_init>:

// PUBLIC FUNCTIONS
void m_bus_init(void)
{
	// ENABLE PULLUPS
	set(PORTD,0);
     5fe:	58 9a       	sbi	0x0b, 0	; 11
	set(PORTD,1);
     600:	59 9a       	sbi	0x0b, 1	; 11
	set(PORTD,2);
     602:	5a 9a       	sbi	0x0b, 2	; 11
	
	// CONFIGURE THE CLOCK
	TWBR = 12;	// CLK freq = CPU clock / (16 + 2*TWBR*(4^TWPS)), 16MHz clock, TWBR=12, TWPS=00 -> 400kHz
     604:	8c e0       	ldi	r24, 0x0C	; 12
     606:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>

	// ENABLE interrupts in INT2 (D2)
	set(EICRA,ISC21); clear(EICRA,ISC20); // trigger on falling edge
     60a:	e9 e6       	ldi	r30, 0x69	; 105
     60c:	f0 e0       	ldi	r31, 0x00	; 0
     60e:	80 81       	ld	r24, Z
     610:	80 62       	ori	r24, 0x20	; 32
     612:	80 83       	st	Z, r24
     614:	80 81       	ld	r24, Z
     616:	8f 7e       	andi	r24, 0xEF	; 239
     618:	80 83       	st	Z, r24
	set(EIMSK,INT2); // demask the interrupt
     61a:	ea 9a       	sbi	0x1d, 2	; 29
	sei(); // enable global interrupts
     61c:	78 94       	sei
     61e:	08 95       	ret

00000620 <m_rf_read>:
	
	return 1;
}

char m_rf_read(char* buffer, char packet_length)
{
     620:	cf 93       	push	r28
     622:	df 93       	push	r29
     624:	9c 01       	movw	r18, r24

	char bytes;
	int i;

	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
     626:	84 ea       	ldi	r24, 0xA4	; 164
     628:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
     62c:	ec eb       	ldi	r30, 0xBC	; 188
     62e:	f0 e0       	ldi	r31, 0x00	; 0
     630:	90 81       	ld	r25, Z
     632:	99 23       	and	r25, r25
     634:	ec f7       	brge	.-6      	; 0x630 <m_rf_read+0x10>
	
	// ADDRESS (in Master-Receiver Mode)
	TWDR = ((MRFTWIADDR<<1)|1);
     636:	81 e5       	ldi	r24, 0x51	; 81
     638:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR = (1<<TWINT) | (1<<TWEN);
     63c:	84 e8       	ldi	r24, 0x84	; 132
     63e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){}; // wait until finished sending address
     642:	ec eb       	ldi	r30, 0xBC	; 188
     644:	f0 e0       	ldi	r31, 0x00	; 0
     646:	90 81       	ld	r25, Z
     648:	99 23       	and	r25, r25
     64a:	ec f7       	brge	.-6      	; 0x646 <m_rf_read+0x26>
	if((TWSR & 0xF8)== 0x48){ // ACK was not received
     64c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     650:	88 7f       	andi	r24, 0xF8	; 248
     652:	88 34       	cpi	r24, 0x48	; 72
     654:	29 f4       	brne	.+10     	; 0x660 <m_rf_read+0x40>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
     656:	84 e9       	ldi	r24, 0x94	; 148
     658:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
		return 0; // not connected/listening
     65c:	80 e0       	ldi	r24, 0x00	; 0
     65e:	41 c0       	rjmp	.+130    	; 0x6e2 <m_rf_read+0xc2>
	}
	

	// (BYTES)
	TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
     660:	84 ec       	ldi	r24, 0xC4	; 196
     662:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
     666:	ec eb       	ldi	r30, 0xBC	; 188
     668:	f0 e0       	ldi	r31, 0x00	; 0
     66a:	90 81       	ld	r25, Z
     66c:	99 23       	and	r25, r25
     66e:	ec f7       	brge	.-6      	; 0x66a <m_rf_read+0x4a>
	bytes = TWDR;
     670:	40 91 bb 00 	lds	r20, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	if(bytes != packet_length){
     674:	46 13       	cpse	r20, r22
     676:	09 c0       	rjmp	.+18     	; 0x68a <m_rf_read+0x6a>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
		return 0; // indicate length mismatch
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
     678:	84 2f       	mov	r24, r20
     67a:	90 e0       	ldi	r25, 0x00	; 0
     67c:	01 97       	sbiw	r24, 0x01	; 1
     67e:	18 16       	cp	r1, r24
     680:	19 06       	cpc	r1, r25
     682:	44 f0       	brlt	.+16     	; 0x694 <m_rf_read+0x74>
     684:	40 e0       	ldi	r20, 0x00	; 0
     686:	50 e0       	ldi	r21, 0x00	; 0
     688:	1a c0       	rjmp	.+52     	; 0x6be <m_rf_read+0x9e>
	// (BYTES)
	TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
	bytes = TWDR;
	if(bytes != packet_length){
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
     68a:	84 e9       	ldi	r24, 0x94	; 148
     68c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
		return 0; // indicate length mismatch
     690:	80 e0       	ldi	r24, 0x00	; 0
     692:	27 c0       	rjmp	.+78     	; 0x6e2 <m_rf_read+0xc2>
     694:	d9 01       	movw	r26, r18
     696:	50 e0       	ldi	r21, 0x00	; 0
     698:	41 50       	subi	r20, 0x01	; 1
     69a:	51 09       	sbc	r21, r1
     69c:	b9 01       	movw	r22, r18
     69e:	64 0f       	add	r22, r20
     6a0:	75 1f       	adc	r23, r21
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
     6a2:	ec eb       	ldi	r30, 0xBC	; 188
     6a4:	f0 e0       	ldi	r31, 0x00	; 0
     6a6:	84 ec       	ldi	r24, 0xC4	; 196
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		buffer[i] = TWDR;
     6a8:	cb eb       	ldi	r28, 0xBB	; 187
     6aa:	d0 e0       	ldi	r29, 0x00	; 0
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
     6ac:	80 83       	st	Z, r24
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
     6ae:	90 81       	ld	r25, Z
     6b0:	99 23       	and	r25, r25
     6b2:	ec f7       	brge	.-6      	; 0x6ae <m_rf_read+0x8e>
		buffer[i] = TWDR;
     6b4:	98 81       	ld	r25, Y
     6b6:	9d 93       	st	X+, r25
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
		return 0; // indicate length mismatch
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
     6b8:	a6 17       	cp	r26, r22
     6ba:	b7 07       	cpc	r27, r23
     6bc:	b9 f7       	brne	.-18     	; 0x6ac <m_rf_read+0x8c>
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		buffer[i] = TWDR;
	}
	TWCR = (1<<TWINT) | (1<<TWEN);	// clear the flag, no ACK, and wait for another byte
     6be:	84 e8       	ldi	r24, 0x84	; 132
     6c0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
     6c4:	ec eb       	ldi	r30, 0xBC	; 188
     6c6:	f0 e0       	ldi	r31, 0x00	; 0
     6c8:	90 81       	ld	r25, Z
     6ca:	99 23       	and	r25, r25
     6cc:	ec f7       	brge	.-6      	; 0x6c8 <m_rf_read+0xa8>
	buffer[i++] = TWDR;
     6ce:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     6d2:	f9 01       	movw	r30, r18
     6d4:	e4 0f       	add	r30, r20
     6d6:	f5 1f       	adc	r31, r21
     6d8:	80 83       	st	Z, r24
	
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
     6da:	84 e9       	ldi	r24, 0x94	; 148
     6dc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

	return 1;
     6e0:	81 e0       	ldi	r24, 0x01	; 1
}
     6e2:	df 91       	pop	r29
     6e4:	cf 91       	pop	r28
     6e6:	08 95       	ret

000006e8 <m_usb_init>:
	phex(i);
}

void m_usb_tx_hexchar(unsigned char i)
{
	phex(i);
     6e8:	81 e0       	ldi	r24, 0x01	; 1
     6ea:	80 93 d7 00 	sts	0x00D7, r24	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
     6ee:	80 ea       	ldi	r24, 0xA0	; 160
     6f0:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
     6f4:	82 e1       	ldi	r24, 0x12	; 18
     6f6:	89 bd       	out	0x29, r24	; 41
     6f8:	09 b4       	in	r0, 0x29	; 41
     6fa:	00 fe       	sbrs	r0, 0
     6fc:	fd cf       	rjmp	.-6      	; 0x6f8 <m_usb_init+0x10>
     6fe:	80 e9       	ldi	r24, 0x90	; 144
     700:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
     704:	10 92 e0 00 	sts	0x00E0, r1	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
     708:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <usb_configuration>
     70c:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <__data_end>
     710:	8c e0       	ldi	r24, 0x0C	; 12
     712:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
     716:	78 94       	sei
     718:	08 95       	ret

0000071a <m_usb_tx_char>:
     71a:	cf 93       	push	r28
     71c:	df 93       	push	r29
     71e:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <usb_configuration>
     722:	99 23       	and	r25, r25
     724:	09 f4       	brne	.+2      	; 0x728 <m_usb_tx_char+0xe>
     726:	4c c0       	rjmp	.+152    	; 0x7c0 <m_usb_tx_char+0xa6>
     728:	9f b7       	in	r25, 0x3f	; 63
     72a:	f8 94       	cli
     72c:	24 e0       	ldi	r18, 0x04	; 4
     72e:	20 93 e9 00 	sts	0x00E9, r18	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
     732:	20 91 1b 01 	lds	r18, 0x011B	; 0x80011b <transmit_previous_timeout>
     736:	22 23       	and	r18, r18
     738:	49 f0       	breq	.+18     	; 0x74c <m_usb_tx_char+0x32>
     73a:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     73e:	25 fd       	sbrc	r18, 5
     740:	03 c0       	rjmp	.+6      	; 0x748 <m_usb_tx_char+0x2e>
     742:	9f bf       	out	0x3f, r25	; 63
     744:	8f ef       	ldi	r24, 0xFF	; 255
     746:	41 c0       	rjmp	.+130    	; 0x7ca <m_usb_tx_char+0xb0>
     748:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <transmit_previous_timeout>
     74c:	30 91 e4 00 	lds	r19, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
     750:	37 5e       	subi	r19, 0xE7	; 231
     752:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     756:	25 fd       	sbrc	r18, 5
     758:	24 c0       	rjmp	.+72     	; 0x7a2 <m_usb_tx_char+0x88>
     75a:	9f bf       	out	0x3f, r25	; 63
     75c:	90 91 e4 00 	lds	r25, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
     760:	93 17       	cp	r25, r19
     762:	81 f0       	breq	.+32     	; 0x784 <m_usb_tx_char+0x6a>
     764:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <usb_configuration>
     768:	99 23       	and	r25, r25
     76a:	61 f1       	breq	.+88     	; 0x7c4 <m_usb_tx_char+0xaa>
     76c:	a9 ee       	ldi	r26, 0xE9	; 233
     76e:	b0 e0       	ldi	r27, 0x00	; 0
     770:	44 e0       	ldi	r20, 0x04	; 4
     772:	e8 ee       	ldi	r30, 0xE8	; 232
     774:	f0 e0       	ldi	r31, 0x00	; 0
     776:	c4 ee       	ldi	r28, 0xE4	; 228
     778:	d0 e0       	ldi	r29, 0x00	; 0
     77a:	0d c0       	rjmp	.+26     	; 0x796 <m_usb_tx_char+0x7c>
     77c:	9f bf       	out	0x3f, r25	; 63
     77e:	98 81       	ld	r25, Y
     780:	93 13       	cpse	r25, r19
     782:	05 c0       	rjmp	.+10     	; 0x78e <m_usb_tx_char+0x74>
     784:	81 e0       	ldi	r24, 0x01	; 1
     786:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <transmit_previous_timeout>
     78a:	8f ef       	ldi	r24, 0xFF	; 255
     78c:	1e c0       	rjmp	.+60     	; 0x7ca <m_usb_tx_char+0xb0>
     78e:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <usb_configuration>
     792:	99 23       	and	r25, r25
     794:	c9 f0       	breq	.+50     	; 0x7c8 <m_usb_tx_char+0xae>
     796:	9f b7       	in	r25, 0x3f	; 63
     798:	f8 94       	cli
     79a:	4c 93       	st	X, r20
     79c:	20 81       	ld	r18, Z
     79e:	25 ff       	sbrs	r18, 5
     7a0:	ed cf       	rjmp	.-38     	; 0x77c <m_usb_tx_char+0x62>
     7a2:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     7a6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     7aa:	85 fd       	sbrc	r24, 5
     7ac:	03 c0       	rjmp	.+6      	; 0x7b4 <m_usb_tx_char+0x9a>
     7ae:	8a e3       	ldi	r24, 0x3A	; 58
     7b0:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     7b4:	85 e0       	ldi	r24, 0x05	; 5
     7b6:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <transmit_flush_timer>
     7ba:	9f bf       	out	0x3f, r25	; 63
     7bc:	80 e0       	ldi	r24, 0x00	; 0
     7be:	05 c0       	rjmp	.+10     	; 0x7ca <m_usb_tx_char+0xb0>
     7c0:	8f ef       	ldi	r24, 0xFF	; 255
     7c2:	03 c0       	rjmp	.+6      	; 0x7ca <m_usb_tx_char+0xb0>
     7c4:	8f ef       	ldi	r24, 0xFF	; 255
     7c6:	01 c0       	rjmp	.+2      	; 0x7ca <m_usb_tx_char+0xb0>
     7c8:	8f ef       	ldi	r24, 0xFF	; 255
     7ca:	df 91       	pop	r29
     7cc:	cf 91       	pop	r28
     7ce:	08 95       	ret

000007d0 <__vector_10>:
     7d0:	1f 92       	push	r1
     7d2:	0f 92       	push	r0
     7d4:	0f b6       	in	r0, 0x3f	; 63
     7d6:	0f 92       	push	r0
     7d8:	11 24       	eor	r1, r1
     7da:	8f 93       	push	r24
     7dc:	9f 93       	push	r25
     7de:	ef 93       	push	r30
     7e0:	ff 93       	push	r31
     7e2:	e1 ee       	ldi	r30, 0xE1	; 225
     7e4:	f0 e0       	ldi	r31, 0x00	; 0
     7e6:	80 81       	ld	r24, Z
     7e8:	10 82       	st	Z, r1
     7ea:	83 ff       	sbrs	r24, 3
     7ec:	11 c0       	rjmp	.+34     	; 0x810 <__vector_10+0x40>
     7ee:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
     7f2:	91 e0       	ldi	r25, 0x01	; 1
     7f4:	90 93 eb 00 	sts	0x00EB, r25	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
     7f8:	10 92 ec 00 	sts	0x00EC, r1	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
     7fc:	92 e1       	ldi	r25, 0x12	; 18
     7fe:	90 93 ed 00 	sts	0x00ED, r25	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
     802:	98 e0       	ldi	r25, 0x08	; 8
     804:	90 93 f0 00 	sts	0x00F0, r25	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
     808:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <usb_configuration>
     80c:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <__data_end>
     810:	82 ff       	sbrs	r24, 2
     812:	13 c0       	rjmp	.+38     	; 0x83a <__vector_10+0x6a>
     814:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <usb_configuration>
     818:	88 23       	and	r24, r24
     81a:	79 f0       	breq	.+30     	; 0x83a <__vector_10+0x6a>
     81c:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <transmit_flush_timer>
     820:	88 23       	and	r24, r24
     822:	59 f0       	breq	.+22     	; 0x83a <__vector_10+0x6a>
     824:	81 50       	subi	r24, 0x01	; 1
     826:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <transmit_flush_timer>
     82a:	81 11       	cpse	r24, r1
     82c:	06 c0       	rjmp	.+12     	; 0x83a <__vector_10+0x6a>
     82e:	84 e0       	ldi	r24, 0x04	; 4
     830:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
     834:	8a e3       	ldi	r24, 0x3A	; 58
     836:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     83a:	ff 91       	pop	r31
     83c:	ef 91       	pop	r30
     83e:	9f 91       	pop	r25
     840:	8f 91       	pop	r24
     842:	0f 90       	pop	r0
     844:	0f be       	out	0x3f, r0	; 63
     846:	0f 90       	pop	r0
     848:	1f 90       	pop	r1
     84a:	18 95       	reti

0000084c <__vector_11>:
     84c:	1f 92       	push	r1
     84e:	0f 92       	push	r0
     850:	0f b6       	in	r0, 0x3f	; 63
     852:	0f 92       	push	r0
     854:	11 24       	eor	r1, r1
     856:	0f 93       	push	r16
     858:	1f 93       	push	r17
     85a:	2f 93       	push	r18
     85c:	3f 93       	push	r19
     85e:	4f 93       	push	r20
     860:	5f 93       	push	r21
     862:	6f 93       	push	r22
     864:	7f 93       	push	r23
     866:	8f 93       	push	r24
     868:	9f 93       	push	r25
     86a:	af 93       	push	r26
     86c:	bf 93       	push	r27
     86e:	cf 93       	push	r28
     870:	df 93       	push	r29
     872:	ef 93       	push	r30
     874:	ff 93       	push	r31
     876:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
     87a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     87e:	83 ff       	sbrs	r24, 3
     880:	4c c1       	rjmp	.+664    	; 0xb1a <__stack+0x1b>
     882:	e1 ef       	ldi	r30, 0xF1	; 241
     884:	f0 e0       	ldi	r31, 0x00	; 0
     886:	60 81       	ld	r22, Z
     888:	80 81       	ld	r24, Z
     88a:	20 81       	ld	r18, Z
     88c:	90 81       	ld	r25, Z
     88e:	30 e0       	ldi	r19, 0x00	; 0
     890:	39 2b       	or	r19, r25
     892:	40 81       	ld	r20, Z
     894:	90 81       	ld	r25, Z
     896:	50 e0       	ldi	r21, 0x00	; 0
     898:	59 2b       	or	r21, r25
     89a:	70 81       	ld	r23, Z
     89c:	c0 81       	ld	r28, Z
     89e:	92 ef       	ldi	r25, 0xF2	; 242
     8a0:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     8a4:	86 30       	cpi	r24, 0x06	; 6
     8a6:	09 f0       	breq	.+2      	; 0x8aa <__vector_11+0x5e>
     8a8:	58 c0       	rjmp	.+176    	; 0x95a <__vector_11+0x10e>
     8aa:	04 c0       	rjmp	.+8      	; 0x8b4 <__vector_11+0x68>
     8ac:	81 e2       	ldi	r24, 0x21	; 33
     8ae:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
     8b2:	3a c1       	rjmp	.+628    	; 0xb28 <__stack+0x29>
     8b4:	66 e0       	ldi	r22, 0x06	; 6
     8b6:	8a e7       	ldi	r24, 0x7A	; 122
     8b8:	91 e0       	ldi	r25, 0x01	; 1
     8ba:	fc 01       	movw	r30, r24
     8bc:	a5 91       	lpm	r26, Z+
     8be:	b4 91       	lpm	r27, Z
     8c0:	2a 17       	cp	r18, r26
     8c2:	3b 07       	cpc	r19, r27
     8c4:	11 f0       	breq	.+4      	; 0x8ca <__vector_11+0x7e>
     8c6:	07 96       	adiw	r24, 0x07	; 7
     8c8:	23 c0       	rjmp	.+70     	; 0x910 <__vector_11+0xc4>
     8ca:	fc 01       	movw	r30, r24
     8cc:	32 96       	adiw	r30, 0x02	; 2
     8ce:	a5 91       	lpm	r26, Z+
     8d0:	b4 91       	lpm	r27, Z
     8d2:	4a 17       	cp	r20, r26
     8d4:	5b 07       	cpc	r21, r27
     8d6:	11 f0       	breq	.+4      	; 0x8dc <__vector_11+0x90>
     8d8:	07 96       	adiw	r24, 0x07	; 7
     8da:	1a c0       	rjmp	.+52     	; 0x910 <__vector_11+0xc4>
     8dc:	fc 01       	movw	r30, r24
     8de:	34 96       	adiw	r30, 0x04	; 4
     8e0:	45 91       	lpm	r20, Z+
     8e2:	54 91       	lpm	r21, Z
     8e4:	fc 01       	movw	r30, r24
     8e6:	36 96       	adiw	r30, 0x06	; 6
     8e8:	24 91       	lpm	r18, Z
     8ea:	87 2f       	mov	r24, r23
     8ec:	90 e0       	ldi	r25, 0x00	; 0
     8ee:	9c 2b       	or	r25, r28
     8f0:	8f 3f       	cpi	r24, 0xFF	; 255
     8f2:	91 05       	cpc	r25, r1
     8f4:	19 f0       	breq	.+6      	; 0x8fc <__vector_11+0xb0>
     8f6:	10 f0       	brcs	.+4      	; 0x8fc <__vector_11+0xb0>
     8f8:	8f ef       	ldi	r24, 0xFF	; 255
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 17       	cp	r24, r18
     8fe:	08 f4       	brcc	.+2      	; 0x902 <__vector_11+0xb6>
     900:	28 2f       	mov	r18, r24
     902:	a8 ee       	ldi	r26, 0xE8	; 232
     904:	b0 e0       	ldi	r27, 0x00	; 0
     906:	70 e1       	ldi	r23, 0x10	; 16
     908:	6e ef       	ldi	r22, 0xFE	; 254
     90a:	c1 ef       	ldi	r28, 0xF1	; 241
     90c:	d0 e0       	ldi	r29, 0x00	; 0
     90e:	03 c0       	rjmp	.+6      	; 0x916 <__vector_11+0xca>
     910:	61 50       	subi	r22, 0x01	; 1
     912:	99 f6       	brne	.-90     	; 0x8ba <__vector_11+0x6e>
     914:	cb cf       	rjmp	.-106    	; 0x8ac <__vector_11+0x60>
     916:	8c 91       	ld	r24, X
     918:	98 2f       	mov	r25, r24
     91a:	95 70       	andi	r25, 0x05	; 5
     91c:	e1 f3       	breq	.-8      	; 0x916 <__vector_11+0xca>
     91e:	82 fd       	sbrc	r24, 2
     920:	03 c1       	rjmp	.+518    	; 0xb28 <__stack+0x29>
     922:	32 2f       	mov	r19, r18
     924:	21 31       	cpi	r18, 0x11	; 17
     926:	08 f0       	brcs	.+2      	; 0x92a <__vector_11+0xde>
     928:	37 2f       	mov	r19, r23
     92a:	33 23       	and	r19, r19
     92c:	09 f4       	brne	.+2      	; 0x930 <__vector_11+0xe4>
     92e:	f9 c0       	rjmp	.+498    	; 0xb22 <__stack+0x23>
     930:	fa 01       	movw	r30, r20
     932:	83 2f       	mov	r24, r19
     934:	94 91       	lpm	r25, Z
     936:	98 83       	st	Y, r25
     938:	81 50       	subi	r24, 0x01	; 1
     93a:	31 96       	adiw	r30, 0x01	; 1
     93c:	81 11       	cpse	r24, r1
     93e:	fa cf       	rjmp	.-12     	; 0x934 <__vector_11+0xe8>
     940:	8f ef       	ldi	r24, 0xFF	; 255
     942:	83 0f       	add	r24, r19
     944:	90 e0       	ldi	r25, 0x00	; 0
     946:	01 96       	adiw	r24, 0x01	; 1
     948:	48 0f       	add	r20, r24
     94a:	59 1f       	adc	r21, r25
     94c:	23 1b       	sub	r18, r19
     94e:	6c 93       	st	X, r22
     950:	21 11       	cpse	r18, r1
     952:	e1 cf       	rjmp	.-62     	; 0x916 <__vector_11+0xca>
     954:	30 31       	cpi	r19, 0x10	; 16
     956:	f9 f2       	breq	.-66     	; 0x916 <__vector_11+0xca>
     958:	e7 c0       	rjmp	.+462    	; 0xb28 <__stack+0x29>
     95a:	85 30       	cpi	r24, 0x05	; 5
     95c:	61 f4       	brne	.+24     	; 0x976 <__vector_11+0x12a>
     95e:	8e ef       	ldi	r24, 0xFE	; 254
     960:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     964:	e8 ee       	ldi	r30, 0xE8	; 232
     966:	f0 e0       	ldi	r31, 0x00	; 0
     968:	80 81       	ld	r24, Z
     96a:	80 ff       	sbrs	r24, 0
     96c:	fd cf       	rjmp	.-6      	; 0x968 <__vector_11+0x11c>
     96e:	20 68       	ori	r18, 0x80	; 128
     970:	20 93 e3 00 	sts	0x00E3, r18	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
     974:	d9 c0       	rjmp	.+434    	; 0xb28 <__stack+0x29>
     976:	89 30       	cpi	r24, 0x09	; 9
     978:	09 f0       	breq	.+2      	; 0x97c <__vector_11+0x130>
     97a:	35 c0       	rjmp	.+106    	; 0x9e6 <__vector_11+0x19a>
     97c:	61 11       	cpse	r22, r1
     97e:	cd c0       	rjmp	.+410    	; 0xb1a <__stack+0x1b>
     980:	20 93 1d 01 	sts	0x011D, r18	; 0x80011d <usb_configuration>
     984:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <__data_end>
     988:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <transmit_flush_timer>
     98c:	8e ef       	ldi	r24, 0xFE	; 254
     98e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     992:	81 e0       	ldi	r24, 0x01	; 1
     994:	23 e2       	ldi	r18, 0x23	; 35
     996:	32 e0       	ldi	r19, 0x02	; 2
     998:	c9 ee       	ldi	r28, 0xE9	; 233
     99a:	d0 e0       	ldi	r29, 0x00	; 0
     99c:	ab ee       	ldi	r26, 0xEB	; 235
     99e:	b0 e0       	ldi	r27, 0x00	; 0
     9a0:	0c ee       	ldi	r16, 0xEC	; 236
     9a2:	10 e0       	ldi	r17, 0x00	; 0
     9a4:	6d ee       	ldi	r22, 0xED	; 237
     9a6:	70 e0       	ldi	r23, 0x00	; 0
     9a8:	88 83       	st	Y, r24
     9aa:	a9 01       	movw	r20, r18
     9ac:	4f 5f       	subi	r20, 0xFF	; 255
     9ae:	5f 4f       	sbci	r21, 0xFF	; 255
     9b0:	f9 01       	movw	r30, r18
     9b2:	94 91       	lpm	r25, Z
     9b4:	9c 93       	st	X, r25
     9b6:	99 23       	and	r25, r25
     9b8:	61 f0       	breq	.+24     	; 0x9d2 <__vector_11+0x186>
     9ba:	fa 01       	movw	r30, r20
     9bc:	44 91       	lpm	r20, Z
     9be:	f8 01       	movw	r30, r16
     9c0:	40 83       	st	Z, r20
     9c2:	f9 01       	movw	r30, r18
     9c4:	32 96       	adiw	r30, 0x02	; 2
     9c6:	94 91       	lpm	r25, Z
     9c8:	2d 5f       	subi	r18, 0xFD	; 253
     9ca:	3f 4f       	sbci	r19, 0xFF	; 255
     9cc:	fb 01       	movw	r30, r22
     9ce:	90 83       	st	Z, r25
     9d0:	01 c0       	rjmp	.+2      	; 0x9d4 <__vector_11+0x188>
     9d2:	9a 01       	movw	r18, r20
     9d4:	8f 5f       	subi	r24, 0xFF	; 255
     9d6:	85 30       	cpi	r24, 0x05	; 5
     9d8:	39 f7       	brne	.-50     	; 0x9a8 <__vector_11+0x15c>
     9da:	ea ee       	ldi	r30, 0xEA	; 234
     9dc:	f0 e0       	ldi	r31, 0x00	; 0
     9de:	8e e1       	ldi	r24, 0x1E	; 30
     9e0:	80 83       	st	Z, r24
     9e2:	10 82       	st	Z, r1
     9e4:	a1 c0       	rjmp	.+322    	; 0xb28 <__stack+0x29>
     9e6:	88 30       	cpi	r24, 0x08	; 8
     9e8:	81 f4       	brne	.+32     	; 0xa0a <__vector_11+0x1be>
     9ea:	60 38       	cpi	r22, 0x80	; 128
     9ec:	09 f0       	breq	.+2      	; 0x9f0 <__vector_11+0x1a4>
     9ee:	95 c0       	rjmp	.+298    	; 0xb1a <__stack+0x1b>
     9f0:	e8 ee       	ldi	r30, 0xE8	; 232
     9f2:	f0 e0       	ldi	r31, 0x00	; 0
     9f4:	80 81       	ld	r24, Z
     9f6:	80 ff       	sbrs	r24, 0
     9f8:	fd cf       	rjmp	.-6      	; 0x9f4 <__vector_11+0x1a8>
     9fa:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <usb_configuration>
     9fe:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     a02:	8e ef       	ldi	r24, 0xFE	; 254
     a04:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     a08:	8f c0       	rjmp	.+286    	; 0xb28 <__stack+0x29>
     a0a:	81 32       	cpi	r24, 0x21	; 33
     a0c:	b9 f4       	brne	.+46     	; 0xa3c <__vector_11+0x1f0>
     a0e:	61 3a       	cpi	r22, 0xA1	; 161
     a10:	09 f0       	breq	.+2      	; 0xa14 <__vector_11+0x1c8>
     a12:	83 c0       	rjmp	.+262    	; 0xb1a <__stack+0x1b>
     a14:	e8 ee       	ldi	r30, 0xE8	; 232
     a16:	f0 e0       	ldi	r31, 0x00	; 0
     a18:	80 81       	ld	r24, Z
     a1a:	80 ff       	sbrs	r24, 0
     a1c:	fd cf       	rjmp	.-6      	; 0xa18 <__vector_11+0x1cc>
     a1e:	e0 e0       	ldi	r30, 0x00	; 0
     a20:	f1 e0       	ldi	r31, 0x01	; 1
     a22:	27 e0       	ldi	r18, 0x07	; 7
     a24:	31 e0       	ldi	r19, 0x01	; 1
     a26:	a1 ef       	ldi	r26, 0xF1	; 241
     a28:	b0 e0       	ldi	r27, 0x00	; 0
     a2a:	81 91       	ld	r24, Z+
     a2c:	8c 93       	st	X, r24
     a2e:	e2 17       	cp	r30, r18
     a30:	f3 07       	cpc	r31, r19
     a32:	d9 f7       	brne	.-10     	; 0xa2a <__vector_11+0x1de>
     a34:	8e ef       	ldi	r24, 0xFE	; 254
     a36:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     a3a:	76 c0       	rjmp	.+236    	; 0xb28 <__stack+0x29>
     a3c:	80 32       	cpi	r24, 0x20	; 32
     a3e:	d1 f4       	brne	.+52     	; 0xa74 <__vector_11+0x228>
     a40:	61 32       	cpi	r22, 0x21	; 33
     a42:	09 f0       	breq	.+2      	; 0xa46 <__vector_11+0x1fa>
     a44:	6a c0       	rjmp	.+212    	; 0xb1a <__stack+0x1b>
     a46:	e8 ee       	ldi	r30, 0xE8	; 232
     a48:	f0 e0       	ldi	r31, 0x00	; 0
     a4a:	80 81       	ld	r24, Z
     a4c:	82 ff       	sbrs	r24, 2
     a4e:	fd cf       	rjmp	.-6      	; 0xa4a <__vector_11+0x1fe>
     a50:	e0 e0       	ldi	r30, 0x00	; 0
     a52:	f1 e0       	ldi	r31, 0x01	; 1
     a54:	27 e0       	ldi	r18, 0x07	; 7
     a56:	31 e0       	ldi	r19, 0x01	; 1
     a58:	a1 ef       	ldi	r26, 0xF1	; 241
     a5a:	b0 e0       	ldi	r27, 0x00	; 0
     a5c:	8c 91       	ld	r24, X
     a5e:	81 93       	st	Z+, r24
     a60:	e2 17       	cp	r30, r18
     a62:	f3 07       	cpc	r31, r19
     a64:	d9 f7       	brne	.-10     	; 0xa5c <__vector_11+0x210>
     a66:	e8 ee       	ldi	r30, 0xE8	; 232
     a68:	f0 e0       	ldi	r31, 0x00	; 0
     a6a:	8b ef       	ldi	r24, 0xFB	; 251
     a6c:	80 83       	st	Z, r24
     a6e:	8e ef       	ldi	r24, 0xFE	; 254
     a70:	80 83       	st	Z, r24
     a72:	5a c0       	rjmp	.+180    	; 0xb28 <__stack+0x29>
     a74:	82 32       	cpi	r24, 0x22	; 34
     a76:	71 f4       	brne	.+28     	; 0xa94 <__vector_11+0x248>
     a78:	61 32       	cpi	r22, 0x21	; 33
     a7a:	09 f0       	breq	.+2      	; 0xa7e <__vector_11+0x232>
     a7c:	4e c0       	rjmp	.+156    	; 0xb1a <__stack+0x1b>
     a7e:	20 93 1a 01 	sts	0x011A, r18	; 0x80011a <__data_end>
     a82:	e8 ee       	ldi	r30, 0xE8	; 232
     a84:	f0 e0       	ldi	r31, 0x00	; 0
     a86:	80 81       	ld	r24, Z
     a88:	80 ff       	sbrs	r24, 0
     a8a:	fd cf       	rjmp	.-6      	; 0xa86 <__vector_11+0x23a>
     a8c:	8e ef       	ldi	r24, 0xFE	; 254
     a8e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     a92:	4a c0       	rjmp	.+148    	; 0xb28 <__stack+0x29>
     a94:	81 11       	cpse	r24, r1
     a96:	1a c0       	rjmp	.+52     	; 0xacc <__vector_11+0x280>
     a98:	e8 ee       	ldi	r30, 0xE8	; 232
     a9a:	f0 e0       	ldi	r31, 0x00	; 0
     a9c:	80 81       	ld	r24, Z
     a9e:	80 ff       	sbrs	r24, 0
     aa0:	fd cf       	rjmp	.-6      	; 0xa9c <__vector_11+0x250>
     aa2:	62 38       	cpi	r22, 0x82	; 130
     aa4:	51 f4       	brne	.+20     	; 0xaba <__vector_11+0x26e>
     aa6:	e9 ee       	ldi	r30, 0xE9	; 233
     aa8:	f0 e0       	ldi	r31, 0x00	; 0
     aaa:	40 83       	st	Z, r20
     aac:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
     ab0:	85 fb       	bst	r24, 5
     ab2:	88 27       	eor	r24, r24
     ab4:	80 f9       	bld	r24, 0
     ab6:	10 82       	st	Z, r1
     ab8:	01 c0       	rjmp	.+2      	; 0xabc <__vector_11+0x270>
     aba:	80 e0       	ldi	r24, 0x00	; 0
     abc:	e1 ef       	ldi	r30, 0xF1	; 241
     abe:	f0 e0       	ldi	r31, 0x00	; 0
     ac0:	80 83       	st	Z, r24
     ac2:	10 82       	st	Z, r1
     ac4:	8e ef       	ldi	r24, 0xFE	; 254
     ac6:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     aca:	2e c0       	rjmp	.+92     	; 0xb28 <__stack+0x29>
     acc:	98 2f       	mov	r25, r24
     ace:	9d 7f       	andi	r25, 0xFD	; 253
     ad0:	91 30       	cpi	r25, 0x01	; 1
     ad2:	19 f5       	brne	.+70     	; 0xb1a <__stack+0x1b>
     ad4:	62 30       	cpi	r22, 0x02	; 2
     ad6:	09 f5       	brne	.+66     	; 0xb1a <__stack+0x1b>
     ad8:	23 2b       	or	r18, r19
     ada:	f9 f4       	brne	.+62     	; 0xb1a <__stack+0x1b>
     adc:	4f 77       	andi	r20, 0x7F	; 127
     ade:	9f ef       	ldi	r25, 0xFF	; 255
     ae0:	94 0f       	add	r25, r20
     ae2:	94 30       	cpi	r25, 0x04	; 4
     ae4:	d0 f4       	brcc	.+52     	; 0xb1a <__stack+0x1b>
     ae6:	9e ef       	ldi	r25, 0xFE	; 254
     ae8:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     aec:	40 93 e9 00 	sts	0x00E9, r20	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
     af0:	83 30       	cpi	r24, 0x03	; 3
     af2:	21 f4       	brne	.+8      	; 0xafc <__vector_11+0x2b0>
     af4:	81 e2       	ldi	r24, 0x21	; 33
     af6:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
     afa:	16 c0       	rjmp	.+44     	; 0xb28 <__stack+0x29>
     afc:	89 e1       	ldi	r24, 0x19	; 25
     afe:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
     b02:	81 e0       	ldi	r24, 0x01	; 1
     b04:	90 e0       	ldi	r25, 0x00	; 0
     b06:	02 c0       	rjmp	.+4      	; 0xb0c <__stack+0xd>
     b08:	88 0f       	add	r24, r24
     b0a:	99 1f       	adc	r25, r25
     b0c:	4a 95       	dec	r20
     b0e:	e2 f7       	brpl	.-8      	; 0xb08 <__stack+0x9>
     b10:	ea ee       	ldi	r30, 0xEA	; 234
     b12:	f0 e0       	ldi	r31, 0x00	; 0
     b14:	80 83       	st	Z, r24
     b16:	10 82       	st	Z, r1
     b18:	07 c0       	rjmp	.+14     	; 0xb28 <__stack+0x29>
     b1a:	81 e2       	ldi	r24, 0x21	; 33
     b1c:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
     b20:	03 c0       	rjmp	.+6      	; 0xb28 <__stack+0x29>
     b22:	6c 93       	st	X, r22
     b24:	21 11       	cpse	r18, r1
     b26:	f7 ce       	rjmp	.-530    	; 0x916 <__vector_11+0xca>
     b28:	ff 91       	pop	r31
     b2a:	ef 91       	pop	r30
     b2c:	df 91       	pop	r29
     b2e:	cf 91       	pop	r28
     b30:	bf 91       	pop	r27
     b32:	af 91       	pop	r26
     b34:	9f 91       	pop	r25
     b36:	8f 91       	pop	r24
     b38:	7f 91       	pop	r23
     b3a:	6f 91       	pop	r22
     b3c:	5f 91       	pop	r21
     b3e:	4f 91       	pop	r20
     b40:	3f 91       	pop	r19
     b42:	2f 91       	pop	r18
     b44:	1f 91       	pop	r17
     b46:	0f 91       	pop	r16
     b48:	0f 90       	pop	r0
     b4a:	0f be       	out	0x3f, r0	; 63
     b4c:	0f 90       	pop	r0
     b4e:	1f 90       	pop	r1
     b50:	18 95       	reti

00000b52 <print_P>:
     b52:	0f 93       	push	r16
     b54:	1f 93       	push	r17
     b56:	cf 93       	push	r28
     b58:	8c 01       	movw	r16, r24
     b5a:	0f 5f       	subi	r16, 0xFF	; 255
     b5c:	1f 4f       	sbci	r17, 0xFF	; 255
     b5e:	fc 01       	movw	r30, r24
     b60:	c4 91       	lpm	r28, Z
     b62:	cc 23       	and	r28, r28
     b64:	71 f0       	breq	.+28     	; 0xb82 <print_P+0x30>
     b66:	ca 30       	cpi	r28, 0x0A	; 10
     b68:	19 f4       	brne	.+6      	; 0xb70 <print_P+0x1e>
     b6a:	8d e0       	ldi	r24, 0x0D	; 13
     b6c:	0e 94 8d 03 	call	0x71a	; 0x71a <m_usb_tx_char>
     b70:	8c 2f       	mov	r24, r28
     b72:	0e 94 8d 03 	call	0x71a	; 0x71a <m_usb_tx_char>
     b76:	f8 01       	movw	r30, r16
     b78:	c4 91       	lpm	r28, Z
     b7a:	0f 5f       	subi	r16, 0xFF	; 255
     b7c:	1f 4f       	sbci	r17, 0xFF	; 255
     b7e:	c1 11       	cpse	r28, r1
     b80:	f2 cf       	rjmp	.-28     	; 0xb66 <print_P+0x14>
     b82:	cf 91       	pop	r28
     b84:	1f 91       	pop	r17
     b86:	0f 91       	pop	r16
     b88:	08 95       	ret

00000b8a <m_usb_tx_int>:
}

void m_usb_tx_int(int i)
{
     b8a:	ef 92       	push	r14
     b8c:	ff 92       	push	r15
     b8e:	0f 93       	push	r16
     b90:	1f 93       	push	r17
     b92:	cf 93       	push	r28
     b94:	df 93       	push	r29
     b96:	cd b7       	in	r28, 0x3d	; 61
     b98:	de b7       	in	r29, 0x3e	; 62
     b9a:	27 97       	sbiw	r28, 0x07	; 7
     b9c:	0f b6       	in	r0, 0x3f	; 63
     b9e:	f8 94       	cli
     ba0:	de bf       	out	0x3e, r29	; 62
     ba2:	0f be       	out	0x3f, r0	; 63
     ba4:	cd bf       	out	0x3d, r28	; 61
	char string[7] = {0,0,0,0,0,0,0};
     ba6:	8e 01       	movw	r16, r28
     ba8:	0f 5f       	subi	r16, 0xFF	; 255
     baa:	1f 4f       	sbci	r17, 0xFF	; 255
     bac:	27 e0       	ldi	r18, 0x07	; 7
     bae:	f8 01       	movw	r30, r16
     bb0:	11 92       	st	Z+, r1
     bb2:	2a 95       	dec	r18
     bb4:	e9 f7       	brne	.-6      	; 0xbb0 <m_usb_tx_int+0x26>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     bb6:	4a e0       	ldi	r20, 0x0A	; 10
     bb8:	b8 01       	movw	r22, r16
     bba:	0e 94 0e 15 	call	0x2a1c	; 0x2a1c <__itoa_ncheck>
     bbe:	7e 01       	movw	r14, r28
     bc0:	f8 e0       	ldi	r31, 0x08	; 8
     bc2:	ef 0e       	add	r14, r31
     bc4:	f1 1c       	adc	r15, r1
	itoa(i,string,10);
	for(i=0;i<7;i++){
        if(string[i]){
     bc6:	f8 01       	movw	r30, r16
     bc8:	81 91       	ld	r24, Z+
     bca:	8f 01       	movw	r16, r30
     bcc:	81 11       	cpse	r24, r1
            m_usb_tx_char(string[i]);
     bce:	0e 94 8d 03 	call	0x71a	; 0x71a <m_usb_tx_char>

void m_usb_tx_int(int i)
{
	char string[7] = {0,0,0,0,0,0,0};
	itoa(i,string,10);
	for(i=0;i<7;i++){
     bd2:	0e 15       	cp	r16, r14
     bd4:	1f 05       	cpc	r17, r15
     bd6:	b9 f7       	brne	.-18     	; 0xbc6 <m_usb_tx_int+0x3c>
        if(string[i]){
            m_usb_tx_char(string[i]);
        }
	}
}
     bd8:	27 96       	adiw	r28, 0x07	; 7
     bda:	0f b6       	in	r0, 0x3f	; 63
     bdc:	f8 94       	cli
     bde:	de bf       	out	0x3e, r29	; 62
     be0:	0f be       	out	0x3f, r0	; 63
     be2:	cd bf       	out	0x3d, r28	; 61
     be4:	df 91       	pop	r29
     be6:	cf 91       	pop	r28
     be8:	1f 91       	pop	r17
     bea:	0f 91       	pop	r16
     bec:	ff 90       	pop	r15
     bee:	ef 90       	pop	r14
     bf0:	08 95       	ret

00000bf2 <twi_wait>:
	}
}

unsigned char twi_wait(void)
{
	unsigned int wait=0;
     bf2:	20 e0       	ldi	r18, 0x00	; 0
     bf4:	30 e0       	ldi	r19, 0x00	; 0
	while((!(TWCR & (1<<TWINT))) && (wait++<TWI_MAX_WAIT)){};	// wait for acknowledgement that they byte was sent
     bf6:	ec eb       	ldi	r30, 0xBC	; 188
     bf8:	f0 e0       	ldi	r31, 0x00	; 0
     bfa:	80 81       	ld	r24, Z
     bfc:	88 23       	and	r24, r24
     bfe:	34 f0       	brlt	.+12     	; 0xc0c <twi_wait+0x1a>
     c00:	2f 5f       	subi	r18, 0xFF	; 255
     c02:	3f 4f       	sbci	r19, 0xFF	; 255
     c04:	29 3e       	cpi	r18, 0xE9	; 233
     c06:	83 e0       	ldi	r24, 0x03	; 3
     c08:	38 07       	cpc	r19, r24
     c0a:	b9 f7       	brne	.-18     	; 0xbfa <twi_wait+0x8>
	if(wait==TWI_MAX_WAIT)
     c0c:	81 e0       	ldi	r24, 0x01	; 1
     c0e:	28 3e       	cpi	r18, 0xE8	; 232
     c10:	33 40       	sbci	r19, 0x03	; 3
     c12:	09 f4       	brne	.+2      	; 0xc16 <twi_wait+0x24>
     c14:	80 e0       	ldi	r24, 0x00	; 0
	{
		return 0;					// fail
	} else {
		return 1;					// success
	}
}
     c16:	08 95       	ret

00000c18 <send_byte>:
	return 1;	// success
}	

unsigned char send_byte(unsigned char byte)
{
	TWDR = byte;					// load the byte
     c18:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR = (1<<TWINT) | (1<<TWEN);	// send the byte
     c1c:	84 e8       	ldi	r24, 0x84	; 132
     c1e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	if(twi_wait())					// timed out
     c22:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <twi_wait>
     c26:	88 23       	and	r24, r24
     c28:	19 f0       	breq	.+6      	; 0xc30 <send_byte+0x18>
	{
		return (TWSR & 0xF8);		// return the status with prescaler bits masked out
     c2a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     c2e:	88 7f       	andi	r24, 0xF8	; 248
	} else {
		return 0;					// comm failure
	}
}
     c30:	08 95       	ret

00000c32 <start_write>:
//
//


unsigned char start_write(unsigned char address)
{
     c32:	cf 93       	push	r28
     c34:	c8 2f       	mov	r28, r24
	unsigned char status;
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
     c36:	94 ea       	ldi	r25, 0xA4	; 164
     c38:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	if(!twi_wait())
     c3c:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <twi_wait>
     c40:	88 23       	and	r24, r24
     c42:	61 f0       	breq	.+24     	; 0xc5c <start_write+0x2a>
	{
		return 0;
	}
	
	// ADDRESS
	status = send_byte(address<<1);
     c44:	8c 2f       	mov	r24, r28
     c46:	88 0f       	add	r24, r24
     c48:	0e 94 0c 06 	call	0xc18	; 0xc18 <send_byte>
	if(status== 0x20){ // ACK was not received - may not be connected/listening
     c4c:	80 32       	cpi	r24, 0x20	; 32
     c4e:	29 f4       	brne	.+10     	; 0xc5a <start_write+0x28>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
     c50:	84 e9       	ldi	r24, 0x94	; 148
     c52:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
		return 0;	// failure
     c56:	80 e0       	ldi	r24, 0x00	; 0
     c58:	01 c0       	rjmp	.+2      	; 0xc5c <start_write+0x2a>
	}	
	return 1;	// success
     c5a:	81 e0       	ldi	r24, 0x01	; 1
}	
     c5c:	cf 91       	pop	r28
     c5e:	08 95       	ret

00000c60 <m_wii_open>:
unsigned char twi_wait(void);
void end(void);

char m_wii_open()
{	
	m_bus_init();
     c60:	0e 94 ff 02 	call	0x5fe	; 0x5fe <m_bus_init>

	// enter configuration mode
	if(!start_write(MWIITWIADDR)){return 0;}
     c64:	88 e5       	ldi	r24, 0x58	; 88
     c66:	0e 94 19 06 	call	0xc32	; 0xc32 <start_write>
     c6a:	88 23       	and	r24, r24
     c6c:	09 f4       	brne	.+2      	; 0xc70 <m_wii_open+0x10>
     c6e:	cd c0       	rjmp	.+410    	; 0xe0a <m_wii_open+0x1aa>
	if(!send_byte(0x30)){return 0;}
     c70:	80 e3       	ldi	r24, 0x30	; 48
     c72:	0e 94 0c 06 	call	0xc18	; 0xc18 <send_byte>
     c76:	88 23       	and	r24, r24
     c78:	09 f4       	brne	.+2      	; 0xc7c <m_wii_open+0x1c>
     c7a:	c9 c0       	rjmp	.+402    	; 0xe0e <m_wii_open+0x1ae>
	if(!send_byte(0x01)){return 0;}
     c7c:	81 e0       	ldi	r24, 0x01	; 1
     c7e:	0e 94 0c 06 	call	0xc18	; 0xc18 <send_byte>
     c82:	88 23       	and	r24, r24
     c84:	09 f4       	brne	.+2      	; 0xc88 <m_wii_open+0x28>
     c86:	c5 c0       	rjmp	.+394    	; 0xe12 <m_wii_open+0x1b2>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
     c88:	84 e9       	ldi	r24, 0x94	; 148
     c8a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     c8e:	83 ec       	ldi	r24, 0xC3	; 195
     c90:	99 e0       	ldi	r25, 0x09	; 9
     c92:	01 97       	sbiw	r24, 0x01	; 1
     c94:	f1 f7       	brne	.-4      	; 0xc92 <m_wii_open+0x32>
     c96:	00 c0       	rjmp	.+0      	; 0xc98 <m_wii_open+0x38>
     c98:	00 00       	nop
	if(!send_byte(0x01)){return 0;}
	end();
	m_wait(INTERPACKET);
		
	// sensitivity setting, part 1
	if(!start_write(MWIITWIADDR)){return 0;}
     c9a:	88 e5       	ldi	r24, 0x58	; 88
     c9c:	0e 94 19 06 	call	0xc32	; 0xc32 <start_write>
     ca0:	88 23       	and	r24, r24
     ca2:	09 f4       	brne	.+2      	; 0xca6 <m_wii_open+0x46>
     ca4:	b8 c0       	rjmp	.+368    	; 0xe16 <m_wii_open+0x1b6>
	if(!send_byte(0x00)){return 0;}
     ca6:	80 e0       	ldi	r24, 0x00	; 0
     ca8:	0e 94 0c 06 	call	0xc18	; 0xc18 <send_byte>
     cac:	88 23       	and	r24, r24
     cae:	09 f4       	brne	.+2      	; 0xcb2 <m_wii_open+0x52>
     cb0:	b4 c0       	rjmp	.+360    	; 0xe1a <m_wii_open+0x1ba>
	if(!send_byte(0x00)){return 0;}
     cb2:	80 e0       	ldi	r24, 0x00	; 0
     cb4:	0e 94 0c 06 	call	0xc18	; 0xc18 <send_byte>
     cb8:	88 23       	and	r24, r24
     cba:	09 f4       	brne	.+2      	; 0xcbe <m_wii_open+0x5e>
     cbc:	b0 c0       	rjmp	.+352    	; 0xe1e <m_wii_open+0x1be>
	if(!send_byte(0x00)){return 0;}
     cbe:	80 e0       	ldi	r24, 0x00	; 0
     cc0:	0e 94 0c 06 	call	0xc18	; 0xc18 <send_byte>
     cc4:	88 23       	and	r24, r24
     cc6:	09 f4       	brne	.+2      	; 0xcca <m_wii_open+0x6a>
     cc8:	ac c0       	rjmp	.+344    	; 0xe22 <m_wii_open+0x1c2>
	if(!send_byte(0x00)){return 0;}
     cca:	80 e0       	ldi	r24, 0x00	; 0
     ccc:	0e 94 0c 06 	call	0xc18	; 0xc18 <send_byte>
     cd0:	88 23       	and	r24, r24
     cd2:	09 f4       	brne	.+2      	; 0xcd6 <m_wii_open+0x76>
     cd4:	a8 c0       	rjmp	.+336    	; 0xe26 <m_wii_open+0x1c6>
	if(!send_byte(0x00)){return 0;}
     cd6:	80 e0       	ldi	r24, 0x00	; 0
     cd8:	0e 94 0c 06 	call	0xc18	; 0xc18 <send_byte>
     cdc:	88 23       	and	r24, r24
     cde:	09 f4       	brne	.+2      	; 0xce2 <m_wii_open+0x82>
     ce0:	a4 c0       	rjmp	.+328    	; 0xe2a <m_wii_open+0x1ca>
	if(!send_byte(0x00)){return 0;}
     ce2:	80 e0       	ldi	r24, 0x00	; 0
     ce4:	0e 94 0c 06 	call	0xc18	; 0xc18 <send_byte>
     ce8:	88 23       	and	r24, r24
     cea:	09 f4       	brne	.+2      	; 0xcee <m_wii_open+0x8e>
     cec:	a0 c0       	rjmp	.+320    	; 0xe2e <m_wii_open+0x1ce>
	if(!send_byte(0x00)){return 0;}
     cee:	80 e0       	ldi	r24, 0x00	; 0
     cf0:	0e 94 0c 06 	call	0xc18	; 0xc18 <send_byte>
     cf4:	88 23       	and	r24, r24
     cf6:	09 f4       	brne	.+2      	; 0xcfa <m_wii_open+0x9a>
     cf8:	9c c0       	rjmp	.+312    	; 0xe32 <m_wii_open+0x1d2>
	if(!send_byte(0x90)){return 0;} // p0
     cfa:	80 e9       	ldi	r24, 0x90	; 144
     cfc:	0e 94 0c 06 	call	0xc18	; 0xc18 <send_byte>
     d00:	88 23       	and	r24, r24
     d02:	09 f4       	brne	.+2      	; 0xd06 <m_wii_open+0xa6>
     d04:	98 c0       	rjmp	.+304    	; 0xe36 <m_wii_open+0x1d6>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
     d06:	84 e9       	ldi	r24, 0x94	; 148
     d08:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     d0c:	83 ec       	ldi	r24, 0xC3	; 195
     d0e:	99 e0       	ldi	r25, 0x09	; 9
     d10:	01 97       	sbiw	r24, 0x01	; 1
     d12:	f1 f7       	brne	.-4      	; 0xd10 <m_wii_open+0xb0>
     d14:	00 c0       	rjmp	.+0      	; 0xd16 <m_wii_open+0xb6>
     d16:	00 00       	nop
	end();

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 2
	if(!start_write(MWIITWIADDR)){return 0;}
     d18:	88 e5       	ldi	r24, 0x58	; 88
     d1a:	0e 94 19 06 	call	0xc32	; 0xc32 <start_write>
     d1e:	88 23       	and	r24, r24
     d20:	09 f4       	brne	.+2      	; 0xd24 <m_wii_open+0xc4>
     d22:	8b c0       	rjmp	.+278    	; 0xe3a <m_wii_open+0x1da>
	if(!send_byte(0x07)){return 0;}
     d24:	87 e0       	ldi	r24, 0x07	; 7
     d26:	0e 94 0c 06 	call	0xc18	; 0xc18 <send_byte>
     d2a:	88 23       	and	r24, r24
     d2c:	09 f4       	brne	.+2      	; 0xd30 <m_wii_open+0xd0>
     d2e:	87 c0       	rjmp	.+270    	; 0xe3e <m_wii_open+0x1de>
	if(!send_byte(0x00)){return 0;}
     d30:	80 e0       	ldi	r24, 0x00	; 0
     d32:	0e 94 0c 06 	call	0xc18	; 0xc18 <send_byte>
     d36:	88 23       	and	r24, r24
     d38:	09 f4       	brne	.+2      	; 0xd3c <m_wii_open+0xdc>
     d3a:	83 c0       	rjmp	.+262    	; 0xe42 <m_wii_open+0x1e2>
	if(!send_byte(0x41)){return 0;} // p1
     d3c:	81 e4       	ldi	r24, 0x41	; 65
     d3e:	0e 94 0c 06 	call	0xc18	; 0xc18 <send_byte>
     d42:	88 23       	and	r24, r24
     d44:	09 f4       	brne	.+2      	; 0xd48 <m_wii_open+0xe8>
     d46:	7f c0       	rjmp	.+254    	; 0xe46 <m_wii_open+0x1e6>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
     d48:	84 e9       	ldi	r24, 0x94	; 148
     d4a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     d4e:	83 ec       	ldi	r24, 0xC3	; 195
     d50:	99 e0       	ldi	r25, 0x09	; 9
     d52:	01 97       	sbiw	r24, 0x01	; 1
     d54:	f1 f7       	brne	.-4      	; 0xd52 <m_wii_open+0xf2>
     d56:	00 c0       	rjmp	.+0      	; 0xd58 <m_wii_open+0xf8>
     d58:	00 00       	nop
	end();

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 3
	if(!start_write(MWIITWIADDR)){return 0;}
     d5a:	88 e5       	ldi	r24, 0x58	; 88
     d5c:	0e 94 19 06 	call	0xc32	; 0xc32 <start_write>
     d60:	88 23       	and	r24, r24
     d62:	09 f4       	brne	.+2      	; 0xd66 <m_wii_open+0x106>
     d64:	72 c0       	rjmp	.+228    	; 0xe4a <m_wii_open+0x1ea>
	if(!send_byte(0x1A)){return 0;}
     d66:	8a e1       	ldi	r24, 0x1A	; 26
     d68:	0e 94 0c 06 	call	0xc18	; 0xc18 <send_byte>
     d6c:	88 23       	and	r24, r24
     d6e:	09 f4       	brne	.+2      	; 0xd72 <m_wii_open+0x112>
     d70:	6e c0       	rjmp	.+220    	; 0xe4e <m_wii_open+0x1ee>
	if(!send_byte(0x40)){return 0;} // p2
     d72:	80 e4       	ldi	r24, 0x40	; 64
     d74:	0e 94 0c 06 	call	0xc18	; 0xc18 <send_byte>
     d78:	88 23       	and	r24, r24
     d7a:	09 f4       	brne	.+2      	; 0xd7e <m_wii_open+0x11e>
     d7c:	6a c0       	rjmp	.+212    	; 0xe52 <m_wii_open+0x1f2>
	if(!send_byte(0x00)){return 0;} // p3
     d7e:	80 e0       	ldi	r24, 0x00	; 0
     d80:	0e 94 0c 06 	call	0xc18	; 0xc18 <send_byte>
     d84:	88 23       	and	r24, r24
     d86:	09 f4       	brne	.+2      	; 0xd8a <m_wii_open+0x12a>
     d88:	66 c0       	rjmp	.+204    	; 0xe56 <m_wii_open+0x1f6>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
     d8a:	84 e9       	ldi	r24, 0x94	; 148
     d8c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     d90:	83 ec       	ldi	r24, 0xC3	; 195
     d92:	99 e0       	ldi	r25, 0x09	; 9
     d94:	01 97       	sbiw	r24, 0x01	; 1
     d96:	f1 f7       	brne	.-4      	; 0xd94 <m_wii_open+0x134>
     d98:	00 c0       	rjmp	.+0      	; 0xd9a <m_wii_open+0x13a>
     d9a:	00 00       	nop
	end();

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
     d9c:	88 e5       	ldi	r24, 0x58	; 88
     d9e:	0e 94 19 06 	call	0xc32	; 0xc32 <start_write>
     da2:	88 23       	and	r24, r24
     da4:	09 f4       	brne	.+2      	; 0xda8 <m_wii_open+0x148>
     da6:	59 c0       	rjmp	.+178    	; 0xe5a <m_wii_open+0x1fa>
	if(!send_byte(0x33)){return 0;}
     da8:	83 e3       	ldi	r24, 0x33	; 51
     daa:	0e 94 0c 06 	call	0xc18	; 0xc18 <send_byte>
     dae:	88 23       	and	r24, r24
     db0:	09 f4       	brne	.+2      	; 0xdb4 <m_wii_open+0x154>
     db2:	55 c0       	rjmp	.+170    	; 0xe5e <m_wii_open+0x1fe>
	if(!send_byte(0x03)){return 0;}
     db4:	83 e0       	ldi	r24, 0x03	; 3
     db6:	0e 94 0c 06 	call	0xc18	; 0xc18 <send_byte>
     dba:	88 23       	and	r24, r24
     dbc:	09 f4       	brne	.+2      	; 0xdc0 <m_wii_open+0x160>
     dbe:	51 c0       	rjmp	.+162    	; 0xe62 <m_wii_open+0x202>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
     dc0:	84 e9       	ldi	r24, 0x94	; 148
     dc2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     dc6:	83 ec       	ldi	r24, 0xC3	; 195
     dc8:	99 e0       	ldi	r25, 0x09	; 9
     dca:	01 97       	sbiw	r24, 0x01	; 1
     dcc:	f1 f7       	brne	.-4      	; 0xdca <m_wii_open+0x16a>
     dce:	00 c0       	rjmp	.+0      	; 0xdd0 <m_wii_open+0x170>
     dd0:	00 00       	nop
	end();

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
     dd2:	88 e5       	ldi	r24, 0x58	; 88
     dd4:	0e 94 19 06 	call	0xc32	; 0xc32 <start_write>
     dd8:	88 23       	and	r24, r24
     dda:	09 f4       	brne	.+2      	; 0xdde <m_wii_open+0x17e>
     ddc:	44 c0       	rjmp	.+136    	; 0xe66 <m_wii_open+0x206>
	if(!send_byte(0x30)){return 0;}
     dde:	80 e3       	ldi	r24, 0x30	; 48
     de0:	0e 94 0c 06 	call	0xc18	; 0xc18 <send_byte>
     de4:	88 23       	and	r24, r24
     de6:	09 f4       	brne	.+2      	; 0xdea <m_wii_open+0x18a>
     de8:	40 c0       	rjmp	.+128    	; 0xe6a <m_wii_open+0x20a>
	if(!send_byte(0x08)){return 0;}
     dea:	88 e0       	ldi	r24, 0x08	; 8
     dec:	0e 94 0c 06 	call	0xc18	; 0xc18 <send_byte>
     df0:	88 23       	and	r24, r24
     df2:	e9 f1       	breq	.+122    	; 0xe6e <m_wii_open+0x20e>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
     df4:	84 e9       	ldi	r24, 0x94	; 148
     df6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     dfa:	83 ec       	ldi	r24, 0xC3	; 195
     dfc:	99 e0       	ldi	r25, 0x09	; 9
     dfe:	01 97       	sbiw	r24, 0x01	; 1
     e00:	f1 f7       	brne	.-4      	; 0xdfe <m_wii_open+0x19e>
     e02:	00 c0       	rjmp	.+0      	; 0xe04 <m_wii_open+0x1a4>
     e04:	00 00       	nop
	if(!send_byte(0x08)){return 0;}
	end();
	
	m_wait(INTERPACKET);

	return 1;
     e06:	81 e0       	ldi	r24, 0x01	; 1
     e08:	08 95       	ret
char m_wii_open()
{	
	m_bus_init();

	// enter configuration mode
	if(!start_write(MWIITWIADDR)){return 0;}
     e0a:	80 e0       	ldi	r24, 0x00	; 0
     e0c:	08 95       	ret
	if(!send_byte(0x30)){return 0;}
     e0e:	80 e0       	ldi	r24, 0x00	; 0
     e10:	08 95       	ret
	if(!send_byte(0x01)){return 0;}
     e12:	80 e0       	ldi	r24, 0x00	; 0
     e14:	08 95       	ret
	end();
	m_wait(INTERPACKET);
		
	// sensitivity setting, part 1
	if(!start_write(MWIITWIADDR)){return 0;}
     e16:	80 e0       	ldi	r24, 0x00	; 0
     e18:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
     e1a:	80 e0       	ldi	r24, 0x00	; 0
     e1c:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
     e1e:	80 e0       	ldi	r24, 0x00	; 0
     e20:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
     e22:	80 e0       	ldi	r24, 0x00	; 0
     e24:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
     e26:	80 e0       	ldi	r24, 0x00	; 0
     e28:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
     e2a:	80 e0       	ldi	r24, 0x00	; 0
     e2c:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
     e2e:	80 e0       	ldi	r24, 0x00	; 0
     e30:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
     e32:	80 e0       	ldi	r24, 0x00	; 0
     e34:	08 95       	ret
	if(!send_byte(0x90)){return 0;} // p0
     e36:	80 e0       	ldi	r24, 0x00	; 0
     e38:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 2
	if(!start_write(MWIITWIADDR)){return 0;}
     e3a:	80 e0       	ldi	r24, 0x00	; 0
     e3c:	08 95       	ret
	if(!send_byte(0x07)){return 0;}
     e3e:	80 e0       	ldi	r24, 0x00	; 0
     e40:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
     e42:	80 e0       	ldi	r24, 0x00	; 0
     e44:	08 95       	ret
	if(!send_byte(0x41)){return 0;} // p1
     e46:	80 e0       	ldi	r24, 0x00	; 0
     e48:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 3
	if(!start_write(MWIITWIADDR)){return 0;}
     e4a:	80 e0       	ldi	r24, 0x00	; 0
     e4c:	08 95       	ret
	if(!send_byte(0x1A)){return 0;}
     e4e:	80 e0       	ldi	r24, 0x00	; 0
     e50:	08 95       	ret
	if(!send_byte(0x40)){return 0;} // p2
     e52:	80 e0       	ldi	r24, 0x00	; 0
     e54:	08 95       	ret
	if(!send_byte(0x00)){return 0;} // p3
     e56:	80 e0       	ldi	r24, 0x00	; 0
     e58:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
     e5a:	80 e0       	ldi	r24, 0x00	; 0
     e5c:	08 95       	ret
	if(!send_byte(0x33)){return 0;}
     e5e:	80 e0       	ldi	r24, 0x00	; 0
     e60:	08 95       	ret
	if(!send_byte(0x03)){return 0;}
     e62:	80 e0       	ldi	r24, 0x00	; 0
     e64:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
     e66:	80 e0       	ldi	r24, 0x00	; 0
     e68:	08 95       	ret
	if(!send_byte(0x30)){return 0;}
     e6a:	80 e0       	ldi	r24, 0x00	; 0
     e6c:	08 95       	ret
	if(!send_byte(0x08)){return 0;}
     e6e:	80 e0       	ldi	r24, 0x00	; 0
	end();
	
	m_wait(INTERPACKET);

	return 1;
}
     e70:	08 95       	ret

00000e72 <start_read>:
	}	
	return 1;	// success
}	

unsigned char start_read(unsigned char address)
{
     e72:	cf 93       	push	r28
     e74:	c8 2f       	mov	r28, r24
	unsigned char status;
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
     e76:	84 ea       	ldi	r24, 0xA4	; 164
     e78:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	if(!twi_wait())
     e7c:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <twi_wait>
     e80:	88 23       	and	r24, r24
     e82:	69 f0       	breq	.+26     	; 0xe9e <start_read+0x2c>
	{
		return 0;
	}
	
	// ADDRESS
	status = send_byte(((address<<1) + 1));
     e84:	8c 2f       	mov	r24, r28
     e86:	88 0f       	add	r24, r24
     e88:	8f 5f       	subi	r24, 0xFF	; 255
     e8a:	0e 94 0c 06 	call	0xc18	; 0xc18 <send_byte>
	if(status== 0x48){ // ACK was not received - may not be connected/listening
     e8e:	88 34       	cpi	r24, 0x48	; 72
     e90:	29 f4       	brne	.+10     	; 0xe9c <start_read+0x2a>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
     e92:	84 e9       	ldi	r24, 0x94	; 148
     e94:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
		return 0;	// failure
     e98:	80 e0       	ldi	r24, 0x00	; 0
     e9a:	01 c0       	rjmp	.+2      	; 0xe9e <start_read+0x2c>
	}	
	return 1;	// success
     e9c:	81 e0       	ldi	r24, 0x01	; 1
}	
     e9e:	cf 91       	pop	r28
     ea0:	08 95       	ret

00000ea2 <m_wii_read>:

	return 1;
}

char m_wii_read(unsigned int* blob_data)
{
     ea2:	0f 93       	push	r16
     ea4:	1f 93       	push	r17
     ea6:	cf 93       	push	r28
     ea8:	df 93       	push	r29
     eaa:	cd b7       	in	r28, 0x3d	; 61
     eac:	de b7       	in	r29, 0x3e	; 62
     eae:	60 97       	sbiw	r28, 0x10	; 16
     eb0:	0f b6       	in	r0, 0x3f	; 63
     eb2:	f8 94       	cli
     eb4:	de bf       	out	0x3e, r29	; 62
     eb6:	0f be       	out	0x3f, r0	; 63
     eb8:	cd bf       	out	0x3d, r28	; 61
     eba:	8c 01       	movw	r16, r24
	int i;
	unsigned char temp[16] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
     ebc:	fe 01       	movw	r30, r28
     ebe:	31 96       	adiw	r30, 0x01	; 1
     ec0:	80 e1       	ldi	r24, 0x10	; 16
     ec2:	df 01       	movw	r26, r30
     ec4:	1d 92       	st	X+, r1
     ec6:	8a 95       	dec	r24
     ec8:	e9 f7       	brne	.-6      	; 0xec4 <m_wii_read+0x22>
	// prepare for reading
	if(!start_write(MWIITWIADDR)){return 0;}
     eca:	88 e5       	ldi	r24, 0x58	; 88
     ecc:	0e 94 19 06 	call	0xc32	; 0xc32 <start_write>
     ed0:	88 23       	and	r24, r24
     ed2:	09 f4       	brne	.+2      	; 0xed6 <m_wii_read+0x34>
     ed4:	69 c0       	rjmp	.+210    	; 0xfa8 <m_wii_read+0x106>
	if(!send_byte(0x36)){return 0;}
     ed6:	86 e3       	ldi	r24, 0x36	; 54
     ed8:	0e 94 0c 06 	call	0xc18	; 0xc18 <send_byte>
     edc:	88 23       	and	r24, r24
     ede:	09 f4       	brne	.+2      	; 0xee2 <m_wii_read+0x40>
     ee0:	65 c0       	rjmp	.+202    	; 0xfac <m_wii_read+0x10a>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
     ee2:	84 e9       	ldi	r24, 0x94	; 148
     ee4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     ee8:	b8 e0       	ldi	r27, 0x08	; 8
     eea:	ba 95       	dec	r27
     eec:	f1 f7       	brne	.-4      	; 0xeea <m_wii_read+0x48>
     eee:	00 00       	nop
	if(!send_byte(0x36)){return 0;}
	end();

	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
     ef0:	88 e5       	ldi	r24, 0x58	; 88
     ef2:	0e 94 39 07 	call	0xe72	; 0xe72 <start_read>
     ef6:	88 23       	and	r24, r24
     ef8:	09 f4       	brne	.+2      	; 0xefc <m_wii_read+0x5a>
     efa:	5a c0       	rjmp	.+180    	; 0xfb0 <m_wii_read+0x10e>
     efc:	be 01       	movw	r22, r28
     efe:	6f 5f       	subi	r22, 0xFF	; 255
     f00:	7f 4f       	sbci	r23, 0xFF	; 255
     f02:	ae 01       	movw	r20, r28
     f04:	40 5f       	subi	r20, 0xF0	; 240
     f06:	5f 4f       	sbci	r21, 0xFF	; 255
	for(i=0;i<15;i++)
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
     f08:	ec eb       	ldi	r30, 0xBC	; 188
     f0a:	f0 e0       	ldi	r31, 0x00	; 0
     f0c:	84 ec       	ldi	r24, 0xC4	; 196
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		temp[i] = TWDR;
     f0e:	2b eb       	ldi	r18, 0xBB	; 187
     f10:	30 e0       	ldi	r19, 0x00	; 0
	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
	for(i=0;i<15;i++)
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
     f12:	80 83       	st	Z, r24
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
     f14:	90 81       	ld	r25, Z
     f16:	99 23       	and	r25, r25
     f18:	ec f7       	brge	.-6      	; 0xf14 <m_wii_read+0x72>
		temp[i] = TWDR;
     f1a:	d9 01       	movw	r26, r18
     f1c:	9c 91       	ld	r25, X
     f1e:	db 01       	movw	r26, r22
     f20:	9d 93       	st	X+, r25
     f22:	bd 01       	movw	r22, r26
	end();

	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
	for(i=0;i<15;i++)
     f24:	a4 17       	cp	r26, r20
     f26:	b5 07       	cpc	r27, r21
     f28:	a1 f7       	brne	.-24     	; 0xf12 <m_wii_read+0x70>
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		temp[i] = TWDR;
	}
	TWCR = (1<<TWINT) | (1<<TWEN);	// clear the flag, no ACK, and wait for another byte
     f2a:	84 e8       	ldi	r24, 0x84	; 132
     f2c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
     f30:	ec eb       	ldi	r30, 0xBC	; 188
     f32:	f0 e0       	ldi	r31, 0x00	; 0
     f34:	80 81       	ld	r24, Z
     f36:	88 23       	and	r24, r24
     f38:	ec f7       	brge	.-6      	; 0xf34 <m_wii_read+0x92>
	temp[15] = TWDR;
     f3a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     f3e:	88 8b       	std	Y+16, r24	; 0x10
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
     f40:	84 e9       	ldi	r24, 0x94	; 148
     f42:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     f46:	be 01       	movw	r22, r28
     f48:	6c 5f       	subi	r22, 0xFC	; 252
     f4a:	7f 4f       	sbci	r23, 0xFF	; 255
     f4c:	f8 01       	movw	r30, r16
     f4e:	08 5e       	subi	r16, 0xE8	; 232
     f50:	1f 4f       	sbci	r17, 0xFF	; 255
	temp[15] = TWDR;
	end();

	for(i=0;i<10;i+=3) // for each blob:
	{	// i = 0, 3, 6, 9
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
     f52:	db 01       	movw	r26, r22
     f54:	2c 91       	ld	r18, X
     f56:	32 2f       	mov	r19, r18
     f58:	30 73       	andi	r19, 0x30	; 48
     f5a:	cb 01       	movw	r24, r22
     f5c:	02 97       	sbiw	r24, 0x02	; 2
     f5e:	dc 01       	movw	r26, r24
     f60:	8c 91       	ld	r24, X
     f62:	90 e0       	ldi	r25, 0x00	; 0
     f64:	b0 e1       	ldi	r27, 0x10	; 16
     f66:	3b 9f       	mul	r19, r27
     f68:	80 0d       	add	r24, r0
     f6a:	91 1d       	adc	r25, r1
     f6c:	11 24       	eor	r1, r1
     f6e:	91 83       	std	Z+1, r25	; 0x01
     f70:	80 83       	st	Z, r24
		blob_data[i+1] = (unsigned int)temp[i+2] + ((int)(temp[i+3] & 0b11000000) <<2);	// Y
     f72:	42 2f       	mov	r20, r18
     f74:	40 7c       	andi	r20, 0xC0	; 192
     f76:	50 e0       	ldi	r21, 0x00	; 0
     f78:	44 0f       	add	r20, r20
     f7a:	55 1f       	adc	r21, r21
     f7c:	44 0f       	add	r20, r20
     f7e:	55 1f       	adc	r21, r21
     f80:	cb 01       	movw	r24, r22
     f82:	01 97       	sbiw	r24, 0x01	; 1
     f84:	dc 01       	movw	r26, r24
     f86:	8c 91       	ld	r24, X
     f88:	48 0f       	add	r20, r24
     f8a:	51 1d       	adc	r21, r1
     f8c:	53 83       	std	Z+3, r21	; 0x03
     f8e:	42 83       	std	Z+2, r20	; 0x02
		blob_data[i+2] = temp[i+3] & 0b00001111;										// size
     f90:	2f 70       	andi	r18, 0x0F	; 15
     f92:	30 e0       	ldi	r19, 0x00	; 0
     f94:	35 83       	std	Z+5, r19	; 0x05
     f96:	24 83       	std	Z+4, r18	; 0x04
     f98:	6d 5f       	subi	r22, 0xFD	; 253
     f9a:	7f 4f       	sbci	r23, 0xFF	; 255
     f9c:	36 96       	adiw	r30, 0x06	; 6
	TWCR = (1<<TWINT) | (1<<TWEN);	// clear the flag, no ACK, and wait for another byte
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
	temp[15] = TWDR;
	end();

	for(i=0;i<10;i+=3) // for each blob:
     f9e:	e0 17       	cp	r30, r16
     fa0:	f1 07       	cpc	r31, r17
     fa2:	b9 f6       	brne	.-82     	; 0xf52 <m_wii_read+0xb0>
	{	// i = 0, 3, 6, 9
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
		blob_data[i+1] = (unsigned int)temp[i+2] + ((int)(temp[i+3] & 0b11000000) <<2);	// Y
		blob_data[i+2] = temp[i+3] & 0b00001111;										// size
	}
	return 1;
     fa4:	81 e0       	ldi	r24, 0x01	; 1
     fa6:	05 c0       	rjmp	.+10     	; 0xfb2 <m_wii_read+0x110>
char m_wii_read(unsigned int* blob_data)
{
	int i;
	unsigned char temp[16] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
	// prepare for reading
	if(!start_write(MWIITWIADDR)){return 0;}
     fa8:	80 e0       	ldi	r24, 0x00	; 0
     faa:	03 c0       	rjmp	.+6      	; 0xfb2 <m_wii_read+0x110>
	if(!send_byte(0x36)){return 0;}
     fac:	80 e0       	ldi	r24, 0x00	; 0
     fae:	01 c0       	rjmp	.+2      	; 0xfb2 <m_wii_read+0x110>
	end();

	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
     fb0:	80 e0       	ldi	r24, 0x00	; 0
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
		blob_data[i+1] = (unsigned int)temp[i+2] + ((int)(temp[i+3] & 0b11000000) <<2);	// Y
		blob_data[i+2] = temp[i+3] & 0b00001111;										// size
	}
	return 1;
}
     fb2:	60 96       	adiw	r28, 0x10	; 16
     fb4:	0f b6       	in	r0, 0x3f	; 63
     fb6:	f8 94       	cli
     fb8:	de bf       	out	0x3e, r29	; 62
     fba:	0f be       	out	0x3f, r0	; 63
     fbc:	cd bf       	out	0x3d, r28	; 61
     fbe:	df 91       	pop	r29
     fc0:	cf 91       	pop	r28
     fc2:	1f 91       	pop	r17
     fc4:	0f 91       	pop	r16
     fc6:	08 95       	ret

00000fc8 <ADC_init>:
		m_usb_tx_string("F7: ");
		m_usb_tx_int(pt_data[8]);
	}
	m_usb_tx_string("   ---   ");
	//m_usb_tx_char(13);
}
     fc8:	ec e7       	ldi	r30, 0x7C	; 124
     fca:	f0 e0       	ldi	r31, 0x00	; 0
     fcc:	80 81       	ld	r24, Z
     fce:	8f 77       	andi	r24, 0x7F	; 127
     fd0:	80 83       	st	Z, r24
     fd2:	80 81       	ld	r24, Z
     fd4:	80 64       	ori	r24, 0x40	; 64
     fd6:	80 83       	st	Z, r24
     fd8:	aa e7       	ldi	r26, 0x7A	; 122
     fda:	b0 e0       	ldi	r27, 0x00	; 0
     fdc:	8c 91       	ld	r24, X
     fde:	84 60       	ori	r24, 0x04	; 4
     fe0:	8c 93       	st	X, r24
     fe2:	8c 91       	ld	r24, X
     fe4:	8d 7f       	andi	r24, 0xFD	; 253
     fe6:	8c 93       	st	X, r24
     fe8:	8c 91       	ld	r24, X
     fea:	81 60       	ori	r24, 0x01	; 1
     fec:	8c 93       	st	X, r24
     fee:	ee e7       	ldi	r30, 0x7E	; 126
     ff0:	f0 e0       	ldi	r31, 0x00	; 0
     ff2:	80 81       	ld	r24, Z
     ff4:	81 60       	ori	r24, 0x01	; 1
     ff6:	80 83       	st	Z, r24
     ff8:	80 81       	ld	r24, Z
     ffa:	82 60       	ori	r24, 0x02	; 2
     ffc:	80 83       	st	Z, r24
     ffe:	80 81       	ld	r24, Z
    1000:	80 61       	ori	r24, 0x10	; 16
    1002:	80 83       	st	Z, r24
    1004:	80 81       	ld	r24, Z
    1006:	80 62       	ori	r24, 0x20	; 32
    1008:	80 83       	st	Z, r24
    100a:	80 81       	ld	r24, Z
    100c:	80 64       	ori	r24, 0x40	; 64
    100e:	80 83       	st	Z, r24
    1010:	80 81       	ld	r24, Z
    1012:	80 68       	ori	r24, 0x80	; 128
    1014:	80 83       	st	Z, r24
    1016:	ed e7       	ldi	r30, 0x7D	; 125
    1018:	f0 e0       	ldi	r31, 0x00	; 0
    101a:	80 81       	ld	r24, Z
    101c:	81 60       	ori	r24, 0x01	; 1
    101e:	80 83       	st	Z, r24
    1020:	80 81       	ld	r24, Z
    1022:	82 60       	ori	r24, 0x02	; 2
    1024:	80 83       	st	Z, r24
    1026:	80 81       	ld	r24, Z
    1028:	84 60       	ori	r24, 0x04	; 4
    102a:	80 83       	st	Z, r24
    102c:	8c 91       	ld	r24, X
    102e:	80 62       	ori	r24, 0x20	; 32
    1030:	8c 93       	st	X, r24
    1032:	08 95       	ret

00001034 <setMUX>:
    1034:	82 30       	cpi	r24, 0x02	; 2
    1036:	91 05       	cpc	r25, r1
    1038:	b0 f0       	brcs	.+44     	; 0x1066 <setMUX+0x32>
    103a:	84 30       	cpi	r24, 0x04	; 4
    103c:	91 05       	cpc	r25, r1
    103e:	d9 f0       	breq	.+54     	; 0x1076 <setMUX+0x42>
    1040:	85 30       	cpi	r24, 0x05	; 5
    1042:	91 05       	cpc	r25, r1
    1044:	91 f0       	breq	.+36     	; 0x106a <setMUX+0x36>
    1046:	86 30       	cpi	r24, 0x06	; 6
    1048:	91 05       	cpc	r25, r1
    104a:	a9 f0       	breq	.+42     	; 0x1076 <setMUX+0x42>
    104c:	87 30       	cpi	r24, 0x07	; 7
    104e:	91 05       	cpc	r25, r1
    1050:	61 f0       	breq	.+24     	; 0x106a <setMUX+0x36>
    1052:	88 30       	cpi	r24, 0x08	; 8
    1054:	91 05       	cpc	r25, r1
    1056:	79 f0       	breq	.+30     	; 0x1076 <setMUX+0x42>
    1058:	89 30       	cpi	r24, 0x09	; 9
    105a:	91 05       	cpc	r25, r1
    105c:	31 f0       	breq	.+12     	; 0x106a <setMUX+0x36>
    105e:	8a 30       	cpi	r24, 0x0A	; 10
    1060:	91 05       	cpc	r25, r1
    1062:	b1 f5       	brne	.+108    	; 0x10d0 <setMUX+0x9c>
    1064:	08 c0       	rjmp	.+16     	; 0x1076 <setMUX+0x42>
    1066:	80 ff       	sbrs	r24, 0
    1068:	06 c0       	rjmp	.+12     	; 0x1076 <setMUX+0x42>
    106a:	ec e7       	ldi	r30, 0x7C	; 124
    106c:	f0 e0       	ldi	r31, 0x00	; 0
    106e:	20 81       	ld	r18, Z
    1070:	21 60       	ori	r18, 0x01	; 1
    1072:	20 83       	st	Z, r18
    1074:	05 c0       	rjmp	.+10     	; 0x1080 <setMUX+0x4c>
    1076:	ec e7       	ldi	r30, 0x7C	; 124
    1078:	f0 e0       	ldi	r31, 0x00	; 0
    107a:	20 81       	ld	r18, Z
    107c:	2e 7f       	andi	r18, 0xFE	; 254
    107e:	20 83       	st	Z, r18
    1080:	81 ff       	sbrs	r24, 1
    1082:	06 c0       	rjmp	.+12     	; 0x1090 <setMUX+0x5c>
    1084:	ec e7       	ldi	r30, 0x7C	; 124
    1086:	f0 e0       	ldi	r31, 0x00	; 0
    1088:	20 81       	ld	r18, Z
    108a:	22 60       	ori	r18, 0x02	; 2
    108c:	20 83       	st	Z, r18
    108e:	05 c0       	rjmp	.+10     	; 0x109a <setMUX+0x66>
    1090:	ec e7       	ldi	r30, 0x7C	; 124
    1092:	f0 e0       	ldi	r31, 0x00	; 0
    1094:	20 81       	ld	r18, Z
    1096:	2d 7f       	andi	r18, 0xFD	; 253
    1098:	20 83       	st	Z, r18
    109a:	82 ff       	sbrs	r24, 2
    109c:	06 c0       	rjmp	.+12     	; 0x10aa <setMUX+0x76>
    109e:	ec e7       	ldi	r30, 0x7C	; 124
    10a0:	f0 e0       	ldi	r31, 0x00	; 0
    10a2:	20 81       	ld	r18, Z
    10a4:	24 60       	ori	r18, 0x04	; 4
    10a6:	20 83       	st	Z, r18
    10a8:	05 c0       	rjmp	.+10     	; 0x10b4 <setMUX+0x80>
    10aa:	ec e7       	ldi	r30, 0x7C	; 124
    10ac:	f0 e0       	ldi	r31, 0x00	; 0
    10ae:	20 81       	ld	r18, Z
    10b0:	2b 7f       	andi	r18, 0xFB	; 251
    10b2:	20 83       	st	Z, r18
    10b4:	83 ff       	sbrs	r24, 3
    10b6:	06 c0       	rjmp	.+12     	; 0x10c4 <setMUX+0x90>
    10b8:	eb e7       	ldi	r30, 0x7B	; 123
    10ba:	f0 e0       	ldi	r31, 0x00	; 0
    10bc:	80 81       	ld	r24, Z
    10be:	80 62       	ori	r24, 0x20	; 32
    10c0:	80 83       	st	Z, r24
    10c2:	08 95       	ret
    10c4:	eb e7       	ldi	r30, 0x7B	; 123
    10c6:	f0 e0       	ldi	r31, 0x00	; 0
    10c8:	80 81       	ld	r24, Z
    10ca:	8f 7d       	andi	r24, 0xDF	; 223
    10cc:	80 83       	st	Z, r24
    10ce:	08 95       	ret
    10d0:	6a 9a       	sbi	0x0d, 2	; 13
    10d2:	72 98       	cbi	0x0e, 2	; 14
    10d4:	08 95       	ret

000010d6 <readADC>:
    10d6:	ea e7       	ldi	r30, 0x7A	; 122
    10d8:	f0 e0       	ldi	r31, 0x00	; 0
    10da:	80 81       	ld	r24, Z
    10dc:	80 68       	ori	r24, 0x80	; 128
    10de:	80 83       	st	Z, r24
    10e0:	80 81       	ld	r24, Z
    10e2:	80 64       	ori	r24, 0x40	; 64
    10e4:	80 83       	st	Z, r24
    10e6:	80 81       	ld	r24, Z
    10e8:	84 ff       	sbrs	r24, 4
    10ea:	fd cf       	rjmp	.-6      	; 0x10e6 <readADC+0x10>
    10ec:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
    10f0:	30 91 79 00 	lds	r19, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
    10f4:	ea e7       	ldi	r30, 0x7A	; 122
    10f6:	f0 e0       	ldi	r31, 0x00	; 0
    10f8:	90 81       	ld	r25, Z
    10fa:	9f 7e       	andi	r25, 0xEF	; 239
    10fc:	90 83       	st	Z, r25
    10fe:	90 81       	ld	r25, Z
    1100:	9f 77       	andi	r25, 0x7F	; 127
    1102:	90 83       	st	Z, r25
    1104:	c9 01       	movw	r24, r18
    1106:	08 95       	ret

00001108 <read_pts>:
    1108:	cf 92       	push	r12
    110a:	df 92       	push	r13
    110c:	ef 92       	push	r14
    110e:	ff 92       	push	r15
    1110:	0f 93       	push	r16
    1112:	1f 93       	push	r17
    1114:	cf 93       	push	r28
    1116:	df 93       	push	r29
    1118:	cd b7       	in	r28, 0x3d	; 61
    111a:	de b7       	in	r29, 0x3e	; 62
    111c:	62 97       	sbiw	r28, 0x12	; 18
    111e:	0f b6       	in	r0, 0x3f	; 63
    1120:	f8 94       	cli
    1122:	de bf       	out	0x3e, r29	; 62
    1124:	0f be       	out	0x3f, r0	; 63
    1126:	cd bf       	out	0x3d, r28	; 61
    1128:	6c 01       	movw	r12, r24
    112a:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <jtag_enabled>
    112e:	88 23       	and	r24, r24
    1130:	29 f0       	breq	.+10     	; 0x113c <read_pts+0x34>
    1132:	80 e8       	ldi	r24, 0x80	; 128
    1134:	85 bf       	out	0x35, r24	; 53
    1136:	85 bf       	out	0x35, r24	; 53
    1138:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <jtag_enabled>
    113c:	89 e0       	ldi	r24, 0x09	; 9
    113e:	90 e0       	ldi	r25, 0x00	; 0
    1140:	0e 94 e4 07 	call	0xfc8	; 0xfc8 <ADC_init>
    1144:	82 e1       	ldi	r24, 0x12	; 18
    1146:	e8 e0       	ldi	r30, 0x08	; 8
    1148:	f1 e0       	ldi	r31, 0x01	; 1
    114a:	de 01       	movw	r26, r28
    114c:	11 96       	adiw	r26, 0x01	; 1
    114e:	01 90       	ld	r0, Z+
    1150:	0d 92       	st	X+, r0
    1152:	8a 95       	dec	r24
    1154:	e1 f7       	brne	.-8      	; 0x114e <read_pts+0x46>
    1156:	ce 01       	movw	r24, r28
    1158:	01 96       	adiw	r24, 0x01	; 1
    115a:	7c 01       	movw	r14, r24
    115c:	86 01       	movw	r16, r12
    115e:	92 e1       	ldi	r25, 0x12	; 18
    1160:	c9 0e       	add	r12, r25
    1162:	d1 1c       	adc	r13, r1
    1164:	f7 01       	movw	r30, r14
    1166:	81 91       	ld	r24, Z+
    1168:	91 91       	ld	r25, Z+
    116a:	7f 01       	movw	r14, r30
    116c:	0e 94 1a 08 	call	0x1034	; 0x1034 <setMUX>
    1170:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <readADC>
    1174:	f8 01       	movw	r30, r16
    1176:	81 93       	st	Z+, r24
    1178:	91 93       	st	Z+, r25
    117a:	8f 01       	movw	r16, r30
    117c:	83 ef       	ldi	r24, 0xF3	; 243
    117e:	91 e0       	ldi	r25, 0x01	; 1
    1180:	01 97       	sbiw	r24, 0x01	; 1
    1182:	f1 f7       	brne	.-4      	; 0x1180 <read_pts+0x78>
    1184:	00 c0       	rjmp	.+0      	; 0x1186 <read_pts+0x7e>
    1186:	00 00       	nop
    1188:	ec 15       	cp	r30, r12
    118a:	fd 05       	cpc	r31, r13
    118c:	59 f7       	brne	.-42     	; 0x1164 <read_pts+0x5c>
    118e:	62 96       	adiw	r28, 0x12	; 18
    1190:	0f b6       	in	r0, 0x3f	; 63
    1192:	f8 94       	cli
    1194:	de bf       	out	0x3e, r29	; 62
    1196:	0f be       	out	0x3f, r0	; 63
    1198:	cd bf       	out	0x3d, r28	; 61
    119a:	df 91       	pop	r29
    119c:	cf 91       	pop	r28
    119e:	1f 91       	pop	r17
    11a0:	0f 91       	pop	r16
    11a2:	ff 90       	pop	r15
    11a4:	ef 90       	pop	r14
    11a6:	df 90       	pop	r13
    11a8:	cf 90       	pop	r12
    11aa:	08 95       	ret

000011ac <get_turn>:
    11ac:	fc 01       	movw	r30, r24
    11ae:	20 85       	ldd	r18, Z+8	; 0x08
    11b0:	31 85       	ldd	r19, Z+9	; 0x09
    11b2:	22 0f       	add	r18, r18
    11b4:	33 1f       	adc	r19, r19
    11b6:	66 81       	ldd	r22, Z+6	; 0x06
    11b8:	77 81       	ldd	r23, Z+7	; 0x07
    11ba:	a9 01       	movw	r20, r18
    11bc:	46 0f       	add	r20, r22
    11be:	57 1f       	adc	r21, r23
    11c0:	22 85       	ldd	r18, Z+10	; 0x0a
    11c2:	33 85       	ldd	r19, Z+11	; 0x0b
    11c4:	c9 01       	movw	r24, r18
    11c6:	88 0f       	add	r24, r24
    11c8:	99 1f       	adc	r25, r25
    11ca:	28 0f       	add	r18, r24
    11cc:	39 1f       	adc	r19, r25
    11ce:	24 0f       	add	r18, r20
    11d0:	35 1f       	adc	r19, r21
    11d2:	84 85       	ldd	r24, Z+12	; 0x0c
    11d4:	95 85       	ldd	r25, Z+13	; 0x0d
    11d6:	ac 01       	movw	r20, r24
    11d8:	44 0f       	add	r20, r20
    11da:	55 1f       	adc	r21, r21
    11dc:	84 0f       	add	r24, r20
    11de:	95 1f       	adc	r25, r21
    11e0:	28 1b       	sub	r18, r24
    11e2:	39 0b       	sbc	r19, r25
    11e4:	86 85       	ldd	r24, Z+14	; 0x0e
    11e6:	97 85       	ldd	r25, Z+15	; 0x0f
    11e8:	88 0f       	add	r24, r24
    11ea:	99 1f       	adc	r25, r25
    11ec:	28 1b       	sub	r18, r24
    11ee:	39 0b       	sbc	r19, r25
    11f0:	80 89       	ldd	r24, Z+16	; 0x10
    11f2:	91 89       	ldd	r25, Z+17	; 0x11
    11f4:	28 1b       	sub	r18, r24
    11f6:	39 0b       	sbc	r19, r25
    11f8:	c9 01       	movw	r24, r18
    11fa:	22 f4       	brpl	.+8      	; 0x1204 <get_turn+0x58>
    11fc:	88 27       	eor	r24, r24
    11fe:	99 27       	eor	r25, r25
    1200:	82 1b       	sub	r24, r18
    1202:	93 0b       	sbc	r25, r19
    1204:	45 97       	sbiw	r24, 0x15	; 21
    1206:	2c f0       	brlt	.+10     	; 0x1212 <get_turn+0x66>
    1208:	33 23       	and	r19, r19
    120a:	dc f0       	brlt	.+54     	; 0x1242 <get_turn+0x96>
    120c:	81 e0       	ldi	r24, 0x01	; 1
    120e:	90 e0       	ldi	r25, 0x00	; 0
    1210:	08 95       	ret
    1212:	82 81       	ldd	r24, Z+2	; 0x02
    1214:	93 81       	ldd	r25, Z+3	; 0x03
    1216:	40 97       	sbiw	r24, 0x10	; 16
    1218:	bc f4       	brge	.+46     	; 0x1248 <get_turn+0x9c>
    121a:	84 81       	ldd	r24, Z+4	; 0x04
    121c:	95 81       	ldd	r25, Z+5	; 0x05
    121e:	40 97       	sbiw	r24, 0x10	; 16
    1220:	b4 f4       	brge	.+44     	; 0x124e <get_turn+0xa2>
    1222:	33 23       	and	r19, r19
    1224:	1c f0       	brlt	.+6      	; 0x122c <get_turn+0x80>
    1226:	81 e0       	ldi	r24, 0x01	; 1
    1228:	90 e0       	ldi	r25, 0x00	; 0
    122a:	02 c0       	rjmp	.+4      	; 0x1230 <get_turn+0x84>
    122c:	8f ef       	ldi	r24, 0xFF	; 255
    122e:	9f ef       	ldi	r25, 0xFF	; 255
    1230:	41 e0       	ldi	r20, 0x01	; 1
    1232:	50 e0       	ldi	r21, 0x00	; 0
    1234:	23 2b       	or	r18, r19
    1236:	11 f0       	breq	.+4      	; 0x123c <get_turn+0x90>
    1238:	40 e0       	ldi	r20, 0x00	; 0
    123a:	50 e0       	ldi	r21, 0x00	; 0
    123c:	84 1b       	sub	r24, r20
    123e:	95 0b       	sbc	r25, r21
    1240:	08 95       	ret
    1242:	8f ef       	ldi	r24, 0xFF	; 255
    1244:	9f ef       	ldi	r25, 0xFF	; 255
    1246:	08 95       	ret
    1248:	80 e0       	ldi	r24, 0x00	; 0
    124a:	90 e0       	ldi	r25, 0x00	; 0
    124c:	08 95       	ret
    124e:	80 e0       	ldi	r24, 0x00	; 0
    1250:	90 e0       	ldi	r25, 0x00	; 0
    1252:	08 95       	ret

00001254 <has_puck>:
    1254:	fc 01       	movw	r30, r24
    1256:	80 81       	ld	r24, Z
    1258:	91 81       	ldd	r25, Z+1	; 0x01
    125a:	22 81       	ldd	r18, Z+2	; 0x02
    125c:	33 81       	ldd	r19, Z+3	; 0x03
    125e:	28 0f       	add	r18, r24
    1260:	39 1f       	adc	r19, r25
    1262:	84 81       	ldd	r24, Z+4	; 0x04
    1264:	95 81       	ldd	r25, Z+5	; 0x05
    1266:	28 0f       	add	r18, r24
    1268:	39 1f       	adc	r19, r25
    126a:	81 e0       	ldi	r24, 0x01	; 1
    126c:	2f 32       	cpi	r18, 0x2F	; 47
    126e:	31 40       	sbci	r19, 0x01	; 1
    1270:	0c f4       	brge	.+2      	; 0x1274 <has_puck+0x20>
    1272:	80 e0       	ldi	r24, 0x00	; 0
    1274:	08 95       	ret

00001276 <turn_to_puck>:
    1276:	99 23       	and	r25, r25
    1278:	5c f4       	brge	.+22     	; 0x1290 <turn_to_puck+0x1a>
    127a:	bc 01       	movw	r22, r24
    127c:	99 23       	and	r25, r25
    127e:	24 f4       	brge	.+8      	; 0x1288 <turn_to_puck+0x12>
    1280:	66 27       	eor	r22, r22
    1282:	77 27       	eor	r23, r23
    1284:	68 1b       	sub	r22, r24
    1286:	79 0b       	sbc	r23, r25
    1288:	80 e0       	ldi	r24, 0x00	; 0
    128a:	0e 94 26 02 	call	0x44c	; 0x44c <turn_in_place>
    128e:	08 95       	ret
    1290:	18 16       	cp	r1, r24
    1292:	19 06       	cpc	r1, r25
    1294:	24 f4       	brge	.+8      	; 0x129e <turn_to_puck+0x28>
    1296:	bc 01       	movw	r22, r24
    1298:	81 e0       	ldi	r24, 0x01	; 1
    129a:	0e 94 26 02 	call	0x44c	; 0x44c <turn_in_place>
    129e:	08 95       	ret

000012a0 <step_to_puck>:
OUTPUTS:
	0 if puck is not in possession
	1 if puck is in possession
*/

bool step_to_puck() {
    12a0:	cf 93       	push	r28
    12a2:	df 93       	push	r29
    12a4:	cd b7       	in	r28, 0x3d	; 61
    12a6:	de b7       	in	r29, 0x3e	; 62
    12a8:	62 97       	sbiw	r28, 0x12	; 18
    12aa:	0f b6       	in	r0, 0x3f	; 63
    12ac:	f8 94       	cli
    12ae:	de bf       	out	0x3e, r29	; 62
    12b0:	0f be       	out	0x3f, r0	; 63
    12b2:	cd bf       	out	0x3d, r28	; 61

	// Array for phototransistor readings
	int pt_data[NUM_PTS];

	// Get ADC phototransistor pt_data
	read_pts(pt_data); 
    12b4:	ce 01       	movw	r24, r28
    12b6:	01 96       	adiw	r24, 0x01	; 1
    12b8:	0e 94 84 08 	call	0x1108	; 0x1108 <read_pts>

	// calculate direction and filter out noise
	int direction = filter_directions(get_turn(pt_data));
    12bc:	ce 01       	movw	r24, r28
    12be:	01 96       	adiw	r24, 0x01	; 1
    12c0:	0e 94 d6 08 	call	0x11ac	; 0x11ac <get_turn>
    12c4:	0e 94 a3 09 	call	0x1346	; 0x1346 <filter_directions>
		} else {
			m_usb_tx_string("Left");
		}
		m_usb_tx_char(13);
	}*/
	if (direction == 0) {
    12c8:	00 97       	sbiw	r24, 0x00	; 0
    12ca:	69 f4       	brne	.+26     	; 0x12e6 <step_to_puck+0x46>
		turn(0);	// drive forward
    12cc:	80 e0       	ldi	r24, 0x00	; 0
    12ce:	90 e0       	ldi	r25, 0x00	; 0
    12d0:	0e 94 4a 02 	call	0x494	; 0x494 <turn>
		if(has_puck(pt_data)){
    12d4:	ce 01       	movw	r24, r28
    12d6:	01 96       	adiw	r24, 0x01	; 1
    12d8:	0e 94 2a 09 	call	0x1254	; 0x1254 <has_puck>
    12dc:	88 23       	and	r24, r24
    12de:	69 f0       	breq	.+26     	; 0x12fa <step_to_puck+0x5a>
			m_red(ON);
    12e0:	6e 9a       	sbi	0x0d, 6	; 13
    12e2:	76 98       	cbi	0x0e, 6	; 14
			return 1;
    12e4:	0a c0       	rjmp	.+20     	; 0x12fa <step_to_puck+0x5a>
		}
	} else {
		turn_to_puck(direction * TURN_SPEED_FACTOR); // Turn to face puck
    12e6:	26 e9       	ldi	r18, 0x96	; 150
    12e8:	ac 01       	movw	r20, r24
    12ea:	24 9f       	mul	r18, r20
    12ec:	c0 01       	movw	r24, r0
    12ee:	25 9f       	mul	r18, r21
    12f0:	90 0d       	add	r25, r0
    12f2:	11 24       	eor	r1, r1
    12f4:	0e 94 3b 09 	call	0x1276	; 0x1276 <turn_to_puck>
	}
	return 0;
    12f8:	80 e0       	ldi	r24, 0x00	; 0
    12fa:	62 96       	adiw	r28, 0x12	; 18
    12fc:	0f b6       	in	r0, 0x3f	; 63
    12fe:	f8 94       	cli
    1300:	de bf       	out	0x3e, r29	; 62
    1302:	0f be       	out	0x3f, r0	; 63
    1304:	cd bf       	out	0x3d, r28	; 61
    1306:	df 91       	pop	r29
    1308:	cf 91       	pop	r28
    130a:	08 95       	ret

0000130c <initialize_past_directions>:
	
	// edit new_data to have median measurements
	new_data->x = x_med;
	new_data->y = y_med;
	new_data->o = o_med;
}
    130c:	ec e7       	ldi	r30, 0x7C	; 124
    130e:	f1 e0       	ldi	r31, 0x01	; 1
    1310:	8a e8       	ldi	r24, 0x8A	; 138
    1312:	91 e0       	ldi	r25, 0x01	; 1
    1314:	11 92       	st	Z+, r1
    1316:	11 92       	st	Z+, r1
    1318:	e8 17       	cp	r30, r24
    131a:	f9 07       	cpc	r31, r25
    131c:	d9 f7       	brne	.-10     	; 0x1314 <initialize_past_directions+0x8>
    131e:	81 e0       	ldi	r24, 0x01	; 1
    1320:	80 93 7b 01 	sts	0x017B, r24	; 0x80017b <past_directions_initialized>
    1324:	08 95       	ret

00001326 <update_past_directions>:
    1326:	e8 e8       	ldi	r30, 0x88	; 136
    1328:	f1 e0       	ldi	r31, 0x01	; 1
    132a:	4c e7       	ldi	r20, 0x7C	; 124
    132c:	51 e0       	ldi	r21, 0x01	; 1
    132e:	32 91       	ld	r19, -Z
    1330:	22 91       	ld	r18, -Z
    1332:	33 83       	std	Z+3, r19	; 0x03
    1334:	22 83       	std	Z+2, r18	; 0x02
    1336:	e4 17       	cp	r30, r20
    1338:	f5 07       	cpc	r31, r21
    133a:	c9 f7       	brne	.-14     	; 0x132e <update_past_directions+0x8>
    133c:	90 93 7d 01 	sts	0x017D, r25	; 0x80017d <past_directions+0x1>
    1340:	80 93 7c 01 	sts	0x017C, r24	; 0x80017c <past_directions>
    1344:	08 95       	ret

00001346 <filter_directions>:

// takes in new direction data, updates past_directions array, and updates "new direction"
// to filtered new directions -- MODE FILTER
int filter_directions(int direction){
    1346:	af 92       	push	r10
    1348:	bf 92       	push	r11
    134a:	cf 92       	push	r12
    134c:	df 92       	push	r13
    134e:	ef 92       	push	r14
    1350:	ff 92       	push	r15
    1352:	0f 93       	push	r16
    1354:	1f 93       	push	r17
    1356:	cf 93       	push	r28
    1358:	df 93       	push	r29
    135a:	ec 01       	movw	r28, r24
	// if past_directions was not initialized, initialize it
	if(!past_directions_initialized){
    135c:	80 91 7b 01 	lds	r24, 0x017B	; 0x80017b <past_directions_initialized>
    1360:	81 11       	cpse	r24, r1
    1362:	02 c0       	rjmp	.+4      	; 0x1368 <filter_directions+0x22>
		initialize_past_directions();
    1364:	0e 94 86 09 	call	0x130c	; 0x130c <initialize_past_directions>
	}
	
	// update past_data array
	update_past_directions(direction);
    1368:	ce 01       	movw	r24, r28
    136a:	0e 94 93 09 	call	0x1326	; 0x1326 <update_past_directions>
    136e:	ec e7       	ldi	r30, 0x7C	; 124
    1370:	f1 e0       	ldi	r31, 0x01	; 1
    1372:	0a e8       	ldi	r16, 0x8A	; 138
    1374:	11 e0       	ldi	r17, 0x01	; 1
	
	// count instances of each direction
	int right=0, left=0, front=0;
    1376:	e1 2c       	mov	r14, r1
    1378:	f1 2c       	mov	r15, r1
    137a:	c0 e0       	ldi	r28, 0x00	; 0
    137c:	d0 e0       	ldi	r29, 0x00	; 0
    137e:	a0 e0       	ldi	r26, 0x00	; 0
    1380:	b0 e0       	ldi	r27, 0x00	; 0

	for (int i = 0; i < NUM_SAVED_DIRECTIONS; i++) {
		switch(SIGN_OF(past_directions[i])){
    1382:	aa 24       	eor	r10, r10
    1384:	aa 94       	dec	r10
    1386:	bb 24       	eor	r11, r11
    1388:	ba 94       	dec	r11
    138a:	71 e0       	ldi	r23, 0x01	; 1
    138c:	60 e0       	ldi	r22, 0x00	; 0
    138e:	c1 2c       	mov	r12, r1
    1390:	d1 2c       	mov	r13, r1
    1392:	41 91       	ld	r20, Z+
    1394:	51 91       	ld	r21, Z+
    1396:	55 23       	and	r21, r21
    1398:	1c f0       	brlt	.+6      	; 0x13a0 <filter_directions+0x5a>
    139a:	87 2f       	mov	r24, r23
    139c:	96 2f       	mov	r25, r22
    139e:	02 c0       	rjmp	.+4      	; 0x13a4 <filter_directions+0x5e>
    13a0:	8a 2d       	mov	r24, r10
    13a2:	9b 2d       	mov	r25, r11
    13a4:	27 2f       	mov	r18, r23
    13a6:	36 2f       	mov	r19, r22
    13a8:	45 2b       	or	r20, r21
    13aa:	11 f0       	breq	.+4      	; 0x13b0 <filter_directions+0x6a>
    13ac:	2c 2d       	mov	r18, r12
    13ae:	3d 2d       	mov	r19, r13
    13b0:	82 1b       	sub	r24, r18
    13b2:	93 0b       	sbc	r25, r19
    13b4:	8f 3f       	cpi	r24, 0xFF	; 255
    13b6:	2f ef       	ldi	r18, 0xFF	; 255
    13b8:	92 07       	cpc	r25, r18
    13ba:	19 f0       	breq	.+6      	; 0x13c2 <filter_directions+0x7c>
    13bc:	89 2b       	or	r24, r25
    13be:	19 f0       	breq	.+6      	; 0x13c6 <filter_directions+0x80>
    13c0:	06 c0       	rjmp	.+12     	; 0x13ce <filter_directions+0x88>
			case -1 : right++;
    13c2:	11 96       	adiw	r26, 0x01	; 1
				break;
    13c4:	05 c0       	rjmp	.+10     	; 0x13d0 <filter_directions+0x8a>
			case 0 : front++;
    13c6:	8f ef       	ldi	r24, 0xFF	; 255
    13c8:	e8 1a       	sub	r14, r24
    13ca:	f8 0a       	sbc	r15, r24
				break;
    13cc:	01 c0       	rjmp	.+2      	; 0x13d0 <filter_directions+0x8a>
			case 1 :
			default : left++;
    13ce:	21 96       	adiw	r28, 0x01	; 1
	update_past_directions(direction);
	
	// count instances of each direction
	int right=0, left=0, front=0;

	for (int i = 0; i < NUM_SAVED_DIRECTIONS; i++) {
    13d0:	e0 17       	cp	r30, r16
    13d2:	f1 07       	cpc	r31, r17
    13d4:	f1 f6       	brne	.-68     	; 0x1392 <filter_directions+0x4c>
				break;
		}
	}

	// return mode direction
	if(right > left && right > front) { return -1; }
    13d6:	ca 17       	cp	r28, r26
    13d8:	db 07       	cpc	r29, r27
    13da:	1c f4       	brge	.+6      	; 0x13e2 <filter_directions+0x9c>
    13dc:	ea 16       	cp	r14, r26
    13de:	fb 06       	cpc	r15, r27
    13e0:	54 f0       	brlt	.+20     	; 0x13f6 <filter_directions+0xb0>
	if(left > right && left > front) { return 1; }
    13e2:	ac 17       	cp	r26, r28
    13e4:	bd 07       	cpc	r27, r29
    13e6:	54 f4       	brge	.+20     	; 0x13fc <filter_directions+0xb6>
    13e8:	81 e0       	ldi	r24, 0x01	; 1
    13ea:	90 e0       	ldi	r25, 0x00	; 0
    13ec:	ec 16       	cp	r14, r28
    13ee:	fd 06       	cpc	r15, r29
    13f0:	3c f0       	brlt	.+14     	; 0x1400 <filter_directions+0xba>
    13f2:	80 e0       	ldi	r24, 0x00	; 0
    13f4:	05 c0       	rjmp	.+10     	; 0x1400 <filter_directions+0xba>
				break;
		}
	}

	// return mode direction
	if(right > left && right > front) { return -1; }
    13f6:	8f ef       	ldi	r24, 0xFF	; 255
    13f8:	9f ef       	ldi	r25, 0xFF	; 255
    13fa:	02 c0       	rjmp	.+4      	; 0x1400 <filter_directions+0xba>
	if(left > right && left > front) { return 1; }
	else{ return 0; }
    13fc:	80 e0       	ldi	r24, 0x00	; 0
    13fe:	90 e0       	ldi	r25, 0x00	; 0
    1400:	df 91       	pop	r29
    1402:	cf 91       	pop	r28
    1404:	1f 91       	pop	r17
    1406:	0f 91       	pop	r16
    1408:	ff 90       	pop	r15
    140a:	ef 90       	pop	r14
    140c:	df 90       	pop	r13
    140e:	cf 90       	pop	r12
    1410:	bf 90       	pop	r11
    1412:	af 90       	pop	r10
    1414:	08 95       	ret

00001416 <print_data>:
void play(){
	active = true;
}

void pause(){
	active = false;
    1416:	4f 92       	push	r4
    1418:	5f 92       	push	r5
    141a:	6f 92       	push	r6
    141c:	7f 92       	push	r7
    141e:	8f 92       	push	r8
    1420:	9f 92       	push	r9
    1422:	af 92       	push	r10
    1424:	bf 92       	push	r11
    1426:	cf 92       	push	r12
    1428:	df 92       	push	r13
    142a:	ef 92       	push	r14
    142c:	ff 92       	push	r15
    142e:	0f 93       	push	r16
    1430:	1f 93       	push	r17
    1432:	cf 93       	push	r28
    1434:	df 93       	push	r29
    1436:	cd b7       	in	r28, 0x3d	; 61
    1438:	de b7       	in	r29, 0x3e	; 62
    143a:	28 97       	sbiw	r28, 0x08	; 8
    143c:	0f b6       	in	r0, 0x3f	; 63
    143e:	f8 94       	cli
    1440:	de bf       	out	0x3e, r29	; 62
    1442:	0f be       	out	0x3f, r0	; 63
    1444:	cd bf       	out	0x3d, r28	; 61
    1446:	3c 01       	movw	r6, r24
    1448:	56 2e       	mov	r5, r22
    144a:	47 2e       	mov	r4, r23
    144c:	29 83       	std	Y+1, r18	; 0x01
    144e:	3a 83       	std	Y+2, r19	; 0x02
    1450:	4b 83       	std	Y+3, r20	; 0x03
    1452:	5c 83       	std	Y+4, r21	; 0x04
    1454:	ed 82       	std	Y+5, r14	; 0x05
    1456:	fe 82       	std	Y+6, r15	; 0x06
    1458:	0f 83       	std	Y+7, r16	; 0x07
    145a:	18 87       	std	Y+8, r17	; 0x08
    145c:	88 ec       	ldi	r24, 0xC8	; 200
    145e:	92 e0       	ldi	r25, 0x02	; 2
    1460:	0e 94 a9 05 	call	0xb52	; 0xb52 <print_P>
    1464:	83 01       	movw	r16, r6
    1466:	e5 2c       	mov	r14, r5
    1468:	f4 2c       	mov	r15, r4
    146a:	80 e1       	ldi	r24, 0x10	; 16
    146c:	68 0e       	add	r6, r24
    146e:	71 1c       	adc	r7, r1
    1470:	85 ec       	ldi	r24, 0xC5	; 197
    1472:	92 e0       	ldi	r25, 0x02	; 2
    1474:	0e 94 a9 05 	call	0xb52	; 0xb52 <print_P>
    1478:	f8 01       	movw	r30, r16
    147a:	61 91       	ld	r22, Z+
    147c:	71 91       	ld	r23, Z+
    147e:	81 91       	ld	r24, Z+
    1480:	91 91       	ld	r25, Z+
    1482:	8f 01       	movw	r16, r30
    1484:	0e 94 d0 11 	call	0x23a0	; 0x23a0 <__fixsfsi>
    1488:	cb 01       	movw	r24, r22
    148a:	0e 94 c5 05 	call	0xb8a	; 0xb8a <m_usb_tx_int>
    148e:	82 ec       	ldi	r24, 0xC2	; 194
    1490:	92 e0       	ldi	r25, 0x02	; 2
    1492:	0e 94 a9 05 	call	0xb52	; 0xb52 <print_P>
    1496:	f7 01       	movw	r30, r14
    1498:	61 91       	ld	r22, Z+
    149a:	71 91       	ld	r23, Z+
    149c:	81 91       	ld	r24, Z+
    149e:	91 91       	ld	r25, Z+
    14a0:	7f 01       	movw	r14, r30
    14a2:	0e 94 d0 11 	call	0x23a0	; 0x23a0 <__fixsfsi>
    14a6:	cb 01       	movw	r24, r22
    14a8:	0e 94 c5 05 	call	0xb8a	; 0xb8a <m_usb_tx_int>
    14ac:	8f eb       	ldi	r24, 0xBF	; 191
    14ae:	92 e0       	ldi	r25, 0x02	; 2
    14b0:	0e 94 a9 05 	call	0xb52	; 0xb52 <print_P>
    14b4:	85 eb       	ldi	r24, 0xB5	; 181
    14b6:	92 e0       	ldi	r25, 0x02	; 2
    14b8:	0e 94 a9 05 	call	0xb52	; 0xb52 <print_P>
    14bc:	06 15       	cp	r16, r6
    14be:	17 05       	cpc	r17, r7
    14c0:	b9 f6       	brne	.-82     	; 0x1470 <print_data+0x5a>
    14c2:	8d e0       	ldi	r24, 0x0D	; 13
    14c4:	0e 94 8d 03 	call	0x71a	; 0x71a <m_usb_tx_char>
    14c8:	89 ea       	ldi	r24, 0xA9	; 169
    14ca:	92 e0       	ldi	r25, 0x02	; 2
    14cc:	0e 94 a9 05 	call	0xb52	; 0xb52 <print_P>
    14d0:	c6 01       	movw	r24, r12
    14d2:	0e 94 c5 05 	call	0xb8a	; 0xb8a <m_usb_tx_int>
    14d6:	8a e9       	ldi	r24, 0x9A	; 154
    14d8:	92 e0       	ldi	r25, 0x02	; 2
    14da:	0e 94 a9 05 	call	0xb52	; 0xb52 <print_P>
    14de:	8b e8       	ldi	r24, 0x8B	; 139
    14e0:	92 e0       	ldi	r25, 0x02	; 2
    14e2:	0e 94 a9 05 	call	0xb52	; 0xb52 <print_P>
    14e6:	c5 01       	movw	r24, r10
    14e8:	0e 94 c5 05 	call	0xb8a	; 0xb8a <m_usb_tx_int>
    14ec:	8d e0       	ldi	r24, 0x0D	; 13
    14ee:	0e 94 8d 03 	call	0x71a	; 0x71a <m_usb_tx_char>
    14f2:	84 e7       	ldi	r24, 0x74	; 116
    14f4:	92 e0       	ldi	r25, 0x02	; 2
    14f6:	0e 94 a9 05 	call	0xb52	; 0xb52 <print_P>
    14fa:	81 e7       	ldi	r24, 0x71	; 113
    14fc:	92 e0       	ldi	r25, 0x02	; 2
    14fe:	0e 94 a9 05 	call	0xb52	; 0xb52 <print_P>
    1502:	69 81       	ldd	r22, Y+1	; 0x01
    1504:	7a 81       	ldd	r23, Y+2	; 0x02
    1506:	8b 81       	ldd	r24, Y+3	; 0x03
    1508:	9c 81       	ldd	r25, Y+4	; 0x04
    150a:	0e 94 d0 11 	call	0x23a0	; 0x23a0 <__fixsfsi>
    150e:	cb 01       	movw	r24, r22
    1510:	0e 94 c5 05 	call	0xb8a	; 0xb8a <m_usb_tx_int>
    1514:	8e e6       	ldi	r24, 0x6E	; 110
    1516:	92 e0       	ldi	r25, 0x02	; 2
    1518:	0e 94 a9 05 	call	0xb52	; 0xb52 <print_P>
    151c:	6d 81       	ldd	r22, Y+5	; 0x05
    151e:	7e 81       	ldd	r23, Y+6	; 0x06
    1520:	8f 81       	ldd	r24, Y+7	; 0x07
    1522:	98 85       	ldd	r25, Y+8	; 0x08
    1524:	0e 94 d0 11 	call	0x23a0	; 0x23a0 <__fixsfsi>
    1528:	cb 01       	movw	r24, r22
    152a:	0e 94 c5 05 	call	0xb8a	; 0xb8a <m_usb_tx_int>
    152e:	8b e6       	ldi	r24, 0x6B	; 107
    1530:	92 e0       	ldi	r25, 0x02	; 2
    1532:	0e 94 a9 05 	call	0xb52	; 0xb52 <print_P>
    1536:	86 e5       	ldi	r24, 0x56	; 86
    1538:	92 e0       	ldi	r25, 0x02	; 2
    153a:	0e 94 a9 05 	call	0xb52	; 0xb52 <print_P>
    153e:	83 e5       	ldi	r24, 0x53	; 83
    1540:	92 e0       	ldi	r25, 0x02	; 2
    1542:	0e 94 a9 05 	call	0xb52	; 0xb52 <print_P>
    1546:	f4 01       	movw	r30, r8
    1548:	61 81       	ldd	r22, Z+1	; 0x01
    154a:	72 81       	ldd	r23, Z+2	; 0x02
    154c:	83 81       	ldd	r24, Z+3	; 0x03
    154e:	94 81       	ldd	r25, Z+4	; 0x04
    1550:	0e 94 d0 11 	call	0x23a0	; 0x23a0 <__fixsfsi>
    1554:	cb 01       	movw	r24, r22
    1556:	0e 94 c5 05 	call	0xb8a	; 0xb8a <m_usb_tx_int>
    155a:	80 e5       	ldi	r24, 0x50	; 80
    155c:	92 e0       	ldi	r25, 0x02	; 2
    155e:	0e 94 a9 05 	call	0xb52	; 0xb52 <print_P>
    1562:	f4 01       	movw	r30, r8
    1564:	65 81       	ldd	r22, Z+5	; 0x05
    1566:	76 81       	ldd	r23, Z+6	; 0x06
    1568:	87 81       	ldd	r24, Z+7	; 0x07
    156a:	90 85       	ldd	r25, Z+8	; 0x08
    156c:	0e 94 d0 11 	call	0x23a0	; 0x23a0 <__fixsfsi>
    1570:	cb 01       	movw	r24, r22
    1572:	0e 94 c5 05 	call	0xb8a	; 0xb8a <m_usb_tx_int>
    1576:	8d e4       	ldi	r24, 0x4D	; 77
    1578:	92 e0       	ldi	r25, 0x02	; 2
    157a:	0e 94 a9 05 	call	0xb52	; 0xb52 <print_P>
    157e:	8c e3       	ldi	r24, 0x3C	; 60
    1580:	92 e0       	ldi	r25, 0x02	; 2
    1582:	0e 94 a9 05 	call	0xb52	; 0xb52 <print_P>
    1586:	20 e0       	ldi	r18, 0x00	; 0
    1588:	30 e0       	ldi	r19, 0x00	; 0
    158a:	44 e3       	ldi	r20, 0x34	; 52
    158c:	53 e4       	ldi	r21, 0x43	; 67
    158e:	f4 01       	movw	r30, r8
    1590:	61 85       	ldd	r22, Z+9	; 0x09
    1592:	72 85       	ldd	r23, Z+10	; 0x0a
    1594:	83 85       	ldd	r24, Z+11	; 0x0b
    1596:	94 85       	ldd	r25, Z+12	; 0x0c
    1598:	0e 94 2b 13 	call	0x2656	; 0x2656 <__mulsf3>
    159c:	0e 94 d0 11 	call	0x23a0	; 0x23a0 <__fixsfsi>
    15a0:	07 2e       	mov	r0, r23
    15a2:	00 0c       	add	r0, r0
    15a4:	88 0b       	sbc	r24, r24
    15a6:	99 0b       	sbc	r25, r25
    15a8:	0e 94 08 12 	call	0x2410	; 0x2410 <__floatsisf>
    15ac:	2b ed       	ldi	r18, 0xDB	; 219
    15ae:	3f e0       	ldi	r19, 0x0F	; 15
    15b0:	49 e4       	ldi	r20, 0x49	; 73
    15b2:	50 e4       	ldi	r21, 0x40	; 64
    15b4:	0e 94 5e 11 	call	0x22bc	; 0x22bc <__divsf3>
    15b8:	0e 94 d0 11 	call	0x23a0	; 0x23a0 <__fixsfsi>
    15bc:	cb 01       	movw	r24, r22
    15be:	0e 94 c5 05 	call	0xb8a	; 0xb8a <m_usb_tx_int>
    15c2:	8d e2       	ldi	r24, 0x2D	; 45
    15c4:	92 e0       	ldi	r25, 0x02	; 2
    15c6:	0e 94 a9 05 	call	0xb52	; 0xb52 <print_P>
    15ca:	20 e0       	ldi	r18, 0x00	; 0
    15cc:	30 e0       	ldi	r19, 0x00	; 0
    15ce:	43 e2       	ldi	r20, 0x23	; 35
    15d0:	53 e4       	ldi	r21, 0x43	; 67
    15d2:	f4 01       	movw	r30, r8
    15d4:	61 81       	ldd	r22, Z+1	; 0x01
    15d6:	72 81       	ldd	r23, Z+2	; 0x02
    15d8:	83 81       	ldd	r24, Z+3	; 0x03
    15da:	94 81       	ldd	r25, Z+4	; 0x04
    15dc:	0e 94 75 10 	call	0x20ea	; 0x20ea <__subsf3>
    15e0:	6b 01       	movw	r12, r22
    15e2:	7c 01       	movw	r14, r24
    15e4:	20 e0       	ldi	r18, 0x00	; 0
    15e6:	30 e8       	ldi	r19, 0x80	; 128
    15e8:	4f e8       	ldi	r20, 0x8F	; 143
    15ea:	53 e4       	ldi	r21, 0x43	; 67
    15ec:	f4 01       	movw	r30, r8
    15ee:	65 81       	ldd	r22, Z+5	; 0x05
    15f0:	76 81       	ldd	r23, Z+6	; 0x06
    15f2:	87 81       	ldd	r24, Z+7	; 0x07
    15f4:	90 85       	ldd	r25, Z+8	; 0x08
    15f6:	0e 94 75 10 	call	0x20ea	; 0x20ea <__subsf3>
    15fa:	90 58       	subi	r25, 0x80	; 128
    15fc:	a7 01       	movw	r20, r14
    15fe:	96 01       	movw	r18, r12
    1600:	0e 94 f5 10 	call	0x21ea	; 0x21ea <atan2>
    1604:	9b 01       	movw	r18, r22
    1606:	ac 01       	movw	r20, r24
    1608:	6b ed       	ldi	r22, 0xDB	; 219
    160a:	7f e0       	ldi	r23, 0x0F	; 15
    160c:	89 e4       	ldi	r24, 0x49	; 73
    160e:	90 e4       	ldi	r25, 0x40	; 64
    1610:	0e 94 75 10 	call	0x20ea	; 0x20ea <__subsf3>
    1614:	20 e0       	ldi	r18, 0x00	; 0
    1616:	30 e0       	ldi	r19, 0x00	; 0
    1618:	44 e3       	ldi	r20, 0x34	; 52
    161a:	53 e4       	ldi	r21, 0x43	; 67
    161c:	0e 94 2b 13 	call	0x2656	; 0x2656 <__mulsf3>
    1620:	2b ed       	ldi	r18, 0xDB	; 219
    1622:	3f e0       	ldi	r19, 0x0F	; 15
    1624:	49 e4       	ldi	r20, 0x49	; 73
    1626:	50 e4       	ldi	r21, 0x40	; 64
    1628:	0e 94 5e 11 	call	0x22bc	; 0x22bc <__divsf3>
    162c:	0e 94 d0 11 	call	0x23a0	; 0x23a0 <__fixsfsi>
    1630:	cb 01       	movw	r24, r22
    1632:	0e 94 c5 05 	call	0xb8a	; 0xb8a <m_usb_tx_int>
    1636:	8d e0       	ldi	r24, 0x0D	; 13
    1638:	0e 94 8d 03 	call	0x71a	; 0x71a <m_usb_tx_char>
    163c:	8d e0       	ldi	r24, 0x0D	; 13
    163e:	0e 94 8d 03 	call	0x71a	; 0x71a <m_usb_tx_char>
    1642:	28 96       	adiw	r28, 0x08	; 8
    1644:	0f b6       	in	r0, 0x3f	; 63
    1646:	f8 94       	cli
    1648:	de bf       	out	0x3e, r29	; 62
    164a:	0f be       	out	0x3f, r0	; 63
    164c:	cd bf       	out	0x3d, r28	; 61
    164e:	df 91       	pop	r29
    1650:	cf 91       	pop	r28
    1652:	1f 91       	pop	r17
    1654:	0f 91       	pop	r16
    1656:	ff 90       	pop	r15
    1658:	ef 90       	pop	r14
    165a:	df 90       	pop	r13
    165c:	cf 90       	pop	r12
    165e:	bf 90       	pop	r11
    1660:	af 90       	pop	r10
    1662:	9f 90       	pop	r9
    1664:	8f 90       	pop	r8
    1666:	7f 90       	pop	r7
    1668:	6f 90       	pop	r6
    166a:	5f 90       	pop	r5
    166c:	4f 90       	pop	r4
    166e:	08 95       	ret

00001670 <init_robot>:
    1670:	fc 01       	movw	r30, r24
    1672:	11 82       	std	Z+1, r1	; 0x01
    1674:	12 82       	std	Z+2, r1	; 0x02
    1676:	13 82       	std	Z+3, r1	; 0x03
    1678:	14 82       	std	Z+4, r1	; 0x04
    167a:	15 82       	std	Z+5, r1	; 0x05
    167c:	16 82       	std	Z+6, r1	; 0x06
    167e:	17 82       	std	Z+7, r1	; 0x07
    1680:	10 86       	std	Z+8, r1	; 0x08
    1682:	11 86       	std	Z+9, r1	; 0x09
    1684:	12 86       	std	Z+10, r1	; 0x0a
    1686:	13 86       	std	Z+11, r1	; 0x0b
    1688:	14 86       	std	Z+12, r1	; 0x0c
    168a:	10 82       	st	Z, r1
    168c:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <active>
    1690:	08 95       	ret

00001692 <interpret>:
}

/* Interpret the measurement vector returned by mWii and update Robot struct data */
void interpret(Robot* robot, unsigned int* measurement){
    1692:	2f 92       	push	r2
    1694:	3f 92       	push	r3
    1696:	4f 92       	push	r4
    1698:	5f 92       	push	r5
    169a:	6f 92       	push	r6
    169c:	7f 92       	push	r7
    169e:	8f 92       	push	r8
    16a0:	9f 92       	push	r9
    16a2:	af 92       	push	r10
    16a4:	bf 92       	push	r11
    16a6:	cf 92       	push	r12
    16a8:	df 92       	push	r13
    16aa:	ef 92       	push	r14
    16ac:	ff 92       	push	r15
    16ae:	0f 93       	push	r16
    16b0:	1f 93       	push	r17
    16b2:	cf 93       	push	r28
    16b4:	df 93       	push	r29
    16b6:	cd b7       	in	r28, 0x3d	; 61
    16b8:	de b7       	in	r29, 0x3e	; 62
    16ba:	c7 56       	subi	r28, 0x67	; 103
    16bc:	d1 09       	sbc	r29, r1
    16be:	0f b6       	in	r0, 0x3f	; 63
    16c0:	f8 94       	cli
    16c2:	de bf       	out	0x3e, r29	; 62
    16c4:	0f be       	out	0x3f, r0	; 63
    16c6:	cd bf       	out	0x3d, r28	; 61
    16c8:	a8 96       	adiw	r28, 0x28	; 40
    16ca:	9f af       	std	Y+63, r25	; 0x3f
    16cc:	8e af       	std	Y+62, r24	; 0x3e
    16ce:	a8 97       	sbiw	r28, 0x28	; 40
    16d0:	8b 01       	movw	r16, r22
	// Star coordinates centered around the origin in order of distance from origin
	float const CENTERED_STARS[4][2] = {{-0.2730, -17.3060}, {11.3820, 5.9350}, {-0.2730, 11.6940}, {-10.8360, -0.3230}}; // cm

	// Extract x and y data from measurement
	float mWii_x[] = { (float) (measurement[0]-512.0), (float) (measurement[3]-512.0), (float) (measurement[6]-512.0), (float) (measurement[9]-512.0) };
    16d2:	db 01       	movw	r26, r22
    16d4:	6d 91       	ld	r22, X+
    16d6:	7c 91       	ld	r23, X
    16d8:	80 e0       	ldi	r24, 0x00	; 0
    16da:	90 e0       	ldi	r25, 0x00	; 0
    16dc:	0e 94 06 12 	call	0x240c	; 0x240c <__floatunsisf>
    16e0:	20 e0       	ldi	r18, 0x00	; 0
    16e2:	30 e0       	ldi	r19, 0x00	; 0
    16e4:	40 e0       	ldi	r20, 0x00	; 0
    16e6:	54 e4       	ldi	r21, 0x44	; 68
    16e8:	0e 94 75 10 	call	0x20ea	; 0x20ea <__subsf3>
    16ec:	69 83       	std	Y+1, r22	; 0x01
    16ee:	7a 83       	std	Y+2, r23	; 0x02
    16f0:	8b 83       	std	Y+3, r24	; 0x03
    16f2:	9c 83       	std	Y+4, r25	; 0x04
    16f4:	f8 01       	movw	r30, r16
    16f6:	66 81       	ldd	r22, Z+6	; 0x06
    16f8:	77 81       	ldd	r23, Z+7	; 0x07
    16fa:	80 e0       	ldi	r24, 0x00	; 0
    16fc:	90 e0       	ldi	r25, 0x00	; 0
    16fe:	0e 94 06 12 	call	0x240c	; 0x240c <__floatunsisf>
    1702:	20 e0       	ldi	r18, 0x00	; 0
    1704:	30 e0       	ldi	r19, 0x00	; 0
    1706:	40 e0       	ldi	r20, 0x00	; 0
    1708:	54 e4       	ldi	r21, 0x44	; 68
    170a:	0e 94 75 10 	call	0x20ea	; 0x20ea <__subsf3>
    170e:	6d 83       	std	Y+5, r22	; 0x05
    1710:	7e 83       	std	Y+6, r23	; 0x06
    1712:	8f 83       	std	Y+7, r24	; 0x07
    1714:	98 87       	std	Y+8, r25	; 0x08
    1716:	d8 01       	movw	r26, r16
    1718:	1c 96       	adiw	r26, 0x0c	; 12
    171a:	6d 91       	ld	r22, X+
    171c:	7c 91       	ld	r23, X
    171e:	1d 97       	sbiw	r26, 0x0d	; 13
    1720:	80 e0       	ldi	r24, 0x00	; 0
    1722:	90 e0       	ldi	r25, 0x00	; 0
    1724:	0e 94 06 12 	call	0x240c	; 0x240c <__floatunsisf>
    1728:	20 e0       	ldi	r18, 0x00	; 0
    172a:	30 e0       	ldi	r19, 0x00	; 0
    172c:	40 e0       	ldi	r20, 0x00	; 0
    172e:	54 e4       	ldi	r21, 0x44	; 68
    1730:	0e 94 75 10 	call	0x20ea	; 0x20ea <__subsf3>
    1734:	69 87       	std	Y+9, r22	; 0x09
    1736:	7a 87       	std	Y+10, r23	; 0x0a
    1738:	8b 87       	std	Y+11, r24	; 0x0b
    173a:	9c 87       	std	Y+12, r25	; 0x0c
    173c:	f8 01       	movw	r30, r16
    173e:	62 89       	ldd	r22, Z+18	; 0x12
    1740:	73 89       	ldd	r23, Z+19	; 0x13
    1742:	80 e0       	ldi	r24, 0x00	; 0
    1744:	90 e0       	ldi	r25, 0x00	; 0
    1746:	0e 94 06 12 	call	0x240c	; 0x240c <__floatunsisf>
    174a:	20 e0       	ldi	r18, 0x00	; 0
    174c:	30 e0       	ldi	r19, 0x00	; 0
    174e:	40 e0       	ldi	r20, 0x00	; 0
    1750:	54 e4       	ldi	r21, 0x44	; 68
    1752:	0e 94 75 10 	call	0x20ea	; 0x20ea <__subsf3>
    1756:	6d 87       	std	Y+13, r22	; 0x0d
    1758:	7e 87       	std	Y+14, r23	; 0x0e
    175a:	8f 87       	std	Y+15, r24	; 0x0f
    175c:	98 8b       	std	Y+16, r25	; 0x10
	// Flipping y to right-handed coordinate system
	float mWii_y[] = { (float) -(measurement[1]-384.0), (float) -(measurement[4]-384.0), (float) -(measurement[7]-384.0), (float) -(measurement[10]-384.0) };
    175e:	d8 01       	movw	r26, r16
    1760:	12 96       	adiw	r26, 0x02	; 2
    1762:	6d 91       	ld	r22, X+
    1764:	7c 91       	ld	r23, X
    1766:	13 97       	sbiw	r26, 0x03	; 3
    1768:	80 e0       	ldi	r24, 0x00	; 0
    176a:	90 e0       	ldi	r25, 0x00	; 0
    176c:	0e 94 06 12 	call	0x240c	; 0x240c <__floatunsisf>
    1770:	20 e0       	ldi	r18, 0x00	; 0
    1772:	30 e0       	ldi	r19, 0x00	; 0
    1774:	40 ec       	ldi	r20, 0xC0	; 192
    1776:	53 e4       	ldi	r21, 0x43	; 67
    1778:	0e 94 75 10 	call	0x20ea	; 0x20ea <__subsf3>
    177c:	dc 01       	movw	r26, r24
    177e:	cb 01       	movw	r24, r22
    1780:	b0 58       	subi	r27, 0x80	; 128
    1782:	89 8b       	std	Y+17, r24	; 0x11
    1784:	9a 8b       	std	Y+18, r25	; 0x12
    1786:	ab 8b       	std	Y+19, r26	; 0x13
    1788:	bc 8b       	std	Y+20, r27	; 0x14
    178a:	f8 01       	movw	r30, r16
    178c:	60 85       	ldd	r22, Z+8	; 0x08
    178e:	71 85       	ldd	r23, Z+9	; 0x09
    1790:	80 e0       	ldi	r24, 0x00	; 0
    1792:	90 e0       	ldi	r25, 0x00	; 0
    1794:	0e 94 06 12 	call	0x240c	; 0x240c <__floatunsisf>
    1798:	20 e0       	ldi	r18, 0x00	; 0
    179a:	30 e0       	ldi	r19, 0x00	; 0
    179c:	40 ec       	ldi	r20, 0xC0	; 192
    179e:	53 e4       	ldi	r21, 0x43	; 67
    17a0:	0e 94 75 10 	call	0x20ea	; 0x20ea <__subsf3>
    17a4:	dc 01       	movw	r26, r24
    17a6:	cb 01       	movw	r24, r22
    17a8:	b0 58       	subi	r27, 0x80	; 128
    17aa:	8d 8b       	std	Y+21, r24	; 0x15
    17ac:	9e 8b       	std	Y+22, r25	; 0x16
    17ae:	af 8b       	std	Y+23, r26	; 0x17
    17b0:	b8 8f       	std	Y+24, r27	; 0x18
    17b2:	d8 01       	movw	r26, r16
    17b4:	1e 96       	adiw	r26, 0x0e	; 14
    17b6:	6d 91       	ld	r22, X+
    17b8:	7c 91       	ld	r23, X
    17ba:	1f 97       	sbiw	r26, 0x0f	; 15
    17bc:	80 e0       	ldi	r24, 0x00	; 0
    17be:	90 e0       	ldi	r25, 0x00	; 0
    17c0:	0e 94 06 12 	call	0x240c	; 0x240c <__floatunsisf>
    17c4:	20 e0       	ldi	r18, 0x00	; 0
    17c6:	30 e0       	ldi	r19, 0x00	; 0
    17c8:	40 ec       	ldi	r20, 0xC0	; 192
    17ca:	53 e4       	ldi	r21, 0x43	; 67
    17cc:	0e 94 75 10 	call	0x20ea	; 0x20ea <__subsf3>
    17d0:	dc 01       	movw	r26, r24
    17d2:	cb 01       	movw	r24, r22
    17d4:	b0 58       	subi	r27, 0x80	; 128
    17d6:	89 8f       	std	Y+25, r24	; 0x19
    17d8:	9a 8f       	std	Y+26, r25	; 0x1a
    17da:	ab 8f       	std	Y+27, r26	; 0x1b
    17dc:	bc 8f       	std	Y+28, r27	; 0x1c
    17de:	f8 01       	movw	r30, r16
    17e0:	64 89       	ldd	r22, Z+20	; 0x14
    17e2:	75 89       	ldd	r23, Z+21	; 0x15
    17e4:	80 e0       	ldi	r24, 0x00	; 0
    17e6:	90 e0       	ldi	r25, 0x00	; 0
    17e8:	0e 94 06 12 	call	0x240c	; 0x240c <__floatunsisf>
    17ec:	20 e0       	ldi	r18, 0x00	; 0
    17ee:	30 e0       	ldi	r19, 0x00	; 0
    17f0:	40 ec       	ldi	r20, 0xC0	; 192
    17f2:	53 e4       	ldi	r21, 0x43	; 67
    17f4:	0e 94 75 10 	call	0x20ea	; 0x20ea <__subsf3>
    17f8:	dc 01       	movw	r26, r24
    17fa:	cb 01       	movw	r24, r22
    17fc:	b0 58       	subi	r27, 0x80	; 128
    17fe:	8d 8f       	std	Y+29, r24	; 0x1d
    1800:	9e 8f       	std	Y+30, r25	; 0x1e
    1802:	af 8f       	std	Y+31, r26	; 0x1f
    1804:	b8 a3       	std	Y+32, r27	; 0x20
    1806:	9e 01       	movw	r18, r28
    1808:	2f 5f       	subi	r18, 0xFF	; 255
    180a:	3f 4f       	sbci	r19, 0xFF	; 255
    180c:	49 01       	movw	r8, r18
    180e:	5e 01       	movw	r10, r28
    1810:	31 e1       	ldi	r19, 0x11	; 17
    1812:	a3 0e       	add	r10, r19
    1814:	b1 1c       	adc	r11, r1
    1816:	15 01       	movw	r2, r10
    1818:	75 01       	movw	r14, r10
    181a:	84 01       	movw	r16, r8

	
	////////// Determine translation to origin //////////
	float translation_x = 0, translation_y = 0;
    181c:	25 96       	adiw	r28, 0x05	; 5
    181e:	1c ae       	std	Y+60, r1	; 0x3c
    1820:	1d ae       	std	Y+61, r1	; 0x3d
    1822:	1e ae       	std	Y+62, r1	; 0x3e
    1824:	1f ae       	std	Y+63, r1	; 0x3f
    1826:	25 97       	sbiw	r28, 0x05	; 5
    1828:	41 2c       	mov	r4, r1
    182a:	51 2c       	mov	r5, r1
    182c:	32 01       	movw	r6, r4
	for (int i = 0; i < 4; i++) {
		translation_x += mWii_x[i];
    182e:	d8 01       	movw	r26, r16
    1830:	2d 91       	ld	r18, X+
    1832:	3d 91       	ld	r19, X+
    1834:	4d 91       	ld	r20, X+
    1836:	5d 91       	ld	r21, X+
    1838:	8d 01       	movw	r16, r26
    183a:	c3 01       	movw	r24, r6
    183c:	b2 01       	movw	r22, r4
    183e:	0e 94 76 10 	call	0x20ec	; 0x20ec <__addsf3>
    1842:	2b 01       	movw	r4, r22
    1844:	3c 01       	movw	r6, r24
		translation_y += mWii_y[i];
    1846:	f7 01       	movw	r30, r14
    1848:	21 91       	ld	r18, Z+
    184a:	31 91       	ld	r19, Z+
    184c:	41 91       	ld	r20, Z+
    184e:	51 91       	ld	r21, Z+
    1850:	7f 01       	movw	r14, r30
    1852:	25 96       	adiw	r28, 0x05	; 5
    1854:	6c ad       	ldd	r22, Y+60	; 0x3c
    1856:	7d ad       	ldd	r23, Y+61	; 0x3d
    1858:	8e ad       	ldd	r24, Y+62	; 0x3e
    185a:	9f ad       	ldd	r25, Y+63	; 0x3f
    185c:	25 97       	sbiw	r28, 0x05	; 5
    185e:	0e 94 76 10 	call	0x20ec	; 0x20ec <__addsf3>
    1862:	25 96       	adiw	r28, 0x05	; 5
    1864:	6c af       	std	Y+60, r22	; 0x3c
    1866:	7d af       	std	Y+61, r23	; 0x3d
    1868:	8e af       	std	Y+62, r24	; 0x3e
    186a:	9f af       	std	Y+63, r25	; 0x3f
    186c:	25 97       	sbiw	r28, 0x05	; 5
	float mWii_y[] = { (float) -(measurement[1]-384.0), (float) -(measurement[4]-384.0), (float) -(measurement[7]-384.0), (float) -(measurement[10]-384.0) };

	
	////////// Determine translation to origin //////////
	float translation_x = 0, translation_y = 0;
	for (int i = 0; i < 4; i++) {
    186e:	02 15       	cp	r16, r2
    1870:	13 05       	cpc	r17, r3
    1872:	e9 f6       	brne	.-70     	; 0x182e <interpret+0x19c>
		translation_x += mWii_x[i];
		translation_y += mWii_y[i];
	}
	translation_x /= 4.0;
    1874:	20 e0       	ldi	r18, 0x00	; 0
    1876:	30 e0       	ldi	r19, 0x00	; 0
    1878:	40 e8       	ldi	r20, 0x80	; 128
    187a:	5e e3       	ldi	r21, 0x3E	; 62
    187c:	c3 01       	movw	r24, r6
    187e:	b2 01       	movw	r22, r4
    1880:	0e 94 2b 13 	call	0x2656	; 0x2656 <__mulsf3>
    1884:	6a 96       	adiw	r28, 0x1a	; 26
    1886:	6c af       	std	Y+60, r22	; 0x3c
    1888:	7d af       	std	Y+61, r23	; 0x3d
    188a:	8e af       	std	Y+62, r24	; 0x3e
    188c:	9f af       	std	Y+63, r25	; 0x3f
    188e:	6a 97       	sbiw	r28, 0x1a	; 26
	translation_y /= 4.0;
    1890:	20 e0       	ldi	r18, 0x00	; 0
    1892:	30 e0       	ldi	r19, 0x00	; 0
    1894:	40 e8       	ldi	r20, 0x80	; 128
    1896:	5e e3       	ldi	r21, 0x3E	; 62
    1898:	25 96       	adiw	r28, 0x05	; 5
    189a:	6c ad       	ldd	r22, Y+60	; 0x3c
    189c:	7d ad       	ldd	r23, Y+61	; 0x3d
    189e:	8e ad       	ldd	r24, Y+62	; 0x3e
    18a0:	9f ad       	ldd	r25, Y+63	; 0x3f
    18a2:	25 97       	sbiw	r28, 0x05	; 5
    18a4:	0e 94 2b 13 	call	0x2656	; 0x2656 <__mulsf3>
    18a8:	6e 96       	adiw	r28, 0x1e	; 30
    18aa:	6c af       	std	Y+60, r22	; 0x3c
    18ac:	7d af       	std	Y+61, r23	; 0x3d
    18ae:	8e af       	std	Y+62, r24	; 0x3e
    18b0:	9f af       	std	Y+63, r25	; 0x3f
    18b2:	6e 97       	sbiw	r28, 0x1e	; 30
    18b4:	35 01       	movw	r6, r10
    18b6:	84 01       	movw	r16, r8

	////////// Find mWii and star scale //////////
	float mWii_scale = 0.0, star_scale = 0.0;
    18b8:	25 96       	adiw	r28, 0x05	; 5
    18ba:	1c ae       	std	Y+60, r1	; 0x3c
    18bc:	1d ae       	std	Y+61, r1	; 0x3d
    18be:	1e ae       	std	Y+62, r1	; 0x3e
    18c0:	1f ae       	std	Y+63, r1	; 0x3f
    18c2:	25 97       	sbiw	r28, 0x05	; 5

	for (int i = 0; i < 4; i++) {
		mWii_scale += powf(mWii_x[i] - translation_x, 2.0) + powf(mWii_y[i] - translation_y, 2.0);
    18c4:	d8 01       	movw	r26, r16
    18c6:	6d 91       	ld	r22, X+
    18c8:	7d 91       	ld	r23, X+
    18ca:	8d 91       	ld	r24, X+
    18cc:	9d 91       	ld	r25, X+
    18ce:	8d 01       	movw	r16, r26
    18d0:	6a 96       	adiw	r28, 0x1a	; 26
    18d2:	2c ad       	ldd	r18, Y+60	; 0x3c
    18d4:	3d ad       	ldd	r19, Y+61	; 0x3d
    18d6:	4e ad       	ldd	r20, Y+62	; 0x3e
    18d8:	5f ad       	ldd	r21, Y+63	; 0x3f
    18da:	6a 97       	sbiw	r28, 0x1a	; 26
    18dc:	0e 94 75 10 	call	0x20ea	; 0x20ea <__subsf3>
    18e0:	6b 01       	movw	r12, r22
    18e2:	7c 01       	movw	r14, r24
    18e4:	f3 01       	movw	r30, r6
    18e6:	61 91       	ld	r22, Z+
    18e8:	71 91       	ld	r23, Z+
    18ea:	81 91       	ld	r24, Z+
    18ec:	91 91       	ld	r25, Z+
    18ee:	3f 01       	movw	r6, r30
    18f0:	6e 96       	adiw	r28, 0x1e	; 30
    18f2:	2c ad       	ldd	r18, Y+60	; 0x3c
    18f4:	3d ad       	ldd	r19, Y+61	; 0x3d
    18f6:	4e ad       	ldd	r20, Y+62	; 0x3e
    18f8:	5f ad       	ldd	r21, Y+63	; 0x3f
    18fa:	6e 97       	sbiw	r28, 0x1e	; 30
    18fc:	0e 94 75 10 	call	0x20ea	; 0x20ea <__subsf3>
    1900:	9b 01       	movw	r18, r22
    1902:	ac 01       	movw	r20, r24
    1904:	0e 94 2b 13 	call	0x2656	; 0x2656 <__mulsf3>
    1908:	29 96       	adiw	r28, 0x09	; 9
    190a:	6c af       	std	Y+60, r22	; 0x3c
    190c:	7d af       	std	Y+61, r23	; 0x3d
    190e:	8e af       	std	Y+62, r24	; 0x3e
    1910:	9f af       	std	Y+63, r25	; 0x3f
    1912:	29 97       	sbiw	r28, 0x09	; 9
    1914:	a7 01       	movw	r20, r14
    1916:	96 01       	movw	r18, r12
    1918:	c7 01       	movw	r24, r14
    191a:	b6 01       	movw	r22, r12
    191c:	0e 94 2b 13 	call	0x2656	; 0x2656 <__mulsf3>
    1920:	9b 01       	movw	r18, r22
    1922:	ac 01       	movw	r20, r24
    1924:	29 96       	adiw	r28, 0x09	; 9
    1926:	6c ad       	ldd	r22, Y+60	; 0x3c
    1928:	7d ad       	ldd	r23, Y+61	; 0x3d
    192a:	8e ad       	ldd	r24, Y+62	; 0x3e
    192c:	9f ad       	ldd	r25, Y+63	; 0x3f
    192e:	29 97       	sbiw	r28, 0x09	; 9
    1930:	0e 94 76 10 	call	0x20ec	; 0x20ec <__addsf3>
    1934:	9b 01       	movw	r18, r22
    1936:	ac 01       	movw	r20, r24
    1938:	25 96       	adiw	r28, 0x05	; 5
    193a:	6c ad       	ldd	r22, Y+60	; 0x3c
    193c:	7d ad       	ldd	r23, Y+61	; 0x3d
    193e:	8e ad       	ldd	r24, Y+62	; 0x3e
    1940:	9f ad       	ldd	r25, Y+63	; 0x3f
    1942:	25 97       	sbiw	r28, 0x05	; 5
    1944:	0e 94 76 10 	call	0x20ec	; 0x20ec <__addsf3>
    1948:	25 96       	adiw	r28, 0x05	; 5
    194a:	6c af       	std	Y+60, r22	; 0x3c
    194c:	7d af       	std	Y+61, r23	; 0x3d
    194e:	8e af       	std	Y+62, r24	; 0x3e
    1950:	9f af       	std	Y+63, r25	; 0x3f
    1952:	25 97       	sbiw	r28, 0x05	; 5
	translation_y /= 4.0;

	////////// Find mWii and star scale //////////
	float mWii_scale = 0.0, star_scale = 0.0;

	for (int i = 0; i < 4; i++) {
    1954:	02 15       	cp	r16, r2
    1956:	13 05       	cpc	r17, r3
    1958:	09 f0       	breq	.+2      	; 0x195c <interpret+0x2ca>
    195a:	b4 cf       	rjmp	.-152    	; 0x18c4 <interpret+0x232>
		mWii_scale += powf(mWii_x[i] - translation_x, 2.0) + powf(mWii_y[i] - translation_y, 2.0);
		star_scale += powf(CENTERED_STARS[i][0], 2.0) + powf(CENTERED_STARS[i][1], 2.0);
	}
	
	mWii_scale = powf(mWii_scale / 4.0, 0.5);
    195c:	20 e0       	ldi	r18, 0x00	; 0
    195e:	30 e0       	ldi	r19, 0x00	; 0
    1960:	40 e8       	ldi	r20, 0x80	; 128
    1962:	5e e3       	ldi	r21, 0x3E	; 62
    1964:	0e 94 2b 13 	call	0x2656	; 0x2656 <__mulsf3>
    1968:	20 e0       	ldi	r18, 0x00	; 0
    196a:	30 e0       	ldi	r19, 0x00	; 0
    196c:	40 e0       	ldi	r20, 0x00	; 0
    196e:	5f e3       	ldi	r21, 0x3F	; 63
    1970:	0e 94 98 13 	call	0x2730	; 0x2730 <pow>
    1974:	e6 2e       	mov	r14, r22
    1976:	f7 2e       	mov	r15, r23
    1978:	08 2f       	mov	r16, r24
    197a:	19 2f       	mov	r17, r25
    197c:	2e 01       	movw	r4, r28
    197e:	f1 e2       	ldi	r31, 0x21	; 33
    1980:	4f 0e       	add	r4, r31
    1982:	51 1c       	adc	r5, r1
    1984:	9e 01       	movw	r18, r28
    1986:	2f 5c       	subi	r18, 0xCF	; 207
    1988:	3f 4f       	sbci	r19, 0xFF	; 255
    198a:	a2 96       	adiw	r28, 0x22	; 34
    198c:	3f af       	std	Y+63, r19	; 0x3f
    198e:	2e af       	std	Y+62, r18	; 0x3e
    1990:	a2 97       	sbiw	r28, 0x22	; 34
    1992:	69 01       	movw	r12, r18
    1994:	32 01       	movw	r6, r4
	star_scale = powf(star_scale / 4.0, 0.5);

	// Scale points to uniform scale (0 to 1)
	float mx[4], my[4];
	for (int i = 0; i < 4; i++) {
		mx[i] = (mWii_x[i] - translation_x) / mWii_scale;
    1996:	d4 01       	movw	r26, r8
    1998:	6d 91       	ld	r22, X+
    199a:	7d 91       	ld	r23, X+
    199c:	8d 91       	ld	r24, X+
    199e:	9d 91       	ld	r25, X+
    19a0:	4d 01       	movw	r8, r26
    19a2:	6a 96       	adiw	r28, 0x1a	; 26
    19a4:	2c ad       	ldd	r18, Y+60	; 0x3c
    19a6:	3d ad       	ldd	r19, Y+61	; 0x3d
    19a8:	4e ad       	ldd	r20, Y+62	; 0x3e
    19aa:	5f ad       	ldd	r21, Y+63	; 0x3f
    19ac:	6a 97       	sbiw	r28, 0x1a	; 26
    19ae:	0e 94 75 10 	call	0x20ea	; 0x20ea <__subsf3>
    19b2:	2e 2d       	mov	r18, r14
    19b4:	3f 2d       	mov	r19, r15
    19b6:	40 2f       	mov	r20, r16
    19b8:	51 2f       	mov	r21, r17
    19ba:	0e 94 5e 11 	call	0x22bc	; 0x22bc <__divsf3>
    19be:	f3 01       	movw	r30, r6
    19c0:	61 93       	st	Z+, r22
    19c2:	71 93       	st	Z+, r23
    19c4:	81 93       	st	Z+, r24
    19c6:	91 93       	st	Z+, r25
    19c8:	3f 01       	movw	r6, r30
		my[i] = (mWii_y[i] - translation_y) / mWii_scale;
    19ca:	d5 01       	movw	r26, r10
    19cc:	6d 91       	ld	r22, X+
    19ce:	7d 91       	ld	r23, X+
    19d0:	8d 91       	ld	r24, X+
    19d2:	9d 91       	ld	r25, X+
    19d4:	5d 01       	movw	r10, r26
    19d6:	6e 96       	adiw	r28, 0x1e	; 30
    19d8:	2c ad       	ldd	r18, Y+60	; 0x3c
    19da:	3d ad       	ldd	r19, Y+61	; 0x3d
    19dc:	4e ad       	ldd	r20, Y+62	; 0x3e
    19de:	5f ad       	ldd	r21, Y+63	; 0x3f
    19e0:	6e 97       	sbiw	r28, 0x1e	; 30
    19e2:	0e 94 75 10 	call	0x20ea	; 0x20ea <__subsf3>
    19e6:	2e 2d       	mov	r18, r14
    19e8:	3f 2d       	mov	r19, r15
    19ea:	40 2f       	mov	r20, r16
    19ec:	51 2f       	mov	r21, r17
    19ee:	0e 94 5e 11 	call	0x22bc	; 0x22bc <__divsf3>
    19f2:	f6 01       	movw	r30, r12
    19f4:	61 93       	st	Z+, r22
    19f6:	71 93       	st	Z+, r23
    19f8:	81 93       	st	Z+, r24
    19fa:	91 93       	st	Z+, r25
    19fc:	6f 01       	movw	r12, r30
	mWii_scale = powf(mWii_scale / 4.0, 0.5);
	star_scale = powf(star_scale / 4.0, 0.5);

	// Scale points to uniform scale (0 to 1)
	float mx[4], my[4];
	for (int i = 0; i < 4; i++) {
    19fe:	82 14       	cp	r8, r2
    1a00:	93 04       	cpc	r9, r3
    1a02:	49 f6       	brne	.-110    	; 0x1996 <interpret+0x304>
    1a04:	27 96       	adiw	r28, 0x07	; 7
    1a06:	1f ae       	std	Y+63, r1	; 0x3f
    1a08:	1e ae       	std	Y+62, r1	; 0x3e
    1a0a:	27 97       	sbiw	r28, 0x07	; 7
    1a0c:	21 e0       	ldi	r18, 0x01	; 1
    1a0e:	30 e0       	ldi	r19, 0x00	; 0
    1a10:	a4 96       	adiw	r28, 0x24	; 36
    1a12:	3f af       	std	Y+63, r19	; 0x3f
    1a14:	2e af       	std	Y+62, r18	; 0x3e
    1a16:	a4 97       	sbiw	r28, 0x24	; 36
    1a18:	80 e0       	ldi	r24, 0x00	; 0
    1a1a:	90 e0       	ldi	r25, 0x00	; 0
    1a1c:	2a 96       	adiw	r28, 0x0a	; 10
    1a1e:	1f ae       	std	Y+63, r1	; 0x3f
    1a20:	2a 97       	sbiw	r28, 0x0a	; 10
    1a22:	2e 96       	adiw	r28, 0x0e	; 14
    1a24:	1f ae       	std	Y+63, r1	; 0x3f
    1a26:	2e 97       	sbiw	r28, 0x0e	; 14
    1a28:	61 2c       	mov	r6, r1
    1a2a:	71 2c       	mov	r7, r1
    1a2c:	12 01       	movw	r2, r4

	// Get max distance indices
	float max_distance = 0;
	int indices[2] = {0, 1};
	for (int i = 0; i < 3; i++) {
		for (int j = i + 1; j < 4; j++) {
    1a2e:	ac 01       	movw	r20, r24
    1a30:	4f 5f       	subi	r20, 0xFF	; 255
    1a32:	5f 4f       	sbci	r21, 0xFF	; 255
    1a34:	a0 96       	adiw	r28, 0x20	; 32
    1a36:	5f af       	std	Y+63, r21	; 0x3f
    1a38:	4e af       	std	Y+62, r20	; 0x3e
    1a3a:	a0 97       	sbiw	r28, 0x20	; 32
    1a3c:	44 30       	cpi	r20, 0x04	; 4
    1a3e:	51 05       	cpc	r21, r1
    1a40:	0c f0       	brlt	.+2      	; 0x1a44 <interpret+0x3b2>
    1a42:	75 c2       	rjmp	.+1258   	; 0x1f2e <interpret+0x89c>
			// Get distance between points
			float distance = powf(powf(mx[i] - mx[j], 2.0) + powf(my[i] - my[j], 2.0), 0.5);
    1a44:	d1 01       	movw	r26, r2
    1a46:	2d 91       	ld	r18, X+
    1a48:	3d 91       	ld	r19, X+
    1a4a:	4d 91       	ld	r20, X+
    1a4c:	5d 91       	ld	r21, X+
    1a4e:	4d 01       	movw	r8, r26
    1a50:	62 96       	adiw	r28, 0x12	; 18
    1a52:	2c af       	std	Y+60, r18	; 0x3c
    1a54:	3d af       	std	Y+61, r19	; 0x3d
    1a56:	4e af       	std	Y+62, r20	; 0x3e
    1a58:	5f af       	std	Y+63, r21	; 0x3f
    1a5a:	62 97       	sbiw	r28, 0x12	; 18
    1a5c:	a2 96       	adiw	r28, 0x22	; 34
    1a5e:	ae ac       	ldd	r10, Y+62	; 0x3e
    1a60:	bf ac       	ldd	r11, Y+63	; 0x3f
    1a62:	a2 97       	sbiw	r28, 0x22	; 34
    1a64:	d5 01       	movw	r26, r10
    1a66:	2d 91       	ld	r18, X+
    1a68:	3d 91       	ld	r19, X+
    1a6a:	4d 91       	ld	r20, X+
    1a6c:	5d 91       	ld	r21, X+
    1a6e:	5d 01       	movw	r10, r26
    1a70:	66 96       	adiw	r28, 0x16	; 22
    1a72:	2c af       	std	Y+60, r18	; 0x3c
    1a74:	3d af       	std	Y+61, r19	; 0x3d
    1a76:	4e af       	std	Y+62, r20	; 0x3e
    1a78:	5f af       	std	Y+63, r21	; 0x3f
    1a7a:	66 97       	sbiw	r28, 0x16	; 22
    1a7c:	a0 96       	adiw	r28, 0x20	; 32
    1a7e:	4e ac       	ldd	r4, Y+62	; 0x3e
    1a80:	5f ac       	ldd	r5, Y+63	; 0x3f
    1a82:	a0 97       	sbiw	r28, 0x20	; 32
			// Compare to max distance
			if (distance > max_distance) {
    1a84:	a5 96       	adiw	r28, 0x25	; 37
    1a86:	8f af       	std	Y+63, r24	; 0x3f
    1a88:	a5 97       	sbiw	r28, 0x25	; 37
    1a8a:	a6 96       	adiw	r28, 0x26	; 38
    1a8c:	9f af       	std	Y+63, r25	; 0x3f
    1a8e:	a6 97       	sbiw	r28, 0x26	; 38
	float max_distance = 0;
	int indices[2] = {0, 1};
	for (int i = 0; i < 3; i++) {
		for (int j = i + 1; j < 4; j++) {
			// Get distance between points
			float distance = powf(powf(mx[i] - mx[j], 2.0) + powf(my[i] - my[j], 2.0), 0.5);
    1a90:	f4 01       	movw	r30, r8
    1a92:	21 91       	ld	r18, Z+
    1a94:	31 91       	ld	r19, Z+
    1a96:	41 91       	ld	r20, Z+
    1a98:	51 91       	ld	r21, Z+
    1a9a:	4f 01       	movw	r8, r30
    1a9c:	62 96       	adiw	r28, 0x12	; 18
    1a9e:	6c ad       	ldd	r22, Y+60	; 0x3c
    1aa0:	7d ad       	ldd	r23, Y+61	; 0x3d
    1aa2:	8e ad       	ldd	r24, Y+62	; 0x3e
    1aa4:	9f ad       	ldd	r25, Y+63	; 0x3f
    1aa6:	62 97       	sbiw	r28, 0x12	; 18
    1aa8:	0e 94 75 10 	call	0x20ea	; 0x20ea <__subsf3>
    1aac:	6b 01       	movw	r12, r22
    1aae:	7c 01       	movw	r14, r24
    1ab0:	d5 01       	movw	r26, r10
    1ab2:	2d 91       	ld	r18, X+
    1ab4:	3d 91       	ld	r19, X+
    1ab6:	4d 91       	ld	r20, X+
    1ab8:	5d 91       	ld	r21, X+
    1aba:	5d 01       	movw	r10, r26
    1abc:	66 96       	adiw	r28, 0x16	; 22
    1abe:	6c ad       	ldd	r22, Y+60	; 0x3c
    1ac0:	7d ad       	ldd	r23, Y+61	; 0x3d
    1ac2:	8e ad       	ldd	r24, Y+62	; 0x3e
    1ac4:	9f ad       	ldd	r25, Y+63	; 0x3f
    1ac6:	66 97       	sbiw	r28, 0x16	; 22
    1ac8:	0e 94 75 10 	call	0x20ea	; 0x20ea <__subsf3>
    1acc:	9b 01       	movw	r18, r22
    1ace:	ac 01       	movw	r20, r24
    1ad0:	0e 94 2b 13 	call	0x2656	; 0x2656 <__mulsf3>
    1ad4:	25 96       	adiw	r28, 0x05	; 5
    1ad6:	6c af       	std	Y+60, r22	; 0x3c
    1ad8:	7d af       	std	Y+61, r23	; 0x3d
    1ada:	8e af       	std	Y+62, r24	; 0x3e
    1adc:	9f af       	std	Y+63, r25	; 0x3f
    1ade:	25 97       	sbiw	r28, 0x05	; 5
    1ae0:	a7 01       	movw	r20, r14
    1ae2:	96 01       	movw	r18, r12
    1ae4:	c7 01       	movw	r24, r14
    1ae6:	b6 01       	movw	r22, r12
    1ae8:	0e 94 2b 13 	call	0x2656	; 0x2656 <__mulsf3>
    1aec:	9b 01       	movw	r18, r22
    1aee:	ac 01       	movw	r20, r24
    1af0:	25 96       	adiw	r28, 0x05	; 5
    1af2:	6c ad       	ldd	r22, Y+60	; 0x3c
    1af4:	7d ad       	ldd	r23, Y+61	; 0x3d
    1af6:	8e ad       	ldd	r24, Y+62	; 0x3e
    1af8:	9f ad       	ldd	r25, Y+63	; 0x3f
    1afa:	25 97       	sbiw	r28, 0x05	; 5
    1afc:	0e 94 76 10 	call	0x20ec	; 0x20ec <__addsf3>
    1b00:	20 e0       	ldi	r18, 0x00	; 0
    1b02:	30 e0       	ldi	r19, 0x00	; 0
    1b04:	40 e0       	ldi	r20, 0x00	; 0
    1b06:	5f e3       	ldi	r21, 0x3F	; 63
    1b08:	0e 94 98 13 	call	0x2730	; 0x2730 <pow>
    1b0c:	e6 2e       	mov	r14, r22
    1b0e:	f7 2e       	mov	r15, r23
    1b10:	08 2f       	mov	r16, r24
    1b12:	19 2f       	mov	r17, r25
			// Compare to max distance
			if (distance > max_distance) {
    1b14:	2a 96       	adiw	r28, 0x0a	; 10
    1b16:	2f ad       	ldd	r18, Y+63	; 0x3f
    1b18:	2a 97       	sbiw	r28, 0x0a	; 10
    1b1a:	2e 96       	adiw	r28, 0x0e	; 14
    1b1c:	3f ad       	ldd	r19, Y+63	; 0x3f
    1b1e:	2e 97       	sbiw	r28, 0x0e	; 14
    1b20:	46 2d       	mov	r20, r6
    1b22:	57 2d       	mov	r21, r7
    1b24:	0e 94 1e 13 	call	0x263c	; 0x263c <__gesf2>
    1b28:	18 16       	cp	r1, r24
    1b2a:	c4 f4       	brge	.+48     	; 0x1b5c <interpret+0x4ca>
    1b2c:	a4 96       	adiw	r28, 0x24	; 36
    1b2e:	5f ae       	std	Y+63, r5	; 0x3f
    1b30:	4e ae       	std	Y+62, r4	; 0x3e
    1b32:	a4 97       	sbiw	r28, 0x24	; 36
    1b34:	a5 96       	adiw	r28, 0x25	; 37
    1b36:	bf ad       	ldd	r27, Y+63	; 0x3f
    1b38:	a5 97       	sbiw	r28, 0x25	; 37
    1b3a:	26 96       	adiw	r28, 0x06	; 6
    1b3c:	bf af       	std	Y+63, r27	; 0x3f
    1b3e:	26 97       	sbiw	r28, 0x06	; 6
    1b40:	a6 96       	adiw	r28, 0x26	; 38
    1b42:	ef ad       	ldd	r30, Y+63	; 0x3f
    1b44:	a6 97       	sbiw	r28, 0x26	; 38
    1b46:	27 96       	adiw	r28, 0x07	; 7
    1b48:	ef af       	std	Y+63, r30	; 0x3f
    1b4a:	27 97       	sbiw	r28, 0x07	; 7
				// If greater, update max distance indices
				indices[0] = i;
				indices[1] = j;
				max_distance = distance;
    1b4c:	2a 96       	adiw	r28, 0x0a	; 10
    1b4e:	ef ae       	std	Y+63, r14	; 0x3f
    1b50:	2a 97       	sbiw	r28, 0x0a	; 10
    1b52:	2e 96       	adiw	r28, 0x0e	; 14
    1b54:	ff ae       	std	Y+63, r15	; 0x3f
    1b56:	2e 97       	sbiw	r28, 0x0e	; 14
    1b58:	60 2e       	mov	r6, r16
    1b5a:	71 2e       	mov	r7, r17

	// Get max distance indices
	float max_distance = 0;
	int indices[2] = {0, 1};
	for (int i = 0; i < 3; i++) {
		for (int j = i + 1; j < 4; j++) {
    1b5c:	ff ef       	ldi	r31, 0xFF	; 255
    1b5e:	4f 1a       	sub	r4, r31
    1b60:	5f 0a       	sbc	r5, r31
    1b62:	24 e0       	ldi	r18, 0x04	; 4
    1b64:	42 16       	cp	r4, r18
    1b66:	51 04       	cpc	r5, r1
    1b68:	09 f0       	breq	.+2      	; 0x1b6c <interpret+0x4da>
    1b6a:	92 cf       	rjmp	.-220    	; 0x1a90 <interpret+0x3fe>
    1b6c:	34 e0       	ldi	r19, 0x04	; 4
    1b6e:	23 0e       	add	r2, r19
    1b70:	31 1c       	adc	r3, r1
    1b72:	a2 96       	adiw	r28, 0x22	; 34
    1b74:	4e ad       	ldd	r20, Y+62	; 0x3e
    1b76:	5f ad       	ldd	r21, Y+63	; 0x3f
    1b78:	a2 97       	sbiw	r28, 0x22	; 34
    1b7a:	4c 5f       	subi	r20, 0xFC	; 252
    1b7c:	5f 4f       	sbci	r21, 0xFF	; 255
    1b7e:	a2 96       	adiw	r28, 0x22	; 34
    1b80:	5f af       	std	Y+63, r21	; 0x3f
    1b82:	4e af       	std	Y+62, r20	; 0x3e
    1b84:	a2 97       	sbiw	r28, 0x22	; 34
	////////// Sort mWii point indices based on distance from origin //////////

	// Get max distance indices
	float max_distance = 0;
	int indices[2] = {0, 1};
	for (int i = 0; i < 3; i++) {
    1b86:	a0 96       	adiw	r28, 0x20	; 32
    1b88:	8e ad       	ldd	r24, Y+62	; 0x3e
    1b8a:	9f ad       	ldd	r25, Y+63	; 0x3f
    1b8c:	a0 97       	sbiw	r28, 0x20	; 32
    1b8e:	83 30       	cpi	r24, 0x03	; 3
    1b90:	91 05       	cpc	r25, r1
    1b92:	09 f0       	breq	.+2      	; 0x1b96 <interpret+0x504>
    1b94:	4c cf       	rjmp	.-360    	; 0x1a2e <interpret+0x39c>
    1b96:	27 96       	adiw	r28, 0x07	; 7
    1b98:	2e ac       	ldd	r2, Y+62	; 0x3e
    1b9a:	3f ac       	ldd	r3, Y+63	; 0x3f
    1b9c:	27 97       	sbiw	r28, 0x07	; 7
    1b9e:	a4 96       	adiw	r28, 0x24	; 36
    1ba0:	6e ac       	ldd	r6, Y+62	; 0x3e
    1ba2:	7f ac       	ldd	r7, Y+63	; 0x3f
    1ba4:	a4 97       	sbiw	r28, 0x24	; 36

	// Find which max index has the shortest distance to one of the other two points
	float min_distance = FLT_MAX;
	// Index of top star that we're looking for
	int top_index = indices[0];
	for (int i = 0; i < 4; i++) {
    1ba6:	00 e0       	ldi	r16, 0x00	; 0
    1ba8:	10 e0       	ldi	r17, 0x00	; 0
		// Looking at other two points
		if (i != indices[0] && i != indices[1]) {
    1baa:	20 16       	cp	r2, r16
    1bac:	31 06       	cpc	r3, r17
    1bae:	09 f4       	brne	.+2      	; 0x1bb2 <interpret+0x520>
    1bb0:	da c0       	rjmp	.+436    	; 0x1d66 <interpret+0x6d4>
    1bb2:	60 16       	cp	r6, r16
    1bb4:	71 06       	cpc	r7, r17
    1bb6:	09 f4       	brne	.+2      	; 0x1bba <interpret+0x528>
    1bb8:	d6 c0       	rjmp	.+428    	; 0x1d66 <interpret+0x6d4>
			// Get distance to first max distance point
			float distance = powf(powf(mx[indices[0]] - mx[i], 2.0) + powf(my[indices[0]] - my[i], 2.0), 0.5);
    1bba:	00 0f       	add	r16, r16
    1bbc:	11 1f       	adc	r17, r17
    1bbe:	00 0f       	add	r16, r16
    1bc0:	11 1f       	adc	r17, r17
    1bc2:	81 e0       	ldi	r24, 0x01	; 1
    1bc4:	90 e0       	ldi	r25, 0x00	; 0
    1bc6:	8c 0f       	add	r24, r28
    1bc8:	9d 1f       	adc	r25, r29
    1bca:	08 0f       	add	r16, r24
    1bcc:	19 1f       	adc	r17, r25
    1bce:	d8 01       	movw	r26, r16
    1bd0:	90 96       	adiw	r26, 0x20	; 32
    1bd2:	2d 91       	ld	r18, X+
    1bd4:	3d 91       	ld	r19, X+
    1bd6:	4d 91       	ld	r20, X+
    1bd8:	5c 91       	ld	r21, X
    1bda:	93 97       	sbiw	r26, 0x23	; 35
    1bdc:	25 96       	adiw	r28, 0x05	; 5
    1bde:	2c af       	std	Y+60, r18	; 0x3c
    1be0:	3d af       	std	Y+61, r19	; 0x3d
    1be2:	4e af       	std	Y+62, r20	; 0x3e
    1be4:	5f af       	std	Y+63, r21	; 0x3f
    1be6:	25 97       	sbiw	r28, 0x05	; 5
    1be8:	71 01       	movw	r14, r2
    1bea:	ee 0c       	add	r14, r14
    1bec:	ff 1c       	adc	r15, r15
    1bee:	ee 0c       	add	r14, r14
    1bf0:	ff 1c       	adc	r15, r15
    1bf2:	e8 0e       	add	r14, r24
    1bf4:	f9 1e       	adc	r15, r25
    1bf6:	f7 01       	movw	r30, r14
    1bf8:	60 a1       	ldd	r22, Z+32	; 0x20
    1bfa:	71 a1       	ldd	r23, Z+33	; 0x21
    1bfc:	82 a1       	ldd	r24, Z+34	; 0x22
    1bfe:	93 a1       	ldd	r25, Z+35	; 0x23
    1c00:	0e 94 75 10 	call	0x20ea	; 0x20ea <__subsf3>
    1c04:	2d 96       	adiw	r28, 0x0d	; 13
    1c06:	6c af       	std	Y+60, r22	; 0x3c
    1c08:	7d af       	std	Y+61, r23	; 0x3d
    1c0a:	8e af       	std	Y+62, r24	; 0x3e
    1c0c:	9f af       	std	Y+63, r25	; 0x3f
    1c0e:	2d 97       	sbiw	r28, 0x0d	; 13
    1c10:	d8 01       	movw	r26, r16
    1c12:	d0 96       	adiw	r26, 0x30	; 48
    1c14:	8d 90       	ld	r8, X+
    1c16:	9d 90       	ld	r9, X+
    1c18:	ad 90       	ld	r10, X+
    1c1a:	bc 90       	ld	r11, X
    1c1c:	d3 97       	sbiw	r26, 0x33	; 51
    1c1e:	a5 01       	movw	r20, r10
    1c20:	94 01       	movw	r18, r8
    1c22:	f7 01       	movw	r30, r14
    1c24:	60 a9       	ldd	r22, Z+48	; 0x30
    1c26:	71 a9       	ldd	r23, Z+49	; 0x31
    1c28:	82 a9       	ldd	r24, Z+50	; 0x32
    1c2a:	93 a9       	ldd	r25, Z+51	; 0x33
    1c2c:	0e 94 75 10 	call	0x20ea	; 0x20ea <__subsf3>
    1c30:	6b 01       	movw	r12, r22
    1c32:	7c 01       	movw	r14, r24
    1c34:	2d 96       	adiw	r28, 0x0d	; 13
    1c36:	2c ad       	ldd	r18, Y+60	; 0x3c
    1c38:	3d ad       	ldd	r19, Y+61	; 0x3d
    1c3a:	4e ad       	ldd	r20, Y+62	; 0x3e
    1c3c:	5f ad       	ldd	r21, Y+63	; 0x3f
    1c3e:	2d 97       	sbiw	r28, 0x0d	; 13
    1c40:	ca 01       	movw	r24, r20
    1c42:	b9 01       	movw	r22, r18
    1c44:	0e 94 2b 13 	call	0x2656	; 0x2656 <__mulsf3>
    1c48:	2d 96       	adiw	r28, 0x0d	; 13
    1c4a:	6c af       	std	Y+60, r22	; 0x3c
    1c4c:	7d af       	std	Y+61, r23	; 0x3d
    1c4e:	8e af       	std	Y+62, r24	; 0x3e
    1c50:	9f af       	std	Y+63, r25	; 0x3f
    1c52:	2d 97       	sbiw	r28, 0x0d	; 13
    1c54:	a7 01       	movw	r20, r14
    1c56:	96 01       	movw	r18, r12
    1c58:	c7 01       	movw	r24, r14
    1c5a:	b6 01       	movw	r22, r12
    1c5c:	0e 94 2b 13 	call	0x2656	; 0x2656 <__mulsf3>
    1c60:	9b 01       	movw	r18, r22
    1c62:	ac 01       	movw	r20, r24
    1c64:	2d 96       	adiw	r28, 0x0d	; 13
    1c66:	6c ad       	ldd	r22, Y+60	; 0x3c
    1c68:	7d ad       	ldd	r23, Y+61	; 0x3d
    1c6a:	8e ad       	ldd	r24, Y+62	; 0x3e
    1c6c:	9f ad       	ldd	r25, Y+63	; 0x3f
    1c6e:	2d 97       	sbiw	r28, 0x0d	; 13
    1c70:	0e 94 76 10 	call	0x20ec	; 0x20ec <__addsf3>
    1c74:	20 e0       	ldi	r18, 0x00	; 0
    1c76:	30 e0       	ldi	r19, 0x00	; 0
    1c78:	40 e0       	ldi	r20, 0x00	; 0
    1c7a:	5f e3       	ldi	r21, 0x3F	; 63
    1c7c:	0e 94 98 13 	call	0x2730	; 0x2730 <pow>
    1c80:	2d 96       	adiw	r28, 0x0d	; 13
    1c82:	6c af       	std	Y+60, r22	; 0x3c
    1c84:	7d af       	std	Y+61, r23	; 0x3d
    1c86:	8e af       	std	Y+62, r24	; 0x3e
    1c88:	9f af       	std	Y+63, r25	; 0x3f
    1c8a:	2d 97       	sbiw	r28, 0x0d	; 13
			min_distance = distance;

			// Get distance to other max distance point
			distance = powf(powf(mx[indices[1]] - mx[i], 2.0) + powf(my[indices[1]] - my[i], 2.0), 0.5);
    1c8c:	83 01       	movw	r16, r6
    1c8e:	00 0f       	add	r16, r16
    1c90:	11 1f       	adc	r17, r17
    1c92:	00 0f       	add	r16, r16
    1c94:	11 1f       	adc	r17, r17
    1c96:	21 e0       	ldi	r18, 0x01	; 1
    1c98:	30 e0       	ldi	r19, 0x00	; 0
    1c9a:	2c 0f       	add	r18, r28
    1c9c:	3d 1f       	adc	r19, r29
    1c9e:	02 0f       	add	r16, r18
    1ca0:	13 1f       	adc	r17, r19
    1ca2:	25 96       	adiw	r28, 0x05	; 5
    1ca4:	2c ad       	ldd	r18, Y+60	; 0x3c
    1ca6:	3d ad       	ldd	r19, Y+61	; 0x3d
    1ca8:	4e ad       	ldd	r20, Y+62	; 0x3e
    1caa:	5f ad       	ldd	r21, Y+63	; 0x3f
    1cac:	25 97       	sbiw	r28, 0x05	; 5
    1cae:	d8 01       	movw	r26, r16
    1cb0:	90 96       	adiw	r26, 0x20	; 32
    1cb2:	6d 91       	ld	r22, X+
    1cb4:	7d 91       	ld	r23, X+
    1cb6:	8d 91       	ld	r24, X+
    1cb8:	9c 91       	ld	r25, X
    1cba:	93 97       	sbiw	r26, 0x23	; 35
    1cbc:	0e 94 75 10 	call	0x20ea	; 0x20ea <__subsf3>
    1cc0:	25 96       	adiw	r28, 0x05	; 5
    1cc2:	6c af       	std	Y+60, r22	; 0x3c
    1cc4:	7d af       	std	Y+61, r23	; 0x3d
    1cc6:	8e af       	std	Y+62, r24	; 0x3e
    1cc8:	9f af       	std	Y+63, r25	; 0x3f
    1cca:	25 97       	sbiw	r28, 0x05	; 5
    1ccc:	a5 01       	movw	r20, r10
    1cce:	94 01       	movw	r18, r8
    1cd0:	f8 01       	movw	r30, r16
    1cd2:	60 a9       	ldd	r22, Z+48	; 0x30
    1cd4:	71 a9       	ldd	r23, Z+49	; 0x31
    1cd6:	82 a9       	ldd	r24, Z+50	; 0x32
    1cd8:	93 a9       	ldd	r25, Z+51	; 0x33
    1cda:	0e 94 75 10 	call	0x20ea	; 0x20ea <__subsf3>
    1cde:	6b 01       	movw	r12, r22
    1ce0:	7c 01       	movw	r14, r24
    1ce2:	25 96       	adiw	r28, 0x05	; 5
    1ce4:	2c ad       	ldd	r18, Y+60	; 0x3c
    1ce6:	3d ad       	ldd	r19, Y+61	; 0x3d
    1ce8:	4e ad       	ldd	r20, Y+62	; 0x3e
    1cea:	5f ad       	ldd	r21, Y+63	; 0x3f
    1cec:	25 97       	sbiw	r28, 0x05	; 5
    1cee:	ca 01       	movw	r24, r20
    1cf0:	b9 01       	movw	r22, r18
    1cf2:	0e 94 2b 13 	call	0x2656	; 0x2656 <__mulsf3>
    1cf6:	4b 01       	movw	r8, r22
    1cf8:	5c 01       	movw	r10, r24
    1cfa:	a7 01       	movw	r20, r14
    1cfc:	96 01       	movw	r18, r12
    1cfe:	c7 01       	movw	r24, r14
    1d00:	b6 01       	movw	r22, r12
    1d02:	0e 94 2b 13 	call	0x2656	; 0x2656 <__mulsf3>
    1d06:	9b 01       	movw	r18, r22
    1d08:	ac 01       	movw	r20, r24
    1d0a:	c5 01       	movw	r24, r10
    1d0c:	b4 01       	movw	r22, r8
    1d0e:	0e 94 76 10 	call	0x20ec	; 0x20ec <__addsf3>
    1d12:	20 e0       	ldi	r18, 0x00	; 0
    1d14:	30 e0       	ldi	r19, 0x00	; 0
    1d16:	40 e0       	ldi	r20, 0x00	; 0
    1d18:	5f e3       	ldi	r21, 0x3F	; 63
    1d1a:	0e 94 98 13 	call	0x2730	; 0x2730 <pow>
    1d1e:	9b 01       	movw	r18, r22
    1d20:	ac 01       	movw	r20, r24
			// If distance is lower than min distance, set as the new top index
			if (distance < min_distance) {
    1d22:	2d 96       	adiw	r28, 0x0d	; 13
    1d24:	6c ad       	ldd	r22, Y+60	; 0x3c
    1d26:	7d ad       	ldd	r23, Y+61	; 0x3d
    1d28:	8e ad       	ldd	r24, Y+62	; 0x3e
    1d2a:	9f ad       	ldd	r25, Y+63	; 0x3f
    1d2c:	2d 97       	sbiw	r28, 0x0d	; 13
    1d2e:	0e 94 1e 13 	call	0x263c	; 0x263c <__gesf2>
    1d32:	18 16       	cp	r1, r24
    1d34:	3c f5       	brge	.+78     	; 0x1d84 <interpret+0x6f2>
		}
	}

	// Determine bottom star index
	int bottom_index;
	if (indices[0] == top_index) {
    1d36:	26 14       	cp	r2, r6
    1d38:	37 04       	cpc	r3, r7
    1d3a:	e1 f0       	breq	.+56     	; 0x1d74 <interpret+0x6e2>
    1d3c:	a3 96       	adiw	r28, 0x23	; 35
    1d3e:	9f ad       	ldd	r25, Y+63	; 0x3f
    1d40:	a3 97       	sbiw	r28, 0x23	; 35
    1d42:	a4 96       	adiw	r28, 0x24	; 36
    1d44:	8f ad       	ldd	r24, Y+63	; 0x3f
    1d46:	a4 97       	sbiw	r28, 0x24	; 36
    1d48:	27 96       	adiw	r28, 0x07	; 7
    1d4a:	2e ad       	ldd	r18, Y+62	; 0x3e
    1d4c:	3f ad       	ldd	r19, Y+63	; 0x3f
    1d4e:	27 97       	sbiw	r28, 0x07	; 7
    1d50:	a4 96       	adiw	r28, 0x24	; 36
    1d52:	3f af       	std	Y+63, r19	; 0x3f
    1d54:	2e af       	std	Y+62, r18	; 0x3e
    1d56:	a4 97       	sbiw	r28, 0x24	; 36
    1d58:	26 96       	adiw	r28, 0x06	; 6
    1d5a:	9f af       	std	Y+63, r25	; 0x3f
    1d5c:	26 97       	sbiw	r28, 0x06	; 6
    1d5e:	27 96       	adiw	r28, 0x07	; 7
    1d60:	8f af       	std	Y+63, r24	; 0x3f
    1d62:	27 97       	sbiw	r28, 0x07	; 7
    1d64:	0f c0       	rjmp	.+30     	; 0x1d84 <interpret+0x6f2>

	// Find which max index has the shortest distance to one of the other two points
	float min_distance = FLT_MAX;
	// Index of top star that we're looking for
	int top_index = indices[0];
	for (int i = 0; i < 4; i++) {
    1d66:	0f 5f       	subi	r16, 0xFF	; 255
    1d68:	1f 4f       	sbci	r17, 0xFF	; 255
    1d6a:	04 30       	cpi	r16, 0x04	; 4
    1d6c:	11 05       	cpc	r17, r1
    1d6e:	09 f0       	breq	.+2      	; 0x1d72 <interpret+0x6e0>
    1d70:	1c cf       	rjmp	.-456    	; 0x1baa <interpret+0x518>
    1d72:	08 c0       	rjmp	.+16     	; 0x1d84 <interpret+0x6f2>
    1d74:	a4 96       	adiw	r28, 0x24	; 36
    1d76:	4e ad       	ldd	r20, Y+62	; 0x3e
    1d78:	5f ad       	ldd	r21, Y+63	; 0x3f
    1d7a:	a4 97       	sbiw	r28, 0x24	; 36
    1d7c:	27 96       	adiw	r28, 0x07	; 7
    1d7e:	5f af       	std	Y+63, r21	; 0x3f
    1d80:	4e af       	std	Y+62, r20	; 0x3e
    1d82:	27 97       	sbiw	r28, 0x07	; 7
		bottom_index = indices[0];
	}

	////////// Determine mWii rotation //////////
	// determine rotation
	float delx = (mx[top_index] - mx[bottom_index]);
    1d84:	27 96       	adiw	r28, 0x07	; 7
    1d86:	0e ad       	ldd	r16, Y+62	; 0x3e
    1d88:	1f ad       	ldd	r17, Y+63	; 0x3f
    1d8a:	27 97       	sbiw	r28, 0x07	; 7
    1d8c:	00 0f       	add	r16, r16
    1d8e:	11 1f       	adc	r17, r17
    1d90:	00 0f       	add	r16, r16
    1d92:	11 1f       	adc	r17, r17
    1d94:	81 e0       	ldi	r24, 0x01	; 1
    1d96:	90 e0       	ldi	r25, 0x00	; 0
    1d98:	8c 0f       	add	r24, r28
    1d9a:	9d 1f       	adc	r25, r29
    1d9c:	08 0f       	add	r16, r24
    1d9e:	19 1f       	adc	r17, r25
    1da0:	a4 96       	adiw	r28, 0x24	; 36
    1da2:	ee ac       	ldd	r14, Y+62	; 0x3e
    1da4:	ff ac       	ldd	r15, Y+63	; 0x3f
    1da6:	a4 97       	sbiw	r28, 0x24	; 36
    1da8:	ee 0c       	add	r14, r14
    1daa:	ff 1c       	adc	r15, r15
    1dac:	ee 0c       	add	r14, r14
    1dae:	ff 1c       	adc	r15, r15
    1db0:	e8 0e       	add	r14, r24
    1db2:	f9 1e       	adc	r15, r25
    1db4:	d7 01       	movw	r26, r14
    1db6:	90 96       	adiw	r26, 0x20	; 32
    1db8:	2d 91       	ld	r18, X+
    1dba:	3d 91       	ld	r19, X+
    1dbc:	4d 91       	ld	r20, X+
    1dbe:	5c 91       	ld	r21, X
    1dc0:	93 97       	sbiw	r26, 0x23	; 35
    1dc2:	f8 01       	movw	r30, r16
    1dc4:	60 a1       	ldd	r22, Z+32	; 0x20
    1dc6:	71 a1       	ldd	r23, Z+33	; 0x21
    1dc8:	82 a1       	ldd	r24, Z+34	; 0x22
    1dca:	93 a1       	ldd	r25, Z+35	; 0x23
    1dcc:	0e 94 75 10 	call	0x20ea	; 0x20ea <__subsf3>
    1dd0:	4b 01       	movw	r8, r22
    1dd2:	5c 01       	movw	r10, r24
	float dely = (my[top_index] - my[bottom_index]);
    1dd4:	d7 01       	movw	r26, r14
    1dd6:	d0 96       	adiw	r26, 0x30	; 48
    1dd8:	2d 91       	ld	r18, X+
    1dda:	3d 91       	ld	r19, X+
    1ddc:	4d 91       	ld	r20, X+
    1dde:	5c 91       	ld	r21, X
    1de0:	d3 97       	sbiw	r26, 0x33	; 51
    1de2:	f8 01       	movw	r30, r16
    1de4:	60 a9       	ldd	r22, Z+48	; 0x30
    1de6:	71 a9       	ldd	r23, Z+49	; 0x31
    1de8:	82 a9       	ldd	r24, Z+50	; 0x32
    1dea:	93 a9       	ldd	r25, Z+51	; 0x33
    1dec:	0e 94 75 10 	call	0x20ea	; 0x20ea <__subsf3>
	robot->o = atan2f(dely, delx); //find rotation from y axis
    1df0:	a5 01       	movw	r20, r10
    1df2:	94 01       	movw	r18, r8
    1df4:	0e 94 f5 10 	call	0x21ea	; 0x21ea <atan2>
    1df8:	2b 01       	movw	r4, r22
    1dfa:	3c 01       	movw	r6, r24


	////////// Use rotation to translate points into new xy frame //////////
	// Rotate original mWii points around the origin
	float s = sinf(2.0 * PI - robot->o);
    1dfc:	9b 01       	movw	r18, r22
    1dfe:	ac 01       	movw	r20, r24
    1e00:	6b ed       	ldi	r22, 0xDB	; 219
    1e02:	7f e0       	ldi	r23, 0x0F	; 15
    1e04:	89 ec       	ldi	r24, 0xC9	; 201
    1e06:	90 e4       	ldi	r25, 0x40	; 64
    1e08:	0e 94 75 10 	call	0x20ea	; 0x20ea <__subsf3>
    1e0c:	4b 01       	movw	r8, r22
    1e0e:	5c 01       	movw	r10, r24
    1e10:	0e 94 e8 13 	call	0x27d0	; 0x27d0 <sin>
    1e14:	6b 01       	movw	r12, r22
    1e16:	7c 01       	movw	r14, r24
	float c = cosf(2.0 * PI - robot->o);
    1e18:	c5 01       	movw	r24, r10
    1e1a:	b4 01       	movw	r22, r8
    1e1c:	0e 94 59 11 	call	0x22b2	; 0x22b2 <cos>
    1e20:	4b 01       	movw	r8, r22
    1e22:	5c 01       	movw	r10, r24

	float ox = translation_x;
	float oy = translation_y;

	// Rotate points around origin into new xy frame
	translation_x = ox * c - oy * s;
    1e24:	9b 01       	movw	r18, r22
    1e26:	ac 01       	movw	r20, r24
    1e28:	6a 96       	adiw	r28, 0x1a	; 26
    1e2a:	6c ad       	ldd	r22, Y+60	; 0x3c
    1e2c:	7d ad       	ldd	r23, Y+61	; 0x3d
    1e2e:	8e ad       	ldd	r24, Y+62	; 0x3e
    1e30:	9f ad       	ldd	r25, Y+63	; 0x3f
    1e32:	6a 97       	sbiw	r28, 0x1a	; 26
    1e34:	0e 94 2b 13 	call	0x2656	; 0x2656 <__mulsf3>
    1e38:	25 96       	adiw	r28, 0x05	; 5
    1e3a:	6c af       	std	Y+60, r22	; 0x3c
    1e3c:	7d af       	std	Y+61, r23	; 0x3d
    1e3e:	8e af       	std	Y+62, r24	; 0x3e
    1e40:	9f af       	std	Y+63, r25	; 0x3f
    1e42:	25 97       	sbiw	r28, 0x05	; 5
    1e44:	a7 01       	movw	r20, r14
    1e46:	96 01       	movw	r18, r12
    1e48:	6e 96       	adiw	r28, 0x1e	; 30
    1e4a:	6c ad       	ldd	r22, Y+60	; 0x3c
    1e4c:	7d ad       	ldd	r23, Y+61	; 0x3d
    1e4e:	8e ad       	ldd	r24, Y+62	; 0x3e
    1e50:	9f ad       	ldd	r25, Y+63	; 0x3f
    1e52:	6e 97       	sbiw	r28, 0x1e	; 30
    1e54:	0e 94 2b 13 	call	0x2656	; 0x2656 <__mulsf3>
    1e58:	9b 01       	movw	r18, r22
    1e5a:	ac 01       	movw	r20, r24
    1e5c:	25 96       	adiw	r28, 0x05	; 5
    1e5e:	6c ad       	ldd	r22, Y+60	; 0x3c
    1e60:	7d ad       	ldd	r23, Y+61	; 0x3d
    1e62:	8e ad       	ldd	r24, Y+62	; 0x3e
    1e64:	9f ad       	ldd	r25, Y+63	; 0x3f
    1e66:	25 97       	sbiw	r28, 0x05	; 5
    1e68:	0e 94 75 10 	call	0x20ea	; 0x20ea <__subsf3>
    1e6c:	9b 01       	movw	r18, r22
    1e6e:	ac 01       	movw	r20, r24
	translation_y = oy * c + ox * s;

	// Set robot x and y locations in pixels
	robot->x = -translation_x - CENTER_OFFSET_X;
    1e70:	60 e0       	ldi	r22, 0x00	; 0
    1e72:	70 e0       	ldi	r23, 0x00	; 0
    1e74:	86 e8       	ldi	r24, 0x86	; 134
    1e76:	92 e4       	ldi	r25, 0x42	; 66
    1e78:	0e 94 75 10 	call	0x20ea	; 0x20ea <__subsf3>
    1e7c:	a8 96       	adiw	r28, 0x28	; 40
    1e7e:	ae ad       	ldd	r26, Y+62	; 0x3e
    1e80:	bf ad       	ldd	r27, Y+63	; 0x3f
    1e82:	a8 97       	sbiw	r28, 0x28	; 40
    1e84:	11 96       	adiw	r26, 0x01	; 1
    1e86:	6d 93       	st	X+, r22
    1e88:	7d 93       	st	X+, r23
    1e8a:	8d 93       	st	X+, r24
    1e8c:	9c 93       	st	X, r25
    1e8e:	14 97       	sbiw	r26, 0x04	; 4
	float ox = translation_x;
	float oy = translation_y;

	// Rotate points around origin into new xy frame
	translation_x = ox * c - oy * s;
	translation_y = oy * c + ox * s;
    1e90:	a5 01       	movw	r20, r10
    1e92:	94 01       	movw	r18, r8
    1e94:	6e 96       	adiw	r28, 0x1e	; 30
    1e96:	6c ad       	ldd	r22, Y+60	; 0x3c
    1e98:	7d ad       	ldd	r23, Y+61	; 0x3d
    1e9a:	8e ad       	ldd	r24, Y+62	; 0x3e
    1e9c:	9f ad       	ldd	r25, Y+63	; 0x3f
    1e9e:	6e 97       	sbiw	r28, 0x1e	; 30
    1ea0:	0e 94 2b 13 	call	0x2656	; 0x2656 <__mulsf3>
    1ea4:	4b 01       	movw	r8, r22
    1ea6:	5c 01       	movw	r10, r24
    1ea8:	a7 01       	movw	r20, r14
    1eaa:	96 01       	movw	r18, r12
    1eac:	6a 96       	adiw	r28, 0x1a	; 26
    1eae:	6c ad       	ldd	r22, Y+60	; 0x3c
    1eb0:	7d ad       	ldd	r23, Y+61	; 0x3d
    1eb2:	8e ad       	ldd	r24, Y+62	; 0x3e
    1eb4:	9f ad       	ldd	r25, Y+63	; 0x3f
    1eb6:	6a 97       	sbiw	r28, 0x1a	; 26
    1eb8:	0e 94 2b 13 	call	0x2656	; 0x2656 <__mulsf3>
    1ebc:	9b 01       	movw	r18, r22
    1ebe:	ac 01       	movw	r20, r24
    1ec0:	c5 01       	movw	r24, r10
    1ec2:	b4 01       	movw	r22, r8
    1ec4:	0e 94 76 10 	call	0x20ec	; 0x20ec <__addsf3>

	// Set robot x and y locations in pixels
	robot->x = -translation_x - CENTER_OFFSET_X;
	robot->y = -translation_y - CENTER_OFFSET_Y;
    1ec8:	90 58       	subi	r25, 0x80	; 128
    1eca:	20 e0       	ldi	r18, 0x00	; 0
    1ecc:	30 e0       	ldi	r19, 0x00	; 0
    1ece:	4a e9       	ldi	r20, 0x9A	; 154
    1ed0:	52 e4       	ldi	r21, 0x42	; 66
    1ed2:	0e 94 75 10 	call	0x20ea	; 0x20ea <__subsf3>
    1ed6:	a8 96       	adiw	r28, 0x28	; 40
    1ed8:	ee ad       	ldd	r30, Y+62	; 0x3e
    1eda:	ff ad       	ldd	r31, Y+63	; 0x3f
    1edc:	a8 97       	sbiw	r28, 0x28	; 40
    1ede:	65 83       	std	Z+5, r22	; 0x05
    1ee0:	76 83       	std	Z+6, r23	; 0x06
    1ee2:	87 83       	std	Z+7, r24	; 0x07
    1ee4:	90 87       	std	Z+8, r25	; 0x08
	robot->o = -robot->o;
    1ee6:	d3 01       	movw	r26, r6
    1ee8:	c2 01       	movw	r24, r4
    1eea:	b0 58       	subi	r27, 0x80	; 128
    1eec:	81 87       	std	Z+9, r24	; 0x09
    1eee:	92 87       	std	Z+10, r25	; 0x0a
    1ef0:	a3 87       	std	Z+11, r26	; 0x0b
    1ef2:	b4 87       	std	Z+12, r27	; 0x0c

	// Print data
	print_data(mWii_x, mWii_y, ox, oy, top_index, bottom_index, robot);
    1ef4:	4f 01       	movw	r8, r30
    1ef6:	a4 96       	adiw	r28, 0x24	; 36
    1ef8:	ae ac       	ldd	r10, Y+62	; 0x3e
    1efa:	bf ac       	ldd	r11, Y+63	; 0x3f
    1efc:	a4 97       	sbiw	r28, 0x24	; 36
    1efe:	27 96       	adiw	r28, 0x07	; 7
    1f00:	ce ac       	ldd	r12, Y+62	; 0x3e
    1f02:	df ac       	ldd	r13, Y+63	; 0x3f
    1f04:	27 97       	sbiw	r28, 0x07	; 7
    1f06:	6e 96       	adiw	r28, 0x1e	; 30
    1f08:	ec ac       	ldd	r14, Y+60	; 0x3c
    1f0a:	fd ac       	ldd	r15, Y+61	; 0x3d
    1f0c:	0e ad       	ldd	r16, Y+62	; 0x3e
    1f0e:	1f ad       	ldd	r17, Y+63	; 0x3f
    1f10:	6e 97       	sbiw	r28, 0x1e	; 30
    1f12:	6a 96       	adiw	r28, 0x1a	; 26
    1f14:	2c ad       	ldd	r18, Y+60	; 0x3c
    1f16:	3d ad       	ldd	r19, Y+61	; 0x3d
    1f18:	4e ad       	ldd	r20, Y+62	; 0x3e
    1f1a:	5f ad       	ldd	r21, Y+63	; 0x3f
    1f1c:	6a 97       	sbiw	r28, 0x1a	; 26
    1f1e:	be 01       	movw	r22, r28
    1f20:	6f 5e       	subi	r22, 0xEF	; 239
    1f22:	7f 4f       	sbci	r23, 0xFF	; 255
    1f24:	ce 01       	movw	r24, r28
    1f26:	01 96       	adiw	r24, 0x01	; 1
    1f28:	0e 94 0b 0a 	call	0x1416	; 0x1416 <print_data>
    1f2c:	12 c0       	rjmp	.+36     	; 0x1f52 <interpret+0x8c0>
    1f2e:	f4 e0       	ldi	r31, 0x04	; 4
    1f30:	2f 0e       	add	r2, r31
    1f32:	31 1c       	adc	r3, r1
    1f34:	a2 96       	adiw	r28, 0x22	; 34
    1f36:	2e ad       	ldd	r18, Y+62	; 0x3e
    1f38:	3f ad       	ldd	r19, Y+63	; 0x3f
    1f3a:	a2 97       	sbiw	r28, 0x22	; 34
    1f3c:	2c 5f       	subi	r18, 0xFC	; 252
    1f3e:	3f 4f       	sbci	r19, 0xFF	; 255
    1f40:	a2 96       	adiw	r28, 0x22	; 34
    1f42:	3f af       	std	Y+63, r19	; 0x3f
    1f44:	2e af       	std	Y+62, r18	; 0x3e
    1f46:	a2 97       	sbiw	r28, 0x22	; 34
	////////// Sort mWii point indices based on distance from origin //////////

	// Get max distance indices
	float max_distance = 0;
	int indices[2] = {0, 1};
	for (int i = 0; i < 3; i++) {
    1f48:	a0 96       	adiw	r28, 0x20	; 32
    1f4a:	8e ad       	ldd	r24, Y+62	; 0x3e
    1f4c:	9f ad       	ldd	r25, Y+63	; 0x3f
    1f4e:	a0 97       	sbiw	r28, 0x20	; 32
    1f50:	6e cd       	rjmp	.-1316   	; 0x1a2e <interpret+0x39c>
	robot->y = -translation_y - CENTER_OFFSET_Y;
	robot->o = -robot->o;

	// Print data
	print_data(mWii_x, mWii_y, ox, oy, top_index, bottom_index, robot);
}
    1f52:	c9 59       	subi	r28, 0x99	; 153
    1f54:	df 4f       	sbci	r29, 0xFF	; 255
    1f56:	0f b6       	in	r0, 0x3f	; 63
    1f58:	f8 94       	cli
    1f5a:	de bf       	out	0x3e, r29	; 62
    1f5c:	0f be       	out	0x3f, r0	; 63
    1f5e:	cd bf       	out	0x3d, r28	; 61
    1f60:	df 91       	pop	r29
    1f62:	cf 91       	pop	r28
    1f64:	1f 91       	pop	r17
    1f66:	0f 91       	pop	r16
    1f68:	ff 90       	pop	r15
    1f6a:	ef 90       	pop	r14
    1f6c:	df 90       	pop	r13
    1f6e:	cf 90       	pop	r12
    1f70:	bf 90       	pop	r11
    1f72:	af 90       	pop	r10
    1f74:	9f 90       	pop	r9
    1f76:	8f 90       	pop	r8
    1f78:	7f 90       	pop	r7
    1f7a:	6f 90       	pop	r6
    1f7c:	5f 90       	pop	r5
    1f7e:	4f 90       	pop	r4
    1f80:	3f 90       	pop	r3
    1f82:	2f 90       	pop	r2
    1f84:	08 95       	ret

00001f86 <step_to_goal>:
#include "score.h"

 bool step_to_goal(Robot* robot) {
    1f86:	ef 92       	push	r14
    1f88:	ff 92       	push	r15
    1f8a:	0f 93       	push	r16
    1f8c:	1f 93       	push	r17
    1f8e:	cf 93       	push	r28
    1f90:	df 93       	push	r29
    1f92:	cd b7       	in	r28, 0x3d	; 61
    1f94:	de b7       	in	r29, 0x3e	; 62
    1f96:	68 97       	sbiw	r28, 0x18	; 24
    1f98:	0f b6       	in	r0, 0x3f	; 63
    1f9a:	f8 94       	cli
    1f9c:	de bf       	out	0x3e, r29	; 62
    1f9e:	0f be       	out	0x3f, r0	; 63
    1fa0:	cd bf       	out	0x3d, r28	; 61
    1fa2:	7c 01       	movw	r14, r24
	 unsigned int star_array[12];
	 turn_in_place(true, 150);
    1fa4:	66 e9       	ldi	r22, 0x96	; 150
    1fa6:	70 e0       	ldi	r23, 0x00	; 0
    1fa8:	81 e0       	ldi	r24, 0x01	; 1
    1faa:	0e 94 26 02 	call	0x44c	; 0x44c <turn_in_place>
	 // Get mWii array
	 m_wii_read(star_array);
    1fae:	ce 01       	movw	r24, r28
    1fb0:	01 96       	adiw	r24, 0x01	; 1
    1fb2:	0e 94 51 07 	call	0xea2	; 0xea2 <m_wii_read>
	 // Get robot location and orientation
	 interpret(robot, star_array);
    1fb6:	be 01       	movw	r22, r28
    1fb8:	6f 5f       	subi	r22, 0xFF	; 255
    1fba:	7f 4f       	sbci	r23, 0xFF	; 255
    1fbc:	c7 01       	movw	r24, r14
    1fbe:	0e 94 49 0b 	call	0x1692	; 0x1692 <interpret>
	 // Wait
	 if (facing_goal(robot, OPPONENT_X, OPPONENT_Y)) {
    1fc2:	00 e0       	ldi	r16, 0x00	; 0
    1fc4:	10 e8       	ldi	r17, 0x80	; 128
    1fc6:	2e e9       	ldi	r18, 0x9E	; 158
    1fc8:	33 e4       	ldi	r19, 0x43	; 67
    1fca:	40 e0       	ldi	r20, 0x00	; 0
    1fcc:	50 e0       	ldi	r21, 0x00	; 0
    1fce:	68 e2       	ldi	r22, 0x28	; 40
    1fd0:	72 e4       	ldi	r23, 0x42	; 66
    1fd2:	c7 01       	movw	r24, r14
    1fd4:	0e 94 9e 02 	call	0x53c	; 0x53c <facing_goal>
    1fd8:	88 23       	and	r24, r24
    1fda:	21 f0       	breq	.+8      	; 0x1fe4 <step_to_goal+0x5e>
		 turn(0); // drive forward
    1fdc:	80 e0       	ldi	r24, 0x00	; 0
    1fde:	90 e0       	ldi	r25, 0x00	; 0
    1fe0:	0e 94 4a 02 	call	0x494	; 0x494 <turn>
	 }
	 if ( abs(OPPONENT_Y - robot->y) > 15 || abs(OPPONENT_X - robot->x) > 30) {
    1fe4:	f7 01       	movw	r30, r14
    1fe6:	25 81       	ldd	r18, Z+5	; 0x05
    1fe8:	36 81       	ldd	r19, Z+6	; 0x06
    1fea:	47 81       	ldd	r20, Z+7	; 0x07
    1fec:	50 85       	ldd	r21, Z+8	; 0x08
    1fee:	60 e0       	ldi	r22, 0x00	; 0
    1ff0:	70 e8       	ldi	r23, 0x80	; 128
    1ff2:	8e e9       	ldi	r24, 0x9E	; 158
    1ff4:	93 e4       	ldi	r25, 0x43	; 67
    1ff6:	0e 94 75 10 	call	0x20ea	; 0x20ea <__subsf3>
    1ffa:	0e 94 d0 11 	call	0x23a0	; 0x23a0 <__fixsfsi>
    1ffe:	9b 01       	movw	r18, r22
    2000:	77 23       	and	r23, r23
    2002:	24 f4       	brge	.+8      	; 0x200c <step_to_goal+0x86>
    2004:	22 27       	eor	r18, r18
    2006:	33 27       	eor	r19, r19
    2008:	26 1b       	sub	r18, r22
    200a:	37 0b       	sbc	r19, r23
    200c:	20 31       	cpi	r18, 0x10	; 16
    200e:	31 05       	cpc	r19, r1
    2010:	bc f4       	brge	.+46     	; 0x2040 <step_to_goal+0xba>
    2012:	f7 01       	movw	r30, r14
    2014:	21 81       	ldd	r18, Z+1	; 0x01
    2016:	32 81       	ldd	r19, Z+2	; 0x02
    2018:	43 81       	ldd	r20, Z+3	; 0x03
    201a:	54 81       	ldd	r21, Z+4	; 0x04
    201c:	60 e0       	ldi	r22, 0x00	; 0
    201e:	70 e0       	ldi	r23, 0x00	; 0
    2020:	88 e2       	ldi	r24, 0x28	; 40
    2022:	92 e4       	ldi	r25, 0x42	; 66
    2024:	0e 94 75 10 	call	0x20ea	; 0x20ea <__subsf3>
    2028:	0e 94 d0 11 	call	0x23a0	; 0x23a0 <__fixsfsi>
    202c:	9b 01       	movw	r18, r22
    202e:	77 23       	and	r23, r23
    2030:	24 f4       	brge	.+8      	; 0x203a <step_to_goal+0xb4>
    2032:	22 27       	eor	r18, r18
    2034:	33 27       	eor	r19, r19
    2036:	26 1b       	sub	r18, r22
    2038:	37 0b       	sbc	r19, r23
    203a:	2f 31       	cpi	r18, 0x1F	; 31
    203c:	31 05       	cpc	r19, r1
    203e:	34 f0       	brlt	.+12     	; 0x204c <step_to_goal+0xc6>
		 // you're in the goal
		 motor_stop();
    2040:	0e 94 21 02 	call	0x442	; 0x442 <motor_stop>
		 m_red(ON);
    2044:	6e 9a       	sbi	0x0d, 6	; 13
    2046:	76 98       	cbi	0x0e, 6	; 14
		 return true;
    2048:	81 e0       	ldi	r24, 0x01	; 1
    204a:	01 c0       	rjmp	.+2      	; 0x204e <step_to_goal+0xc8>
	 }
	 return false;
    204c:	80 e0       	ldi	r24, 0x00	; 0
 }
    204e:	68 96       	adiw	r28, 0x18	; 24
    2050:	0f b6       	in	r0, 0x3f	; 63
    2052:	f8 94       	cli
    2054:	de bf       	out	0x3e, r29	; 62
    2056:	0f be       	out	0x3f, r0	; 63
    2058:	cd bf       	out	0x3d, r28	; 61
    205a:	df 91       	pop	r29
    205c:	cf 91       	pop	r28
    205e:	1f 91       	pop	r17
    2060:	0f 91       	pop	r16
    2062:	ff 90       	pop	r15
    2064:	ef 90       	pop	r14
    2066:	08 95       	ret

00002068 <__vector_3>:
		m_red(TOGGLE);
		m_wait(100);
	}
}

ISR(INT2_vect){
    2068:	1f 92       	push	r1
    206a:	0f 92       	push	r0
    206c:	0f b6       	in	r0, 0x3f	; 63
    206e:	0f 92       	push	r0
    2070:	11 24       	eor	r1, r1
    2072:	2f 93       	push	r18
    2074:	3f 93       	push	r19
    2076:	4f 93       	push	r20
    2078:	5f 93       	push	r21
    207a:	6f 93       	push	r22
    207c:	7f 93       	push	r23
    207e:	8f 93       	push	r24
    2080:	9f 93       	push	r25
    2082:	af 93       	push	r26
    2084:	bf 93       	push	r27
    2086:	ef 93       	push	r30
    2088:	ff 93       	push	r31
	// read message into package buffer
	if (!m_rf_read(package, 10)) {
    208a:	6a e0       	ldi	r22, 0x0A	; 10
    208c:	8a e8       	ldi	r24, 0x8A	; 138
    208e:	91 e0       	ldi	r25, 0x01	; 1
    2090:	0e 94 10 03 	call	0x620	; 0x620 <m_rf_read>
    2094:	81 11       	cpse	r24, r1
    2096:	04 c0       	rjmp	.+8      	; 0x20a0 <__vector_3+0x38>
		// Default to pause if command not read
		package[0] = 0xA4;
    2098:	84 ea       	ldi	r24, 0xA4	; 164
    209a:	80 93 8a 01 	sts	0x018A, r24	; 0x80018a <package>
    209e:	12 c0       	rjmp	.+36     	; 0x20c4 <__vector_3+0x5c>
	} else {
		m_green(ON);
    20a0:	6a 9a       	sbi	0x0d, 2	; 13
    20a2:	72 98       	cbi	0x0e, 2	; 14
	}
	
	switch(package[0]){
    20a4:	80 91 8a 01 	lds	r24, 0x018A	; 0x80018a <package>
    20a8:	84 3a       	cpi	r24, 0xA4	; 164
    20aa:	61 f0       	breq	.+24     	; 0x20c4 <__vector_3+0x5c>
    20ac:	18 f4       	brcc	.+6      	; 0x20b4 <__vector_3+0x4c>
    20ae:	81 3a       	cpi	r24, 0xA1	; 161
    20b0:	29 f0       	breq	.+10     	; 0x20bc <__vector_3+0x54>
    20b2:	0a c0       	rjmp	.+20     	; 0x20c8 <__vector_3+0x60>
    20b4:	86 5a       	subi	r24, 0xA6	; 166
    20b6:	82 30       	cpi	r24, 0x02	; 2
    20b8:	38 f4       	brcc	.+14     	; 0x20c8 <__vector_3+0x60>
    20ba:	04 c0       	rjmp	.+8      	; 0x20c4 <__vector_3+0x5c>
			// flash LED 
			break;
		case 0xA1:	// Play command
			// light LED
			// set flag to play!
			active = true;
    20bc:	81 e0       	ldi	r24, 0x01	; 1
    20be:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <active>
			break;
    20c2:	02 c0       	rjmp	.+4      	; 0x20c8 <__vector_3+0x60>
		case 0xA5:
			break;
		case 0xA4:
		case 0xA6:
		case 0xA7:
			active = false;
    20c4:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <active>
	}
    20c8:	ff 91       	pop	r31
    20ca:	ef 91       	pop	r30
    20cc:	bf 91       	pop	r27
    20ce:	af 91       	pop	r26
    20d0:	9f 91       	pop	r25
    20d2:	8f 91       	pop	r24
    20d4:	7f 91       	pop	r23
    20d6:	6f 91       	pop	r22
    20d8:	5f 91       	pop	r21
    20da:	4f 91       	pop	r20
    20dc:	3f 91       	pop	r19
    20de:	2f 91       	pop	r18
    20e0:	0f 90       	pop	r0
    20e2:	0f be       	out	0x3f, r0	; 63
    20e4:	0f 90       	pop	r0
    20e6:	1f 90       	pop	r1
    20e8:	18 95       	reti

000020ea <__subsf3>:
    20ea:	50 58       	subi	r21, 0x80	; 128

000020ec <__addsf3>:
    20ec:	bb 27       	eor	r27, r27
    20ee:	aa 27       	eor	r26, r26
    20f0:	0e 94 8d 10 	call	0x211a	; 0x211a <__addsf3x>
    20f4:	0c 94 d0 12 	jmp	0x25a0	; 0x25a0 <__fp_round>
    20f8:	0e 94 97 12 	call	0x252e	; 0x252e <__fp_pscA>
    20fc:	38 f0       	brcs	.+14     	; 0x210c <__addsf3+0x20>
    20fe:	0e 94 9e 12 	call	0x253c	; 0x253c <__fp_pscB>
    2102:	20 f0       	brcs	.+8      	; 0x210c <__addsf3+0x20>
    2104:	39 f4       	brne	.+14     	; 0x2114 <__addsf3+0x28>
    2106:	9f 3f       	cpi	r25, 0xFF	; 255
    2108:	19 f4       	brne	.+6      	; 0x2110 <__addsf3+0x24>
    210a:	26 f4       	brtc	.+8      	; 0x2114 <__addsf3+0x28>
    210c:	0c 94 6d 12 	jmp	0x24da	; 0x24da <__fp_nan>
    2110:	0e f4       	brtc	.+2      	; 0x2114 <__addsf3+0x28>
    2112:	e0 95       	com	r30
    2114:	e7 fb       	bst	r30, 7
    2116:	0c 94 67 12 	jmp	0x24ce	; 0x24ce <__fp_inf>

0000211a <__addsf3x>:
    211a:	e9 2f       	mov	r30, r25
    211c:	0e 94 f5 12 	call	0x25ea	; 0x25ea <__fp_split3>
    2120:	58 f3       	brcs	.-42     	; 0x20f8 <__addsf3+0xc>
    2122:	ba 17       	cp	r27, r26
    2124:	62 07       	cpc	r22, r18
    2126:	73 07       	cpc	r23, r19
    2128:	84 07       	cpc	r24, r20
    212a:	95 07       	cpc	r25, r21
    212c:	20 f0       	brcs	.+8      	; 0x2136 <__addsf3x+0x1c>
    212e:	79 f4       	brne	.+30     	; 0x214e <__addsf3x+0x34>
    2130:	a6 f5       	brtc	.+104    	; 0x219a <__addsf3x+0x80>
    2132:	0c 94 17 13 	jmp	0x262e	; 0x262e <__fp_zero>
    2136:	0e f4       	brtc	.+2      	; 0x213a <__addsf3x+0x20>
    2138:	e0 95       	com	r30
    213a:	0b 2e       	mov	r0, r27
    213c:	ba 2f       	mov	r27, r26
    213e:	a0 2d       	mov	r26, r0
    2140:	0b 01       	movw	r0, r22
    2142:	b9 01       	movw	r22, r18
    2144:	90 01       	movw	r18, r0
    2146:	0c 01       	movw	r0, r24
    2148:	ca 01       	movw	r24, r20
    214a:	a0 01       	movw	r20, r0
    214c:	11 24       	eor	r1, r1
    214e:	ff 27       	eor	r31, r31
    2150:	59 1b       	sub	r21, r25
    2152:	99 f0       	breq	.+38     	; 0x217a <__addsf3x+0x60>
    2154:	59 3f       	cpi	r21, 0xF9	; 249
    2156:	50 f4       	brcc	.+20     	; 0x216c <__addsf3x+0x52>
    2158:	50 3e       	cpi	r21, 0xE0	; 224
    215a:	68 f1       	brcs	.+90     	; 0x21b6 <__addsf3x+0x9c>
    215c:	1a 16       	cp	r1, r26
    215e:	f0 40       	sbci	r31, 0x00	; 0
    2160:	a2 2f       	mov	r26, r18
    2162:	23 2f       	mov	r18, r19
    2164:	34 2f       	mov	r19, r20
    2166:	44 27       	eor	r20, r20
    2168:	58 5f       	subi	r21, 0xF8	; 248
    216a:	f3 cf       	rjmp	.-26     	; 0x2152 <__addsf3x+0x38>
    216c:	46 95       	lsr	r20
    216e:	37 95       	ror	r19
    2170:	27 95       	ror	r18
    2172:	a7 95       	ror	r26
    2174:	f0 40       	sbci	r31, 0x00	; 0
    2176:	53 95       	inc	r21
    2178:	c9 f7       	brne	.-14     	; 0x216c <__addsf3x+0x52>
    217a:	7e f4       	brtc	.+30     	; 0x219a <__addsf3x+0x80>
    217c:	1f 16       	cp	r1, r31
    217e:	ba 0b       	sbc	r27, r26
    2180:	62 0b       	sbc	r22, r18
    2182:	73 0b       	sbc	r23, r19
    2184:	84 0b       	sbc	r24, r20
    2186:	ba f0       	brmi	.+46     	; 0x21b6 <__addsf3x+0x9c>
    2188:	91 50       	subi	r25, 0x01	; 1
    218a:	a1 f0       	breq	.+40     	; 0x21b4 <__addsf3x+0x9a>
    218c:	ff 0f       	add	r31, r31
    218e:	bb 1f       	adc	r27, r27
    2190:	66 1f       	adc	r22, r22
    2192:	77 1f       	adc	r23, r23
    2194:	88 1f       	adc	r24, r24
    2196:	c2 f7       	brpl	.-16     	; 0x2188 <__addsf3x+0x6e>
    2198:	0e c0       	rjmp	.+28     	; 0x21b6 <__addsf3x+0x9c>
    219a:	ba 0f       	add	r27, r26
    219c:	62 1f       	adc	r22, r18
    219e:	73 1f       	adc	r23, r19
    21a0:	84 1f       	adc	r24, r20
    21a2:	48 f4       	brcc	.+18     	; 0x21b6 <__addsf3x+0x9c>
    21a4:	87 95       	ror	r24
    21a6:	77 95       	ror	r23
    21a8:	67 95       	ror	r22
    21aa:	b7 95       	ror	r27
    21ac:	f7 95       	ror	r31
    21ae:	9e 3f       	cpi	r25, 0xFE	; 254
    21b0:	08 f0       	brcs	.+2      	; 0x21b4 <__addsf3x+0x9a>
    21b2:	b0 cf       	rjmp	.-160    	; 0x2114 <__addsf3+0x28>
    21b4:	93 95       	inc	r25
    21b6:	88 0f       	add	r24, r24
    21b8:	08 f0       	brcs	.+2      	; 0x21bc <__addsf3x+0xa2>
    21ba:	99 27       	eor	r25, r25
    21bc:	ee 0f       	add	r30, r30
    21be:	97 95       	ror	r25
    21c0:	87 95       	ror	r24
    21c2:	08 95       	ret
    21c4:	0e 94 97 12 	call	0x252e	; 0x252e <__fp_pscA>
    21c8:	60 f0       	brcs	.+24     	; 0x21e2 <__addsf3x+0xc8>
    21ca:	80 e8       	ldi	r24, 0x80	; 128
    21cc:	91 e0       	ldi	r25, 0x01	; 1
    21ce:	09 f4       	brne	.+2      	; 0x21d2 <__addsf3x+0xb8>
    21d0:	9e ef       	ldi	r25, 0xFE	; 254
    21d2:	0e 94 9e 12 	call	0x253c	; 0x253c <__fp_pscB>
    21d6:	28 f0       	brcs	.+10     	; 0x21e2 <__addsf3x+0xc8>
    21d8:	40 e8       	ldi	r20, 0x80	; 128
    21da:	51 e0       	ldi	r21, 0x01	; 1
    21dc:	71 f4       	brne	.+28     	; 0x21fa <atan2+0x10>
    21de:	5e ef       	ldi	r21, 0xFE	; 254
    21e0:	0c c0       	rjmp	.+24     	; 0x21fa <atan2+0x10>
    21e2:	0c 94 6d 12 	jmp	0x24da	; 0x24da <__fp_nan>
    21e6:	0c 94 17 13 	jmp	0x262e	; 0x262e <__fp_zero>

000021ea <atan2>:
    21ea:	e9 2f       	mov	r30, r25
    21ec:	e0 78       	andi	r30, 0x80	; 128
    21ee:	0e 94 f5 12 	call	0x25ea	; 0x25ea <__fp_split3>
    21f2:	40 f3       	brcs	.-48     	; 0x21c4 <__addsf3x+0xaa>
    21f4:	09 2e       	mov	r0, r25
    21f6:	05 2a       	or	r0, r21
    21f8:	b1 f3       	breq	.-20     	; 0x21e6 <__addsf3x+0xcc>
    21fa:	26 17       	cp	r18, r22
    21fc:	37 07       	cpc	r19, r23
    21fe:	48 07       	cpc	r20, r24
    2200:	59 07       	cpc	r21, r25
    2202:	38 f0       	brcs	.+14     	; 0x2212 <atan2+0x28>
    2204:	0e 2e       	mov	r0, r30
    2206:	07 f8       	bld	r0, 7
    2208:	e0 25       	eor	r30, r0
    220a:	69 f0       	breq	.+26     	; 0x2226 <atan2+0x3c>
    220c:	e0 25       	eor	r30, r0
    220e:	e0 64       	ori	r30, 0x40	; 64
    2210:	0a c0       	rjmp	.+20     	; 0x2226 <atan2+0x3c>
    2212:	ef 63       	ori	r30, 0x3F	; 63
    2214:	07 f8       	bld	r0, 7
    2216:	00 94       	com	r0
    2218:	07 fa       	bst	r0, 7
    221a:	db 01       	movw	r26, r22
    221c:	b9 01       	movw	r22, r18
    221e:	9d 01       	movw	r18, r26
    2220:	dc 01       	movw	r26, r24
    2222:	ca 01       	movw	r24, r20
    2224:	ad 01       	movw	r20, r26
    2226:	ef 93       	push	r30
    2228:	0e 94 75 11 	call	0x22ea	; 0x22ea <__divsf3_pse>
    222c:	0e 94 d0 12 	call	0x25a0	; 0x25a0 <__fp_round>
    2230:	0e 94 25 11 	call	0x224a	; 0x224a <atan>
    2234:	5f 91       	pop	r21
    2236:	55 23       	and	r21, r21
    2238:	39 f0       	breq	.+14     	; 0x2248 <atan2+0x5e>
    223a:	2b ed       	ldi	r18, 0xDB	; 219
    223c:	3f e0       	ldi	r19, 0x0F	; 15
    223e:	49 e4       	ldi	r20, 0x49	; 73
    2240:	50 fd       	sbrc	r21, 0
    2242:	49 ec       	ldi	r20, 0xC9	; 201
    2244:	0c 94 76 10 	jmp	0x20ec	; 0x20ec <__addsf3>
    2248:	08 95       	ret

0000224a <atan>:
    224a:	df 93       	push	r29
    224c:	dd 27       	eor	r29, r29
    224e:	b9 2f       	mov	r27, r25
    2250:	bf 77       	andi	r27, 0x7F	; 127
    2252:	40 e8       	ldi	r20, 0x80	; 128
    2254:	5f e3       	ldi	r21, 0x3F	; 63
    2256:	16 16       	cp	r1, r22
    2258:	17 06       	cpc	r1, r23
    225a:	48 07       	cpc	r20, r24
    225c:	5b 07       	cpc	r21, r27
    225e:	18 f4       	brcc	.+6      	; 0x2266 <atan+0x1c>
    2260:	d9 2f       	mov	r29, r25
    2262:	0e 94 23 13 	call	0x2646	; 0x2646 <inverse>
    2266:	9f 93       	push	r25
    2268:	8f 93       	push	r24
    226a:	7f 93       	push	r23
    226c:	6f 93       	push	r22
    226e:	0e 94 f0 13 	call	0x27e0	; 0x27e0 <square>
    2272:	ec ea       	ldi	r30, 0xAC	; 172
    2274:	f0 e0       	ldi	r31, 0x00	; 0
    2276:	0e 94 70 12 	call	0x24e0	; 0x24e0 <__fp_powser>
    227a:	0e 94 d0 12 	call	0x25a0	; 0x25a0 <__fp_round>
    227e:	2f 91       	pop	r18
    2280:	3f 91       	pop	r19
    2282:	4f 91       	pop	r20
    2284:	5f 91       	pop	r21
    2286:	0e 94 3e 13 	call	0x267c	; 0x267c <__mulsf3x>
    228a:	dd 23       	and	r29, r29
    228c:	51 f0       	breq	.+20     	; 0x22a2 <atan+0x58>
    228e:	90 58       	subi	r25, 0x80	; 128
    2290:	a2 ea       	ldi	r26, 0xA2	; 162
    2292:	2a ed       	ldi	r18, 0xDA	; 218
    2294:	3f e0       	ldi	r19, 0x0F	; 15
    2296:	49 ec       	ldi	r20, 0xC9	; 201
    2298:	5f e3       	ldi	r21, 0x3F	; 63
    229a:	d0 78       	andi	r29, 0x80	; 128
    229c:	5d 27       	eor	r21, r29
    229e:	0e 94 8d 10 	call	0x211a	; 0x211a <__addsf3x>
    22a2:	df 91       	pop	r29
    22a4:	0c 94 d0 12 	jmp	0x25a0	; 0x25a0 <__fp_round>

000022a8 <__cmpsf2>:
    22a8:	0e 94 43 12 	call	0x2486	; 0x2486 <__fp_cmp>
    22ac:	08 f4       	brcc	.+2      	; 0x22b0 <__cmpsf2+0x8>
    22ae:	81 e0       	ldi	r24, 0x01	; 1
    22b0:	08 95       	ret

000022b2 <cos>:
    22b2:	0e 94 a7 12 	call	0x254e	; 0x254e <__fp_rempio2>
    22b6:	e3 95       	inc	r30
    22b8:	0c 94 e1 12 	jmp	0x25c2	; 0x25c2 <__fp_sinus>

000022bc <__divsf3>:
    22bc:	0e 94 72 11 	call	0x22e4	; 0x22e4 <__divsf3x>
    22c0:	0c 94 d0 12 	jmp	0x25a0	; 0x25a0 <__fp_round>
    22c4:	0e 94 9e 12 	call	0x253c	; 0x253c <__fp_pscB>
    22c8:	58 f0       	brcs	.+22     	; 0x22e0 <__divsf3+0x24>
    22ca:	0e 94 97 12 	call	0x252e	; 0x252e <__fp_pscA>
    22ce:	40 f0       	brcs	.+16     	; 0x22e0 <__divsf3+0x24>
    22d0:	29 f4       	brne	.+10     	; 0x22dc <__divsf3+0x20>
    22d2:	5f 3f       	cpi	r21, 0xFF	; 255
    22d4:	29 f0       	breq	.+10     	; 0x22e0 <__divsf3+0x24>
    22d6:	0c 94 67 12 	jmp	0x24ce	; 0x24ce <__fp_inf>
    22da:	51 11       	cpse	r21, r1
    22dc:	0c 94 18 13 	jmp	0x2630	; 0x2630 <__fp_szero>
    22e0:	0c 94 6d 12 	jmp	0x24da	; 0x24da <__fp_nan>

000022e4 <__divsf3x>:
    22e4:	0e 94 f5 12 	call	0x25ea	; 0x25ea <__fp_split3>
    22e8:	68 f3       	brcs	.-38     	; 0x22c4 <__divsf3+0x8>

000022ea <__divsf3_pse>:
    22ea:	99 23       	and	r25, r25
    22ec:	b1 f3       	breq	.-20     	; 0x22da <__divsf3+0x1e>
    22ee:	55 23       	and	r21, r21
    22f0:	91 f3       	breq	.-28     	; 0x22d6 <__divsf3+0x1a>
    22f2:	95 1b       	sub	r25, r21
    22f4:	55 0b       	sbc	r21, r21
    22f6:	bb 27       	eor	r27, r27
    22f8:	aa 27       	eor	r26, r26
    22fa:	62 17       	cp	r22, r18
    22fc:	73 07       	cpc	r23, r19
    22fe:	84 07       	cpc	r24, r20
    2300:	38 f0       	brcs	.+14     	; 0x2310 <__divsf3_pse+0x26>
    2302:	9f 5f       	subi	r25, 0xFF	; 255
    2304:	5f 4f       	sbci	r21, 0xFF	; 255
    2306:	22 0f       	add	r18, r18
    2308:	33 1f       	adc	r19, r19
    230a:	44 1f       	adc	r20, r20
    230c:	aa 1f       	adc	r26, r26
    230e:	a9 f3       	breq	.-22     	; 0x22fa <__divsf3_pse+0x10>
    2310:	35 d0       	rcall	.+106    	; 0x237c <__divsf3_pse+0x92>
    2312:	0e 2e       	mov	r0, r30
    2314:	3a f0       	brmi	.+14     	; 0x2324 <__divsf3_pse+0x3a>
    2316:	e0 e8       	ldi	r30, 0x80	; 128
    2318:	32 d0       	rcall	.+100    	; 0x237e <__divsf3_pse+0x94>
    231a:	91 50       	subi	r25, 0x01	; 1
    231c:	50 40       	sbci	r21, 0x00	; 0
    231e:	e6 95       	lsr	r30
    2320:	00 1c       	adc	r0, r0
    2322:	ca f7       	brpl	.-14     	; 0x2316 <__divsf3_pse+0x2c>
    2324:	2b d0       	rcall	.+86     	; 0x237c <__divsf3_pse+0x92>
    2326:	fe 2f       	mov	r31, r30
    2328:	29 d0       	rcall	.+82     	; 0x237c <__divsf3_pse+0x92>
    232a:	66 0f       	add	r22, r22
    232c:	77 1f       	adc	r23, r23
    232e:	88 1f       	adc	r24, r24
    2330:	bb 1f       	adc	r27, r27
    2332:	26 17       	cp	r18, r22
    2334:	37 07       	cpc	r19, r23
    2336:	48 07       	cpc	r20, r24
    2338:	ab 07       	cpc	r26, r27
    233a:	b0 e8       	ldi	r27, 0x80	; 128
    233c:	09 f0       	breq	.+2      	; 0x2340 <__divsf3_pse+0x56>
    233e:	bb 0b       	sbc	r27, r27
    2340:	80 2d       	mov	r24, r0
    2342:	bf 01       	movw	r22, r30
    2344:	ff 27       	eor	r31, r31
    2346:	93 58       	subi	r25, 0x83	; 131
    2348:	5f 4f       	sbci	r21, 0xFF	; 255
    234a:	3a f0       	brmi	.+14     	; 0x235a <__divsf3_pse+0x70>
    234c:	9e 3f       	cpi	r25, 0xFE	; 254
    234e:	51 05       	cpc	r21, r1
    2350:	78 f0       	brcs	.+30     	; 0x2370 <__divsf3_pse+0x86>
    2352:	0c 94 67 12 	jmp	0x24ce	; 0x24ce <__fp_inf>
    2356:	0c 94 18 13 	jmp	0x2630	; 0x2630 <__fp_szero>
    235a:	5f 3f       	cpi	r21, 0xFF	; 255
    235c:	e4 f3       	brlt	.-8      	; 0x2356 <__divsf3_pse+0x6c>
    235e:	98 3e       	cpi	r25, 0xE8	; 232
    2360:	d4 f3       	brlt	.-12     	; 0x2356 <__divsf3_pse+0x6c>
    2362:	86 95       	lsr	r24
    2364:	77 95       	ror	r23
    2366:	67 95       	ror	r22
    2368:	b7 95       	ror	r27
    236a:	f7 95       	ror	r31
    236c:	9f 5f       	subi	r25, 0xFF	; 255
    236e:	c9 f7       	brne	.-14     	; 0x2362 <__divsf3_pse+0x78>
    2370:	88 0f       	add	r24, r24
    2372:	91 1d       	adc	r25, r1
    2374:	96 95       	lsr	r25
    2376:	87 95       	ror	r24
    2378:	97 f9       	bld	r25, 7
    237a:	08 95       	ret
    237c:	e1 e0       	ldi	r30, 0x01	; 1
    237e:	66 0f       	add	r22, r22
    2380:	77 1f       	adc	r23, r23
    2382:	88 1f       	adc	r24, r24
    2384:	bb 1f       	adc	r27, r27
    2386:	62 17       	cp	r22, r18
    2388:	73 07       	cpc	r23, r19
    238a:	84 07       	cpc	r24, r20
    238c:	ba 07       	cpc	r27, r26
    238e:	20 f0       	brcs	.+8      	; 0x2398 <__divsf3_pse+0xae>
    2390:	62 1b       	sub	r22, r18
    2392:	73 0b       	sbc	r23, r19
    2394:	84 0b       	sbc	r24, r20
    2396:	ba 0b       	sbc	r27, r26
    2398:	ee 1f       	adc	r30, r30
    239a:	88 f7       	brcc	.-30     	; 0x237e <__divsf3_pse+0x94>
    239c:	e0 95       	com	r30
    239e:	08 95       	ret

000023a0 <__fixsfsi>:
    23a0:	0e 94 d7 11 	call	0x23ae	; 0x23ae <__fixunssfsi>
    23a4:	68 94       	set
    23a6:	b1 11       	cpse	r27, r1
    23a8:	0c 94 18 13 	jmp	0x2630	; 0x2630 <__fp_szero>
    23ac:	08 95       	ret

000023ae <__fixunssfsi>:
    23ae:	0e 94 fd 12 	call	0x25fa	; 0x25fa <__fp_splitA>
    23b2:	88 f0       	brcs	.+34     	; 0x23d6 <__fixunssfsi+0x28>
    23b4:	9f 57       	subi	r25, 0x7F	; 127
    23b6:	98 f0       	brcs	.+38     	; 0x23de <__fixunssfsi+0x30>
    23b8:	b9 2f       	mov	r27, r25
    23ba:	99 27       	eor	r25, r25
    23bc:	b7 51       	subi	r27, 0x17	; 23
    23be:	b0 f0       	brcs	.+44     	; 0x23ec <__fixunssfsi+0x3e>
    23c0:	e1 f0       	breq	.+56     	; 0x23fa <__fixunssfsi+0x4c>
    23c2:	66 0f       	add	r22, r22
    23c4:	77 1f       	adc	r23, r23
    23c6:	88 1f       	adc	r24, r24
    23c8:	99 1f       	adc	r25, r25
    23ca:	1a f0       	brmi	.+6      	; 0x23d2 <__fixunssfsi+0x24>
    23cc:	ba 95       	dec	r27
    23ce:	c9 f7       	brne	.-14     	; 0x23c2 <__fixunssfsi+0x14>
    23d0:	14 c0       	rjmp	.+40     	; 0x23fa <__fixunssfsi+0x4c>
    23d2:	b1 30       	cpi	r27, 0x01	; 1
    23d4:	91 f0       	breq	.+36     	; 0x23fa <__fixunssfsi+0x4c>
    23d6:	0e 94 17 13 	call	0x262e	; 0x262e <__fp_zero>
    23da:	b1 e0       	ldi	r27, 0x01	; 1
    23dc:	08 95       	ret
    23de:	0c 94 17 13 	jmp	0x262e	; 0x262e <__fp_zero>
    23e2:	67 2f       	mov	r22, r23
    23e4:	78 2f       	mov	r23, r24
    23e6:	88 27       	eor	r24, r24
    23e8:	b8 5f       	subi	r27, 0xF8	; 248
    23ea:	39 f0       	breq	.+14     	; 0x23fa <__fixunssfsi+0x4c>
    23ec:	b9 3f       	cpi	r27, 0xF9	; 249
    23ee:	cc f3       	brlt	.-14     	; 0x23e2 <__fixunssfsi+0x34>
    23f0:	86 95       	lsr	r24
    23f2:	77 95       	ror	r23
    23f4:	67 95       	ror	r22
    23f6:	b3 95       	inc	r27
    23f8:	d9 f7       	brne	.-10     	; 0x23f0 <__fixunssfsi+0x42>
    23fa:	3e f4       	brtc	.+14     	; 0x240a <__fixunssfsi+0x5c>
    23fc:	90 95       	com	r25
    23fe:	80 95       	com	r24
    2400:	70 95       	com	r23
    2402:	61 95       	neg	r22
    2404:	7f 4f       	sbci	r23, 0xFF	; 255
    2406:	8f 4f       	sbci	r24, 0xFF	; 255
    2408:	9f 4f       	sbci	r25, 0xFF	; 255
    240a:	08 95       	ret

0000240c <__floatunsisf>:
    240c:	e8 94       	clt
    240e:	09 c0       	rjmp	.+18     	; 0x2422 <__floatsisf+0x12>

00002410 <__floatsisf>:
    2410:	97 fb       	bst	r25, 7
    2412:	3e f4       	brtc	.+14     	; 0x2422 <__floatsisf+0x12>
    2414:	90 95       	com	r25
    2416:	80 95       	com	r24
    2418:	70 95       	com	r23
    241a:	61 95       	neg	r22
    241c:	7f 4f       	sbci	r23, 0xFF	; 255
    241e:	8f 4f       	sbci	r24, 0xFF	; 255
    2420:	9f 4f       	sbci	r25, 0xFF	; 255
    2422:	99 23       	and	r25, r25
    2424:	a9 f0       	breq	.+42     	; 0x2450 <__floatsisf+0x40>
    2426:	f9 2f       	mov	r31, r25
    2428:	96 e9       	ldi	r25, 0x96	; 150
    242a:	bb 27       	eor	r27, r27
    242c:	93 95       	inc	r25
    242e:	f6 95       	lsr	r31
    2430:	87 95       	ror	r24
    2432:	77 95       	ror	r23
    2434:	67 95       	ror	r22
    2436:	b7 95       	ror	r27
    2438:	f1 11       	cpse	r31, r1
    243a:	f8 cf       	rjmp	.-16     	; 0x242c <__floatsisf+0x1c>
    243c:	fa f4       	brpl	.+62     	; 0x247c <__floatsisf+0x6c>
    243e:	bb 0f       	add	r27, r27
    2440:	11 f4       	brne	.+4      	; 0x2446 <__floatsisf+0x36>
    2442:	60 ff       	sbrs	r22, 0
    2444:	1b c0       	rjmp	.+54     	; 0x247c <__floatsisf+0x6c>
    2446:	6f 5f       	subi	r22, 0xFF	; 255
    2448:	7f 4f       	sbci	r23, 0xFF	; 255
    244a:	8f 4f       	sbci	r24, 0xFF	; 255
    244c:	9f 4f       	sbci	r25, 0xFF	; 255
    244e:	16 c0       	rjmp	.+44     	; 0x247c <__floatsisf+0x6c>
    2450:	88 23       	and	r24, r24
    2452:	11 f0       	breq	.+4      	; 0x2458 <__floatsisf+0x48>
    2454:	96 e9       	ldi	r25, 0x96	; 150
    2456:	11 c0       	rjmp	.+34     	; 0x247a <__floatsisf+0x6a>
    2458:	77 23       	and	r23, r23
    245a:	21 f0       	breq	.+8      	; 0x2464 <__floatsisf+0x54>
    245c:	9e e8       	ldi	r25, 0x8E	; 142
    245e:	87 2f       	mov	r24, r23
    2460:	76 2f       	mov	r23, r22
    2462:	05 c0       	rjmp	.+10     	; 0x246e <__floatsisf+0x5e>
    2464:	66 23       	and	r22, r22
    2466:	71 f0       	breq	.+28     	; 0x2484 <__floatsisf+0x74>
    2468:	96 e8       	ldi	r25, 0x86	; 134
    246a:	86 2f       	mov	r24, r22
    246c:	70 e0       	ldi	r23, 0x00	; 0
    246e:	60 e0       	ldi	r22, 0x00	; 0
    2470:	2a f0       	brmi	.+10     	; 0x247c <__floatsisf+0x6c>
    2472:	9a 95       	dec	r25
    2474:	66 0f       	add	r22, r22
    2476:	77 1f       	adc	r23, r23
    2478:	88 1f       	adc	r24, r24
    247a:	da f7       	brpl	.-10     	; 0x2472 <__floatsisf+0x62>
    247c:	88 0f       	add	r24, r24
    247e:	96 95       	lsr	r25
    2480:	87 95       	ror	r24
    2482:	97 f9       	bld	r25, 7
    2484:	08 95       	ret

00002486 <__fp_cmp>:
    2486:	99 0f       	add	r25, r25
    2488:	00 08       	sbc	r0, r0
    248a:	55 0f       	add	r21, r21
    248c:	aa 0b       	sbc	r26, r26
    248e:	e0 e8       	ldi	r30, 0x80	; 128
    2490:	fe ef       	ldi	r31, 0xFE	; 254
    2492:	16 16       	cp	r1, r22
    2494:	17 06       	cpc	r1, r23
    2496:	e8 07       	cpc	r30, r24
    2498:	f9 07       	cpc	r31, r25
    249a:	c0 f0       	brcs	.+48     	; 0x24cc <__fp_cmp+0x46>
    249c:	12 16       	cp	r1, r18
    249e:	13 06       	cpc	r1, r19
    24a0:	e4 07       	cpc	r30, r20
    24a2:	f5 07       	cpc	r31, r21
    24a4:	98 f0       	brcs	.+38     	; 0x24cc <__fp_cmp+0x46>
    24a6:	62 1b       	sub	r22, r18
    24a8:	73 0b       	sbc	r23, r19
    24aa:	84 0b       	sbc	r24, r20
    24ac:	95 0b       	sbc	r25, r21
    24ae:	39 f4       	brne	.+14     	; 0x24be <__fp_cmp+0x38>
    24b0:	0a 26       	eor	r0, r26
    24b2:	61 f0       	breq	.+24     	; 0x24cc <__fp_cmp+0x46>
    24b4:	23 2b       	or	r18, r19
    24b6:	24 2b       	or	r18, r20
    24b8:	25 2b       	or	r18, r21
    24ba:	21 f4       	brne	.+8      	; 0x24c4 <__fp_cmp+0x3e>
    24bc:	08 95       	ret
    24be:	0a 26       	eor	r0, r26
    24c0:	09 f4       	brne	.+2      	; 0x24c4 <__fp_cmp+0x3e>
    24c2:	a1 40       	sbci	r26, 0x01	; 1
    24c4:	a6 95       	lsr	r26
    24c6:	8f ef       	ldi	r24, 0xFF	; 255
    24c8:	81 1d       	adc	r24, r1
    24ca:	81 1d       	adc	r24, r1
    24cc:	08 95       	ret

000024ce <__fp_inf>:
    24ce:	97 f9       	bld	r25, 7
    24d0:	9f 67       	ori	r25, 0x7F	; 127
    24d2:	80 e8       	ldi	r24, 0x80	; 128
    24d4:	70 e0       	ldi	r23, 0x00	; 0
    24d6:	60 e0       	ldi	r22, 0x00	; 0
    24d8:	08 95       	ret

000024da <__fp_nan>:
    24da:	9f ef       	ldi	r25, 0xFF	; 255
    24dc:	80 ec       	ldi	r24, 0xC0	; 192
    24de:	08 95       	ret

000024e0 <__fp_powser>:
    24e0:	df 93       	push	r29
    24e2:	cf 93       	push	r28
    24e4:	1f 93       	push	r17
    24e6:	0f 93       	push	r16
    24e8:	ff 92       	push	r15
    24ea:	ef 92       	push	r14
    24ec:	df 92       	push	r13
    24ee:	7b 01       	movw	r14, r22
    24f0:	8c 01       	movw	r16, r24
    24f2:	68 94       	set
    24f4:	06 c0       	rjmp	.+12     	; 0x2502 <__fp_powser+0x22>
    24f6:	da 2e       	mov	r13, r26
    24f8:	ef 01       	movw	r28, r30
    24fa:	0e 94 3e 13 	call	0x267c	; 0x267c <__mulsf3x>
    24fe:	fe 01       	movw	r30, r28
    2500:	e8 94       	clt
    2502:	a5 91       	lpm	r26, Z+
    2504:	25 91       	lpm	r18, Z+
    2506:	35 91       	lpm	r19, Z+
    2508:	45 91       	lpm	r20, Z+
    250a:	55 91       	lpm	r21, Z+
    250c:	a6 f3       	brts	.-24     	; 0x24f6 <__fp_powser+0x16>
    250e:	ef 01       	movw	r28, r30
    2510:	0e 94 8d 10 	call	0x211a	; 0x211a <__addsf3x>
    2514:	fe 01       	movw	r30, r28
    2516:	97 01       	movw	r18, r14
    2518:	a8 01       	movw	r20, r16
    251a:	da 94       	dec	r13
    251c:	69 f7       	brne	.-38     	; 0x24f8 <__fp_powser+0x18>
    251e:	df 90       	pop	r13
    2520:	ef 90       	pop	r14
    2522:	ff 90       	pop	r15
    2524:	0f 91       	pop	r16
    2526:	1f 91       	pop	r17
    2528:	cf 91       	pop	r28
    252a:	df 91       	pop	r29
    252c:	08 95       	ret

0000252e <__fp_pscA>:
    252e:	00 24       	eor	r0, r0
    2530:	0a 94       	dec	r0
    2532:	16 16       	cp	r1, r22
    2534:	17 06       	cpc	r1, r23
    2536:	18 06       	cpc	r1, r24
    2538:	09 06       	cpc	r0, r25
    253a:	08 95       	ret

0000253c <__fp_pscB>:
    253c:	00 24       	eor	r0, r0
    253e:	0a 94       	dec	r0
    2540:	12 16       	cp	r1, r18
    2542:	13 06       	cpc	r1, r19
    2544:	14 06       	cpc	r1, r20
    2546:	05 06       	cpc	r0, r21
    2548:	08 95       	ret
    254a:	0c 94 6d 12 	jmp	0x24da	; 0x24da <__fp_nan>

0000254e <__fp_rempio2>:
    254e:	0e 94 fd 12 	call	0x25fa	; 0x25fa <__fp_splitA>
    2552:	d8 f3       	brcs	.-10     	; 0x254a <__fp_pscB+0xe>
    2554:	e8 94       	clt
    2556:	e0 e0       	ldi	r30, 0x00	; 0
    2558:	bb 27       	eor	r27, r27
    255a:	9f 57       	subi	r25, 0x7F	; 127
    255c:	f0 f0       	brcs	.+60     	; 0x259a <__fp_rempio2+0x4c>
    255e:	2a ed       	ldi	r18, 0xDA	; 218
    2560:	3f e0       	ldi	r19, 0x0F	; 15
    2562:	49 ec       	ldi	r20, 0xC9	; 201
    2564:	06 c0       	rjmp	.+12     	; 0x2572 <__fp_rempio2+0x24>
    2566:	ee 0f       	add	r30, r30
    2568:	bb 0f       	add	r27, r27
    256a:	66 1f       	adc	r22, r22
    256c:	77 1f       	adc	r23, r23
    256e:	88 1f       	adc	r24, r24
    2570:	28 f0       	brcs	.+10     	; 0x257c <__fp_rempio2+0x2e>
    2572:	b2 3a       	cpi	r27, 0xA2	; 162
    2574:	62 07       	cpc	r22, r18
    2576:	73 07       	cpc	r23, r19
    2578:	84 07       	cpc	r24, r20
    257a:	28 f0       	brcs	.+10     	; 0x2586 <__fp_rempio2+0x38>
    257c:	b2 5a       	subi	r27, 0xA2	; 162
    257e:	62 0b       	sbc	r22, r18
    2580:	73 0b       	sbc	r23, r19
    2582:	84 0b       	sbc	r24, r20
    2584:	e3 95       	inc	r30
    2586:	9a 95       	dec	r25
    2588:	72 f7       	brpl	.-36     	; 0x2566 <__fp_rempio2+0x18>
    258a:	80 38       	cpi	r24, 0x80	; 128
    258c:	30 f4       	brcc	.+12     	; 0x259a <__fp_rempio2+0x4c>
    258e:	9a 95       	dec	r25
    2590:	bb 0f       	add	r27, r27
    2592:	66 1f       	adc	r22, r22
    2594:	77 1f       	adc	r23, r23
    2596:	88 1f       	adc	r24, r24
    2598:	d2 f7       	brpl	.-12     	; 0x258e <__fp_rempio2+0x40>
    259a:	90 48       	sbci	r25, 0x80	; 128
    259c:	0c 94 30 14 	jmp	0x2860	; 0x2860 <__fp_mpack_finite>

000025a0 <__fp_round>:
    25a0:	09 2e       	mov	r0, r25
    25a2:	03 94       	inc	r0
    25a4:	00 0c       	add	r0, r0
    25a6:	11 f4       	brne	.+4      	; 0x25ac <__fp_round+0xc>
    25a8:	88 23       	and	r24, r24
    25aa:	52 f0       	brmi	.+20     	; 0x25c0 <__fp_round+0x20>
    25ac:	bb 0f       	add	r27, r27
    25ae:	40 f4       	brcc	.+16     	; 0x25c0 <__fp_round+0x20>
    25b0:	bf 2b       	or	r27, r31
    25b2:	11 f4       	brne	.+4      	; 0x25b8 <__fp_round+0x18>
    25b4:	60 ff       	sbrs	r22, 0
    25b6:	04 c0       	rjmp	.+8      	; 0x25c0 <__fp_round+0x20>
    25b8:	6f 5f       	subi	r22, 0xFF	; 255
    25ba:	7f 4f       	sbci	r23, 0xFF	; 255
    25bc:	8f 4f       	sbci	r24, 0xFF	; 255
    25be:	9f 4f       	sbci	r25, 0xFF	; 255
    25c0:	08 95       	ret

000025c2 <__fp_sinus>:
    25c2:	ef 93       	push	r30
    25c4:	e0 ff       	sbrs	r30, 0
    25c6:	07 c0       	rjmp	.+14     	; 0x25d6 <__fp_sinus+0x14>
    25c8:	a2 ea       	ldi	r26, 0xA2	; 162
    25ca:	2a ed       	ldi	r18, 0xDA	; 218
    25cc:	3f e0       	ldi	r19, 0x0F	; 15
    25ce:	49 ec       	ldi	r20, 0xC9	; 201
    25d0:	5f eb       	ldi	r21, 0xBF	; 191
    25d2:	0e 94 8d 10 	call	0x211a	; 0x211a <__addsf3x>
    25d6:	0e 94 d0 12 	call	0x25a0	; 0x25a0 <__fp_round>
    25da:	0f 90       	pop	r0
    25dc:	03 94       	inc	r0
    25de:	01 fc       	sbrc	r0, 1
    25e0:	90 58       	subi	r25, 0x80	; 128
    25e2:	e9 ed       	ldi	r30, 0xD9	; 217
    25e4:	f0 e0       	ldi	r31, 0x00	; 0
    25e6:	0c 94 3c 14 	jmp	0x2878	; 0x2878 <__fp_powsodd>

000025ea <__fp_split3>:
    25ea:	57 fd       	sbrc	r21, 7
    25ec:	90 58       	subi	r25, 0x80	; 128
    25ee:	44 0f       	add	r20, r20
    25f0:	55 1f       	adc	r21, r21
    25f2:	59 f0       	breq	.+22     	; 0x260a <__fp_splitA+0x10>
    25f4:	5f 3f       	cpi	r21, 0xFF	; 255
    25f6:	71 f0       	breq	.+28     	; 0x2614 <__fp_splitA+0x1a>
    25f8:	47 95       	ror	r20

000025fa <__fp_splitA>:
    25fa:	88 0f       	add	r24, r24
    25fc:	97 fb       	bst	r25, 7
    25fe:	99 1f       	adc	r25, r25
    2600:	61 f0       	breq	.+24     	; 0x261a <__fp_splitA+0x20>
    2602:	9f 3f       	cpi	r25, 0xFF	; 255
    2604:	79 f0       	breq	.+30     	; 0x2624 <__fp_splitA+0x2a>
    2606:	87 95       	ror	r24
    2608:	08 95       	ret
    260a:	12 16       	cp	r1, r18
    260c:	13 06       	cpc	r1, r19
    260e:	14 06       	cpc	r1, r20
    2610:	55 1f       	adc	r21, r21
    2612:	f2 cf       	rjmp	.-28     	; 0x25f8 <__fp_split3+0xe>
    2614:	46 95       	lsr	r20
    2616:	f1 df       	rcall	.-30     	; 0x25fa <__fp_splitA>
    2618:	08 c0       	rjmp	.+16     	; 0x262a <__fp_splitA+0x30>
    261a:	16 16       	cp	r1, r22
    261c:	17 06       	cpc	r1, r23
    261e:	18 06       	cpc	r1, r24
    2620:	99 1f       	adc	r25, r25
    2622:	f1 cf       	rjmp	.-30     	; 0x2606 <__fp_splitA+0xc>
    2624:	86 95       	lsr	r24
    2626:	71 05       	cpc	r23, r1
    2628:	61 05       	cpc	r22, r1
    262a:	08 94       	sec
    262c:	08 95       	ret

0000262e <__fp_zero>:
    262e:	e8 94       	clt

00002630 <__fp_szero>:
    2630:	bb 27       	eor	r27, r27
    2632:	66 27       	eor	r22, r22
    2634:	77 27       	eor	r23, r23
    2636:	cb 01       	movw	r24, r22
    2638:	97 f9       	bld	r25, 7
    263a:	08 95       	ret

0000263c <__gesf2>:
    263c:	0e 94 43 12 	call	0x2486	; 0x2486 <__fp_cmp>
    2640:	08 f4       	brcc	.+2      	; 0x2644 <__gesf2+0x8>
    2642:	8f ef       	ldi	r24, 0xFF	; 255
    2644:	08 95       	ret

00002646 <inverse>:
    2646:	9b 01       	movw	r18, r22
    2648:	ac 01       	movw	r20, r24
    264a:	60 e0       	ldi	r22, 0x00	; 0
    264c:	70 e0       	ldi	r23, 0x00	; 0
    264e:	80 e8       	ldi	r24, 0x80	; 128
    2650:	9f e3       	ldi	r25, 0x3F	; 63
    2652:	0c 94 5e 11 	jmp	0x22bc	; 0x22bc <__divsf3>

00002656 <__mulsf3>:
    2656:	0e 94 3e 13 	call	0x267c	; 0x267c <__mulsf3x>
    265a:	0c 94 d0 12 	jmp	0x25a0	; 0x25a0 <__fp_round>
    265e:	0e 94 97 12 	call	0x252e	; 0x252e <__fp_pscA>
    2662:	38 f0       	brcs	.+14     	; 0x2672 <__mulsf3+0x1c>
    2664:	0e 94 9e 12 	call	0x253c	; 0x253c <__fp_pscB>
    2668:	20 f0       	brcs	.+8      	; 0x2672 <__mulsf3+0x1c>
    266a:	95 23       	and	r25, r21
    266c:	11 f0       	breq	.+4      	; 0x2672 <__mulsf3+0x1c>
    266e:	0c 94 67 12 	jmp	0x24ce	; 0x24ce <__fp_inf>
    2672:	0c 94 6d 12 	jmp	0x24da	; 0x24da <__fp_nan>
    2676:	11 24       	eor	r1, r1
    2678:	0c 94 18 13 	jmp	0x2630	; 0x2630 <__fp_szero>

0000267c <__mulsf3x>:
    267c:	0e 94 f5 12 	call	0x25ea	; 0x25ea <__fp_split3>
    2680:	70 f3       	brcs	.-36     	; 0x265e <__mulsf3+0x8>

00002682 <__mulsf3_pse>:
    2682:	95 9f       	mul	r25, r21
    2684:	c1 f3       	breq	.-16     	; 0x2676 <__mulsf3+0x20>
    2686:	95 0f       	add	r25, r21
    2688:	50 e0       	ldi	r21, 0x00	; 0
    268a:	55 1f       	adc	r21, r21
    268c:	62 9f       	mul	r22, r18
    268e:	f0 01       	movw	r30, r0
    2690:	72 9f       	mul	r23, r18
    2692:	bb 27       	eor	r27, r27
    2694:	f0 0d       	add	r31, r0
    2696:	b1 1d       	adc	r27, r1
    2698:	63 9f       	mul	r22, r19
    269a:	aa 27       	eor	r26, r26
    269c:	f0 0d       	add	r31, r0
    269e:	b1 1d       	adc	r27, r1
    26a0:	aa 1f       	adc	r26, r26
    26a2:	64 9f       	mul	r22, r20
    26a4:	66 27       	eor	r22, r22
    26a6:	b0 0d       	add	r27, r0
    26a8:	a1 1d       	adc	r26, r1
    26aa:	66 1f       	adc	r22, r22
    26ac:	82 9f       	mul	r24, r18
    26ae:	22 27       	eor	r18, r18
    26b0:	b0 0d       	add	r27, r0
    26b2:	a1 1d       	adc	r26, r1
    26b4:	62 1f       	adc	r22, r18
    26b6:	73 9f       	mul	r23, r19
    26b8:	b0 0d       	add	r27, r0
    26ba:	a1 1d       	adc	r26, r1
    26bc:	62 1f       	adc	r22, r18
    26be:	83 9f       	mul	r24, r19
    26c0:	a0 0d       	add	r26, r0
    26c2:	61 1d       	adc	r22, r1
    26c4:	22 1f       	adc	r18, r18
    26c6:	74 9f       	mul	r23, r20
    26c8:	33 27       	eor	r19, r19
    26ca:	a0 0d       	add	r26, r0
    26cc:	61 1d       	adc	r22, r1
    26ce:	23 1f       	adc	r18, r19
    26d0:	84 9f       	mul	r24, r20
    26d2:	60 0d       	add	r22, r0
    26d4:	21 1d       	adc	r18, r1
    26d6:	82 2f       	mov	r24, r18
    26d8:	76 2f       	mov	r23, r22
    26da:	6a 2f       	mov	r22, r26
    26dc:	11 24       	eor	r1, r1
    26de:	9f 57       	subi	r25, 0x7F	; 127
    26e0:	50 40       	sbci	r21, 0x00	; 0
    26e2:	9a f0       	brmi	.+38     	; 0x270a <__mulsf3_pse+0x88>
    26e4:	f1 f0       	breq	.+60     	; 0x2722 <__mulsf3_pse+0xa0>
    26e6:	88 23       	and	r24, r24
    26e8:	4a f0       	brmi	.+18     	; 0x26fc <__mulsf3_pse+0x7a>
    26ea:	ee 0f       	add	r30, r30
    26ec:	ff 1f       	adc	r31, r31
    26ee:	bb 1f       	adc	r27, r27
    26f0:	66 1f       	adc	r22, r22
    26f2:	77 1f       	adc	r23, r23
    26f4:	88 1f       	adc	r24, r24
    26f6:	91 50       	subi	r25, 0x01	; 1
    26f8:	50 40       	sbci	r21, 0x00	; 0
    26fa:	a9 f7       	brne	.-22     	; 0x26e6 <__mulsf3_pse+0x64>
    26fc:	9e 3f       	cpi	r25, 0xFE	; 254
    26fe:	51 05       	cpc	r21, r1
    2700:	80 f0       	brcs	.+32     	; 0x2722 <__mulsf3_pse+0xa0>
    2702:	0c 94 67 12 	jmp	0x24ce	; 0x24ce <__fp_inf>
    2706:	0c 94 18 13 	jmp	0x2630	; 0x2630 <__fp_szero>
    270a:	5f 3f       	cpi	r21, 0xFF	; 255
    270c:	e4 f3       	brlt	.-8      	; 0x2706 <__mulsf3_pse+0x84>
    270e:	98 3e       	cpi	r25, 0xE8	; 232
    2710:	d4 f3       	brlt	.-12     	; 0x2706 <__mulsf3_pse+0x84>
    2712:	86 95       	lsr	r24
    2714:	77 95       	ror	r23
    2716:	67 95       	ror	r22
    2718:	b7 95       	ror	r27
    271a:	f7 95       	ror	r31
    271c:	e7 95       	ror	r30
    271e:	9f 5f       	subi	r25, 0xFF	; 255
    2720:	c1 f7       	brne	.-16     	; 0x2712 <__mulsf3_pse+0x90>
    2722:	fe 2b       	or	r31, r30
    2724:	88 0f       	add	r24, r24
    2726:	91 1d       	adc	r25, r1
    2728:	96 95       	lsr	r25
    272a:	87 95       	ror	r24
    272c:	97 f9       	bld	r25, 7
    272e:	08 95       	ret

00002730 <pow>:
    2730:	fa 01       	movw	r30, r20
    2732:	ee 0f       	add	r30, r30
    2734:	ff 1f       	adc	r31, r31
    2736:	30 96       	adiw	r30, 0x00	; 0
    2738:	21 05       	cpc	r18, r1
    273a:	31 05       	cpc	r19, r1
    273c:	a1 f1       	breq	.+104    	; 0x27a6 <pow+0x76>
    273e:	61 15       	cp	r22, r1
    2740:	71 05       	cpc	r23, r1
    2742:	61 f4       	brne	.+24     	; 0x275c <pow+0x2c>
    2744:	80 38       	cpi	r24, 0x80	; 128
    2746:	bf e3       	ldi	r27, 0x3F	; 63
    2748:	9b 07       	cpc	r25, r27
    274a:	49 f1       	breq	.+82     	; 0x279e <pow+0x6e>
    274c:	68 94       	set
    274e:	90 38       	cpi	r25, 0x80	; 128
    2750:	81 05       	cpc	r24, r1
    2752:	61 f0       	breq	.+24     	; 0x276c <pow+0x3c>
    2754:	80 38       	cpi	r24, 0x80	; 128
    2756:	bf ef       	ldi	r27, 0xFF	; 255
    2758:	9b 07       	cpc	r25, r27
    275a:	41 f0       	breq	.+16     	; 0x276c <pow+0x3c>
    275c:	99 23       	and	r25, r25
    275e:	4a f5       	brpl	.+82     	; 0x27b2 <pow+0x82>
    2760:	ff 3f       	cpi	r31, 0xFF	; 255
    2762:	e1 05       	cpc	r30, r1
    2764:	31 05       	cpc	r19, r1
    2766:	21 05       	cpc	r18, r1
    2768:	19 f1       	breq	.+70     	; 0x27b0 <pow+0x80>
    276a:	e8 94       	clt
    276c:	08 94       	sec
    276e:	e7 95       	ror	r30
    2770:	d9 01       	movw	r26, r18
    2772:	aa 23       	and	r26, r26
    2774:	29 f4       	brne	.+10     	; 0x2780 <pow+0x50>
    2776:	ab 2f       	mov	r26, r27
    2778:	be 2f       	mov	r27, r30
    277a:	f8 5f       	subi	r31, 0xF8	; 248
    277c:	d0 f3       	brcs	.-12     	; 0x2772 <pow+0x42>
    277e:	10 c0       	rjmp	.+32     	; 0x27a0 <pow+0x70>
    2780:	ff 5f       	subi	r31, 0xFF	; 255
    2782:	70 f4       	brcc	.+28     	; 0x27a0 <pow+0x70>
    2784:	a6 95       	lsr	r26
    2786:	e0 f7       	brcc	.-8      	; 0x2780 <pow+0x50>
    2788:	f7 39       	cpi	r31, 0x97	; 151
    278a:	50 f0       	brcs	.+20     	; 0x27a0 <pow+0x70>
    278c:	19 f0       	breq	.+6      	; 0x2794 <pow+0x64>
    278e:	ff 3a       	cpi	r31, 0xAF	; 175
    2790:	38 f4       	brcc	.+14     	; 0x27a0 <pow+0x70>
    2792:	9f 77       	andi	r25, 0x7F	; 127
    2794:	9f 93       	push	r25
    2796:	0d d0       	rcall	.+26     	; 0x27b2 <pow+0x82>
    2798:	0f 90       	pop	r0
    279a:	07 fc       	sbrc	r0, 7
    279c:	90 58       	subi	r25, 0x80	; 128
    279e:	08 95       	ret
    27a0:	46 f0       	brts	.+16     	; 0x27b2 <pow+0x82>
    27a2:	0c 94 6d 12 	jmp	0x24da	; 0x24da <__fp_nan>
    27a6:	60 e0       	ldi	r22, 0x00	; 0
    27a8:	70 e0       	ldi	r23, 0x00	; 0
    27aa:	80 e8       	ldi	r24, 0x80	; 128
    27ac:	9f e3       	ldi	r25, 0x3F	; 63
    27ae:	08 95       	ret
    27b0:	4f e7       	ldi	r20, 0x7F	; 127
    27b2:	9f 77       	andi	r25, 0x7F	; 127
    27b4:	5f 93       	push	r21
    27b6:	4f 93       	push	r20
    27b8:	3f 93       	push	r19
    27ba:	2f 93       	push	r18
    27bc:	0e 94 92 14 	call	0x2924	; 0x2924 <log>
    27c0:	2f 91       	pop	r18
    27c2:	3f 91       	pop	r19
    27c4:	4f 91       	pop	r20
    27c6:	5f 91       	pop	r21
    27c8:	0e 94 2b 13 	call	0x2656	; 0x2656 <__mulsf3>
    27cc:	0c 94 fc 13 	jmp	0x27f8	; 0x27f8 <exp>

000027d0 <sin>:
    27d0:	9f 93       	push	r25
    27d2:	0e 94 a7 12 	call	0x254e	; 0x254e <__fp_rempio2>
    27d6:	0f 90       	pop	r0
    27d8:	07 fc       	sbrc	r0, 7
    27da:	ee 5f       	subi	r30, 0xFE	; 254
    27dc:	0c 94 e1 12 	jmp	0x25c2	; 0x25c2 <__fp_sinus>

000027e0 <square>:
    27e0:	9b 01       	movw	r18, r22
    27e2:	ac 01       	movw	r20, r24
    27e4:	0c 94 2b 13 	jmp	0x2656	; 0x2656 <__mulsf3>
    27e8:	29 f4       	brne	.+10     	; 0x27f4 <square+0x14>
    27ea:	16 f0       	brts	.+4      	; 0x27f0 <square+0x10>
    27ec:	0c 94 67 12 	jmp	0x24ce	; 0x24ce <__fp_inf>
    27f0:	0c 94 17 13 	jmp	0x262e	; 0x262e <__fp_zero>
    27f4:	0c 94 6d 12 	jmp	0x24da	; 0x24da <__fp_nan>

000027f8 <exp>:
    27f8:	0e 94 fd 12 	call	0x25fa	; 0x25fa <__fp_splitA>
    27fc:	a8 f3       	brcs	.-22     	; 0x27e8 <square+0x8>
    27fe:	96 38       	cpi	r25, 0x86	; 134
    2800:	a0 f7       	brcc	.-24     	; 0x27ea <square+0xa>
    2802:	07 f8       	bld	r0, 7
    2804:	0f 92       	push	r0
    2806:	e8 94       	clt
    2808:	2b e3       	ldi	r18, 0x3B	; 59
    280a:	3a ea       	ldi	r19, 0xAA	; 170
    280c:	48 eb       	ldi	r20, 0xB8	; 184
    280e:	5f e7       	ldi	r21, 0x7F	; 127
    2810:	0e 94 41 13 	call	0x2682	; 0x2682 <__mulsf3_pse>
    2814:	0f 92       	push	r0
    2816:	0f 92       	push	r0
    2818:	0f 92       	push	r0
    281a:	4d b7       	in	r20, 0x3d	; 61
    281c:	5e b7       	in	r21, 0x3e	; 62
    281e:	0f 92       	push	r0
    2820:	0e 94 da 14 	call	0x29b4	; 0x29b4 <modf>
    2824:	e7 ef       	ldi	r30, 0xF7	; 247
    2826:	f0 e0       	ldi	r31, 0x00	; 0
    2828:	0e 94 70 12 	call	0x24e0	; 0x24e0 <__fp_powser>
    282c:	4f 91       	pop	r20
    282e:	5f 91       	pop	r21
    2830:	ef 91       	pop	r30
    2832:	ff 91       	pop	r31
    2834:	e5 95       	asr	r30
    2836:	ee 1f       	adc	r30, r30
    2838:	ff 1f       	adc	r31, r31
    283a:	49 f0       	breq	.+18     	; 0x284e <exp+0x56>
    283c:	fe 57       	subi	r31, 0x7E	; 126
    283e:	e0 68       	ori	r30, 0x80	; 128
    2840:	44 27       	eor	r20, r20
    2842:	ee 0f       	add	r30, r30
    2844:	44 1f       	adc	r20, r20
    2846:	fa 95       	dec	r31
    2848:	e1 f7       	brne	.-8      	; 0x2842 <exp+0x4a>
    284a:	41 95       	neg	r20
    284c:	55 0b       	sbc	r21, r21
    284e:	0e 94 54 14 	call	0x28a8	; 0x28a8 <ldexp>
    2852:	0f 90       	pop	r0
    2854:	07 fe       	sbrs	r0, 7
    2856:	0c 94 23 13 	jmp	0x2646	; 0x2646 <inverse>
    285a:	08 95       	ret

0000285c <__fp_mpack>:
    285c:	9f 3f       	cpi	r25, 0xFF	; 255
    285e:	31 f0       	breq	.+12     	; 0x286c <__fp_mpack_finite+0xc>

00002860 <__fp_mpack_finite>:
    2860:	91 50       	subi	r25, 0x01	; 1
    2862:	20 f4       	brcc	.+8      	; 0x286c <__fp_mpack_finite+0xc>
    2864:	87 95       	ror	r24
    2866:	77 95       	ror	r23
    2868:	67 95       	ror	r22
    286a:	b7 95       	ror	r27
    286c:	88 0f       	add	r24, r24
    286e:	91 1d       	adc	r25, r1
    2870:	96 95       	lsr	r25
    2872:	87 95       	ror	r24
    2874:	97 f9       	bld	r25, 7
    2876:	08 95       	ret

00002878 <__fp_powsodd>:
    2878:	9f 93       	push	r25
    287a:	8f 93       	push	r24
    287c:	7f 93       	push	r23
    287e:	6f 93       	push	r22
    2880:	ff 93       	push	r31
    2882:	ef 93       	push	r30
    2884:	9b 01       	movw	r18, r22
    2886:	ac 01       	movw	r20, r24
    2888:	0e 94 2b 13 	call	0x2656	; 0x2656 <__mulsf3>
    288c:	ef 91       	pop	r30
    288e:	ff 91       	pop	r31
    2890:	0e 94 70 12 	call	0x24e0	; 0x24e0 <__fp_powser>
    2894:	2f 91       	pop	r18
    2896:	3f 91       	pop	r19
    2898:	4f 91       	pop	r20
    289a:	5f 91       	pop	r21
    289c:	0c 94 2b 13 	jmp	0x2656	; 0x2656 <__mulsf3>
    28a0:	0c 94 67 12 	jmp	0x24ce	; 0x24ce <__fp_inf>
    28a4:	0c 94 2e 14 	jmp	0x285c	; 0x285c <__fp_mpack>

000028a8 <ldexp>:
    28a8:	0e 94 fd 12 	call	0x25fa	; 0x25fa <__fp_splitA>
    28ac:	d8 f3       	brcs	.-10     	; 0x28a4 <__fp_powsodd+0x2c>
    28ae:	99 23       	and	r25, r25
    28b0:	c9 f3       	breq	.-14     	; 0x28a4 <__fp_powsodd+0x2c>
    28b2:	94 0f       	add	r25, r20
    28b4:	51 1d       	adc	r21, r1
    28b6:	a3 f3       	brvs	.-24     	; 0x28a0 <__fp_powsodd+0x28>
    28b8:	91 50       	subi	r25, 0x01	; 1
    28ba:	50 40       	sbci	r21, 0x00	; 0
    28bc:	94 f0       	brlt	.+36     	; 0x28e2 <ldexp+0x3a>
    28be:	59 f0       	breq	.+22     	; 0x28d6 <ldexp+0x2e>
    28c0:	88 23       	and	r24, r24
    28c2:	32 f0       	brmi	.+12     	; 0x28d0 <ldexp+0x28>
    28c4:	66 0f       	add	r22, r22
    28c6:	77 1f       	adc	r23, r23
    28c8:	88 1f       	adc	r24, r24
    28ca:	91 50       	subi	r25, 0x01	; 1
    28cc:	50 40       	sbci	r21, 0x00	; 0
    28ce:	c1 f7       	brne	.-16     	; 0x28c0 <ldexp+0x18>
    28d0:	9e 3f       	cpi	r25, 0xFE	; 254
    28d2:	51 05       	cpc	r21, r1
    28d4:	2c f7       	brge	.-54     	; 0x28a0 <__fp_powsodd+0x28>
    28d6:	88 0f       	add	r24, r24
    28d8:	91 1d       	adc	r25, r1
    28da:	96 95       	lsr	r25
    28dc:	87 95       	ror	r24
    28de:	97 f9       	bld	r25, 7
    28e0:	08 95       	ret
    28e2:	5f 3f       	cpi	r21, 0xFF	; 255
    28e4:	ac f0       	brlt	.+42     	; 0x2910 <ldexp+0x68>
    28e6:	98 3e       	cpi	r25, 0xE8	; 232
    28e8:	9c f0       	brlt	.+38     	; 0x2910 <ldexp+0x68>
    28ea:	bb 27       	eor	r27, r27
    28ec:	86 95       	lsr	r24
    28ee:	77 95       	ror	r23
    28f0:	67 95       	ror	r22
    28f2:	b7 95       	ror	r27
    28f4:	08 f4       	brcc	.+2      	; 0x28f8 <ldexp+0x50>
    28f6:	b1 60       	ori	r27, 0x01	; 1
    28f8:	93 95       	inc	r25
    28fa:	c1 f7       	brne	.-16     	; 0x28ec <ldexp+0x44>
    28fc:	bb 0f       	add	r27, r27
    28fe:	58 f7       	brcc	.-42     	; 0x28d6 <ldexp+0x2e>
    2900:	11 f4       	brne	.+4      	; 0x2906 <ldexp+0x5e>
    2902:	60 ff       	sbrs	r22, 0
    2904:	e8 cf       	rjmp	.-48     	; 0x28d6 <ldexp+0x2e>
    2906:	6f 5f       	subi	r22, 0xFF	; 255
    2908:	7f 4f       	sbci	r23, 0xFF	; 255
    290a:	8f 4f       	sbci	r24, 0xFF	; 255
    290c:	9f 4f       	sbci	r25, 0xFF	; 255
    290e:	e3 cf       	rjmp	.-58     	; 0x28d6 <ldexp+0x2e>
    2910:	0c 94 18 13 	jmp	0x2630	; 0x2630 <__fp_szero>
    2914:	16 f0       	brts	.+4      	; 0x291a <ldexp+0x72>
    2916:	0c 94 2e 14 	jmp	0x285c	; 0x285c <__fp_mpack>
    291a:	0c 94 6d 12 	jmp	0x24da	; 0x24da <__fp_nan>
    291e:	68 94       	set
    2920:	0c 94 67 12 	jmp	0x24ce	; 0x24ce <__fp_inf>

00002924 <log>:
    2924:	0e 94 fd 12 	call	0x25fa	; 0x25fa <__fp_splitA>
    2928:	a8 f3       	brcs	.-22     	; 0x2914 <ldexp+0x6c>
    292a:	99 23       	and	r25, r25
    292c:	c1 f3       	breq	.-16     	; 0x291e <ldexp+0x76>
    292e:	ae f3       	brts	.-22     	; 0x291a <ldexp+0x72>
    2930:	df 93       	push	r29
    2932:	cf 93       	push	r28
    2934:	1f 93       	push	r17
    2936:	0f 93       	push	r16
    2938:	ff 92       	push	r15
    293a:	c9 2f       	mov	r28, r25
    293c:	dd 27       	eor	r29, r29
    293e:	88 23       	and	r24, r24
    2940:	2a f0       	brmi	.+10     	; 0x294c <log+0x28>
    2942:	21 97       	sbiw	r28, 0x01	; 1
    2944:	66 0f       	add	r22, r22
    2946:	77 1f       	adc	r23, r23
    2948:	88 1f       	adc	r24, r24
    294a:	da f7       	brpl	.-10     	; 0x2942 <log+0x1e>
    294c:	20 e0       	ldi	r18, 0x00	; 0
    294e:	30 e0       	ldi	r19, 0x00	; 0
    2950:	40 e8       	ldi	r20, 0x80	; 128
    2952:	5f eb       	ldi	r21, 0xBF	; 191
    2954:	9f e3       	ldi	r25, 0x3F	; 63
    2956:	88 39       	cpi	r24, 0x98	; 152
    2958:	20 f0       	brcs	.+8      	; 0x2962 <log+0x3e>
    295a:	80 3e       	cpi	r24, 0xE0	; 224
    295c:	38 f0       	brcs	.+14     	; 0x296c <log+0x48>
    295e:	21 96       	adiw	r28, 0x01	; 1
    2960:	8f 77       	andi	r24, 0x7F	; 127
    2962:	0e 94 76 10 	call	0x20ec	; 0x20ec <__addsf3>
    2966:	ef e1       	ldi	r30, 0x1F	; 31
    2968:	f1 e0       	ldi	r31, 0x01	; 1
    296a:	04 c0       	rjmp	.+8      	; 0x2974 <log+0x50>
    296c:	0e 94 76 10 	call	0x20ec	; 0x20ec <__addsf3>
    2970:	ec e4       	ldi	r30, 0x4C	; 76
    2972:	f1 e0       	ldi	r31, 0x01	; 1
    2974:	0e 94 70 12 	call	0x24e0	; 0x24e0 <__fp_powser>
    2978:	8b 01       	movw	r16, r22
    297a:	be 01       	movw	r22, r28
    297c:	ec 01       	movw	r28, r24
    297e:	fb 2e       	mov	r15, r27
    2980:	6f 57       	subi	r22, 0x7F	; 127
    2982:	71 09       	sbc	r23, r1
    2984:	75 95       	asr	r23
    2986:	77 1f       	adc	r23, r23
    2988:	88 0b       	sbc	r24, r24
    298a:	99 0b       	sbc	r25, r25
    298c:	0e 94 08 12 	call	0x2410	; 0x2410 <__floatsisf>
    2990:	28 e1       	ldi	r18, 0x18	; 24
    2992:	32 e7       	ldi	r19, 0x72	; 114
    2994:	41 e3       	ldi	r20, 0x31	; 49
    2996:	5f e3       	ldi	r21, 0x3F	; 63
    2998:	0e 94 3e 13 	call	0x267c	; 0x267c <__mulsf3x>
    299c:	af 2d       	mov	r26, r15
    299e:	98 01       	movw	r18, r16
    29a0:	ae 01       	movw	r20, r28
    29a2:	ff 90       	pop	r15
    29a4:	0f 91       	pop	r16
    29a6:	1f 91       	pop	r17
    29a8:	cf 91       	pop	r28
    29aa:	df 91       	pop	r29
    29ac:	0e 94 8d 10 	call	0x211a	; 0x211a <__addsf3x>
    29b0:	0c 94 d0 12 	jmp	0x25a0	; 0x25a0 <__fp_round>

000029b4 <modf>:
    29b4:	fa 01       	movw	r30, r20
    29b6:	dc 01       	movw	r26, r24
    29b8:	aa 0f       	add	r26, r26
    29ba:	bb 1f       	adc	r27, r27
    29bc:	9b 01       	movw	r18, r22
    29be:	ac 01       	movw	r20, r24
    29c0:	bf 57       	subi	r27, 0x7F	; 127
    29c2:	28 f4       	brcc	.+10     	; 0x29ce <modf+0x1a>
    29c4:	22 27       	eor	r18, r18
    29c6:	33 27       	eor	r19, r19
    29c8:	44 27       	eor	r20, r20
    29ca:	50 78       	andi	r21, 0x80	; 128
    29cc:	20 c0       	rjmp	.+64     	; 0x2a0e <modf+0x5a>
    29ce:	b7 51       	subi	r27, 0x17	; 23
    29d0:	90 f4       	brcc	.+36     	; 0x29f6 <modf+0x42>
    29d2:	ab 2f       	mov	r26, r27
    29d4:	00 24       	eor	r0, r0
    29d6:	46 95       	lsr	r20
    29d8:	37 95       	ror	r19
    29da:	27 95       	ror	r18
    29dc:	01 1c       	adc	r0, r1
    29de:	a3 95       	inc	r26
    29e0:	d2 f3       	brmi	.-12     	; 0x29d6 <modf+0x22>
    29e2:	00 20       	and	r0, r0
    29e4:	71 f0       	breq	.+28     	; 0x2a02 <modf+0x4e>
    29e6:	22 0f       	add	r18, r18
    29e8:	33 1f       	adc	r19, r19
    29ea:	44 1f       	adc	r20, r20
    29ec:	b3 95       	inc	r27
    29ee:	da f3       	brmi	.-10     	; 0x29e6 <modf+0x32>
    29f0:	0e d0       	rcall	.+28     	; 0x2a0e <modf+0x5a>
    29f2:	0c 94 75 10 	jmp	0x20ea	; 0x20ea <__subsf3>
    29f6:	61 30       	cpi	r22, 0x01	; 1
    29f8:	71 05       	cpc	r23, r1
    29fa:	a0 e8       	ldi	r26, 0x80	; 128
    29fc:	8a 07       	cpc	r24, r26
    29fe:	b9 46       	sbci	r27, 0x69	; 105
    2a00:	30 f4       	brcc	.+12     	; 0x2a0e <modf+0x5a>
    2a02:	9b 01       	movw	r18, r22
    2a04:	ac 01       	movw	r20, r24
    2a06:	66 27       	eor	r22, r22
    2a08:	77 27       	eor	r23, r23
    2a0a:	88 27       	eor	r24, r24
    2a0c:	90 78       	andi	r25, 0x80	; 128
    2a0e:	30 96       	adiw	r30, 0x00	; 0
    2a10:	21 f0       	breq	.+8      	; 0x2a1a <modf+0x66>
    2a12:	20 83       	st	Z, r18
    2a14:	31 83       	std	Z+1, r19	; 0x01
    2a16:	42 83       	std	Z+2, r20	; 0x02
    2a18:	53 83       	std	Z+3, r21	; 0x03
    2a1a:	08 95       	ret

00002a1c <__itoa_ncheck>:
    2a1c:	bb 27       	eor	r27, r27
    2a1e:	4a 30       	cpi	r20, 0x0A	; 10
    2a20:	31 f4       	brne	.+12     	; 0x2a2e <__itoa_ncheck+0x12>
    2a22:	99 23       	and	r25, r25
    2a24:	22 f4       	brpl	.+8      	; 0x2a2e <__itoa_ncheck+0x12>
    2a26:	bd e2       	ldi	r27, 0x2D	; 45
    2a28:	90 95       	com	r25
    2a2a:	81 95       	neg	r24
    2a2c:	9f 4f       	sbci	r25, 0xFF	; 255
    2a2e:	0c 94 1a 15 	jmp	0x2a34	; 0x2a34 <__utoa_common>

00002a32 <__utoa_ncheck>:
    2a32:	bb 27       	eor	r27, r27

00002a34 <__utoa_common>:
    2a34:	fb 01       	movw	r30, r22
    2a36:	55 27       	eor	r21, r21
    2a38:	aa 27       	eor	r26, r26
    2a3a:	88 0f       	add	r24, r24
    2a3c:	99 1f       	adc	r25, r25
    2a3e:	aa 1f       	adc	r26, r26
    2a40:	a4 17       	cp	r26, r20
    2a42:	10 f0       	brcs	.+4      	; 0x2a48 <__utoa_common+0x14>
    2a44:	a4 1b       	sub	r26, r20
    2a46:	83 95       	inc	r24
    2a48:	50 51       	subi	r21, 0x10	; 16
    2a4a:	b9 f7       	brne	.-18     	; 0x2a3a <__utoa_common+0x6>
    2a4c:	a0 5d       	subi	r26, 0xD0	; 208
    2a4e:	aa 33       	cpi	r26, 0x3A	; 58
    2a50:	08 f0       	brcs	.+2      	; 0x2a54 <__utoa_common+0x20>
    2a52:	a9 5d       	subi	r26, 0xD9	; 217
    2a54:	a1 93       	st	Z+, r26
    2a56:	00 97       	sbiw	r24, 0x00	; 0
    2a58:	79 f7       	brne	.-34     	; 0x2a38 <__utoa_common+0x4>
    2a5a:	b1 11       	cpse	r27, r1
    2a5c:	b1 93       	st	Z+, r27
    2a5e:	11 92       	st	Z+, r1
    2a60:	cb 01       	movw	r24, r22
    2a62:	0c 94 33 15 	jmp	0x2a66	; 0x2a66 <strrev>

00002a66 <strrev>:
    2a66:	dc 01       	movw	r26, r24
    2a68:	fc 01       	movw	r30, r24
    2a6a:	67 2f       	mov	r22, r23
    2a6c:	71 91       	ld	r23, Z+
    2a6e:	77 23       	and	r23, r23
    2a70:	e1 f7       	brne	.-8      	; 0x2a6a <strrev+0x4>
    2a72:	32 97       	sbiw	r30, 0x02	; 2
    2a74:	04 c0       	rjmp	.+8      	; 0x2a7e <strrev+0x18>
    2a76:	7c 91       	ld	r23, X
    2a78:	6d 93       	st	X+, r22
    2a7a:	70 83       	st	Z, r23
    2a7c:	62 91       	ld	r22, -Z
    2a7e:	ae 17       	cp	r26, r30
    2a80:	bf 07       	cpc	r27, r31
    2a82:	c8 f3       	brcs	.-14     	; 0x2a76 <strrev+0x10>
    2a84:	08 95       	ret

00002a86 <_exit>:
    2a86:	f8 94       	cli

00002a88 <__stop_program>:
    2a88:	ff cf       	rjmp	.-2      	; 0x2a88 <__stop_program>
