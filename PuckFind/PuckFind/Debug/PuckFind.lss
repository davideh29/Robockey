
PuckFind.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  000026e6  0000277a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000026e6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000010  00800108  00800108  00002782  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002782  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000027b4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002c8  00000000  00000000  000027f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003aa4  00000000  00000000  00002abc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000018cd  00000000  00000000  00006560  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000252f  00000000  00000000  00007e2d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000089c  00000000  00000000  0000a35c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000cf5  00000000  00000000  0000abf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000035ab  00000000  00000000  0000b8ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002b8  00000000  00000000  0000ee98  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 6d 01 	jmp	0x2da	; 0x2da <__ctors_end>
       4:	0c 94 8a 01 	jmp	0x314	; 0x314 <__bad_interrupt>
       8:	0c 94 8a 01 	jmp	0x314	; 0x314 <__bad_interrupt>
       c:	0c 94 62 0e 	jmp	0x1cc4	; 0x1cc4 <__vector_3>
      10:	0c 94 8a 01 	jmp	0x314	; 0x314 <__bad_interrupt>
      14:	0c 94 8a 01 	jmp	0x314	; 0x314 <__bad_interrupt>
      18:	0c 94 8a 01 	jmp	0x314	; 0x314 <__bad_interrupt>
      1c:	0c 94 8a 01 	jmp	0x314	; 0x314 <__bad_interrupt>
      20:	0c 94 8a 01 	jmp	0x314	; 0x314 <__bad_interrupt>
      24:	0c 94 8a 01 	jmp	0x314	; 0x314 <__bad_interrupt>
      28:	0c 94 f7 03 	jmp	0x7ee	; 0x7ee <__vector_10>
      2c:	0c 94 35 04 	jmp	0x86a	; 0x86a <__vector_11>
      30:	0c 94 8a 01 	jmp	0x314	; 0x314 <__bad_interrupt>
      34:	0c 94 8a 01 	jmp	0x314	; 0x314 <__bad_interrupt>
      38:	0c 94 8a 01 	jmp	0x314	; 0x314 <__bad_interrupt>
      3c:	0c 94 8a 01 	jmp	0x314	; 0x314 <__bad_interrupt>
      40:	0c 94 8a 01 	jmp	0x314	; 0x314 <__bad_interrupt>
      44:	0c 94 8a 01 	jmp	0x314	; 0x314 <__bad_interrupt>
      48:	0c 94 8a 01 	jmp	0x314	; 0x314 <__bad_interrupt>
      4c:	0c 94 8a 01 	jmp	0x314	; 0x314 <__bad_interrupt>
      50:	0c 94 8a 01 	jmp	0x314	; 0x314 <__bad_interrupt>
      54:	0c 94 8a 01 	jmp	0x314	; 0x314 <__bad_interrupt>
      58:	0c 94 8a 01 	jmp	0x314	; 0x314 <__bad_interrupt>
      5c:	0c 94 8a 01 	jmp	0x314	; 0x314 <__bad_interrupt>
      60:	0c 94 8a 01 	jmp	0x314	; 0x314 <__bad_interrupt>
      64:	0c 94 8a 01 	jmp	0x314	; 0x314 <__bad_interrupt>
      68:	0c 94 8a 01 	jmp	0x314	; 0x314 <__bad_interrupt>
      6c:	0c 94 8a 01 	jmp	0x314	; 0x314 <__bad_interrupt>
      70:	0c 94 8a 01 	jmp	0x314	; 0x314 <__bad_interrupt>
      74:	0c 94 8a 01 	jmp	0x314	; 0x314 <__bad_interrupt>
      78:	0c 94 8a 01 	jmp	0x314	; 0x314 <__bad_interrupt>
      7c:	0c 94 8a 01 	jmp	0x314	; 0x314 <__bad_interrupt>
      80:	0c 94 8a 01 	jmp	0x314	; 0x314 <__bad_interrupt>
      84:	0c 94 8a 01 	jmp	0x314	; 0x314 <__bad_interrupt>
      88:	0c 94 8a 01 	jmp	0x314	; 0x314 <__bad_interrupt>
      8c:	0c 94 8a 01 	jmp	0x314	; 0x314 <__bad_interrupt>
      90:	0c 94 8a 01 	jmp	0x314	; 0x314 <__bad_interrupt>
      94:	0c 94 8a 01 	jmp	0x314	; 0x314 <__bad_interrupt>
      98:	0c 94 8a 01 	jmp	0x314	; 0x314 <__bad_interrupt>
      9c:	0c 94 8a 01 	jmp	0x314	; 0x314 <__bad_interrupt>
      a0:	0c 94 8a 01 	jmp	0x314	; 0x314 <__bad_interrupt>
      a4:	0c 94 8a 01 	jmp	0x314	; 0x314 <__bad_interrupt>
      a8:	0c 94 8a 01 	jmp	0x314	; 0x314 <__bad_interrupt>
      ac:	08 4a       	sbci	r16, 0xA8	; 168
      ae:	d7 3b       	cpi	r29, 0xB7	; 183
      b0:	3b ce       	rjmp	.-906    	; 0xfffffd28 <__eeprom_end+0xff7efd28>
      b2:	01 6e       	ori	r16, 0xE1	; 225
      b4:	84 bc       	out	0x24, r8	; 36
      b6:	bf fd       	.word	0xfdbf	; ????
      b8:	c1 2f       	mov	r28, r17
      ba:	3d 6c       	ori	r19, 0xCD	; 205
      bc:	74 31       	cpi	r23, 0x14	; 20
      be:	9a bd       	out	0x2a, r25	; 42
      c0:	56 83       	std	Z+6, r21	; 0x06
      c2:	3d da       	rcall	.-2950   	; 0xfffff53e <__eeprom_end+0xff7ef53e>
      c4:	3d 00       	.word	0x003d	; ????
      c6:	c7 7f       	andi	r28, 0xF7	; 247
      c8:	11 be       	out	0x31, r1	; 49
      ca:	d9 e4       	ldi	r29, 0x49	; 73
      cc:	bb 4c       	sbci	r27, 0xCB	; 203
      ce:	3e 91       	ld	r19, -X
      d0:	6b aa       	std	Y+51, r6	; 0x33
      d2:	aa be       	out	0x3a, r10	; 58
      d4:	00 00       	nop
      d6:	00 80       	ld	r0, Z
      d8:	3f 05       	cpc	r19, r15
      da:	a8 4c       	sbci	r26, 0xC8	; 200
      dc:	cd b2       	in	r12, 0x1d	; 29
      de:	d4 4e       	sbci	r29, 0xE4	; 228
      e0:	b9 38       	cpi	r27, 0x89	; 137
      e2:	36 a9       	ldd	r19, Z+54	; 0x36
      e4:	02 0c       	add	r0, r2
      e6:	50 b9       	out	0x00, r21	; 0
      e8:	91 86       	std	Z+9, r9	; 0x09
      ea:	88 08       	sbc	r8, r8
      ec:	3c a6       	std	Y+44, r3	; 0x2c
      ee:	aa aa       	std	Y+50, r10	; 0x32
      f0:	2a be       	out	0x3a, r2	; 58
      f2:	00 00       	nop
      f4:	00 80       	ld	r0, Z
      f6:	3f 07       	cpc	r19, r31
      f8:	63 42       	sbci	r22, 0x23	; 35
      fa:	36 b7       	in	r19, 0x36	; 54
      fc:	9b d8       	rcall	.-3786   	; 0xfffff234 <__eeprom_end+0xff7ef234>
      fe:	a7 1a       	sub	r10, r23
     100:	39 68       	ori	r19, 0x89	; 137
     102:	56 18       	sub	r5, r6
     104:	ae ba       	out	0x1e, r10	; 30
     106:	ab 55       	subi	r26, 0x5B	; 91
     108:	8c 1d       	adc	r24, r12
     10a:	3c b7       	in	r19, 0x3c	; 60
     10c:	cc 57       	subi	r28, 0x7C	; 124
     10e:	63 bd       	out	0x23, r22	; 35
     110:	6d ed       	ldi	r22, 0xDD	; 221
     112:	fd 75       	andi	r31, 0x5D	; 93
     114:	3e f6       	brtc	.-114    	; 0xa4 <__SREG__+0x65>
     116:	17 72       	andi	r17, 0x27	; 39
     118:	31 bf       	out	0x31, r19	; 49
     11a:	00 00       	nop
     11c:	00 80       	ld	r0, Z
     11e:	3f 08       	sbc	r3, r15
     120:	00 00       	nop
     122:	00 be       	out	0x30, r0	; 48
     124:	92 24       	eor	r9, r2
     126:	49 12       	cpse	r4, r25
     128:	3e ab       	std	Y+54, r19	; 0x36
     12a:	aa aa       	std	Y+50, r10	; 0x32
     12c:	2a be       	out	0x3a, r2	; 58
     12e:	cd cc       	rjmp	.-1638   	; 0xfffffaca <__eeprom_end+0xff7efaca>
     130:	cc 4c       	sbci	r28, 0xCC	; 204
     132:	3e 00       	.word	0x003e	; ????
     134:	00 00       	nop
     136:	80 be       	out	0x30, r8	; 48
     138:	ab aa       	std	Y+51, r10	; 0x33
     13a:	aa aa       	std	Y+50, r10	; 0x32
     13c:	3e 00       	.word	0x003e	; ????
     13e:	00 00       	nop
     140:	00 bf       	out	0x30, r16	; 48
     142:	00 00       	nop
     144:	00 80       	ld	r0, Z
     146:	3f 00       	.word	0x003f	; ????
     148:	00 00       	nop
     14a:	00 00       	nop
     14c:	08 41       	sbci	r16, 0x18	; 24
     14e:	78 d3       	rcall	.+1776   	; 0x840 <__vector_10+0x52>
     150:	bb 43       	sbci	r27, 0x3B	; 59
     152:	87 d1       	rcall	.+782    	; 0x462 <turn+0x18>
     154:	13 3d       	cpi	r17, 0xD3	; 211
     156:	19 0e       	add	r1, r25
     158:	3c c3       	rjmp	.+1656   	; 0x7d2 <m_usb_tx_char+0x9a>
     15a:	bd 42       	sbci	r27, 0x2D	; 45
     15c:	82 ad       	ldd	r24, Z+58	; 0x3a
     15e:	2b 3e       	cpi	r18, 0xEB	; 235
     160:	68 ec       	ldi	r22, 0xC8	; 200
     162:	82 76       	andi	r24, 0x62	; 98
     164:	be d9       	rcall	.-3204   	; 0xfffff4e2 <__eeprom_end+0xff7ef4e2>
     166:	8f e1       	ldi	r24, 0x1F	; 31
     168:	a9 3e       	cpi	r26, 0xE9	; 233
     16a:	4c 80       	ldd	r4, Y+4	; 0x04
     16c:	ef ff       	.word	0xffef	; ????
     16e:	be 01       	movw	r22, r28
     170:	c4 ff       	sbrs	r28, 4
     172:	7f 3f       	cpi	r23, 0xFF	; 255
     174:	00 00       	nop
     176:	00 00       	nop
	...

0000017a <__trampolines_end>:
     17a:	00 01       	movw	r0, r0
     17c:	00 00       	nop
     17e:	11 02       	muls	r17, r17
     180:	12 00       	.word	0x0012	; ????
     182:	02 00       	.word	0x0002	; ????
     184:	00 ce       	rjmp	.-1024   	; 0xfffffd86 <__eeprom_end+0xff7efd86>
     186:	01 43       	sbci	r16, 0x31	; 49
     188:	00 03       	mulsu	r16, r16
     18a:	00 00       	nop
     18c:	ca 01       	movw	r24, r20
     18e:	04 01       	movw	r0, r8
     190:	03 09       	sbc	r16, r3
     192:	04 b6       	in	r0, 0x34	; 52
     194:	01 12       	cpse	r0, r17
     196:	02 03       	mulsu	r16, r18
     198:	09 04       	cpc	r0, r9
     19a:	ae 01       	movw	r20, r28
     19c:	06 03       	mulsu	r16, r22
     19e:	03 09       	sbc	r16, r3
     1a0:	04 a4       	ldd	r0, Z+44	; 0x2c
     1a2:	01 08       	sbc	r0, r1

000001a4 <string3>:
     1a4:	08 03 34 00 31 00 30 00 00 00                       ..4.1.0...

000001ae <string2>:
     1ae:	06 03 4d 00 32 00 00 00                             ..M.2...

000001b6 <string1>:
     1b6:	12 03 4a 00 2e 00 20 00 46 00 69 00 65 00 6e 00     ..J... .F.i.e.n.
     1c6:	65 00 00 00                                         e...

000001ca <string0>:
     1ca:	04 03 09 04                                         ....

000001ce <config1_descriptor>:
     1ce:	09 02 43 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..C.....2.......
     1de:	01 00 05 24 00 10 01 05 24 01 01 01 04 24 02 06     ...$....$....$..
     1ee:	05 24 06 00 01 07 05 82 03 10 00 40 09 04 01 00     .$.........@....
     1fe:	02 0a 00 00 00 07 05 03 02 40 00 00 07 05 84 02     .........@......
     20e:	40 00 00                                            @..

00000211 <device_descriptor>:
     211:	12 01 00 02 02 00 00 10 c0 16 7a 04 00 01 01 02     ..........z.....
     221:	03 01                                               ..

00000223 <endpoint_config_table>:
     223:	00 01 c1 12 01 80 36 01 81 36                       ......6..6

0000022d <__c.2243>:
     22d:	20 20 20 2d 2d 2d 20 20 20 52 68 6f 3a 20 00           ---   Rho: .

0000023c <__c.2241>:
     23c:	20 20 20 2d 2d 2d 20 20 20 54 68 65 74 61 3a 20        ---   Theta: 
	...

0000024d <__c.2239>:
     24d:	20 29 00                                             ).

00000250 <__c.2237>:
     250:	2c 20 00                                            , .

00000253 <__c.2235>:
     253:	28 20 00                                            ( .

00000256 <__c.2233>:
     256:	20 20 20 2d 2d 2d 20 20 20 4e 65 77 20 66 72 61        ---   New fra
     266:	6d 65 3a 20 00                                      me: .

0000026b <__c.2231>:
     26b:	20 29 00                                             ).

0000026e <__c.2229>:
     26e:	2c 20 00                                            , .

00000271 <__c.2227>:
     271:	28 20 00                                            ( .

00000274 <__c.2225>:
     274:	20 20 20 2d 2d 2d 20 20 20 54 72 61 6e 73 6c 61        ---   Transla
     284:	74 69 6f 6e 3a 20 00                                tion: .

0000028b <__c.2223>:
     28b:	42 6f 74 74 6f 6d 20 49 6e 64 65 78 3a 20 00        Bottom Index: .

0000029a <__c.2221>:
     29a:	20 20 20 20 2d 2d 2d 2d 2d 2d 20 20 20 20 00            ------    .

000002a9 <__c.2219>:
     2a9:	54 6f 70 20 49 6e 64 65 78 3a 20 00                 Top Index: .

000002b5 <__c.2214>:
     2b5:	20 20 20 2d 2d 2d 20 20 20 00                          ---   .

000002bf <__c.2212>:
     2bf:	20 29 00                                             ).

000002c2 <__c.2210>:
     2c2:	2c 20 00                                            , .

000002c5 <__c.2208>:
     2c5:	28 20 00                                            ( .

000002c8 <__c.2205>:
     2c8:	20 2d 2d 2d 20 00                                    --- .

000002ce <__c.2198>:
     2ce:	44 69 73 74 61 6e 63 65 3a 20 00 00                 Distance: ..

000002da <__ctors_end>:
     2da:	11 24       	eor	r1, r1
     2dc:	1f be       	out	0x3f, r1	; 63
     2de:	cf ef       	ldi	r28, 0xFF	; 255
     2e0:	da e0       	ldi	r29, 0x0A	; 10
     2e2:	de bf       	out	0x3e, r29	; 62
     2e4:	cd bf       	out	0x3d, r28	; 61

000002e6 <__do_copy_data>:
     2e6:	11 e0       	ldi	r17, 0x01	; 1
     2e8:	a0 e0       	ldi	r26, 0x00	; 0
     2ea:	b1 e0       	ldi	r27, 0x01	; 1
     2ec:	e6 ee       	ldi	r30, 0xE6	; 230
     2ee:	f6 e2       	ldi	r31, 0x26	; 38
     2f0:	02 c0       	rjmp	.+4      	; 0x2f6 <__do_copy_data+0x10>
     2f2:	05 90       	lpm	r0, Z+
     2f4:	0d 92       	st	X+, r0
     2f6:	a8 30       	cpi	r26, 0x08	; 8
     2f8:	b1 07       	cpc	r27, r17
     2fa:	d9 f7       	brne	.-10     	; 0x2f2 <__do_copy_data+0xc>

000002fc <__do_clear_bss>:
     2fc:	21 e0       	ldi	r18, 0x01	; 1
     2fe:	a8 e0       	ldi	r26, 0x08	; 8
     300:	b1 e0       	ldi	r27, 0x01	; 1
     302:	01 c0       	rjmp	.+2      	; 0x306 <.do_clear_bss_start>

00000304 <.do_clear_bss_loop>:
     304:	1d 92       	st	X+, r1

00000306 <.do_clear_bss_start>:
     306:	a8 31       	cpi	r26, 0x18	; 24
     308:	b2 07       	cpc	r27, r18
     30a:	e1 f7       	brne	.-8      	; 0x304 <.do_clear_bss_loop>
     30c:	0e 94 97 01 	call	0x32e	; 0x32e <main>
     310:	0c 94 71 13 	jmp	0x26e2	; 0x26e2 <_exit>

00000314 <__bad_interrupt>:
     314:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000318 <color_init>:

 #include "robockey.h"

 void color_init() {
	// Set pins D2&3 as output
	set(DDRD, 2);
     318:	52 9a       	sbi	0x0a, 2	; 10
	set(DDRD, 3);
     31a:	53 9a       	sbi	0x0a, 3	; 10
     31c:	08 95       	ret

0000031e <color_set>:
 }

 void color_set(bool red) {
	if (red) {
     31e:	88 23       	and	r24, r24
     320:	19 f0       	breq	.+6      	; 0x328 <color_set+0xa>
		// Testing LED
		set(PORTD, 2);
     322:	5a 9a       	sbi	0x0b, 2	; 11
		clear(PORTD, 3);
     324:	5b 98       	cbi	0x0b, 3	; 11
     326:	08 95       	ret
	} else {
		// Testing LED
		clear(PORTD, 2);
     328:	5a 98       	cbi	0x0b, 2	; 11
		set(PORTD, 3);
     32a:	5b 9a       	sbi	0x0b, 3	; 11
     32c:	08 95       	ret

0000032e <main>:
	}
 }

int main(void){
     32e:	cf 93       	push	r28
     330:	df 93       	push	r29
     332:	cd b7       	in	r28, 0x3d	; 61
     334:	de b7       	in	r29, 0x3e	; 62
     336:	2d 97       	sbiw	r28, 0x0d	; 13
     338:	0f b6       	in	r0, 0x3f	; 63
     33a:	f8 94       	cli
     33c:	de bf       	out	0x3e, r29	; 62
     33e:	0f be       	out	0x3f, r0	; 63
     340:	cd bf       	out	0x3d, r28	; 61
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     342:	2f eb       	ldi	r18, 0xBF	; 191
     344:	87 e2       	ldi	r24, 0x27	; 39
     346:	99 e0       	ldi	r25, 0x09	; 9
     348:	21 50       	subi	r18, 0x01	; 1
     34a:	80 40       	sbci	r24, 0x00	; 0
     34c:	90 40       	sbci	r25, 0x00	; 0
     34e:	e1 f7       	brne	.-8      	; 0x348 <main+0x1a>
     350:	00 c0       	rjmp	.+0      	; 0x352 <main+0x24>
     352:	00 00       	nop
	m_wait(3000);
	// System prescaler
	m_clockdivide(3);
     354:	e1 e6       	ldi	r30, 0x61	; 97
     356:	f0 e0       	ldi	r31, 0x00	; 0
     358:	80 e8       	ldi	r24, 0x80	; 128
     35a:	80 83       	st	Z, r24
     35c:	83 e0       	ldi	r24, 0x03	; 3
     35e:	80 83       	st	Z, r24
	color_init();
     360:	0e 94 8c 01 	call	0x318	; 0x318 <color_init>
	color_set(false);
     364:	80 e0       	ldi	r24, 0x00	; 0
     366:	0e 94 8f 01 	call	0x31e	; 0x31e <color_set>
	// Initialize usb
	m_usb_init();
     36a:	0e 94 80 03 	call	0x700	; 0x700 <m_usb_init>
	if (!m_usb_isconnected()) {
     36e:	0e 94 99 03 	call	0x732	; 0x732 <m_usb_isconnected>
		//m_green(ON);
	}
	// m_green(OFF);
	// Initialize motor
	motor_init();
     372:	0e 94 e6 01 	call	0x3cc	; 0x3cc <motor_init>
	//Initialize m_wii
	char wiiOpen = 0;
	while(wiiOpen == 0) {
		wiiOpen = m_wii_open();
     376:	0e 94 3f 06 	call	0xc7e	; 0xc7e <m_wii_open>
		m_red(ON);
     37a:	6e 9a       	sbi	0x0d, 6	; 13
     37c:	76 98       	cbi	0x0e, 6	; 14
	// m_green(OFF);
	// Initialize motor
	motor_init();
	//Initialize m_wii
	char wiiOpen = 0;
	while(wiiOpen == 0) {
     37e:	88 23       	and	r24, r24
     380:	d1 f3       	breq	.-12     	; 0x376 <main+0x48>
		wiiOpen = m_wii_open();
		m_red(ON);
		//return 0;
	}
	m_red(OFF);
     382:	6e 9a       	sbi	0x0d, 6	; 13
     384:	76 9a       	sbi	0x0e, 6	; 14
	
	Robot robot;	// Robot variable
	init_robot(&robot);
     386:	ce 01       	movw	r24, r28
     388:	01 96       	adiw	r24, 0x01	; 1
     38a:	0e 94 4b 09 	call	0x1296	; 0x1296 <init_robot>

	///// FOR TESTING WITHOUT PLAY COMMAND //////////////////
	// init_rf(1);
	active = true;
     38e:	81 e0       	ldi	r24, 0x01	; 1
     390:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <active>
	/////////////////////////////////////////////////////////
	int k = 0;

	// Main loop
	while (1) {
		if (k++ >= 100) {
     394:	01 e0       	ldi	r16, 0x01	; 1
     396:	10 e0       	ldi	r17, 0x00	; 0
			k = 0;
     398:	e1 2c       	mov	r14, r1
     39a:	f1 2c       	mov	r15, r1
     39c:	08 c0       	rjmp	.+16     	; 0x3ae <main+0x80>
	/////////////////////////////////////////////////////////
	int k = 0;

	// Main loop
	while (1) {
		if (k++ >= 100) {
     39e:	04 36       	cpi	r16, 0x64	; 100
     3a0:	11 05       	cpc	r17, r1
     3a2:	1c f4       	brge	.+6      	; 0x3aa <main+0x7c>
     3a4:	0f 5f       	subi	r16, 0xFF	; 255
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	02 c0       	rjmp	.+4      	; 0x3ae <main+0x80>
			k = 0;
     3aa:	0e 2d       	mov	r16, r14
     3ac:	1f 2d       	mov	r17, r15
			m_red(TOGGLE);
			interpret(&robot, star_array);
			*/
		}
		// Check if robot is active
		if(active){
     3ae:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <active>
     3b2:	88 23       	and	r24, r24
     3b4:	a1 f3       	breq	.-24     	; 0x39e <main+0x70>
			// TO TEST DRIVING TO GOAL
			if (step_to_goal(&robot)) {
     3b6:	ce 01       	movw	r24, r28
     3b8:	01 96       	adiw	r24, 0x01	; 1
     3ba:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <step_to_goal>
     3be:	88 23       	and	r24, r24
     3c0:	71 f3       	breq	.-36     	; 0x39e <main+0x70>
				motor_stop();
     3c2:	0e 94 20 02 	call	0x440	; 0x440 <motor_stop>
				m_green(ON);
     3c6:	6a 9a       	sbi	0x0d, 2	; 13
     3c8:	72 98       	cbi	0x0e, 2	; 14
				while (1) {}
     3ca:	ff cf       	rjmp	.-2      	; 0x3ca <main+0x9c>

000003cc <motor_init>:
	if (opponent_angle < high_bound && opponent_angle < PI && low_bound >= PI - error) {
		return true;
	}*/
	// Normal case
	return (robot->o > low_bound && robot->o < high_bound);
}
     3cc:	21 9a       	sbi	0x04, 1	; 4
     3ce:	22 9a       	sbi	0x04, 2	; 4
     3d0:	23 9a       	sbi	0x04, 3	; 4
     3d2:	27 9a       	sbi	0x04, 7	; 4
     3d4:	29 9a       	sbi	0x05, 1	; 5
     3d6:	2a 98       	cbi	0x05, 2	; 5
     3d8:	2b 9a       	sbi	0x05, 3	; 5
     3da:	2f 98       	cbi	0x05, 7	; 5
     3dc:	e1 e8       	ldi	r30, 0x81	; 129
     3de:	f0 e0       	ldi	r31, 0x00	; 0
     3e0:	80 81       	ld	r24, Z
     3e2:	8b 7f       	andi	r24, 0xFB	; 251
     3e4:	80 83       	st	Z, r24
     3e6:	80 81       	ld	r24, Z
     3e8:	82 60       	ori	r24, 0x02	; 2
     3ea:	80 83       	st	Z, r24
     3ec:	80 81       	ld	r24, Z
     3ee:	8e 7f       	andi	r24, 0xFE	; 254
     3f0:	80 83       	st	Z, r24
     3f2:	80 81       	ld	r24, Z
     3f4:	8f 7e       	andi	r24, 0xEF	; 239
     3f6:	80 83       	st	Z, r24
     3f8:	80 81       	ld	r24, Z
     3fa:	88 60       	ori	r24, 0x08	; 8
     3fc:	80 83       	st	Z, r24
     3fe:	e0 e8       	ldi	r30, 0x80	; 128
     400:	f0 e0       	ldi	r31, 0x00	; 0
     402:	80 81       	ld	r24, Z
     404:	8d 7f       	andi	r24, 0xFD	; 253
     406:	80 83       	st	Z, r24
     408:	80 81       	ld	r24, Z
     40a:	81 60       	ori	r24, 0x01	; 1
     40c:	80 83       	st	Z, r24
     40e:	80 81       	ld	r24, Z
     410:	80 68       	ori	r24, 0x80	; 128
     412:	80 83       	st	Z, r24
     414:	80 81       	ld	r24, Z
     416:	80 64       	ori	r24, 0x40	; 64
     418:	80 83       	st	Z, r24
     41a:	80 81       	ld	r24, Z
     41c:	80 62       	ori	r24, 0x20	; 32
     41e:	80 83       	st	Z, r24
     420:	80 81       	ld	r24, Z
     422:	80 61       	ori	r24, 0x10	; 16
     424:	80 83       	st	Z, r24
     426:	8f eb       	ldi	r24, 0xBF	; 191
     428:	90 e0       	ldi	r25, 0x00	; 0
     42a:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     42e:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     432:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
     436:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
     43a:	26 9a       	sbi	0x04, 6	; 4
     43c:	25 9a       	sbi	0x04, 5	; 4
     43e:	08 95       	ret

00000440 <motor_stop>:
     440:	29 98       	cbi	0x05, 1	; 5
     442:	2a 98       	cbi	0x05, 2	; 5
     444:	2b 98       	cbi	0x05, 3	; 5
     446:	2f 98       	cbi	0x05, 7	; 5
     448:	08 95       	ret

0000044a <turn>:
     44a:	29 98       	cbi	0x05, 1	; 5
     44c:	2a 9a       	sbi	0x05, 2	; 5
     44e:	2b 98       	cbi	0x05, 3	; 5
     450:	2f 9a       	sbi	0x05, 7	; 5
     452:	00 97       	sbiw	r24, 0x00	; 0
     454:	69 f4       	brne	.+26     	; 0x470 <turn+0x26>
     456:	87 e3       	ldi	r24, 0x37	; 55
     458:	90 e0       	ldi	r25, 0x00	; 0
     45a:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     45e:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     462:	8f e3       	ldi	r24, 0x3F	; 63
     464:	90 e0       	ldi	r25, 0x00	; 0
     466:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
     46a:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
     46e:	08 95       	ret
     470:	bc 01       	movw	r22, r24
     472:	18 16       	cp	r1, r24
     474:	19 06       	cpc	r1, r25
     476:	ec f4       	brge	.+58     	; 0x4b2 <turn+0x68>
     478:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     47c:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     480:	07 2e       	mov	r0, r23
     482:	00 0c       	add	r0, r0
     484:	88 0b       	sbc	r24, r24
     486:	99 0b       	sbc	r25, r25
     488:	0e 94 36 10 	call	0x206c	; 0x206c <__floatsisf>
     48c:	20 e0       	ldi	r18, 0x00	; 0
     48e:	30 e0       	ldi	r19, 0x00	; 0
     490:	4f e7       	ldi	r20, 0x7F	; 127
     492:	53 e4       	ldi	r21, 0x43	; 67
     494:	0e 94 59 11 	call	0x22b2	; 0x22b2 <__mulsf3>
     498:	20 e0       	ldi	r18, 0x00	; 0
     49a:	30 e0       	ldi	r19, 0x00	; 0
     49c:	48 e4       	ldi	r20, 0x48	; 72
     49e:	52 e4       	ldi	r21, 0x42	; 66
     4a0:	0e 94 8c 0f 	call	0x1f18	; 0x1f18 <__divsf3>
     4a4:	0e 94 fe 0f 	call	0x1ffc	; 0x1ffc <__fixsfsi>
     4a8:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
     4ac:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
     4b0:	08 95       	ret
     4b2:	71 95       	neg	r23
     4b4:	61 95       	neg	r22
     4b6:	71 09       	sbc	r23, r1
     4b8:	07 2e       	mov	r0, r23
     4ba:	00 0c       	add	r0, r0
     4bc:	88 0b       	sbc	r24, r24
     4be:	99 0b       	sbc	r25, r25
     4c0:	0e 94 36 10 	call	0x206c	; 0x206c <__floatsisf>
     4c4:	20 e0       	ldi	r18, 0x00	; 0
     4c6:	30 e0       	ldi	r19, 0x00	; 0
     4c8:	4f e7       	ldi	r20, 0x7F	; 127
     4ca:	53 e4       	ldi	r21, 0x43	; 67
     4cc:	0e 94 59 11 	call	0x22b2	; 0x22b2 <__mulsf3>
     4d0:	20 e0       	ldi	r18, 0x00	; 0
     4d2:	30 e0       	ldi	r19, 0x00	; 0
     4d4:	48 e4       	ldi	r20, 0x48	; 72
     4d6:	52 e4       	ldi	r21, 0x42	; 66
     4d8:	0e 94 8c 0f 	call	0x1f18	; 0x1f18 <__divsf3>
     4dc:	0e 94 fe 0f 	call	0x1ffc	; 0x1ffc <__fixsfsi>
     4e0:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     4e4:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     4e8:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
     4ec:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
     4f0:	08 95       	ret

000004f2 <drive_to_goal>:

int drive_to_goal(Robot* robot, float opponent_x, float opponent_y) {
     4f2:	4f 92       	push	r4
     4f4:	5f 92       	push	r5
     4f6:	6f 92       	push	r6
     4f8:	7f 92       	push	r7
     4fa:	8f 92       	push	r8
     4fc:	9f 92       	push	r9
     4fe:	af 92       	push	r10
     500:	bf 92       	push	r11
     502:	cf 92       	push	r12
     504:	df 92       	push	r13
     506:	ef 92       	push	r14
     508:	ff 92       	push	r15
     50a:	0f 93       	push	r16
     50c:	1f 93       	push	r17
     50e:	cf 93       	push	r28
     510:	df 93       	push	r29
     512:	ec 01       	movw	r28, r24
     514:	4a 01       	movw	r8, r20
     516:	5b 01       	movw	r10, r22
     518:	68 01       	movw	r12, r16
     51a:	79 01       	movw	r14, r18
	if (opponent_x == robot->x) robot->x += 1;
     51c:	49 80       	ldd	r4, Y+1	; 0x01
     51e:	5a 80       	ldd	r5, Y+2	; 0x02
     520:	6b 80       	ldd	r6, Y+3	; 0x03
     522:	7c 80       	ldd	r7, Y+4	; 0x04
     524:	9a 01       	movw	r18, r20
     526:	ab 01       	movw	r20, r22
     528:	c3 01       	movw	r24, r6
     52a:	b2 01       	movw	r22, r4
     52c:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <__cmpsf2>
     530:	81 11       	cpse	r24, r1
     532:	0c c0       	rjmp	.+24     	; 0x54c <drive_to_goal+0x5a>
     534:	20 e0       	ldi	r18, 0x00	; 0
     536:	30 e0       	ldi	r19, 0x00	; 0
     538:	40 e8       	ldi	r20, 0x80	; 128
     53a:	5f e3       	ldi	r21, 0x3F	; 63
     53c:	c3 01       	movw	r24, r6
     53e:	b2 01       	movw	r22, r4
     540:	0e 94 a4 0e 	call	0x1d48	; 0x1d48 <__addsf3>
     544:	69 83       	std	Y+1, r22	; 0x01
     546:	7a 83       	std	Y+2, r23	; 0x02
     548:	8b 83       	std	Y+3, r24	; 0x03
     54a:	9c 83       	std	Y+4, r25	; 0x04
	if (opponent_y == robot->y) robot->y += 1;
     54c:	4d 80       	ldd	r4, Y+5	; 0x05
     54e:	5e 80       	ldd	r5, Y+6	; 0x06
     550:	6f 80       	ldd	r6, Y+7	; 0x07
     552:	78 84       	ldd	r7, Y+8	; 0x08
     554:	a7 01       	movw	r20, r14
     556:	96 01       	movw	r18, r12
     558:	c3 01       	movw	r24, r6
     55a:	b2 01       	movw	r22, r4
     55c:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <__cmpsf2>
     560:	81 11       	cpse	r24, r1
     562:	0c c0       	rjmp	.+24     	; 0x57c <drive_to_goal+0x8a>
     564:	20 e0       	ldi	r18, 0x00	; 0
     566:	30 e0       	ldi	r19, 0x00	; 0
     568:	40 e8       	ldi	r20, 0x80	; 128
     56a:	5f e3       	ldi	r21, 0x3F	; 63
     56c:	c3 01       	movw	r24, r6
     56e:	b2 01       	movw	r22, r4
     570:	0e 94 a4 0e 	call	0x1d48	; 0x1d48 <__addsf3>
     574:	6d 83       	std	Y+5, r22	; 0x05
     576:	7e 83       	std	Y+6, r23	; 0x06
     578:	8f 83       	std	Y+7, r24	; 0x07
     57a:	98 87       	std	Y+8, r25	; 0x08
	float opponent_angle = atan2f((opponent_y - robot->y), opponent_x - robot->x);
     57c:	29 81       	ldd	r18, Y+1	; 0x01
     57e:	3a 81       	ldd	r19, Y+2	; 0x02
     580:	4b 81       	ldd	r20, Y+3	; 0x03
     582:	5c 81       	ldd	r21, Y+4	; 0x04
     584:	c5 01       	movw	r24, r10
     586:	b4 01       	movw	r22, r8
     588:	0e 94 a3 0e 	call	0x1d46	; 0x1d46 <__subsf3>
     58c:	4b 01       	movw	r8, r22
     58e:	5c 01       	movw	r10, r24
     590:	2d 81       	ldd	r18, Y+5	; 0x05
     592:	3e 81       	ldd	r19, Y+6	; 0x06
     594:	4f 81       	ldd	r20, Y+7	; 0x07
     596:	58 85       	ldd	r21, Y+8	; 0x08
     598:	c7 01       	movw	r24, r14
     59a:	b6 01       	movw	r22, r12
     59c:	0e 94 a3 0e 	call	0x1d46	; 0x1d46 <__subsf3>
     5a0:	a5 01       	movw	r20, r10
     5a2:	94 01       	movw	r18, r8
     5a4:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <atan2>
     5a8:	9b 01       	movw	r18, r22
     5aa:	ac 01       	movw	r20, r24
	float error = PI / 30.0;
	float low_bound = opponent_angle - error;
	float high_bound = opponent_angle + error;
	int turn_speed = abs(robot->o - opponent_angle) * 255.0 / 180.0;
     5ac:	69 85       	ldd	r22, Y+9	; 0x09
     5ae:	7a 85       	ldd	r23, Y+10	; 0x0a
     5b0:	8b 85       	ldd	r24, Y+11	; 0x0b
     5b2:	9c 85       	ldd	r25, Y+12	; 0x0c
     5b4:	0e 94 a3 0e 	call	0x1d46	; 0x1d46 <__subsf3>
     5b8:	0e 94 fe 0f 	call	0x1ffc	; 0x1ffc <__fixsfsi>
     5bc:	9b 01       	movw	r18, r22
     5be:	77 23       	and	r23, r23
     5c0:	24 f4       	brge	.+8      	; 0x5ca <drive_to_goal+0xd8>
     5c2:	22 27       	eor	r18, r18
     5c4:	33 27       	eor	r19, r19
     5c6:	26 1b       	sub	r18, r22
     5c8:	37 0b       	sbc	r19, r23
     5ca:	b9 01       	movw	r22, r18
     5cc:	33 0f       	add	r19, r19
     5ce:	88 0b       	sbc	r24, r24
     5d0:	99 0b       	sbc	r25, r25
     5d2:	0e 94 36 10 	call	0x206c	; 0x206c <__floatsisf>
     5d6:	20 e0       	ldi	r18, 0x00	; 0
     5d8:	30 e0       	ldi	r19, 0x00	; 0
     5da:	4f e7       	ldi	r20, 0x7F	; 127
     5dc:	53 e4       	ldi	r21, 0x43	; 67
     5de:	0e 94 59 11 	call	0x22b2	; 0x22b2 <__mulsf3>
     5e2:	20 e0       	ldi	r18, 0x00	; 0
     5e4:	30 e0       	ldi	r19, 0x00	; 0
     5e6:	44 e3       	ldi	r20, 0x34	; 52
     5e8:	53 e4       	ldi	r21, 0x43	; 67
     5ea:	0e 94 8c 0f 	call	0x1f18	; 0x1f18 <__divsf3>
     5ee:	0e 94 fe 0f 	call	0x1ffc	; 0x1ffc <__fixsfsi>
	return turn_speed;
     5f2:	cb 01       	movw	r24, r22
     5f4:	df 91       	pop	r29
     5f6:	cf 91       	pop	r28
     5f8:	1f 91       	pop	r17
     5fa:	0f 91       	pop	r16
     5fc:	ff 90       	pop	r15
     5fe:	ef 90       	pop	r14
     600:	df 90       	pop	r13
     602:	cf 90       	pop	r12
     604:	bf 90       	pop	r11
     606:	af 90       	pop	r10
     608:	9f 90       	pop	r9
     60a:	8f 90       	pop	r8
     60c:	7f 90       	pop	r7
     60e:	6f 90       	pop	r6
     610:	5f 90       	pop	r5
     612:	4f 90       	pop	r4
     614:	08 95       	ret

00000616 <m_bus_init>:

// PUBLIC FUNCTIONS
void m_bus_init(void)
{
	// ENABLE PULLUPS
	set(PORTD,0);
     616:	58 9a       	sbi	0x0b, 0	; 11
	set(PORTD,1);
     618:	59 9a       	sbi	0x0b, 1	; 11
	set(PORTD,2);
     61a:	5a 9a       	sbi	0x0b, 2	; 11
	
	// CONFIGURE THE CLOCK
	TWBR = 12;	// CLK freq = CPU clock / (16 + 2*TWBR*(4^TWPS)), 16MHz clock, TWBR=12, TWPS=00 -> 400kHz
     61c:	8c e0       	ldi	r24, 0x0C	; 12
     61e:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>

	// ENABLE interrupts in INT2 (D2)
	set(EICRA,ISC21); clear(EICRA,ISC20); // trigger on falling edge
     622:	e9 e6       	ldi	r30, 0x69	; 105
     624:	f0 e0       	ldi	r31, 0x00	; 0
     626:	80 81       	ld	r24, Z
     628:	80 62       	ori	r24, 0x20	; 32
     62a:	80 83       	st	Z, r24
     62c:	80 81       	ld	r24, Z
     62e:	8f 7e       	andi	r24, 0xEF	; 239
     630:	80 83       	st	Z, r24
	set(EIMSK,INT2); // demask the interrupt
     632:	ea 9a       	sbi	0x1d, 2	; 29
	sei(); // enable global interrupts
     634:	78 94       	sei
     636:	08 95       	ret

00000638 <m_rf_read>:
	
	return 1;
}

char m_rf_read(char* buffer, char packet_length)
{
     638:	cf 93       	push	r28
     63a:	df 93       	push	r29
     63c:	9c 01       	movw	r18, r24

	char bytes;
	int i;

	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
     63e:	84 ea       	ldi	r24, 0xA4	; 164
     640:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
     644:	ec eb       	ldi	r30, 0xBC	; 188
     646:	f0 e0       	ldi	r31, 0x00	; 0
     648:	90 81       	ld	r25, Z
     64a:	99 23       	and	r25, r25
     64c:	ec f7       	brge	.-6      	; 0x648 <m_rf_read+0x10>
	
	// ADDRESS (in Master-Receiver Mode)
	TWDR = ((MRFTWIADDR<<1)|1);
     64e:	81 e5       	ldi	r24, 0x51	; 81
     650:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR = (1<<TWINT) | (1<<TWEN);
     654:	84 e8       	ldi	r24, 0x84	; 132
     656:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){}; // wait until finished sending address
     65a:	ec eb       	ldi	r30, 0xBC	; 188
     65c:	f0 e0       	ldi	r31, 0x00	; 0
     65e:	90 81       	ld	r25, Z
     660:	99 23       	and	r25, r25
     662:	ec f7       	brge	.-6      	; 0x65e <m_rf_read+0x26>
	if((TWSR & 0xF8)== 0x48){ // ACK was not received
     664:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     668:	88 7f       	andi	r24, 0xF8	; 248
     66a:	88 34       	cpi	r24, 0x48	; 72
     66c:	29 f4       	brne	.+10     	; 0x678 <m_rf_read+0x40>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
     66e:	84 e9       	ldi	r24, 0x94	; 148
     670:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
		return 0; // not connected/listening
     674:	80 e0       	ldi	r24, 0x00	; 0
     676:	41 c0       	rjmp	.+130    	; 0x6fa <m_rf_read+0xc2>
	}
	

	// (BYTES)
	TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
     678:	84 ec       	ldi	r24, 0xC4	; 196
     67a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
     67e:	ec eb       	ldi	r30, 0xBC	; 188
     680:	f0 e0       	ldi	r31, 0x00	; 0
     682:	90 81       	ld	r25, Z
     684:	99 23       	and	r25, r25
     686:	ec f7       	brge	.-6      	; 0x682 <m_rf_read+0x4a>
	bytes = TWDR;
     688:	40 91 bb 00 	lds	r20, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	if(bytes != packet_length){
     68c:	46 13       	cpse	r20, r22
     68e:	09 c0       	rjmp	.+18     	; 0x6a2 <m_rf_read+0x6a>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
		return 0; // indicate length mismatch
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
     690:	84 2f       	mov	r24, r20
     692:	90 e0       	ldi	r25, 0x00	; 0
     694:	01 97       	sbiw	r24, 0x01	; 1
     696:	18 16       	cp	r1, r24
     698:	19 06       	cpc	r1, r25
     69a:	44 f0       	brlt	.+16     	; 0x6ac <m_rf_read+0x74>
     69c:	40 e0       	ldi	r20, 0x00	; 0
     69e:	50 e0       	ldi	r21, 0x00	; 0
     6a0:	1a c0       	rjmp	.+52     	; 0x6d6 <m_rf_read+0x9e>
	// (BYTES)
	TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
	bytes = TWDR;
	if(bytes != packet_length){
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
     6a2:	84 e9       	ldi	r24, 0x94	; 148
     6a4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
		return 0; // indicate length mismatch
     6a8:	80 e0       	ldi	r24, 0x00	; 0
     6aa:	27 c0       	rjmp	.+78     	; 0x6fa <m_rf_read+0xc2>
     6ac:	d9 01       	movw	r26, r18
     6ae:	50 e0       	ldi	r21, 0x00	; 0
     6b0:	41 50       	subi	r20, 0x01	; 1
     6b2:	51 09       	sbc	r21, r1
     6b4:	b9 01       	movw	r22, r18
     6b6:	64 0f       	add	r22, r20
     6b8:	75 1f       	adc	r23, r21
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
     6ba:	ec eb       	ldi	r30, 0xBC	; 188
     6bc:	f0 e0       	ldi	r31, 0x00	; 0
     6be:	84 ec       	ldi	r24, 0xC4	; 196
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		buffer[i] = TWDR;
     6c0:	cb eb       	ldi	r28, 0xBB	; 187
     6c2:	d0 e0       	ldi	r29, 0x00	; 0
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
     6c4:	80 83       	st	Z, r24
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
     6c6:	90 81       	ld	r25, Z
     6c8:	99 23       	and	r25, r25
     6ca:	ec f7       	brge	.-6      	; 0x6c6 <m_rf_read+0x8e>
		buffer[i] = TWDR;
     6cc:	98 81       	ld	r25, Y
     6ce:	9d 93       	st	X+, r25
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
		return 0; // indicate length mismatch
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
     6d0:	a6 17       	cp	r26, r22
     6d2:	b7 07       	cpc	r27, r23
     6d4:	b9 f7       	brne	.-18     	; 0x6c4 <m_rf_read+0x8c>
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		buffer[i] = TWDR;
	}
	TWCR = (1<<TWINT) | (1<<TWEN);	// clear the flag, no ACK, and wait for another byte
     6d6:	84 e8       	ldi	r24, 0x84	; 132
     6d8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
     6dc:	ec eb       	ldi	r30, 0xBC	; 188
     6de:	f0 e0       	ldi	r31, 0x00	; 0
     6e0:	90 81       	ld	r25, Z
     6e2:	99 23       	and	r25, r25
     6e4:	ec f7       	brge	.-6      	; 0x6e0 <m_rf_read+0xa8>
	buffer[i++] = TWDR;
     6e6:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     6ea:	f9 01       	movw	r30, r18
     6ec:	e4 0f       	add	r30, r20
     6ee:	f5 1f       	adc	r31, r21
     6f0:	80 83       	st	Z, r24
	
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
     6f2:	84 e9       	ldi	r24, 0x94	; 148
     6f4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

	return 1;
     6f8:	81 e0       	ldi	r24, 0x01	; 1
}
     6fa:	df 91       	pop	r29
     6fc:	cf 91       	pop	r28
     6fe:	08 95       	ret

00000700 <m_usb_init>:
	phex(i);
}

void m_usb_tx_hexchar(unsigned char i)
{
	phex(i);
     700:	81 e0       	ldi	r24, 0x01	; 1
     702:	80 93 d7 00 	sts	0x00D7, r24	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
     706:	80 ea       	ldi	r24, 0xA0	; 160
     708:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
     70c:	82 e1       	ldi	r24, 0x12	; 18
     70e:	89 bd       	out	0x29, r24	; 41
     710:	09 b4       	in	r0, 0x29	; 41
     712:	00 fe       	sbrs	r0, 0
     714:	fd cf       	rjmp	.-6      	; 0x710 <m_usb_init+0x10>
     716:	80 e9       	ldi	r24, 0x90	; 144
     718:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
     71c:	10 92 e0 00 	sts	0x00E0, r1	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
     720:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <usb_configuration>
     724:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <__data_end>
     728:	8c e0       	ldi	r24, 0x0C	; 12
     72a:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
     72e:	78 94       	sei
     730:	08 95       	ret

00000732 <m_usb_isconnected>:
     732:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <usb_configuration>
     736:	08 95       	ret

00000738 <m_usb_tx_char>:
     738:	cf 93       	push	r28
     73a:	df 93       	push	r29
     73c:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <usb_configuration>
     740:	99 23       	and	r25, r25
     742:	09 f4       	brne	.+2      	; 0x746 <m_usb_tx_char+0xe>
     744:	4c c0       	rjmp	.+152    	; 0x7de <m_usb_tx_char+0xa6>
     746:	9f b7       	in	r25, 0x3f	; 63
     748:	f8 94       	cli
     74a:	24 e0       	ldi	r18, 0x04	; 4
     74c:	20 93 e9 00 	sts	0x00E9, r18	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
     750:	20 91 09 01 	lds	r18, 0x0109	; 0x800109 <transmit_previous_timeout>
     754:	22 23       	and	r18, r18
     756:	49 f0       	breq	.+18     	; 0x76a <m_usb_tx_char+0x32>
     758:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     75c:	25 fd       	sbrc	r18, 5
     75e:	03 c0       	rjmp	.+6      	; 0x766 <m_usb_tx_char+0x2e>
     760:	9f bf       	out	0x3f, r25	; 63
     762:	8f ef       	ldi	r24, 0xFF	; 255
     764:	41 c0       	rjmp	.+130    	; 0x7e8 <m_usb_tx_char+0xb0>
     766:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <transmit_previous_timeout>
     76a:	30 91 e4 00 	lds	r19, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
     76e:	37 5e       	subi	r19, 0xE7	; 231
     770:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     774:	25 fd       	sbrc	r18, 5
     776:	24 c0       	rjmp	.+72     	; 0x7c0 <m_usb_tx_char+0x88>
     778:	9f bf       	out	0x3f, r25	; 63
     77a:	90 91 e4 00 	lds	r25, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
     77e:	93 17       	cp	r25, r19
     780:	81 f0       	breq	.+32     	; 0x7a2 <m_usb_tx_char+0x6a>
     782:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <usb_configuration>
     786:	99 23       	and	r25, r25
     788:	61 f1       	breq	.+88     	; 0x7e2 <m_usb_tx_char+0xaa>
     78a:	a9 ee       	ldi	r26, 0xE9	; 233
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	44 e0       	ldi	r20, 0x04	; 4
     790:	e8 ee       	ldi	r30, 0xE8	; 232
     792:	f0 e0       	ldi	r31, 0x00	; 0
     794:	c4 ee       	ldi	r28, 0xE4	; 228
     796:	d0 e0       	ldi	r29, 0x00	; 0
     798:	0d c0       	rjmp	.+26     	; 0x7b4 <m_usb_tx_char+0x7c>
     79a:	9f bf       	out	0x3f, r25	; 63
     79c:	98 81       	ld	r25, Y
     79e:	93 13       	cpse	r25, r19
     7a0:	05 c0       	rjmp	.+10     	; 0x7ac <m_usb_tx_char+0x74>
     7a2:	81 e0       	ldi	r24, 0x01	; 1
     7a4:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <transmit_previous_timeout>
     7a8:	8f ef       	ldi	r24, 0xFF	; 255
     7aa:	1e c0       	rjmp	.+60     	; 0x7e8 <m_usb_tx_char+0xb0>
     7ac:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <usb_configuration>
     7b0:	99 23       	and	r25, r25
     7b2:	c9 f0       	breq	.+50     	; 0x7e6 <m_usb_tx_char+0xae>
     7b4:	9f b7       	in	r25, 0x3f	; 63
     7b6:	f8 94       	cli
     7b8:	4c 93       	st	X, r20
     7ba:	20 81       	ld	r18, Z
     7bc:	25 ff       	sbrs	r18, 5
     7be:	ed cf       	rjmp	.-38     	; 0x79a <m_usb_tx_char+0x62>
     7c0:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     7c4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     7c8:	85 fd       	sbrc	r24, 5
     7ca:	03 c0       	rjmp	.+6      	; 0x7d2 <m_usb_tx_char+0x9a>
     7cc:	8a e3       	ldi	r24, 0x3A	; 58
     7ce:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     7d2:	85 e0       	ldi	r24, 0x05	; 5
     7d4:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <transmit_flush_timer>
     7d8:	9f bf       	out	0x3f, r25	; 63
     7da:	80 e0       	ldi	r24, 0x00	; 0
     7dc:	05 c0       	rjmp	.+10     	; 0x7e8 <m_usb_tx_char+0xb0>
     7de:	8f ef       	ldi	r24, 0xFF	; 255
     7e0:	03 c0       	rjmp	.+6      	; 0x7e8 <m_usb_tx_char+0xb0>
     7e2:	8f ef       	ldi	r24, 0xFF	; 255
     7e4:	01 c0       	rjmp	.+2      	; 0x7e8 <m_usb_tx_char+0xb0>
     7e6:	8f ef       	ldi	r24, 0xFF	; 255
     7e8:	df 91       	pop	r29
     7ea:	cf 91       	pop	r28
     7ec:	08 95       	ret

000007ee <__vector_10>:
     7ee:	1f 92       	push	r1
     7f0:	0f 92       	push	r0
     7f2:	0f b6       	in	r0, 0x3f	; 63
     7f4:	0f 92       	push	r0
     7f6:	11 24       	eor	r1, r1
     7f8:	8f 93       	push	r24
     7fa:	9f 93       	push	r25
     7fc:	ef 93       	push	r30
     7fe:	ff 93       	push	r31
     800:	e1 ee       	ldi	r30, 0xE1	; 225
     802:	f0 e0       	ldi	r31, 0x00	; 0
     804:	80 81       	ld	r24, Z
     806:	10 82       	st	Z, r1
     808:	83 ff       	sbrs	r24, 3
     80a:	11 c0       	rjmp	.+34     	; 0x82e <__vector_10+0x40>
     80c:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
     810:	91 e0       	ldi	r25, 0x01	; 1
     812:	90 93 eb 00 	sts	0x00EB, r25	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
     816:	10 92 ec 00 	sts	0x00EC, r1	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
     81a:	92 e1       	ldi	r25, 0x12	; 18
     81c:	90 93 ed 00 	sts	0x00ED, r25	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
     820:	98 e0       	ldi	r25, 0x08	; 8
     822:	90 93 f0 00 	sts	0x00F0, r25	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
     826:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <usb_configuration>
     82a:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <__data_end>
     82e:	82 ff       	sbrs	r24, 2
     830:	13 c0       	rjmp	.+38     	; 0x858 <__vector_10+0x6a>
     832:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <usb_configuration>
     836:	88 23       	and	r24, r24
     838:	79 f0       	breq	.+30     	; 0x858 <__vector_10+0x6a>
     83a:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <transmit_flush_timer>
     83e:	88 23       	and	r24, r24
     840:	59 f0       	breq	.+22     	; 0x858 <__vector_10+0x6a>
     842:	81 50       	subi	r24, 0x01	; 1
     844:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <transmit_flush_timer>
     848:	81 11       	cpse	r24, r1
     84a:	06 c0       	rjmp	.+12     	; 0x858 <__vector_10+0x6a>
     84c:	84 e0       	ldi	r24, 0x04	; 4
     84e:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
     852:	8a e3       	ldi	r24, 0x3A	; 58
     854:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     858:	ff 91       	pop	r31
     85a:	ef 91       	pop	r30
     85c:	9f 91       	pop	r25
     85e:	8f 91       	pop	r24
     860:	0f 90       	pop	r0
     862:	0f be       	out	0x3f, r0	; 63
     864:	0f 90       	pop	r0
     866:	1f 90       	pop	r1
     868:	18 95       	reti

0000086a <__vector_11>:
     86a:	1f 92       	push	r1
     86c:	0f 92       	push	r0
     86e:	0f b6       	in	r0, 0x3f	; 63
     870:	0f 92       	push	r0
     872:	11 24       	eor	r1, r1
     874:	0f 93       	push	r16
     876:	1f 93       	push	r17
     878:	2f 93       	push	r18
     87a:	3f 93       	push	r19
     87c:	4f 93       	push	r20
     87e:	5f 93       	push	r21
     880:	6f 93       	push	r22
     882:	7f 93       	push	r23
     884:	8f 93       	push	r24
     886:	9f 93       	push	r25
     888:	af 93       	push	r26
     88a:	bf 93       	push	r27
     88c:	cf 93       	push	r28
     88e:	df 93       	push	r29
     890:	ef 93       	push	r30
     892:	ff 93       	push	r31
     894:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
     898:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     89c:	83 ff       	sbrs	r24, 3
     89e:	4c c1       	rjmp	.+664    	; 0xb38 <__stack+0x39>
     8a0:	e1 ef       	ldi	r30, 0xF1	; 241
     8a2:	f0 e0       	ldi	r31, 0x00	; 0
     8a4:	60 81       	ld	r22, Z
     8a6:	80 81       	ld	r24, Z
     8a8:	20 81       	ld	r18, Z
     8aa:	90 81       	ld	r25, Z
     8ac:	30 e0       	ldi	r19, 0x00	; 0
     8ae:	39 2b       	or	r19, r25
     8b0:	40 81       	ld	r20, Z
     8b2:	90 81       	ld	r25, Z
     8b4:	50 e0       	ldi	r21, 0x00	; 0
     8b6:	59 2b       	or	r21, r25
     8b8:	70 81       	ld	r23, Z
     8ba:	c0 81       	ld	r28, Z
     8bc:	92 ef       	ldi	r25, 0xF2	; 242
     8be:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     8c2:	86 30       	cpi	r24, 0x06	; 6
     8c4:	09 f0       	breq	.+2      	; 0x8c8 <__vector_11+0x5e>
     8c6:	58 c0       	rjmp	.+176    	; 0x978 <__vector_11+0x10e>
     8c8:	04 c0       	rjmp	.+8      	; 0x8d2 <__vector_11+0x68>
     8ca:	81 e2       	ldi	r24, 0x21	; 33
     8cc:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
     8d0:	3a c1       	rjmp	.+628    	; 0xb46 <__stack+0x47>
     8d2:	66 e0       	ldi	r22, 0x06	; 6
     8d4:	8a e7       	ldi	r24, 0x7A	; 122
     8d6:	91 e0       	ldi	r25, 0x01	; 1
     8d8:	fc 01       	movw	r30, r24
     8da:	a5 91       	lpm	r26, Z+
     8dc:	b4 91       	lpm	r27, Z
     8de:	2a 17       	cp	r18, r26
     8e0:	3b 07       	cpc	r19, r27
     8e2:	11 f0       	breq	.+4      	; 0x8e8 <__vector_11+0x7e>
     8e4:	07 96       	adiw	r24, 0x07	; 7
     8e6:	23 c0       	rjmp	.+70     	; 0x92e <__vector_11+0xc4>
     8e8:	fc 01       	movw	r30, r24
     8ea:	32 96       	adiw	r30, 0x02	; 2
     8ec:	a5 91       	lpm	r26, Z+
     8ee:	b4 91       	lpm	r27, Z
     8f0:	4a 17       	cp	r20, r26
     8f2:	5b 07       	cpc	r21, r27
     8f4:	11 f0       	breq	.+4      	; 0x8fa <__vector_11+0x90>
     8f6:	07 96       	adiw	r24, 0x07	; 7
     8f8:	1a c0       	rjmp	.+52     	; 0x92e <__vector_11+0xc4>
     8fa:	fc 01       	movw	r30, r24
     8fc:	34 96       	adiw	r30, 0x04	; 4
     8fe:	45 91       	lpm	r20, Z+
     900:	54 91       	lpm	r21, Z
     902:	fc 01       	movw	r30, r24
     904:	36 96       	adiw	r30, 0x06	; 6
     906:	24 91       	lpm	r18, Z
     908:	87 2f       	mov	r24, r23
     90a:	90 e0       	ldi	r25, 0x00	; 0
     90c:	9c 2b       	or	r25, r28
     90e:	8f 3f       	cpi	r24, 0xFF	; 255
     910:	91 05       	cpc	r25, r1
     912:	19 f0       	breq	.+6      	; 0x91a <__vector_11+0xb0>
     914:	10 f0       	brcs	.+4      	; 0x91a <__vector_11+0xb0>
     916:	8f ef       	ldi	r24, 0xFF	; 255
     918:	90 e0       	ldi	r25, 0x00	; 0
     91a:	82 17       	cp	r24, r18
     91c:	08 f4       	brcc	.+2      	; 0x920 <__vector_11+0xb6>
     91e:	28 2f       	mov	r18, r24
     920:	a8 ee       	ldi	r26, 0xE8	; 232
     922:	b0 e0       	ldi	r27, 0x00	; 0
     924:	70 e1       	ldi	r23, 0x10	; 16
     926:	6e ef       	ldi	r22, 0xFE	; 254
     928:	c1 ef       	ldi	r28, 0xF1	; 241
     92a:	d0 e0       	ldi	r29, 0x00	; 0
     92c:	03 c0       	rjmp	.+6      	; 0x934 <__vector_11+0xca>
     92e:	61 50       	subi	r22, 0x01	; 1
     930:	99 f6       	brne	.-90     	; 0x8d8 <__vector_11+0x6e>
     932:	cb cf       	rjmp	.-106    	; 0x8ca <__vector_11+0x60>
     934:	8c 91       	ld	r24, X
     936:	98 2f       	mov	r25, r24
     938:	95 70       	andi	r25, 0x05	; 5
     93a:	e1 f3       	breq	.-8      	; 0x934 <__vector_11+0xca>
     93c:	82 fd       	sbrc	r24, 2
     93e:	03 c1       	rjmp	.+518    	; 0xb46 <__stack+0x47>
     940:	32 2f       	mov	r19, r18
     942:	21 31       	cpi	r18, 0x11	; 17
     944:	08 f0       	brcs	.+2      	; 0x948 <__vector_11+0xde>
     946:	37 2f       	mov	r19, r23
     948:	33 23       	and	r19, r19
     94a:	09 f4       	brne	.+2      	; 0x94e <__vector_11+0xe4>
     94c:	f9 c0       	rjmp	.+498    	; 0xb40 <__stack+0x41>
     94e:	fa 01       	movw	r30, r20
     950:	83 2f       	mov	r24, r19
     952:	94 91       	lpm	r25, Z
     954:	98 83       	st	Y, r25
     956:	81 50       	subi	r24, 0x01	; 1
     958:	31 96       	adiw	r30, 0x01	; 1
     95a:	81 11       	cpse	r24, r1
     95c:	fa cf       	rjmp	.-12     	; 0x952 <__vector_11+0xe8>
     95e:	8f ef       	ldi	r24, 0xFF	; 255
     960:	83 0f       	add	r24, r19
     962:	90 e0       	ldi	r25, 0x00	; 0
     964:	01 96       	adiw	r24, 0x01	; 1
     966:	48 0f       	add	r20, r24
     968:	59 1f       	adc	r21, r25
     96a:	23 1b       	sub	r18, r19
     96c:	6c 93       	st	X, r22
     96e:	21 11       	cpse	r18, r1
     970:	e1 cf       	rjmp	.-62     	; 0x934 <__vector_11+0xca>
     972:	30 31       	cpi	r19, 0x10	; 16
     974:	f9 f2       	breq	.-66     	; 0x934 <__vector_11+0xca>
     976:	e7 c0       	rjmp	.+462    	; 0xb46 <__stack+0x47>
     978:	85 30       	cpi	r24, 0x05	; 5
     97a:	61 f4       	brne	.+24     	; 0x994 <__vector_11+0x12a>
     97c:	8e ef       	ldi	r24, 0xFE	; 254
     97e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     982:	e8 ee       	ldi	r30, 0xE8	; 232
     984:	f0 e0       	ldi	r31, 0x00	; 0
     986:	80 81       	ld	r24, Z
     988:	80 ff       	sbrs	r24, 0
     98a:	fd cf       	rjmp	.-6      	; 0x986 <__vector_11+0x11c>
     98c:	20 68       	ori	r18, 0x80	; 128
     98e:	20 93 e3 00 	sts	0x00E3, r18	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
     992:	d9 c0       	rjmp	.+434    	; 0xb46 <__stack+0x47>
     994:	89 30       	cpi	r24, 0x09	; 9
     996:	09 f0       	breq	.+2      	; 0x99a <__vector_11+0x130>
     998:	35 c0       	rjmp	.+106    	; 0xa04 <__vector_11+0x19a>
     99a:	61 11       	cpse	r22, r1
     99c:	cd c0       	rjmp	.+410    	; 0xb38 <__stack+0x39>
     99e:	20 93 0b 01 	sts	0x010B, r18	; 0x80010b <usb_configuration>
     9a2:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <__data_end>
     9a6:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <transmit_flush_timer>
     9aa:	8e ef       	ldi	r24, 0xFE	; 254
     9ac:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     9b0:	81 e0       	ldi	r24, 0x01	; 1
     9b2:	23 e2       	ldi	r18, 0x23	; 35
     9b4:	32 e0       	ldi	r19, 0x02	; 2
     9b6:	c9 ee       	ldi	r28, 0xE9	; 233
     9b8:	d0 e0       	ldi	r29, 0x00	; 0
     9ba:	ab ee       	ldi	r26, 0xEB	; 235
     9bc:	b0 e0       	ldi	r27, 0x00	; 0
     9be:	0c ee       	ldi	r16, 0xEC	; 236
     9c0:	10 e0       	ldi	r17, 0x00	; 0
     9c2:	6d ee       	ldi	r22, 0xED	; 237
     9c4:	70 e0       	ldi	r23, 0x00	; 0
     9c6:	88 83       	st	Y, r24
     9c8:	a9 01       	movw	r20, r18
     9ca:	4f 5f       	subi	r20, 0xFF	; 255
     9cc:	5f 4f       	sbci	r21, 0xFF	; 255
     9ce:	f9 01       	movw	r30, r18
     9d0:	94 91       	lpm	r25, Z
     9d2:	9c 93       	st	X, r25
     9d4:	99 23       	and	r25, r25
     9d6:	61 f0       	breq	.+24     	; 0x9f0 <__vector_11+0x186>
     9d8:	fa 01       	movw	r30, r20
     9da:	44 91       	lpm	r20, Z
     9dc:	f8 01       	movw	r30, r16
     9de:	40 83       	st	Z, r20
     9e0:	f9 01       	movw	r30, r18
     9e2:	32 96       	adiw	r30, 0x02	; 2
     9e4:	94 91       	lpm	r25, Z
     9e6:	2d 5f       	subi	r18, 0xFD	; 253
     9e8:	3f 4f       	sbci	r19, 0xFF	; 255
     9ea:	fb 01       	movw	r30, r22
     9ec:	90 83       	st	Z, r25
     9ee:	01 c0       	rjmp	.+2      	; 0x9f2 <__vector_11+0x188>
     9f0:	9a 01       	movw	r18, r20
     9f2:	8f 5f       	subi	r24, 0xFF	; 255
     9f4:	85 30       	cpi	r24, 0x05	; 5
     9f6:	39 f7       	brne	.-50     	; 0x9c6 <__vector_11+0x15c>
     9f8:	ea ee       	ldi	r30, 0xEA	; 234
     9fa:	f0 e0       	ldi	r31, 0x00	; 0
     9fc:	8e e1       	ldi	r24, 0x1E	; 30
     9fe:	80 83       	st	Z, r24
     a00:	10 82       	st	Z, r1
     a02:	a1 c0       	rjmp	.+322    	; 0xb46 <__stack+0x47>
     a04:	88 30       	cpi	r24, 0x08	; 8
     a06:	81 f4       	brne	.+32     	; 0xa28 <__vector_11+0x1be>
     a08:	60 38       	cpi	r22, 0x80	; 128
     a0a:	09 f0       	breq	.+2      	; 0xa0e <__vector_11+0x1a4>
     a0c:	95 c0       	rjmp	.+298    	; 0xb38 <__stack+0x39>
     a0e:	e8 ee       	ldi	r30, 0xE8	; 232
     a10:	f0 e0       	ldi	r31, 0x00	; 0
     a12:	80 81       	ld	r24, Z
     a14:	80 ff       	sbrs	r24, 0
     a16:	fd cf       	rjmp	.-6      	; 0xa12 <__vector_11+0x1a8>
     a18:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <usb_configuration>
     a1c:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     a20:	8e ef       	ldi	r24, 0xFE	; 254
     a22:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     a26:	8f c0       	rjmp	.+286    	; 0xb46 <__stack+0x47>
     a28:	81 32       	cpi	r24, 0x21	; 33
     a2a:	b9 f4       	brne	.+46     	; 0xa5a <__vector_11+0x1f0>
     a2c:	61 3a       	cpi	r22, 0xA1	; 161
     a2e:	09 f0       	breq	.+2      	; 0xa32 <__vector_11+0x1c8>
     a30:	83 c0       	rjmp	.+262    	; 0xb38 <__stack+0x39>
     a32:	e8 ee       	ldi	r30, 0xE8	; 232
     a34:	f0 e0       	ldi	r31, 0x00	; 0
     a36:	80 81       	ld	r24, Z
     a38:	80 ff       	sbrs	r24, 0
     a3a:	fd cf       	rjmp	.-6      	; 0xa36 <__vector_11+0x1cc>
     a3c:	e0 e0       	ldi	r30, 0x00	; 0
     a3e:	f1 e0       	ldi	r31, 0x01	; 1
     a40:	27 e0       	ldi	r18, 0x07	; 7
     a42:	31 e0       	ldi	r19, 0x01	; 1
     a44:	a1 ef       	ldi	r26, 0xF1	; 241
     a46:	b0 e0       	ldi	r27, 0x00	; 0
     a48:	81 91       	ld	r24, Z+
     a4a:	8c 93       	st	X, r24
     a4c:	e2 17       	cp	r30, r18
     a4e:	f3 07       	cpc	r31, r19
     a50:	d9 f7       	brne	.-10     	; 0xa48 <__vector_11+0x1de>
     a52:	8e ef       	ldi	r24, 0xFE	; 254
     a54:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     a58:	76 c0       	rjmp	.+236    	; 0xb46 <__stack+0x47>
     a5a:	80 32       	cpi	r24, 0x20	; 32
     a5c:	d1 f4       	brne	.+52     	; 0xa92 <__vector_11+0x228>
     a5e:	61 32       	cpi	r22, 0x21	; 33
     a60:	09 f0       	breq	.+2      	; 0xa64 <__vector_11+0x1fa>
     a62:	6a c0       	rjmp	.+212    	; 0xb38 <__stack+0x39>
     a64:	e8 ee       	ldi	r30, 0xE8	; 232
     a66:	f0 e0       	ldi	r31, 0x00	; 0
     a68:	80 81       	ld	r24, Z
     a6a:	82 ff       	sbrs	r24, 2
     a6c:	fd cf       	rjmp	.-6      	; 0xa68 <__vector_11+0x1fe>
     a6e:	e0 e0       	ldi	r30, 0x00	; 0
     a70:	f1 e0       	ldi	r31, 0x01	; 1
     a72:	27 e0       	ldi	r18, 0x07	; 7
     a74:	31 e0       	ldi	r19, 0x01	; 1
     a76:	a1 ef       	ldi	r26, 0xF1	; 241
     a78:	b0 e0       	ldi	r27, 0x00	; 0
     a7a:	8c 91       	ld	r24, X
     a7c:	81 93       	st	Z+, r24
     a7e:	e2 17       	cp	r30, r18
     a80:	f3 07       	cpc	r31, r19
     a82:	d9 f7       	brne	.-10     	; 0xa7a <__vector_11+0x210>
     a84:	e8 ee       	ldi	r30, 0xE8	; 232
     a86:	f0 e0       	ldi	r31, 0x00	; 0
     a88:	8b ef       	ldi	r24, 0xFB	; 251
     a8a:	80 83       	st	Z, r24
     a8c:	8e ef       	ldi	r24, 0xFE	; 254
     a8e:	80 83       	st	Z, r24
     a90:	5a c0       	rjmp	.+180    	; 0xb46 <__stack+0x47>
     a92:	82 32       	cpi	r24, 0x22	; 34
     a94:	71 f4       	brne	.+28     	; 0xab2 <__vector_11+0x248>
     a96:	61 32       	cpi	r22, 0x21	; 33
     a98:	09 f0       	breq	.+2      	; 0xa9c <__vector_11+0x232>
     a9a:	4e c0       	rjmp	.+156    	; 0xb38 <__stack+0x39>
     a9c:	20 93 08 01 	sts	0x0108, r18	; 0x800108 <__data_end>
     aa0:	e8 ee       	ldi	r30, 0xE8	; 232
     aa2:	f0 e0       	ldi	r31, 0x00	; 0
     aa4:	80 81       	ld	r24, Z
     aa6:	80 ff       	sbrs	r24, 0
     aa8:	fd cf       	rjmp	.-6      	; 0xaa4 <__vector_11+0x23a>
     aaa:	8e ef       	ldi	r24, 0xFE	; 254
     aac:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     ab0:	4a c0       	rjmp	.+148    	; 0xb46 <__stack+0x47>
     ab2:	81 11       	cpse	r24, r1
     ab4:	1a c0       	rjmp	.+52     	; 0xaea <__vector_11+0x280>
     ab6:	e8 ee       	ldi	r30, 0xE8	; 232
     ab8:	f0 e0       	ldi	r31, 0x00	; 0
     aba:	80 81       	ld	r24, Z
     abc:	80 ff       	sbrs	r24, 0
     abe:	fd cf       	rjmp	.-6      	; 0xaba <__vector_11+0x250>
     ac0:	62 38       	cpi	r22, 0x82	; 130
     ac2:	51 f4       	brne	.+20     	; 0xad8 <__vector_11+0x26e>
     ac4:	e9 ee       	ldi	r30, 0xE9	; 233
     ac6:	f0 e0       	ldi	r31, 0x00	; 0
     ac8:	40 83       	st	Z, r20
     aca:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
     ace:	85 fb       	bst	r24, 5
     ad0:	88 27       	eor	r24, r24
     ad2:	80 f9       	bld	r24, 0
     ad4:	10 82       	st	Z, r1
     ad6:	01 c0       	rjmp	.+2      	; 0xada <__vector_11+0x270>
     ad8:	80 e0       	ldi	r24, 0x00	; 0
     ada:	e1 ef       	ldi	r30, 0xF1	; 241
     adc:	f0 e0       	ldi	r31, 0x00	; 0
     ade:	80 83       	st	Z, r24
     ae0:	10 82       	st	Z, r1
     ae2:	8e ef       	ldi	r24, 0xFE	; 254
     ae4:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     ae8:	2e c0       	rjmp	.+92     	; 0xb46 <__stack+0x47>
     aea:	98 2f       	mov	r25, r24
     aec:	9d 7f       	andi	r25, 0xFD	; 253
     aee:	91 30       	cpi	r25, 0x01	; 1
     af0:	19 f5       	brne	.+70     	; 0xb38 <__stack+0x39>
     af2:	62 30       	cpi	r22, 0x02	; 2
     af4:	09 f5       	brne	.+66     	; 0xb38 <__stack+0x39>
     af6:	23 2b       	or	r18, r19
     af8:	f9 f4       	brne	.+62     	; 0xb38 <__stack+0x39>
     afa:	4f 77       	andi	r20, 0x7F	; 127
     afc:	9f ef       	ldi	r25, 0xFF	; 255
     afe:	94 0f       	add	r25, r20
     b00:	94 30       	cpi	r25, 0x04	; 4
     b02:	d0 f4       	brcc	.+52     	; 0xb38 <__stack+0x39>
     b04:	9e ef       	ldi	r25, 0xFE	; 254
     b06:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     b0a:	40 93 e9 00 	sts	0x00E9, r20	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
     b0e:	83 30       	cpi	r24, 0x03	; 3
     b10:	21 f4       	brne	.+8      	; 0xb1a <__stack+0x1b>
     b12:	81 e2       	ldi	r24, 0x21	; 33
     b14:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
     b18:	16 c0       	rjmp	.+44     	; 0xb46 <__stack+0x47>
     b1a:	89 e1       	ldi	r24, 0x19	; 25
     b1c:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
     b20:	81 e0       	ldi	r24, 0x01	; 1
     b22:	90 e0       	ldi	r25, 0x00	; 0
     b24:	02 c0       	rjmp	.+4      	; 0xb2a <__stack+0x2b>
     b26:	88 0f       	add	r24, r24
     b28:	99 1f       	adc	r25, r25
     b2a:	4a 95       	dec	r20
     b2c:	e2 f7       	brpl	.-8      	; 0xb26 <__stack+0x27>
     b2e:	ea ee       	ldi	r30, 0xEA	; 234
     b30:	f0 e0       	ldi	r31, 0x00	; 0
     b32:	80 83       	st	Z, r24
     b34:	10 82       	st	Z, r1
     b36:	07 c0       	rjmp	.+14     	; 0xb46 <__stack+0x47>
     b38:	81 e2       	ldi	r24, 0x21	; 33
     b3a:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
     b3e:	03 c0       	rjmp	.+6      	; 0xb46 <__stack+0x47>
     b40:	6c 93       	st	X, r22
     b42:	21 11       	cpse	r18, r1
     b44:	f7 ce       	rjmp	.-530    	; 0x934 <__vector_11+0xca>
     b46:	ff 91       	pop	r31
     b48:	ef 91       	pop	r30
     b4a:	df 91       	pop	r29
     b4c:	cf 91       	pop	r28
     b4e:	bf 91       	pop	r27
     b50:	af 91       	pop	r26
     b52:	9f 91       	pop	r25
     b54:	8f 91       	pop	r24
     b56:	7f 91       	pop	r23
     b58:	6f 91       	pop	r22
     b5a:	5f 91       	pop	r21
     b5c:	4f 91       	pop	r20
     b5e:	3f 91       	pop	r19
     b60:	2f 91       	pop	r18
     b62:	1f 91       	pop	r17
     b64:	0f 91       	pop	r16
     b66:	0f 90       	pop	r0
     b68:	0f be       	out	0x3f, r0	; 63
     b6a:	0f 90       	pop	r0
     b6c:	1f 90       	pop	r1
     b6e:	18 95       	reti

00000b70 <print_P>:
     b70:	0f 93       	push	r16
     b72:	1f 93       	push	r17
     b74:	cf 93       	push	r28
     b76:	8c 01       	movw	r16, r24
     b78:	0f 5f       	subi	r16, 0xFF	; 255
     b7a:	1f 4f       	sbci	r17, 0xFF	; 255
     b7c:	fc 01       	movw	r30, r24
     b7e:	c4 91       	lpm	r28, Z
     b80:	cc 23       	and	r28, r28
     b82:	71 f0       	breq	.+28     	; 0xba0 <print_P+0x30>
     b84:	ca 30       	cpi	r28, 0x0A	; 10
     b86:	19 f4       	brne	.+6      	; 0xb8e <print_P+0x1e>
     b88:	8d e0       	ldi	r24, 0x0D	; 13
     b8a:	0e 94 9c 03 	call	0x738	; 0x738 <m_usb_tx_char>
     b8e:	8c 2f       	mov	r24, r28
     b90:	0e 94 9c 03 	call	0x738	; 0x738 <m_usb_tx_char>
     b94:	f8 01       	movw	r30, r16
     b96:	c4 91       	lpm	r28, Z
     b98:	0f 5f       	subi	r16, 0xFF	; 255
     b9a:	1f 4f       	sbci	r17, 0xFF	; 255
     b9c:	c1 11       	cpse	r28, r1
     b9e:	f2 cf       	rjmp	.-28     	; 0xb84 <print_P+0x14>
     ba0:	cf 91       	pop	r28
     ba2:	1f 91       	pop	r17
     ba4:	0f 91       	pop	r16
     ba6:	08 95       	ret

00000ba8 <m_usb_tx_int>:
}

void m_usb_tx_int(int i)
{
     ba8:	ef 92       	push	r14
     baa:	ff 92       	push	r15
     bac:	0f 93       	push	r16
     bae:	1f 93       	push	r17
     bb0:	cf 93       	push	r28
     bb2:	df 93       	push	r29
     bb4:	cd b7       	in	r28, 0x3d	; 61
     bb6:	de b7       	in	r29, 0x3e	; 62
     bb8:	27 97       	sbiw	r28, 0x07	; 7
     bba:	0f b6       	in	r0, 0x3f	; 63
     bbc:	f8 94       	cli
     bbe:	de bf       	out	0x3e, r29	; 62
     bc0:	0f be       	out	0x3f, r0	; 63
     bc2:	cd bf       	out	0x3d, r28	; 61
	char string[7] = {0,0,0,0,0,0,0};
     bc4:	8e 01       	movw	r16, r28
     bc6:	0f 5f       	subi	r16, 0xFF	; 255
     bc8:	1f 4f       	sbci	r17, 0xFF	; 255
     bca:	27 e0       	ldi	r18, 0x07	; 7
     bcc:	f8 01       	movw	r30, r16
     bce:	11 92       	st	Z+, r1
     bd0:	2a 95       	dec	r18
     bd2:	e9 f7       	brne	.-6      	; 0xbce <m_usb_tx_int+0x26>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     bd4:	4a e0       	ldi	r20, 0x0A	; 10
     bd6:	b8 01       	movw	r22, r16
     bd8:	0e 94 3c 13 	call	0x2678	; 0x2678 <__itoa_ncheck>
     bdc:	7e 01       	movw	r14, r28
     bde:	f8 e0       	ldi	r31, 0x08	; 8
     be0:	ef 0e       	add	r14, r31
     be2:	f1 1c       	adc	r15, r1
	itoa(i,string,10);
	for(i=0;i<7;i++){
        if(string[i]){
     be4:	f8 01       	movw	r30, r16
     be6:	81 91       	ld	r24, Z+
     be8:	8f 01       	movw	r16, r30
     bea:	81 11       	cpse	r24, r1
            m_usb_tx_char(string[i]);
     bec:	0e 94 9c 03 	call	0x738	; 0x738 <m_usb_tx_char>

void m_usb_tx_int(int i)
{
	char string[7] = {0,0,0,0,0,0,0};
	itoa(i,string,10);
	for(i=0;i<7;i++){
     bf0:	0e 15       	cp	r16, r14
     bf2:	1f 05       	cpc	r17, r15
     bf4:	b9 f7       	brne	.-18     	; 0xbe4 <m_usb_tx_int+0x3c>
        if(string[i]){
            m_usb_tx_char(string[i]);
        }
	}
}
     bf6:	27 96       	adiw	r28, 0x07	; 7
     bf8:	0f b6       	in	r0, 0x3f	; 63
     bfa:	f8 94       	cli
     bfc:	de bf       	out	0x3e, r29	; 62
     bfe:	0f be       	out	0x3f, r0	; 63
     c00:	cd bf       	out	0x3d, r28	; 61
     c02:	df 91       	pop	r29
     c04:	cf 91       	pop	r28
     c06:	1f 91       	pop	r17
     c08:	0f 91       	pop	r16
     c0a:	ff 90       	pop	r15
     c0c:	ef 90       	pop	r14
     c0e:	08 95       	ret

00000c10 <twi_wait>:
	}
}

unsigned char twi_wait(void)
{
	unsigned int wait=0;
     c10:	20 e0       	ldi	r18, 0x00	; 0
     c12:	30 e0       	ldi	r19, 0x00	; 0
	while((!(TWCR & (1<<TWINT))) && (wait++<TWI_MAX_WAIT)){};	// wait for acknowledgement that they byte was sent
     c14:	ec eb       	ldi	r30, 0xBC	; 188
     c16:	f0 e0       	ldi	r31, 0x00	; 0
     c18:	80 81       	ld	r24, Z
     c1a:	88 23       	and	r24, r24
     c1c:	34 f0       	brlt	.+12     	; 0xc2a <twi_wait+0x1a>
     c1e:	2f 5f       	subi	r18, 0xFF	; 255
     c20:	3f 4f       	sbci	r19, 0xFF	; 255
     c22:	29 3e       	cpi	r18, 0xE9	; 233
     c24:	83 e0       	ldi	r24, 0x03	; 3
     c26:	38 07       	cpc	r19, r24
     c28:	b9 f7       	brne	.-18     	; 0xc18 <twi_wait+0x8>
	if(wait==TWI_MAX_WAIT)
     c2a:	81 e0       	ldi	r24, 0x01	; 1
     c2c:	28 3e       	cpi	r18, 0xE8	; 232
     c2e:	33 40       	sbci	r19, 0x03	; 3
     c30:	09 f4       	brne	.+2      	; 0xc34 <twi_wait+0x24>
     c32:	80 e0       	ldi	r24, 0x00	; 0
	{
		return 0;					// fail
	} else {
		return 1;					// success
	}
}
     c34:	08 95       	ret

00000c36 <send_byte>:
	return 1;	// success
}	

unsigned char send_byte(unsigned char byte)
{
	TWDR = byte;					// load the byte
     c36:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR = (1<<TWINT) | (1<<TWEN);	// send the byte
     c3a:	84 e8       	ldi	r24, 0x84	; 132
     c3c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	if(twi_wait())					// timed out
     c40:	0e 94 08 06 	call	0xc10	; 0xc10 <twi_wait>
     c44:	88 23       	and	r24, r24
     c46:	19 f0       	breq	.+6      	; 0xc4e <send_byte+0x18>
	{
		return (TWSR & 0xF8);		// return the status with prescaler bits masked out
     c48:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     c4c:	88 7f       	andi	r24, 0xF8	; 248
	} else {
		return 0;					// comm failure
	}
}
     c4e:	08 95       	ret

00000c50 <start_write>:
//
//


unsigned char start_write(unsigned char address)
{
     c50:	cf 93       	push	r28
     c52:	c8 2f       	mov	r28, r24
	unsigned char status;
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
     c54:	94 ea       	ldi	r25, 0xA4	; 164
     c56:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	if(!twi_wait())
     c5a:	0e 94 08 06 	call	0xc10	; 0xc10 <twi_wait>
     c5e:	88 23       	and	r24, r24
     c60:	61 f0       	breq	.+24     	; 0xc7a <start_write+0x2a>
	{
		return 0;
	}
	
	// ADDRESS
	status = send_byte(address<<1);
     c62:	8c 2f       	mov	r24, r28
     c64:	88 0f       	add	r24, r24
     c66:	0e 94 1b 06 	call	0xc36	; 0xc36 <send_byte>
	if(status== 0x20){ // ACK was not received - may not be connected/listening
     c6a:	80 32       	cpi	r24, 0x20	; 32
     c6c:	29 f4       	brne	.+10     	; 0xc78 <start_write+0x28>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
     c6e:	84 e9       	ldi	r24, 0x94	; 148
     c70:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
		return 0;	// failure
     c74:	80 e0       	ldi	r24, 0x00	; 0
     c76:	01 c0       	rjmp	.+2      	; 0xc7a <start_write+0x2a>
	}	
	return 1;	// success
     c78:	81 e0       	ldi	r24, 0x01	; 1
}	
     c7a:	cf 91       	pop	r28
     c7c:	08 95       	ret

00000c7e <m_wii_open>:
unsigned char twi_wait(void);
void end(void);

char m_wii_open()
{	
	m_bus_init();
     c7e:	0e 94 0b 03 	call	0x616	; 0x616 <m_bus_init>

	// enter configuration mode
	if(!start_write(MWIITWIADDR)){return 0;}
     c82:	88 e5       	ldi	r24, 0x58	; 88
     c84:	0e 94 28 06 	call	0xc50	; 0xc50 <start_write>
     c88:	88 23       	and	r24, r24
     c8a:	09 f4       	brne	.+2      	; 0xc8e <m_wii_open+0x10>
     c8c:	cd c0       	rjmp	.+410    	; 0xe28 <m_wii_open+0x1aa>
	if(!send_byte(0x30)){return 0;}
     c8e:	80 e3       	ldi	r24, 0x30	; 48
     c90:	0e 94 1b 06 	call	0xc36	; 0xc36 <send_byte>
     c94:	88 23       	and	r24, r24
     c96:	09 f4       	brne	.+2      	; 0xc9a <m_wii_open+0x1c>
     c98:	c9 c0       	rjmp	.+402    	; 0xe2c <m_wii_open+0x1ae>
	if(!send_byte(0x01)){return 0;}
     c9a:	81 e0       	ldi	r24, 0x01	; 1
     c9c:	0e 94 1b 06 	call	0xc36	; 0xc36 <send_byte>
     ca0:	88 23       	and	r24, r24
     ca2:	09 f4       	brne	.+2      	; 0xca6 <m_wii_open+0x28>
     ca4:	c5 c0       	rjmp	.+394    	; 0xe30 <m_wii_open+0x1b2>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
     ca6:	84 e9       	ldi	r24, 0x94	; 148
     ca8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     cac:	83 ec       	ldi	r24, 0xC3	; 195
     cae:	99 e0       	ldi	r25, 0x09	; 9
     cb0:	01 97       	sbiw	r24, 0x01	; 1
     cb2:	f1 f7       	brne	.-4      	; 0xcb0 <m_wii_open+0x32>
     cb4:	00 c0       	rjmp	.+0      	; 0xcb6 <m_wii_open+0x38>
     cb6:	00 00       	nop
	if(!send_byte(0x01)){return 0;}
	end();
	m_wait(INTERPACKET);
		
	// sensitivity setting, part 1
	if(!start_write(MWIITWIADDR)){return 0;}
     cb8:	88 e5       	ldi	r24, 0x58	; 88
     cba:	0e 94 28 06 	call	0xc50	; 0xc50 <start_write>
     cbe:	88 23       	and	r24, r24
     cc0:	09 f4       	brne	.+2      	; 0xcc4 <m_wii_open+0x46>
     cc2:	b8 c0       	rjmp	.+368    	; 0xe34 <m_wii_open+0x1b6>
	if(!send_byte(0x00)){return 0;}
     cc4:	80 e0       	ldi	r24, 0x00	; 0
     cc6:	0e 94 1b 06 	call	0xc36	; 0xc36 <send_byte>
     cca:	88 23       	and	r24, r24
     ccc:	09 f4       	brne	.+2      	; 0xcd0 <m_wii_open+0x52>
     cce:	b4 c0       	rjmp	.+360    	; 0xe38 <m_wii_open+0x1ba>
	if(!send_byte(0x00)){return 0;}
     cd0:	80 e0       	ldi	r24, 0x00	; 0
     cd2:	0e 94 1b 06 	call	0xc36	; 0xc36 <send_byte>
     cd6:	88 23       	and	r24, r24
     cd8:	09 f4       	brne	.+2      	; 0xcdc <m_wii_open+0x5e>
     cda:	b0 c0       	rjmp	.+352    	; 0xe3c <m_wii_open+0x1be>
	if(!send_byte(0x00)){return 0;}
     cdc:	80 e0       	ldi	r24, 0x00	; 0
     cde:	0e 94 1b 06 	call	0xc36	; 0xc36 <send_byte>
     ce2:	88 23       	and	r24, r24
     ce4:	09 f4       	brne	.+2      	; 0xce8 <m_wii_open+0x6a>
     ce6:	ac c0       	rjmp	.+344    	; 0xe40 <m_wii_open+0x1c2>
	if(!send_byte(0x00)){return 0;}
     ce8:	80 e0       	ldi	r24, 0x00	; 0
     cea:	0e 94 1b 06 	call	0xc36	; 0xc36 <send_byte>
     cee:	88 23       	and	r24, r24
     cf0:	09 f4       	brne	.+2      	; 0xcf4 <m_wii_open+0x76>
     cf2:	a8 c0       	rjmp	.+336    	; 0xe44 <m_wii_open+0x1c6>
	if(!send_byte(0x00)){return 0;}
     cf4:	80 e0       	ldi	r24, 0x00	; 0
     cf6:	0e 94 1b 06 	call	0xc36	; 0xc36 <send_byte>
     cfa:	88 23       	and	r24, r24
     cfc:	09 f4       	brne	.+2      	; 0xd00 <m_wii_open+0x82>
     cfe:	a4 c0       	rjmp	.+328    	; 0xe48 <m_wii_open+0x1ca>
	if(!send_byte(0x00)){return 0;}
     d00:	80 e0       	ldi	r24, 0x00	; 0
     d02:	0e 94 1b 06 	call	0xc36	; 0xc36 <send_byte>
     d06:	88 23       	and	r24, r24
     d08:	09 f4       	brne	.+2      	; 0xd0c <m_wii_open+0x8e>
     d0a:	a0 c0       	rjmp	.+320    	; 0xe4c <m_wii_open+0x1ce>
	if(!send_byte(0x00)){return 0;}
     d0c:	80 e0       	ldi	r24, 0x00	; 0
     d0e:	0e 94 1b 06 	call	0xc36	; 0xc36 <send_byte>
     d12:	88 23       	and	r24, r24
     d14:	09 f4       	brne	.+2      	; 0xd18 <m_wii_open+0x9a>
     d16:	9c c0       	rjmp	.+312    	; 0xe50 <m_wii_open+0x1d2>
	if(!send_byte(0x90)){return 0;} // p0
     d18:	80 e9       	ldi	r24, 0x90	; 144
     d1a:	0e 94 1b 06 	call	0xc36	; 0xc36 <send_byte>
     d1e:	88 23       	and	r24, r24
     d20:	09 f4       	brne	.+2      	; 0xd24 <m_wii_open+0xa6>
     d22:	98 c0       	rjmp	.+304    	; 0xe54 <m_wii_open+0x1d6>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
     d24:	84 e9       	ldi	r24, 0x94	; 148
     d26:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     d2a:	83 ec       	ldi	r24, 0xC3	; 195
     d2c:	99 e0       	ldi	r25, 0x09	; 9
     d2e:	01 97       	sbiw	r24, 0x01	; 1
     d30:	f1 f7       	brne	.-4      	; 0xd2e <m_wii_open+0xb0>
     d32:	00 c0       	rjmp	.+0      	; 0xd34 <m_wii_open+0xb6>
     d34:	00 00       	nop
	end();

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 2
	if(!start_write(MWIITWIADDR)){return 0;}
     d36:	88 e5       	ldi	r24, 0x58	; 88
     d38:	0e 94 28 06 	call	0xc50	; 0xc50 <start_write>
     d3c:	88 23       	and	r24, r24
     d3e:	09 f4       	brne	.+2      	; 0xd42 <m_wii_open+0xc4>
     d40:	8b c0       	rjmp	.+278    	; 0xe58 <m_wii_open+0x1da>
	if(!send_byte(0x07)){return 0;}
     d42:	87 e0       	ldi	r24, 0x07	; 7
     d44:	0e 94 1b 06 	call	0xc36	; 0xc36 <send_byte>
     d48:	88 23       	and	r24, r24
     d4a:	09 f4       	brne	.+2      	; 0xd4e <m_wii_open+0xd0>
     d4c:	87 c0       	rjmp	.+270    	; 0xe5c <m_wii_open+0x1de>
	if(!send_byte(0x00)){return 0;}
     d4e:	80 e0       	ldi	r24, 0x00	; 0
     d50:	0e 94 1b 06 	call	0xc36	; 0xc36 <send_byte>
     d54:	88 23       	and	r24, r24
     d56:	09 f4       	brne	.+2      	; 0xd5a <m_wii_open+0xdc>
     d58:	83 c0       	rjmp	.+262    	; 0xe60 <m_wii_open+0x1e2>
	if(!send_byte(0x41)){return 0;} // p1
     d5a:	81 e4       	ldi	r24, 0x41	; 65
     d5c:	0e 94 1b 06 	call	0xc36	; 0xc36 <send_byte>
     d60:	88 23       	and	r24, r24
     d62:	09 f4       	brne	.+2      	; 0xd66 <m_wii_open+0xe8>
     d64:	7f c0       	rjmp	.+254    	; 0xe64 <m_wii_open+0x1e6>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
     d66:	84 e9       	ldi	r24, 0x94	; 148
     d68:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     d6c:	83 ec       	ldi	r24, 0xC3	; 195
     d6e:	99 e0       	ldi	r25, 0x09	; 9
     d70:	01 97       	sbiw	r24, 0x01	; 1
     d72:	f1 f7       	brne	.-4      	; 0xd70 <m_wii_open+0xf2>
     d74:	00 c0       	rjmp	.+0      	; 0xd76 <m_wii_open+0xf8>
     d76:	00 00       	nop
	end();

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 3
	if(!start_write(MWIITWIADDR)){return 0;}
     d78:	88 e5       	ldi	r24, 0x58	; 88
     d7a:	0e 94 28 06 	call	0xc50	; 0xc50 <start_write>
     d7e:	88 23       	and	r24, r24
     d80:	09 f4       	brne	.+2      	; 0xd84 <m_wii_open+0x106>
     d82:	72 c0       	rjmp	.+228    	; 0xe68 <m_wii_open+0x1ea>
	if(!send_byte(0x1A)){return 0;}
     d84:	8a e1       	ldi	r24, 0x1A	; 26
     d86:	0e 94 1b 06 	call	0xc36	; 0xc36 <send_byte>
     d8a:	88 23       	and	r24, r24
     d8c:	09 f4       	brne	.+2      	; 0xd90 <m_wii_open+0x112>
     d8e:	6e c0       	rjmp	.+220    	; 0xe6c <m_wii_open+0x1ee>
	if(!send_byte(0x40)){return 0;} // p2
     d90:	80 e4       	ldi	r24, 0x40	; 64
     d92:	0e 94 1b 06 	call	0xc36	; 0xc36 <send_byte>
     d96:	88 23       	and	r24, r24
     d98:	09 f4       	brne	.+2      	; 0xd9c <m_wii_open+0x11e>
     d9a:	6a c0       	rjmp	.+212    	; 0xe70 <m_wii_open+0x1f2>
	if(!send_byte(0x00)){return 0;} // p3
     d9c:	80 e0       	ldi	r24, 0x00	; 0
     d9e:	0e 94 1b 06 	call	0xc36	; 0xc36 <send_byte>
     da2:	88 23       	and	r24, r24
     da4:	09 f4       	brne	.+2      	; 0xda8 <m_wii_open+0x12a>
     da6:	66 c0       	rjmp	.+204    	; 0xe74 <m_wii_open+0x1f6>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
     da8:	84 e9       	ldi	r24, 0x94	; 148
     daa:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     dae:	83 ec       	ldi	r24, 0xC3	; 195
     db0:	99 e0       	ldi	r25, 0x09	; 9
     db2:	01 97       	sbiw	r24, 0x01	; 1
     db4:	f1 f7       	brne	.-4      	; 0xdb2 <m_wii_open+0x134>
     db6:	00 c0       	rjmp	.+0      	; 0xdb8 <m_wii_open+0x13a>
     db8:	00 00       	nop
	end();

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
     dba:	88 e5       	ldi	r24, 0x58	; 88
     dbc:	0e 94 28 06 	call	0xc50	; 0xc50 <start_write>
     dc0:	88 23       	and	r24, r24
     dc2:	09 f4       	brne	.+2      	; 0xdc6 <m_wii_open+0x148>
     dc4:	59 c0       	rjmp	.+178    	; 0xe78 <m_wii_open+0x1fa>
	if(!send_byte(0x33)){return 0;}
     dc6:	83 e3       	ldi	r24, 0x33	; 51
     dc8:	0e 94 1b 06 	call	0xc36	; 0xc36 <send_byte>
     dcc:	88 23       	and	r24, r24
     dce:	09 f4       	brne	.+2      	; 0xdd2 <m_wii_open+0x154>
     dd0:	55 c0       	rjmp	.+170    	; 0xe7c <m_wii_open+0x1fe>
	if(!send_byte(0x03)){return 0;}
     dd2:	83 e0       	ldi	r24, 0x03	; 3
     dd4:	0e 94 1b 06 	call	0xc36	; 0xc36 <send_byte>
     dd8:	88 23       	and	r24, r24
     dda:	09 f4       	brne	.+2      	; 0xdde <m_wii_open+0x160>
     ddc:	51 c0       	rjmp	.+162    	; 0xe80 <m_wii_open+0x202>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
     dde:	84 e9       	ldi	r24, 0x94	; 148
     de0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     de4:	83 ec       	ldi	r24, 0xC3	; 195
     de6:	99 e0       	ldi	r25, 0x09	; 9
     de8:	01 97       	sbiw	r24, 0x01	; 1
     dea:	f1 f7       	brne	.-4      	; 0xde8 <m_wii_open+0x16a>
     dec:	00 c0       	rjmp	.+0      	; 0xdee <m_wii_open+0x170>
     dee:	00 00       	nop
	end();

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
     df0:	88 e5       	ldi	r24, 0x58	; 88
     df2:	0e 94 28 06 	call	0xc50	; 0xc50 <start_write>
     df6:	88 23       	and	r24, r24
     df8:	09 f4       	brne	.+2      	; 0xdfc <m_wii_open+0x17e>
     dfa:	44 c0       	rjmp	.+136    	; 0xe84 <m_wii_open+0x206>
	if(!send_byte(0x30)){return 0;}
     dfc:	80 e3       	ldi	r24, 0x30	; 48
     dfe:	0e 94 1b 06 	call	0xc36	; 0xc36 <send_byte>
     e02:	88 23       	and	r24, r24
     e04:	09 f4       	brne	.+2      	; 0xe08 <m_wii_open+0x18a>
     e06:	40 c0       	rjmp	.+128    	; 0xe88 <m_wii_open+0x20a>
	if(!send_byte(0x08)){return 0;}
     e08:	88 e0       	ldi	r24, 0x08	; 8
     e0a:	0e 94 1b 06 	call	0xc36	; 0xc36 <send_byte>
     e0e:	88 23       	and	r24, r24
     e10:	e9 f1       	breq	.+122    	; 0xe8c <m_wii_open+0x20e>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
     e12:	84 e9       	ldi	r24, 0x94	; 148
     e14:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     e18:	83 ec       	ldi	r24, 0xC3	; 195
     e1a:	99 e0       	ldi	r25, 0x09	; 9
     e1c:	01 97       	sbiw	r24, 0x01	; 1
     e1e:	f1 f7       	brne	.-4      	; 0xe1c <m_wii_open+0x19e>
     e20:	00 c0       	rjmp	.+0      	; 0xe22 <m_wii_open+0x1a4>
     e22:	00 00       	nop
	if(!send_byte(0x08)){return 0;}
	end();
	
	m_wait(INTERPACKET);

	return 1;
     e24:	81 e0       	ldi	r24, 0x01	; 1
     e26:	08 95       	ret
char m_wii_open()
{	
	m_bus_init();

	// enter configuration mode
	if(!start_write(MWIITWIADDR)){return 0;}
     e28:	80 e0       	ldi	r24, 0x00	; 0
     e2a:	08 95       	ret
	if(!send_byte(0x30)){return 0;}
     e2c:	80 e0       	ldi	r24, 0x00	; 0
     e2e:	08 95       	ret
	if(!send_byte(0x01)){return 0;}
     e30:	80 e0       	ldi	r24, 0x00	; 0
     e32:	08 95       	ret
	end();
	m_wait(INTERPACKET);
		
	// sensitivity setting, part 1
	if(!start_write(MWIITWIADDR)){return 0;}
     e34:	80 e0       	ldi	r24, 0x00	; 0
     e36:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
     e38:	80 e0       	ldi	r24, 0x00	; 0
     e3a:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
     e3c:	80 e0       	ldi	r24, 0x00	; 0
     e3e:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
     e40:	80 e0       	ldi	r24, 0x00	; 0
     e42:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
     e44:	80 e0       	ldi	r24, 0x00	; 0
     e46:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
     e48:	80 e0       	ldi	r24, 0x00	; 0
     e4a:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
     e4c:	80 e0       	ldi	r24, 0x00	; 0
     e4e:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
     e50:	80 e0       	ldi	r24, 0x00	; 0
     e52:	08 95       	ret
	if(!send_byte(0x90)){return 0;} // p0
     e54:	80 e0       	ldi	r24, 0x00	; 0
     e56:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 2
	if(!start_write(MWIITWIADDR)){return 0;}
     e58:	80 e0       	ldi	r24, 0x00	; 0
     e5a:	08 95       	ret
	if(!send_byte(0x07)){return 0;}
     e5c:	80 e0       	ldi	r24, 0x00	; 0
     e5e:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
     e60:	80 e0       	ldi	r24, 0x00	; 0
     e62:	08 95       	ret
	if(!send_byte(0x41)){return 0;} // p1
     e64:	80 e0       	ldi	r24, 0x00	; 0
     e66:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 3
	if(!start_write(MWIITWIADDR)){return 0;}
     e68:	80 e0       	ldi	r24, 0x00	; 0
     e6a:	08 95       	ret
	if(!send_byte(0x1A)){return 0;}
     e6c:	80 e0       	ldi	r24, 0x00	; 0
     e6e:	08 95       	ret
	if(!send_byte(0x40)){return 0;} // p2
     e70:	80 e0       	ldi	r24, 0x00	; 0
     e72:	08 95       	ret
	if(!send_byte(0x00)){return 0;} // p3
     e74:	80 e0       	ldi	r24, 0x00	; 0
     e76:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
     e78:	80 e0       	ldi	r24, 0x00	; 0
     e7a:	08 95       	ret
	if(!send_byte(0x33)){return 0;}
     e7c:	80 e0       	ldi	r24, 0x00	; 0
     e7e:	08 95       	ret
	if(!send_byte(0x03)){return 0;}
     e80:	80 e0       	ldi	r24, 0x00	; 0
     e82:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
     e84:	80 e0       	ldi	r24, 0x00	; 0
     e86:	08 95       	ret
	if(!send_byte(0x30)){return 0;}
     e88:	80 e0       	ldi	r24, 0x00	; 0
     e8a:	08 95       	ret
	if(!send_byte(0x08)){return 0;}
     e8c:	80 e0       	ldi	r24, 0x00	; 0
	end();
	
	m_wait(INTERPACKET);

	return 1;
}
     e8e:	08 95       	ret

00000e90 <start_read>:
	}	
	return 1;	// success
}	

unsigned char start_read(unsigned char address)
{
     e90:	cf 93       	push	r28
     e92:	c8 2f       	mov	r28, r24
	unsigned char status;
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
     e94:	84 ea       	ldi	r24, 0xA4	; 164
     e96:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	if(!twi_wait())
     e9a:	0e 94 08 06 	call	0xc10	; 0xc10 <twi_wait>
     e9e:	88 23       	and	r24, r24
     ea0:	69 f0       	breq	.+26     	; 0xebc <start_read+0x2c>
	{
		return 0;
	}
	
	// ADDRESS
	status = send_byte(((address<<1) + 1));
     ea2:	8c 2f       	mov	r24, r28
     ea4:	88 0f       	add	r24, r24
     ea6:	8f 5f       	subi	r24, 0xFF	; 255
     ea8:	0e 94 1b 06 	call	0xc36	; 0xc36 <send_byte>
	if(status== 0x48){ // ACK was not received - may not be connected/listening
     eac:	88 34       	cpi	r24, 0x48	; 72
     eae:	29 f4       	brne	.+10     	; 0xeba <start_read+0x2a>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
     eb0:	84 e9       	ldi	r24, 0x94	; 148
     eb2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
		return 0;	// failure
     eb6:	80 e0       	ldi	r24, 0x00	; 0
     eb8:	01 c0       	rjmp	.+2      	; 0xebc <start_read+0x2c>
	}	
	return 1;	// success
     eba:	81 e0       	ldi	r24, 0x01	; 1
}	
     ebc:	cf 91       	pop	r28
     ebe:	08 95       	ret

00000ec0 <m_wii_read>:

	return 1;
}

char m_wii_read(unsigned int* blob_data)
{
     ec0:	0f 93       	push	r16
     ec2:	1f 93       	push	r17
     ec4:	cf 93       	push	r28
     ec6:	df 93       	push	r29
     ec8:	cd b7       	in	r28, 0x3d	; 61
     eca:	de b7       	in	r29, 0x3e	; 62
     ecc:	60 97       	sbiw	r28, 0x10	; 16
     ece:	0f b6       	in	r0, 0x3f	; 63
     ed0:	f8 94       	cli
     ed2:	de bf       	out	0x3e, r29	; 62
     ed4:	0f be       	out	0x3f, r0	; 63
     ed6:	cd bf       	out	0x3d, r28	; 61
     ed8:	8c 01       	movw	r16, r24
	int i;
	unsigned char temp[16] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
     eda:	fe 01       	movw	r30, r28
     edc:	31 96       	adiw	r30, 0x01	; 1
     ede:	80 e1       	ldi	r24, 0x10	; 16
     ee0:	df 01       	movw	r26, r30
     ee2:	1d 92       	st	X+, r1
     ee4:	8a 95       	dec	r24
     ee6:	e9 f7       	brne	.-6      	; 0xee2 <m_wii_read+0x22>
	
	// prepare for reading
	if(!start_write(MWIITWIADDR)){return 0;}
     ee8:	88 e5       	ldi	r24, 0x58	; 88
     eea:	0e 94 28 06 	call	0xc50	; 0xc50 <start_write>
     eee:	88 23       	and	r24, r24
     ef0:	09 f4       	brne	.+2      	; 0xef4 <m_wii_read+0x34>
     ef2:	69 c0       	rjmp	.+210    	; 0xfc6 <m_wii_read+0x106>
	if(!send_byte(0x36)){return 0;}
     ef4:	86 e3       	ldi	r24, 0x36	; 54
     ef6:	0e 94 1b 06 	call	0xc36	; 0xc36 <send_byte>
     efa:	88 23       	and	r24, r24
     efc:	09 f4       	brne	.+2      	; 0xf00 <m_wii_read+0x40>
     efe:	65 c0       	rjmp	.+202    	; 0xfca <m_wii_read+0x10a>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
     f00:	84 e9       	ldi	r24, 0x94	; 148
     f02:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     f06:	b8 e0       	ldi	r27, 0x08	; 8
     f08:	ba 95       	dec	r27
     f0a:	f1 f7       	brne	.-4      	; 0xf08 <m_wii_read+0x48>
     f0c:	00 00       	nop
	if(!send_byte(0x36)){return 0;}
	end();

	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
     f0e:	88 e5       	ldi	r24, 0x58	; 88
     f10:	0e 94 48 07 	call	0xe90	; 0xe90 <start_read>
     f14:	88 23       	and	r24, r24
     f16:	09 f4       	brne	.+2      	; 0xf1a <m_wii_read+0x5a>
     f18:	5a c0       	rjmp	.+180    	; 0xfce <m_wii_read+0x10e>
     f1a:	be 01       	movw	r22, r28
     f1c:	6f 5f       	subi	r22, 0xFF	; 255
     f1e:	7f 4f       	sbci	r23, 0xFF	; 255
     f20:	ae 01       	movw	r20, r28
     f22:	40 5f       	subi	r20, 0xF0	; 240
     f24:	5f 4f       	sbci	r21, 0xFF	; 255
	for(i=0;i<15;i++)
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
     f26:	ec eb       	ldi	r30, 0xBC	; 188
     f28:	f0 e0       	ldi	r31, 0x00	; 0
     f2a:	84 ec       	ldi	r24, 0xC4	; 196
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		temp[i] = TWDR;
     f2c:	2b eb       	ldi	r18, 0xBB	; 187
     f2e:	30 e0       	ldi	r19, 0x00	; 0
	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
	for(i=0;i<15;i++)
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
     f30:	80 83       	st	Z, r24
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
     f32:	90 81       	ld	r25, Z
     f34:	99 23       	and	r25, r25
     f36:	ec f7       	brge	.-6      	; 0xf32 <m_wii_read+0x72>
		temp[i] = TWDR;
     f38:	d9 01       	movw	r26, r18
     f3a:	9c 91       	ld	r25, X
     f3c:	db 01       	movw	r26, r22
     f3e:	9d 93       	st	X+, r25
     f40:	bd 01       	movw	r22, r26
	end();

	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
	for(i=0;i<15;i++)
     f42:	a4 17       	cp	r26, r20
     f44:	b5 07       	cpc	r27, r21
     f46:	a1 f7       	brne	.-24     	; 0xf30 <m_wii_read+0x70>
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		temp[i] = TWDR;
	}
	TWCR = (1<<TWINT) | (1<<TWEN);	// clear the flag, no ACK, and wait for another byte
     f48:	84 e8       	ldi	r24, 0x84	; 132
     f4a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
     f4e:	ec eb       	ldi	r30, 0xBC	; 188
     f50:	f0 e0       	ldi	r31, 0x00	; 0
     f52:	80 81       	ld	r24, Z
     f54:	88 23       	and	r24, r24
     f56:	ec f7       	brge	.-6      	; 0xf52 <m_wii_read+0x92>
	temp[15] = TWDR;
     f58:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     f5c:	88 8b       	std	Y+16, r24	; 0x10
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
     f5e:	84 e9       	ldi	r24, 0x94	; 148
     f60:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     f64:	be 01       	movw	r22, r28
     f66:	6c 5f       	subi	r22, 0xFC	; 252
     f68:	7f 4f       	sbci	r23, 0xFF	; 255
     f6a:	f8 01       	movw	r30, r16
     f6c:	08 5e       	subi	r16, 0xE8	; 232
     f6e:	1f 4f       	sbci	r17, 0xFF	; 255
	temp[15] = TWDR;
	end();

	for(i=0;i<10;i+=3) // for each blob:
	{	// i = 0, 3, 6, 9
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
     f70:	db 01       	movw	r26, r22
     f72:	2c 91       	ld	r18, X
     f74:	32 2f       	mov	r19, r18
     f76:	30 73       	andi	r19, 0x30	; 48
     f78:	cb 01       	movw	r24, r22
     f7a:	02 97       	sbiw	r24, 0x02	; 2
     f7c:	dc 01       	movw	r26, r24
     f7e:	8c 91       	ld	r24, X
     f80:	90 e0       	ldi	r25, 0x00	; 0
     f82:	b0 e1       	ldi	r27, 0x10	; 16
     f84:	3b 9f       	mul	r19, r27
     f86:	80 0d       	add	r24, r0
     f88:	91 1d       	adc	r25, r1
     f8a:	11 24       	eor	r1, r1
     f8c:	91 83       	std	Z+1, r25	; 0x01
     f8e:	80 83       	st	Z, r24
		blob_data[i+1] = (unsigned int)temp[i+2] + ((int)(temp[i+3] & 0b11000000) <<2);	// Y
     f90:	42 2f       	mov	r20, r18
     f92:	40 7c       	andi	r20, 0xC0	; 192
     f94:	50 e0       	ldi	r21, 0x00	; 0
     f96:	44 0f       	add	r20, r20
     f98:	55 1f       	adc	r21, r21
     f9a:	44 0f       	add	r20, r20
     f9c:	55 1f       	adc	r21, r21
     f9e:	cb 01       	movw	r24, r22
     fa0:	01 97       	sbiw	r24, 0x01	; 1
     fa2:	dc 01       	movw	r26, r24
     fa4:	8c 91       	ld	r24, X
     fa6:	48 0f       	add	r20, r24
     fa8:	51 1d       	adc	r21, r1
     faa:	53 83       	std	Z+3, r21	; 0x03
     fac:	42 83       	std	Z+2, r20	; 0x02
		blob_data[i+2] = temp[i+3] & 0b00001111;										// size
     fae:	2f 70       	andi	r18, 0x0F	; 15
     fb0:	30 e0       	ldi	r19, 0x00	; 0
     fb2:	35 83       	std	Z+5, r19	; 0x05
     fb4:	24 83       	std	Z+4, r18	; 0x04
     fb6:	6d 5f       	subi	r22, 0xFD	; 253
     fb8:	7f 4f       	sbci	r23, 0xFF	; 255
     fba:	36 96       	adiw	r30, 0x06	; 6
	TWCR = (1<<TWINT) | (1<<TWEN);	// clear the flag, no ACK, and wait for another byte
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
	temp[15] = TWDR;
	end();

	for(i=0;i<10;i+=3) // for each blob:
     fbc:	e0 17       	cp	r30, r16
     fbe:	f1 07       	cpc	r31, r17
     fc0:	b9 f6       	brne	.-82     	; 0xf70 <m_wii_read+0xb0>
	{	// i = 0, 3, 6, 9
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
		blob_data[i+1] = (unsigned int)temp[i+2] + ((int)(temp[i+3] & 0b11000000) <<2);	// Y
		blob_data[i+2] = temp[i+3] & 0b00001111;										// size
	}
	return 1;
     fc2:	81 e0       	ldi	r24, 0x01	; 1
     fc4:	05 c0       	rjmp	.+10     	; 0xfd0 <m_wii_read+0x110>
{
	int i;
	unsigned char temp[16] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
	
	// prepare for reading
	if(!start_write(MWIITWIADDR)){return 0;}
     fc6:	80 e0       	ldi	r24, 0x00	; 0
     fc8:	03 c0       	rjmp	.+6      	; 0xfd0 <m_wii_read+0x110>
	if(!send_byte(0x36)){return 0;}
     fca:	80 e0       	ldi	r24, 0x00	; 0
     fcc:	01 c0       	rjmp	.+2      	; 0xfd0 <m_wii_read+0x110>
	end();

	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
     fce:	80 e0       	ldi	r24, 0x00	; 0
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
		blob_data[i+1] = (unsigned int)temp[i+2] + ((int)(temp[i+3] & 0b11000000) <<2);	// Y
		blob_data[i+2] = temp[i+3] & 0b00001111;										// size
	}
	return 1;
}
     fd0:	60 96       	adiw	r28, 0x10	; 16
     fd2:	0f b6       	in	r0, 0x3f	; 63
     fd4:	f8 94       	cli
     fd6:	de bf       	out	0x3e, r29	; 62
     fd8:	0f be       	out	0x3f, r0	; 63
     fda:	cd bf       	out	0x3d, r28	; 61
     fdc:	df 91       	pop	r29
     fde:	cf 91       	pop	r28
     fe0:	1f 91       	pop	r17
     fe2:	0f 91       	pop	r16
     fe4:	08 95       	ret

00000fe6 <print_data>:
void play(){
	active = true;
}

void pause(){
	active = false;
     fe6:	2f 92       	push	r2
     fe8:	3f 92       	push	r3
     fea:	4f 92       	push	r4
     fec:	5f 92       	push	r5
     fee:	6f 92       	push	r6
     ff0:	7f 92       	push	r7
     ff2:	8f 92       	push	r8
     ff4:	9f 92       	push	r9
     ff6:	af 92       	push	r10
     ff8:	bf 92       	push	r11
     ffa:	cf 92       	push	r12
     ffc:	df 92       	push	r13
     ffe:	ef 92       	push	r14
    1000:	ff 92       	push	r15
    1002:	0f 93       	push	r16
    1004:	1f 93       	push	r17
    1006:	cf 93       	push	r28
    1008:	df 93       	push	r29
    100a:	cd b7       	in	r28, 0x3d	; 61
    100c:	de b7       	in	r29, 0x3e	; 62
    100e:	28 97       	sbiw	r28, 0x08	; 8
    1010:	0f b6       	in	r0, 0x3f	; 63
    1012:	f8 94       	cli
    1014:	de bf       	out	0x3e, r29	; 62
    1016:	0f be       	out	0x3f, r0	; 63
    1018:	cd bf       	out	0x3d, r28	; 61
    101a:	1c 01       	movw	r2, r24
    101c:	6f 83       	std	Y+7, r22	; 0x07
    101e:	78 87       	std	Y+8, r23	; 0x08
    1020:	29 01       	movw	r4, r18
    1022:	3a 01       	movw	r6, r20
    1024:	e9 82       	std	Y+1, r14	; 0x01
    1026:	fa 82       	std	Y+2, r15	; 0x02
    1028:	0b 83       	std	Y+3, r16	; 0x03
    102a:	1c 83       	std	Y+4, r17	; 0x04
    102c:	de 82       	std	Y+6, r13	; 0x06
    102e:	cd 82       	std	Y+5, r12	; 0x05
    1030:	f4 01       	movw	r30, r8
    1032:	c1 80       	ldd	r12, Z+1	; 0x01
    1034:	d2 80       	ldd	r13, Z+2	; 0x02
    1036:	e3 80       	ldd	r14, Z+3	; 0x03
    1038:	f4 80       	ldd	r15, Z+4	; 0x04
    103a:	20 e0       	ldi	r18, 0x00	; 0
    103c:	30 e0       	ldi	r19, 0x00	; 0
    103e:	a9 01       	movw	r20, r18
    1040:	c7 01       	movw	r24, r14
    1042:	b6 01       	movw	r22, r12
    1044:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <__cmpsf2>
    1048:	81 11       	cpse	r24, r1
    104a:	0d c0       	rjmp	.+26     	; 0x1066 <print_data+0x80>
    104c:	20 e0       	ldi	r18, 0x00	; 0
    104e:	30 e0       	ldi	r19, 0x00	; 0
    1050:	40 e8       	ldi	r20, 0x80	; 128
    1052:	5f e3       	ldi	r21, 0x3F	; 63
    1054:	c7 01       	movw	r24, r14
    1056:	b6 01       	movw	r22, r12
    1058:	0e 94 a4 0e 	call	0x1d48	; 0x1d48 <__addsf3>
    105c:	f4 01       	movw	r30, r8
    105e:	61 83       	std	Z+1, r22	; 0x01
    1060:	72 83       	std	Z+2, r23	; 0x02
    1062:	83 83       	std	Z+3, r24	; 0x03
    1064:	94 83       	std	Z+4, r25	; 0x04
    1066:	20 e0       	ldi	r18, 0x00	; 0
    1068:	30 e0       	ldi	r19, 0x00	; 0
    106a:	45 e7       	ldi	r20, 0x75	; 117
    106c:	53 ec       	ldi	r21, 0xC3	; 195
    106e:	f4 01       	movw	r30, r8
    1070:	65 81       	ldd	r22, Z+5	; 0x05
    1072:	76 81       	ldd	r23, Z+6	; 0x06
    1074:	87 81       	ldd	r24, Z+7	; 0x07
    1076:	90 85       	ldd	r25, Z+8	; 0x08
    1078:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <__cmpsf2>
    107c:	81 11       	cpse	r24, r1
    107e:	09 c0       	rjmp	.+18     	; 0x1092 <print_data+0xac>
    1080:	80 e0       	ldi	r24, 0x00	; 0
    1082:	90 e0       	ldi	r25, 0x00	; 0
    1084:	a4 e7       	ldi	r26, 0x74	; 116
    1086:	b3 ec       	ldi	r27, 0xC3	; 195
    1088:	f4 01       	movw	r30, r8
    108a:	85 83       	std	Z+5, r24	; 0x05
    108c:	96 83       	std	Z+6, r25	; 0x06
    108e:	a7 83       	std	Z+7, r26	; 0x07
    1090:	b0 87       	std	Z+8, r27	; 0x08
    1092:	88 ec       	ldi	r24, 0xC8	; 200
    1094:	92 e0       	ldi	r25, 0x02	; 2
    1096:	0e 94 b8 05 	call	0xb70	; 0xb70 <print_P>
    109a:	81 01       	movw	r16, r2
    109c:	cf 80       	ldd	r12, Y+7	; 0x07
    109e:	d8 84       	ldd	r13, Y+8	; 0x08
    10a0:	71 01       	movw	r14, r2
    10a2:	f0 e1       	ldi	r31, 0x10	; 16
    10a4:	ef 0e       	add	r14, r31
    10a6:	f1 1c       	adc	r15, r1
    10a8:	85 ec       	ldi	r24, 0xC5	; 197
    10aa:	92 e0       	ldi	r25, 0x02	; 2
    10ac:	0e 94 b8 05 	call	0xb70	; 0xb70 <print_P>
    10b0:	f8 01       	movw	r30, r16
    10b2:	61 91       	ld	r22, Z+
    10b4:	71 91       	ld	r23, Z+
    10b6:	81 91       	ld	r24, Z+
    10b8:	91 91       	ld	r25, Z+
    10ba:	8f 01       	movw	r16, r30
    10bc:	0e 94 fe 0f 	call	0x1ffc	; 0x1ffc <__fixsfsi>
    10c0:	cb 01       	movw	r24, r22
    10c2:	0e 94 d4 05 	call	0xba8	; 0xba8 <m_usb_tx_int>
    10c6:	82 ec       	ldi	r24, 0xC2	; 194
    10c8:	92 e0       	ldi	r25, 0x02	; 2
    10ca:	0e 94 b8 05 	call	0xb70	; 0xb70 <print_P>
    10ce:	f6 01       	movw	r30, r12
    10d0:	61 91       	ld	r22, Z+
    10d2:	71 91       	ld	r23, Z+
    10d4:	81 91       	ld	r24, Z+
    10d6:	91 91       	ld	r25, Z+
    10d8:	6f 01       	movw	r12, r30
    10da:	0e 94 fe 0f 	call	0x1ffc	; 0x1ffc <__fixsfsi>
    10de:	cb 01       	movw	r24, r22
    10e0:	0e 94 d4 05 	call	0xba8	; 0xba8 <m_usb_tx_int>
    10e4:	8f eb       	ldi	r24, 0xBF	; 191
    10e6:	92 e0       	ldi	r25, 0x02	; 2
    10e8:	0e 94 b8 05 	call	0xb70	; 0xb70 <print_P>
    10ec:	85 eb       	ldi	r24, 0xB5	; 181
    10ee:	92 e0       	ldi	r25, 0x02	; 2
    10f0:	0e 94 b8 05 	call	0xb70	; 0xb70 <print_P>
    10f4:	0e 15       	cp	r16, r14
    10f6:	1f 05       	cpc	r17, r15
    10f8:	b9 f6       	brne	.-82     	; 0x10a8 <print_data+0xc2>
    10fa:	8d e0       	ldi	r24, 0x0D	; 13
    10fc:	0e 94 9c 03 	call	0x738	; 0x738 <m_usb_tx_char>
    1100:	89 ea       	ldi	r24, 0xA9	; 169
    1102:	92 e0       	ldi	r25, 0x02	; 2
    1104:	0e 94 b8 05 	call	0xb70	; 0xb70 <print_P>
    1108:	8d 81       	ldd	r24, Y+5	; 0x05
    110a:	9e 81       	ldd	r25, Y+6	; 0x06
    110c:	0e 94 d4 05 	call	0xba8	; 0xba8 <m_usb_tx_int>
    1110:	8a e9       	ldi	r24, 0x9A	; 154
    1112:	92 e0       	ldi	r25, 0x02	; 2
    1114:	0e 94 b8 05 	call	0xb70	; 0xb70 <print_P>
    1118:	8b e8       	ldi	r24, 0x8B	; 139
    111a:	92 e0       	ldi	r25, 0x02	; 2
    111c:	0e 94 b8 05 	call	0xb70	; 0xb70 <print_P>
    1120:	c5 01       	movw	r24, r10
    1122:	0e 94 d4 05 	call	0xba8	; 0xba8 <m_usb_tx_int>
    1126:	8d e0       	ldi	r24, 0x0D	; 13
    1128:	0e 94 9c 03 	call	0x738	; 0x738 <m_usb_tx_char>
    112c:	84 e7       	ldi	r24, 0x74	; 116
    112e:	92 e0       	ldi	r25, 0x02	; 2
    1130:	0e 94 b8 05 	call	0xb70	; 0xb70 <print_P>
    1134:	81 e7       	ldi	r24, 0x71	; 113
    1136:	92 e0       	ldi	r25, 0x02	; 2
    1138:	0e 94 b8 05 	call	0xb70	; 0xb70 <print_P>
    113c:	c3 01       	movw	r24, r6
    113e:	b2 01       	movw	r22, r4
    1140:	0e 94 fe 0f 	call	0x1ffc	; 0x1ffc <__fixsfsi>
    1144:	cb 01       	movw	r24, r22
    1146:	0e 94 d4 05 	call	0xba8	; 0xba8 <m_usb_tx_int>
    114a:	8e e6       	ldi	r24, 0x6E	; 110
    114c:	92 e0       	ldi	r25, 0x02	; 2
    114e:	0e 94 b8 05 	call	0xb70	; 0xb70 <print_P>
    1152:	69 81       	ldd	r22, Y+1	; 0x01
    1154:	7a 81       	ldd	r23, Y+2	; 0x02
    1156:	8b 81       	ldd	r24, Y+3	; 0x03
    1158:	9c 81       	ldd	r25, Y+4	; 0x04
    115a:	0e 94 fe 0f 	call	0x1ffc	; 0x1ffc <__fixsfsi>
    115e:	cb 01       	movw	r24, r22
    1160:	0e 94 d4 05 	call	0xba8	; 0xba8 <m_usb_tx_int>
    1164:	8b e6       	ldi	r24, 0x6B	; 107
    1166:	92 e0       	ldi	r25, 0x02	; 2
    1168:	0e 94 b8 05 	call	0xb70	; 0xb70 <print_P>
    116c:	86 e5       	ldi	r24, 0x56	; 86
    116e:	92 e0       	ldi	r25, 0x02	; 2
    1170:	0e 94 b8 05 	call	0xb70	; 0xb70 <print_P>
    1174:	83 e5       	ldi	r24, 0x53	; 83
    1176:	92 e0       	ldi	r25, 0x02	; 2
    1178:	0e 94 b8 05 	call	0xb70	; 0xb70 <print_P>
    117c:	f4 01       	movw	r30, r8
    117e:	61 81       	ldd	r22, Z+1	; 0x01
    1180:	72 81       	ldd	r23, Z+2	; 0x02
    1182:	83 81       	ldd	r24, Z+3	; 0x03
    1184:	94 81       	ldd	r25, Z+4	; 0x04
    1186:	0e 94 fe 0f 	call	0x1ffc	; 0x1ffc <__fixsfsi>
    118a:	cb 01       	movw	r24, r22
    118c:	0e 94 d4 05 	call	0xba8	; 0xba8 <m_usb_tx_int>
    1190:	80 e5       	ldi	r24, 0x50	; 80
    1192:	92 e0       	ldi	r25, 0x02	; 2
    1194:	0e 94 b8 05 	call	0xb70	; 0xb70 <print_P>
    1198:	f4 01       	movw	r30, r8
    119a:	65 81       	ldd	r22, Z+5	; 0x05
    119c:	76 81       	ldd	r23, Z+6	; 0x06
    119e:	87 81       	ldd	r24, Z+7	; 0x07
    11a0:	90 85       	ldd	r25, Z+8	; 0x08
    11a2:	0e 94 fe 0f 	call	0x1ffc	; 0x1ffc <__fixsfsi>
    11a6:	cb 01       	movw	r24, r22
    11a8:	0e 94 d4 05 	call	0xba8	; 0xba8 <m_usb_tx_int>
    11ac:	8d e4       	ldi	r24, 0x4D	; 77
    11ae:	92 e0       	ldi	r25, 0x02	; 2
    11b0:	0e 94 b8 05 	call	0xb70	; 0xb70 <print_P>
    11b4:	8c e3       	ldi	r24, 0x3C	; 60
    11b6:	92 e0       	ldi	r25, 0x02	; 2
    11b8:	0e 94 b8 05 	call	0xb70	; 0xb70 <print_P>
    11bc:	20 e0       	ldi	r18, 0x00	; 0
    11be:	30 e0       	ldi	r19, 0x00	; 0
    11c0:	44 e3       	ldi	r20, 0x34	; 52
    11c2:	53 e4       	ldi	r21, 0x43	; 67
    11c4:	f4 01       	movw	r30, r8
    11c6:	61 85       	ldd	r22, Z+9	; 0x09
    11c8:	72 85       	ldd	r23, Z+10	; 0x0a
    11ca:	83 85       	ldd	r24, Z+11	; 0x0b
    11cc:	94 85       	ldd	r25, Z+12	; 0x0c
    11ce:	0e 94 59 11 	call	0x22b2	; 0x22b2 <__mulsf3>
    11d2:	0e 94 fe 0f 	call	0x1ffc	; 0x1ffc <__fixsfsi>
    11d6:	07 2e       	mov	r0, r23
    11d8:	00 0c       	add	r0, r0
    11da:	88 0b       	sbc	r24, r24
    11dc:	99 0b       	sbc	r25, r25
    11de:	0e 94 36 10 	call	0x206c	; 0x206c <__floatsisf>
    11e2:	2b ed       	ldi	r18, 0xDB	; 219
    11e4:	3f e0       	ldi	r19, 0x0F	; 15
    11e6:	49 e4       	ldi	r20, 0x49	; 73
    11e8:	50 e4       	ldi	r21, 0x40	; 64
    11ea:	0e 94 8c 0f 	call	0x1f18	; 0x1f18 <__divsf3>
    11ee:	0e 94 fe 0f 	call	0x1ffc	; 0x1ffc <__fixsfsi>
    11f2:	cb 01       	movw	r24, r22
    11f4:	0e 94 d4 05 	call	0xba8	; 0xba8 <m_usb_tx_int>
    11f8:	8d e2       	ldi	r24, 0x2D	; 45
    11fa:	92 e0       	ldi	r25, 0x02	; 2
    11fc:	0e 94 b8 05 	call	0xb70	; 0xb70 <print_P>
    1200:	f4 01       	movw	r30, r8
    1202:	21 81       	ldd	r18, Z+1	; 0x01
    1204:	32 81       	ldd	r19, Z+2	; 0x02
    1206:	43 81       	ldd	r20, Z+3	; 0x03
    1208:	54 81       	ldd	r21, Z+4	; 0x04
    120a:	60 e0       	ldi	r22, 0x00	; 0
    120c:	70 e0       	ldi	r23, 0x00	; 0
    120e:	cb 01       	movw	r24, r22
    1210:	0e 94 a3 0e 	call	0x1d46	; 0x1d46 <__subsf3>
    1214:	6b 01       	movw	r12, r22
    1216:	7c 01       	movw	r14, r24
    1218:	f4 01       	movw	r30, r8
    121a:	25 81       	ldd	r18, Z+5	; 0x05
    121c:	36 81       	ldd	r19, Z+6	; 0x06
    121e:	47 81       	ldd	r20, Z+7	; 0x07
    1220:	50 85       	ldd	r21, Z+8	; 0x08
    1222:	60 e0       	ldi	r22, 0x00	; 0
    1224:	70 e0       	ldi	r23, 0x00	; 0
    1226:	85 e7       	ldi	r24, 0x75	; 117
    1228:	93 ec       	ldi	r25, 0xC3	; 195
    122a:	0e 94 a3 0e 	call	0x1d46	; 0x1d46 <__subsf3>
    122e:	a7 01       	movw	r20, r14
    1230:	96 01       	movw	r18, r12
    1232:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <atan2>
    1236:	20 e0       	ldi	r18, 0x00	; 0
    1238:	30 e0       	ldi	r19, 0x00	; 0
    123a:	44 e3       	ldi	r20, 0x34	; 52
    123c:	53 e4       	ldi	r21, 0x43	; 67
    123e:	0e 94 59 11 	call	0x22b2	; 0x22b2 <__mulsf3>
    1242:	2b ed       	ldi	r18, 0xDB	; 219
    1244:	3f e0       	ldi	r19, 0x0F	; 15
    1246:	49 e4       	ldi	r20, 0x49	; 73
    1248:	50 e4       	ldi	r21, 0x40	; 64
    124a:	0e 94 8c 0f 	call	0x1f18	; 0x1f18 <__divsf3>
    124e:	0e 94 fe 0f 	call	0x1ffc	; 0x1ffc <__fixsfsi>
    1252:	cb 01       	movw	r24, r22
    1254:	0e 94 d4 05 	call	0xba8	; 0xba8 <m_usb_tx_int>
    1258:	8d e0       	ldi	r24, 0x0D	; 13
    125a:	0e 94 9c 03 	call	0x738	; 0x738 <m_usb_tx_char>
    125e:	8d e0       	ldi	r24, 0x0D	; 13
    1260:	0e 94 9c 03 	call	0x738	; 0x738 <m_usb_tx_char>
    1264:	28 96       	adiw	r28, 0x08	; 8
    1266:	0f b6       	in	r0, 0x3f	; 63
    1268:	f8 94       	cli
    126a:	de bf       	out	0x3e, r29	; 62
    126c:	0f be       	out	0x3f, r0	; 63
    126e:	cd bf       	out	0x3d, r28	; 61
    1270:	df 91       	pop	r29
    1272:	cf 91       	pop	r28
    1274:	1f 91       	pop	r17
    1276:	0f 91       	pop	r16
    1278:	ff 90       	pop	r15
    127a:	ef 90       	pop	r14
    127c:	df 90       	pop	r13
    127e:	cf 90       	pop	r12
    1280:	bf 90       	pop	r11
    1282:	af 90       	pop	r10
    1284:	9f 90       	pop	r9
    1286:	8f 90       	pop	r8
    1288:	7f 90       	pop	r7
    128a:	6f 90       	pop	r6
    128c:	5f 90       	pop	r5
    128e:	4f 90       	pop	r4
    1290:	3f 90       	pop	r3
    1292:	2f 90       	pop	r2
    1294:	08 95       	ret

00001296 <init_robot>:
    1296:	fc 01       	movw	r30, r24
    1298:	11 82       	std	Z+1, r1	; 0x01
    129a:	12 82       	std	Z+2, r1	; 0x02
    129c:	13 82       	std	Z+3, r1	; 0x03
    129e:	14 82       	std	Z+4, r1	; 0x04
    12a0:	15 82       	std	Z+5, r1	; 0x05
    12a2:	16 82       	std	Z+6, r1	; 0x06
    12a4:	17 82       	std	Z+7, r1	; 0x07
    12a6:	10 86       	std	Z+8, r1	; 0x08
    12a8:	11 86       	std	Z+9, r1	; 0x09
    12aa:	12 86       	std	Z+10, r1	; 0x0a
    12ac:	13 86       	std	Z+11, r1	; 0x0b
    12ae:	14 86       	std	Z+12, r1	; 0x0c
    12b0:	10 82       	st	Z, r1
    12b2:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <active>
    12b6:	08 95       	ret

000012b8 <interpret>:
}

/* Interpret the measurement vector returned by mWii and update Robot struct data */
void interpret(Robot* robot, unsigned int* measurement){
    12b8:	2f 92       	push	r2
    12ba:	3f 92       	push	r3
    12bc:	4f 92       	push	r4
    12be:	5f 92       	push	r5
    12c0:	6f 92       	push	r6
    12c2:	7f 92       	push	r7
    12c4:	8f 92       	push	r8
    12c6:	9f 92       	push	r9
    12c8:	af 92       	push	r10
    12ca:	bf 92       	push	r11
    12cc:	cf 92       	push	r12
    12ce:	df 92       	push	r13
    12d0:	ef 92       	push	r14
    12d2:	ff 92       	push	r15
    12d4:	0f 93       	push	r16
    12d6:	1f 93       	push	r17
    12d8:	cf 93       	push	r28
    12da:	df 93       	push	r29
    12dc:	cd b7       	in	r28, 0x3d	; 61
    12de:	de b7       	in	r29, 0x3e	; 62
    12e0:	c7 56       	subi	r28, 0x67	; 103
    12e2:	d1 09       	sbc	r29, r1
    12e4:	0f b6       	in	r0, 0x3f	; 63
    12e6:	f8 94       	cli
    12e8:	de bf       	out	0x3e, r29	; 62
    12ea:	0f be       	out	0x3f, r0	; 63
    12ec:	cd bf       	out	0x3d, r28	; 61
    12ee:	a8 96       	adiw	r28, 0x28	; 40
    12f0:	9f af       	std	Y+63, r25	; 0x3f
    12f2:	8e af       	std	Y+62, r24	; 0x3e
    12f4:	a8 97       	sbiw	r28, 0x28	; 40
    12f6:	8b 01       	movw	r16, r22
	// Star coordinates centered around the origin in order of distance from origin
	float const CENTERED_STARS[4][2] = {{-0.2730, -17.3060}, {11.3820, 5.9350}, {-0.2730, 11.6940}, {-10.8360, -0.3230}}; // cm

	// Extract x and y data from measurement
	float mWii_x[] = { (float) (measurement[0]-512.0), (float) (measurement[3]-512.0), (float) (measurement[6]-512.0), (float) (measurement[9]-512.0) };
    12f8:	db 01       	movw	r26, r22
    12fa:	6d 91       	ld	r22, X+
    12fc:	7c 91       	ld	r23, X
    12fe:	80 e0       	ldi	r24, 0x00	; 0
    1300:	90 e0       	ldi	r25, 0x00	; 0
    1302:	0e 94 34 10 	call	0x2068	; 0x2068 <__floatunsisf>
    1306:	20 e0       	ldi	r18, 0x00	; 0
    1308:	30 e0       	ldi	r19, 0x00	; 0
    130a:	40 e0       	ldi	r20, 0x00	; 0
    130c:	54 e4       	ldi	r21, 0x44	; 68
    130e:	0e 94 a3 0e 	call	0x1d46	; 0x1d46 <__subsf3>
    1312:	69 83       	std	Y+1, r22	; 0x01
    1314:	7a 83       	std	Y+2, r23	; 0x02
    1316:	8b 83       	std	Y+3, r24	; 0x03
    1318:	9c 83       	std	Y+4, r25	; 0x04
    131a:	f8 01       	movw	r30, r16
    131c:	66 81       	ldd	r22, Z+6	; 0x06
    131e:	77 81       	ldd	r23, Z+7	; 0x07
    1320:	80 e0       	ldi	r24, 0x00	; 0
    1322:	90 e0       	ldi	r25, 0x00	; 0
    1324:	0e 94 34 10 	call	0x2068	; 0x2068 <__floatunsisf>
    1328:	20 e0       	ldi	r18, 0x00	; 0
    132a:	30 e0       	ldi	r19, 0x00	; 0
    132c:	40 e0       	ldi	r20, 0x00	; 0
    132e:	54 e4       	ldi	r21, 0x44	; 68
    1330:	0e 94 a3 0e 	call	0x1d46	; 0x1d46 <__subsf3>
    1334:	6d 83       	std	Y+5, r22	; 0x05
    1336:	7e 83       	std	Y+6, r23	; 0x06
    1338:	8f 83       	std	Y+7, r24	; 0x07
    133a:	98 87       	std	Y+8, r25	; 0x08
    133c:	d8 01       	movw	r26, r16
    133e:	1c 96       	adiw	r26, 0x0c	; 12
    1340:	6d 91       	ld	r22, X+
    1342:	7c 91       	ld	r23, X
    1344:	1d 97       	sbiw	r26, 0x0d	; 13
    1346:	80 e0       	ldi	r24, 0x00	; 0
    1348:	90 e0       	ldi	r25, 0x00	; 0
    134a:	0e 94 34 10 	call	0x2068	; 0x2068 <__floatunsisf>
    134e:	20 e0       	ldi	r18, 0x00	; 0
    1350:	30 e0       	ldi	r19, 0x00	; 0
    1352:	40 e0       	ldi	r20, 0x00	; 0
    1354:	54 e4       	ldi	r21, 0x44	; 68
    1356:	0e 94 a3 0e 	call	0x1d46	; 0x1d46 <__subsf3>
    135a:	69 87       	std	Y+9, r22	; 0x09
    135c:	7a 87       	std	Y+10, r23	; 0x0a
    135e:	8b 87       	std	Y+11, r24	; 0x0b
    1360:	9c 87       	std	Y+12, r25	; 0x0c
    1362:	f8 01       	movw	r30, r16
    1364:	62 89       	ldd	r22, Z+18	; 0x12
    1366:	73 89       	ldd	r23, Z+19	; 0x13
    1368:	80 e0       	ldi	r24, 0x00	; 0
    136a:	90 e0       	ldi	r25, 0x00	; 0
    136c:	0e 94 34 10 	call	0x2068	; 0x2068 <__floatunsisf>
    1370:	20 e0       	ldi	r18, 0x00	; 0
    1372:	30 e0       	ldi	r19, 0x00	; 0
    1374:	40 e0       	ldi	r20, 0x00	; 0
    1376:	54 e4       	ldi	r21, 0x44	; 68
    1378:	0e 94 a3 0e 	call	0x1d46	; 0x1d46 <__subsf3>
    137c:	6d 87       	std	Y+13, r22	; 0x0d
    137e:	7e 87       	std	Y+14, r23	; 0x0e
    1380:	8f 87       	std	Y+15, r24	; 0x0f
    1382:	98 8b       	std	Y+16, r25	; 0x10
	// Flipping y to right-handed coordinate system
	float mWii_y[] = { (float) -(measurement[1]-384.0), (float) -(measurement[4]-384.0), (float) -(measurement[7]-384.0), (float) -(measurement[10]-384.0) };
    1384:	d8 01       	movw	r26, r16
    1386:	12 96       	adiw	r26, 0x02	; 2
    1388:	6d 91       	ld	r22, X+
    138a:	7c 91       	ld	r23, X
    138c:	13 97       	sbiw	r26, 0x03	; 3
    138e:	80 e0       	ldi	r24, 0x00	; 0
    1390:	90 e0       	ldi	r25, 0x00	; 0
    1392:	0e 94 34 10 	call	0x2068	; 0x2068 <__floatunsisf>
    1396:	20 e0       	ldi	r18, 0x00	; 0
    1398:	30 e0       	ldi	r19, 0x00	; 0
    139a:	40 ec       	ldi	r20, 0xC0	; 192
    139c:	53 e4       	ldi	r21, 0x43	; 67
    139e:	0e 94 a3 0e 	call	0x1d46	; 0x1d46 <__subsf3>
    13a2:	dc 01       	movw	r26, r24
    13a4:	cb 01       	movw	r24, r22
    13a6:	b0 58       	subi	r27, 0x80	; 128
    13a8:	89 8b       	std	Y+17, r24	; 0x11
    13aa:	9a 8b       	std	Y+18, r25	; 0x12
    13ac:	ab 8b       	std	Y+19, r26	; 0x13
    13ae:	bc 8b       	std	Y+20, r27	; 0x14
    13b0:	f8 01       	movw	r30, r16
    13b2:	60 85       	ldd	r22, Z+8	; 0x08
    13b4:	71 85       	ldd	r23, Z+9	; 0x09
    13b6:	80 e0       	ldi	r24, 0x00	; 0
    13b8:	90 e0       	ldi	r25, 0x00	; 0
    13ba:	0e 94 34 10 	call	0x2068	; 0x2068 <__floatunsisf>
    13be:	20 e0       	ldi	r18, 0x00	; 0
    13c0:	30 e0       	ldi	r19, 0x00	; 0
    13c2:	40 ec       	ldi	r20, 0xC0	; 192
    13c4:	53 e4       	ldi	r21, 0x43	; 67
    13c6:	0e 94 a3 0e 	call	0x1d46	; 0x1d46 <__subsf3>
    13ca:	dc 01       	movw	r26, r24
    13cc:	cb 01       	movw	r24, r22
    13ce:	b0 58       	subi	r27, 0x80	; 128
    13d0:	8d 8b       	std	Y+21, r24	; 0x15
    13d2:	9e 8b       	std	Y+22, r25	; 0x16
    13d4:	af 8b       	std	Y+23, r26	; 0x17
    13d6:	b8 8f       	std	Y+24, r27	; 0x18
    13d8:	d8 01       	movw	r26, r16
    13da:	1e 96       	adiw	r26, 0x0e	; 14
    13dc:	6d 91       	ld	r22, X+
    13de:	7c 91       	ld	r23, X
    13e0:	1f 97       	sbiw	r26, 0x0f	; 15
    13e2:	80 e0       	ldi	r24, 0x00	; 0
    13e4:	90 e0       	ldi	r25, 0x00	; 0
    13e6:	0e 94 34 10 	call	0x2068	; 0x2068 <__floatunsisf>
    13ea:	20 e0       	ldi	r18, 0x00	; 0
    13ec:	30 e0       	ldi	r19, 0x00	; 0
    13ee:	40 ec       	ldi	r20, 0xC0	; 192
    13f0:	53 e4       	ldi	r21, 0x43	; 67
    13f2:	0e 94 a3 0e 	call	0x1d46	; 0x1d46 <__subsf3>
    13f6:	dc 01       	movw	r26, r24
    13f8:	cb 01       	movw	r24, r22
    13fa:	b0 58       	subi	r27, 0x80	; 128
    13fc:	89 8f       	std	Y+25, r24	; 0x19
    13fe:	9a 8f       	std	Y+26, r25	; 0x1a
    1400:	ab 8f       	std	Y+27, r26	; 0x1b
    1402:	bc 8f       	std	Y+28, r27	; 0x1c
    1404:	f8 01       	movw	r30, r16
    1406:	64 89       	ldd	r22, Z+20	; 0x14
    1408:	75 89       	ldd	r23, Z+21	; 0x15
    140a:	80 e0       	ldi	r24, 0x00	; 0
    140c:	90 e0       	ldi	r25, 0x00	; 0
    140e:	0e 94 34 10 	call	0x2068	; 0x2068 <__floatunsisf>
    1412:	20 e0       	ldi	r18, 0x00	; 0
    1414:	30 e0       	ldi	r19, 0x00	; 0
    1416:	40 ec       	ldi	r20, 0xC0	; 192
    1418:	53 e4       	ldi	r21, 0x43	; 67
    141a:	0e 94 a3 0e 	call	0x1d46	; 0x1d46 <__subsf3>
    141e:	dc 01       	movw	r26, r24
    1420:	cb 01       	movw	r24, r22
    1422:	b0 58       	subi	r27, 0x80	; 128
    1424:	8d 8f       	std	Y+29, r24	; 0x1d
    1426:	9e 8f       	std	Y+30, r25	; 0x1e
    1428:	af 8f       	std	Y+31, r26	; 0x1f
    142a:	b8 a3       	std	Y+32, r27	; 0x20
    142c:	9e 01       	movw	r18, r28
    142e:	2f 5f       	subi	r18, 0xFF	; 255
    1430:	3f 4f       	sbci	r19, 0xFF	; 255
    1432:	49 01       	movw	r8, r18
    1434:	5e 01       	movw	r10, r28
    1436:	31 e1       	ldi	r19, 0x11	; 17
    1438:	a3 0e       	add	r10, r19
    143a:	b1 1c       	adc	r11, r1
    143c:	15 01       	movw	r2, r10
    143e:	75 01       	movw	r14, r10
    1440:	84 01       	movw	r16, r8

	
	////////// Determine translation to origin //////////
	float translation_x = 0, translation_y = 0;
    1442:	25 96       	adiw	r28, 0x05	; 5
    1444:	1c ae       	std	Y+60, r1	; 0x3c
    1446:	1d ae       	std	Y+61, r1	; 0x3d
    1448:	1e ae       	std	Y+62, r1	; 0x3e
    144a:	1f ae       	std	Y+63, r1	; 0x3f
    144c:	25 97       	sbiw	r28, 0x05	; 5
    144e:	41 2c       	mov	r4, r1
    1450:	51 2c       	mov	r5, r1
    1452:	32 01       	movw	r6, r4
	for (int i = 0; i < 4; i++) {
		translation_x += mWii_x[i];
    1454:	d8 01       	movw	r26, r16
    1456:	2d 91       	ld	r18, X+
    1458:	3d 91       	ld	r19, X+
    145a:	4d 91       	ld	r20, X+
    145c:	5d 91       	ld	r21, X+
    145e:	8d 01       	movw	r16, r26
    1460:	c3 01       	movw	r24, r6
    1462:	b2 01       	movw	r22, r4
    1464:	0e 94 a4 0e 	call	0x1d48	; 0x1d48 <__addsf3>
    1468:	2b 01       	movw	r4, r22
    146a:	3c 01       	movw	r6, r24
		translation_y += mWii_y[i];
    146c:	f7 01       	movw	r30, r14
    146e:	21 91       	ld	r18, Z+
    1470:	31 91       	ld	r19, Z+
    1472:	41 91       	ld	r20, Z+
    1474:	51 91       	ld	r21, Z+
    1476:	7f 01       	movw	r14, r30
    1478:	25 96       	adiw	r28, 0x05	; 5
    147a:	6c ad       	ldd	r22, Y+60	; 0x3c
    147c:	7d ad       	ldd	r23, Y+61	; 0x3d
    147e:	8e ad       	ldd	r24, Y+62	; 0x3e
    1480:	9f ad       	ldd	r25, Y+63	; 0x3f
    1482:	25 97       	sbiw	r28, 0x05	; 5
    1484:	0e 94 a4 0e 	call	0x1d48	; 0x1d48 <__addsf3>
    1488:	25 96       	adiw	r28, 0x05	; 5
    148a:	6c af       	std	Y+60, r22	; 0x3c
    148c:	7d af       	std	Y+61, r23	; 0x3d
    148e:	8e af       	std	Y+62, r24	; 0x3e
    1490:	9f af       	std	Y+63, r25	; 0x3f
    1492:	25 97       	sbiw	r28, 0x05	; 5
	float mWii_y[] = { (float) -(measurement[1]-384.0), (float) -(measurement[4]-384.0), (float) -(measurement[7]-384.0), (float) -(measurement[10]-384.0) };

	
	////////// Determine translation to origin //////////
	float translation_x = 0, translation_y = 0;
	for (int i = 0; i < 4; i++) {
    1494:	02 15       	cp	r16, r2
    1496:	13 05       	cpc	r17, r3
    1498:	e9 f6       	brne	.-70     	; 0x1454 <interpret+0x19c>
		translation_x += mWii_x[i];
		translation_y += mWii_y[i];
	}
	translation_x /= 4.0;
    149a:	20 e0       	ldi	r18, 0x00	; 0
    149c:	30 e0       	ldi	r19, 0x00	; 0
    149e:	40 e8       	ldi	r20, 0x80	; 128
    14a0:	5e e3       	ldi	r21, 0x3E	; 62
    14a2:	c3 01       	movw	r24, r6
    14a4:	b2 01       	movw	r22, r4
    14a6:	0e 94 59 11 	call	0x22b2	; 0x22b2 <__mulsf3>
    14aa:	6a 96       	adiw	r28, 0x1a	; 26
    14ac:	6c af       	std	Y+60, r22	; 0x3c
    14ae:	7d af       	std	Y+61, r23	; 0x3d
    14b0:	8e af       	std	Y+62, r24	; 0x3e
    14b2:	9f af       	std	Y+63, r25	; 0x3f
    14b4:	6a 97       	sbiw	r28, 0x1a	; 26
	translation_y /= 4.0;
    14b6:	20 e0       	ldi	r18, 0x00	; 0
    14b8:	30 e0       	ldi	r19, 0x00	; 0
    14ba:	40 e8       	ldi	r20, 0x80	; 128
    14bc:	5e e3       	ldi	r21, 0x3E	; 62
    14be:	25 96       	adiw	r28, 0x05	; 5
    14c0:	6c ad       	ldd	r22, Y+60	; 0x3c
    14c2:	7d ad       	ldd	r23, Y+61	; 0x3d
    14c4:	8e ad       	ldd	r24, Y+62	; 0x3e
    14c6:	9f ad       	ldd	r25, Y+63	; 0x3f
    14c8:	25 97       	sbiw	r28, 0x05	; 5
    14ca:	0e 94 59 11 	call	0x22b2	; 0x22b2 <__mulsf3>
    14ce:	6e 96       	adiw	r28, 0x1e	; 30
    14d0:	6c af       	std	Y+60, r22	; 0x3c
    14d2:	7d af       	std	Y+61, r23	; 0x3d
    14d4:	8e af       	std	Y+62, r24	; 0x3e
    14d6:	9f af       	std	Y+63, r25	; 0x3f
    14d8:	6e 97       	sbiw	r28, 0x1e	; 30
    14da:	35 01       	movw	r6, r10
    14dc:	84 01       	movw	r16, r8

	////////// Find mWii and star scale //////////
	float mWii_scale = 0.0, star_scale = 0.0;
    14de:	25 96       	adiw	r28, 0x05	; 5
    14e0:	1c ae       	std	Y+60, r1	; 0x3c
    14e2:	1d ae       	std	Y+61, r1	; 0x3d
    14e4:	1e ae       	std	Y+62, r1	; 0x3e
    14e6:	1f ae       	std	Y+63, r1	; 0x3f
    14e8:	25 97       	sbiw	r28, 0x05	; 5

	for (int i = 0; i < 4; i++) {
		mWii_scale += powf(mWii_x[i] - translation_x, 2.0) + powf(mWii_y[i] - translation_y, 2.0);
    14ea:	d8 01       	movw	r26, r16
    14ec:	6d 91       	ld	r22, X+
    14ee:	7d 91       	ld	r23, X+
    14f0:	8d 91       	ld	r24, X+
    14f2:	9d 91       	ld	r25, X+
    14f4:	8d 01       	movw	r16, r26
    14f6:	6a 96       	adiw	r28, 0x1a	; 26
    14f8:	2c ad       	ldd	r18, Y+60	; 0x3c
    14fa:	3d ad       	ldd	r19, Y+61	; 0x3d
    14fc:	4e ad       	ldd	r20, Y+62	; 0x3e
    14fe:	5f ad       	ldd	r21, Y+63	; 0x3f
    1500:	6a 97       	sbiw	r28, 0x1a	; 26
    1502:	0e 94 a3 0e 	call	0x1d46	; 0x1d46 <__subsf3>
    1506:	6b 01       	movw	r12, r22
    1508:	7c 01       	movw	r14, r24
    150a:	f3 01       	movw	r30, r6
    150c:	61 91       	ld	r22, Z+
    150e:	71 91       	ld	r23, Z+
    1510:	81 91       	ld	r24, Z+
    1512:	91 91       	ld	r25, Z+
    1514:	3f 01       	movw	r6, r30
    1516:	6e 96       	adiw	r28, 0x1e	; 30
    1518:	2c ad       	ldd	r18, Y+60	; 0x3c
    151a:	3d ad       	ldd	r19, Y+61	; 0x3d
    151c:	4e ad       	ldd	r20, Y+62	; 0x3e
    151e:	5f ad       	ldd	r21, Y+63	; 0x3f
    1520:	6e 97       	sbiw	r28, 0x1e	; 30
    1522:	0e 94 a3 0e 	call	0x1d46	; 0x1d46 <__subsf3>
    1526:	9b 01       	movw	r18, r22
    1528:	ac 01       	movw	r20, r24
    152a:	0e 94 59 11 	call	0x22b2	; 0x22b2 <__mulsf3>
    152e:	29 96       	adiw	r28, 0x09	; 9
    1530:	6c af       	std	Y+60, r22	; 0x3c
    1532:	7d af       	std	Y+61, r23	; 0x3d
    1534:	8e af       	std	Y+62, r24	; 0x3e
    1536:	9f af       	std	Y+63, r25	; 0x3f
    1538:	29 97       	sbiw	r28, 0x09	; 9
    153a:	a7 01       	movw	r20, r14
    153c:	96 01       	movw	r18, r12
    153e:	c7 01       	movw	r24, r14
    1540:	b6 01       	movw	r22, r12
    1542:	0e 94 59 11 	call	0x22b2	; 0x22b2 <__mulsf3>
    1546:	9b 01       	movw	r18, r22
    1548:	ac 01       	movw	r20, r24
    154a:	29 96       	adiw	r28, 0x09	; 9
    154c:	6c ad       	ldd	r22, Y+60	; 0x3c
    154e:	7d ad       	ldd	r23, Y+61	; 0x3d
    1550:	8e ad       	ldd	r24, Y+62	; 0x3e
    1552:	9f ad       	ldd	r25, Y+63	; 0x3f
    1554:	29 97       	sbiw	r28, 0x09	; 9
    1556:	0e 94 a4 0e 	call	0x1d48	; 0x1d48 <__addsf3>
    155a:	9b 01       	movw	r18, r22
    155c:	ac 01       	movw	r20, r24
    155e:	25 96       	adiw	r28, 0x05	; 5
    1560:	6c ad       	ldd	r22, Y+60	; 0x3c
    1562:	7d ad       	ldd	r23, Y+61	; 0x3d
    1564:	8e ad       	ldd	r24, Y+62	; 0x3e
    1566:	9f ad       	ldd	r25, Y+63	; 0x3f
    1568:	25 97       	sbiw	r28, 0x05	; 5
    156a:	0e 94 a4 0e 	call	0x1d48	; 0x1d48 <__addsf3>
    156e:	25 96       	adiw	r28, 0x05	; 5
    1570:	6c af       	std	Y+60, r22	; 0x3c
    1572:	7d af       	std	Y+61, r23	; 0x3d
    1574:	8e af       	std	Y+62, r24	; 0x3e
    1576:	9f af       	std	Y+63, r25	; 0x3f
    1578:	25 97       	sbiw	r28, 0x05	; 5
	translation_y /= 4.0;

	////////// Find mWii and star scale //////////
	float mWii_scale = 0.0, star_scale = 0.0;

	for (int i = 0; i < 4; i++) {
    157a:	02 15       	cp	r16, r2
    157c:	13 05       	cpc	r17, r3
    157e:	09 f0       	breq	.+2      	; 0x1582 <interpret+0x2ca>
    1580:	b4 cf       	rjmp	.-152    	; 0x14ea <interpret+0x232>
		mWii_scale += powf(mWii_x[i] - translation_x, 2.0) + powf(mWii_y[i] - translation_y, 2.0);
		star_scale += powf(CENTERED_STARS[i][0], 2.0) + powf(CENTERED_STARS[i][1], 2.0);
	}
	
	mWii_scale = powf(mWii_scale / 4.0, 0.5);
    1582:	20 e0       	ldi	r18, 0x00	; 0
    1584:	30 e0       	ldi	r19, 0x00	; 0
    1586:	40 e8       	ldi	r20, 0x80	; 128
    1588:	5e e3       	ldi	r21, 0x3E	; 62
    158a:	0e 94 59 11 	call	0x22b2	; 0x22b2 <__mulsf3>
    158e:	20 e0       	ldi	r18, 0x00	; 0
    1590:	30 e0       	ldi	r19, 0x00	; 0
    1592:	40 e0       	ldi	r20, 0x00	; 0
    1594:	5f e3       	ldi	r21, 0x3F	; 63
    1596:	0e 94 c6 11 	call	0x238c	; 0x238c <pow>
    159a:	e6 2e       	mov	r14, r22
    159c:	f7 2e       	mov	r15, r23
    159e:	08 2f       	mov	r16, r24
    15a0:	19 2f       	mov	r17, r25
    15a2:	2e 01       	movw	r4, r28
    15a4:	f1 e2       	ldi	r31, 0x21	; 33
    15a6:	4f 0e       	add	r4, r31
    15a8:	51 1c       	adc	r5, r1
    15aa:	9e 01       	movw	r18, r28
    15ac:	2f 5c       	subi	r18, 0xCF	; 207
    15ae:	3f 4f       	sbci	r19, 0xFF	; 255
    15b0:	a2 96       	adiw	r28, 0x22	; 34
    15b2:	3f af       	std	Y+63, r19	; 0x3f
    15b4:	2e af       	std	Y+62, r18	; 0x3e
    15b6:	a2 97       	sbiw	r28, 0x22	; 34
    15b8:	69 01       	movw	r12, r18
    15ba:	32 01       	movw	r6, r4
	star_scale = powf(star_scale / 4.0, 0.5);

	// Scale points to uniform scale (0 to 1)
	float mx[4], my[4];
	for (int i = 0; i < 4; i++) {
		mx[i] = (mWii_x[i] - translation_x) / mWii_scale;
    15bc:	d4 01       	movw	r26, r8
    15be:	6d 91       	ld	r22, X+
    15c0:	7d 91       	ld	r23, X+
    15c2:	8d 91       	ld	r24, X+
    15c4:	9d 91       	ld	r25, X+
    15c6:	4d 01       	movw	r8, r26
    15c8:	6a 96       	adiw	r28, 0x1a	; 26
    15ca:	2c ad       	ldd	r18, Y+60	; 0x3c
    15cc:	3d ad       	ldd	r19, Y+61	; 0x3d
    15ce:	4e ad       	ldd	r20, Y+62	; 0x3e
    15d0:	5f ad       	ldd	r21, Y+63	; 0x3f
    15d2:	6a 97       	sbiw	r28, 0x1a	; 26
    15d4:	0e 94 a3 0e 	call	0x1d46	; 0x1d46 <__subsf3>
    15d8:	2e 2d       	mov	r18, r14
    15da:	3f 2d       	mov	r19, r15
    15dc:	40 2f       	mov	r20, r16
    15de:	51 2f       	mov	r21, r17
    15e0:	0e 94 8c 0f 	call	0x1f18	; 0x1f18 <__divsf3>
    15e4:	f3 01       	movw	r30, r6
    15e6:	61 93       	st	Z+, r22
    15e8:	71 93       	st	Z+, r23
    15ea:	81 93       	st	Z+, r24
    15ec:	91 93       	st	Z+, r25
    15ee:	3f 01       	movw	r6, r30
		my[i] = (mWii_y[i] - translation_y) / mWii_scale;
    15f0:	d5 01       	movw	r26, r10
    15f2:	6d 91       	ld	r22, X+
    15f4:	7d 91       	ld	r23, X+
    15f6:	8d 91       	ld	r24, X+
    15f8:	9d 91       	ld	r25, X+
    15fa:	5d 01       	movw	r10, r26
    15fc:	6e 96       	adiw	r28, 0x1e	; 30
    15fe:	2c ad       	ldd	r18, Y+60	; 0x3c
    1600:	3d ad       	ldd	r19, Y+61	; 0x3d
    1602:	4e ad       	ldd	r20, Y+62	; 0x3e
    1604:	5f ad       	ldd	r21, Y+63	; 0x3f
    1606:	6e 97       	sbiw	r28, 0x1e	; 30
    1608:	0e 94 a3 0e 	call	0x1d46	; 0x1d46 <__subsf3>
    160c:	2e 2d       	mov	r18, r14
    160e:	3f 2d       	mov	r19, r15
    1610:	40 2f       	mov	r20, r16
    1612:	51 2f       	mov	r21, r17
    1614:	0e 94 8c 0f 	call	0x1f18	; 0x1f18 <__divsf3>
    1618:	f6 01       	movw	r30, r12
    161a:	61 93       	st	Z+, r22
    161c:	71 93       	st	Z+, r23
    161e:	81 93       	st	Z+, r24
    1620:	91 93       	st	Z+, r25
    1622:	6f 01       	movw	r12, r30
	mWii_scale = powf(mWii_scale / 4.0, 0.5);
	star_scale = powf(star_scale / 4.0, 0.5);

	// Scale points to uniform scale (0 to 1)
	float mx[4], my[4];
	for (int i = 0; i < 4; i++) {
    1624:	82 14       	cp	r8, r2
    1626:	93 04       	cpc	r9, r3
    1628:	49 f6       	brne	.-110    	; 0x15bc <interpret+0x304>
    162a:	27 96       	adiw	r28, 0x07	; 7
    162c:	1f ae       	std	Y+63, r1	; 0x3f
    162e:	1e ae       	std	Y+62, r1	; 0x3e
    1630:	27 97       	sbiw	r28, 0x07	; 7
    1632:	21 e0       	ldi	r18, 0x01	; 1
    1634:	30 e0       	ldi	r19, 0x00	; 0
    1636:	a4 96       	adiw	r28, 0x24	; 36
    1638:	3f af       	std	Y+63, r19	; 0x3f
    163a:	2e af       	std	Y+62, r18	; 0x3e
    163c:	a4 97       	sbiw	r28, 0x24	; 36
    163e:	80 e0       	ldi	r24, 0x00	; 0
    1640:	90 e0       	ldi	r25, 0x00	; 0
    1642:	2a 96       	adiw	r28, 0x0a	; 10
    1644:	1f ae       	std	Y+63, r1	; 0x3f
    1646:	2a 97       	sbiw	r28, 0x0a	; 10
    1648:	2e 96       	adiw	r28, 0x0e	; 14
    164a:	1f ae       	std	Y+63, r1	; 0x3f
    164c:	2e 97       	sbiw	r28, 0x0e	; 14
    164e:	61 2c       	mov	r6, r1
    1650:	71 2c       	mov	r7, r1
    1652:	12 01       	movw	r2, r4

	// Get max distance indices
	float max_distance = 0;
	int indices[2] = {0, 1};
	for (int i = 0; i < 3; i++) {
		for (int j = i + 1; j < 4; j++) {
    1654:	ac 01       	movw	r20, r24
    1656:	4f 5f       	subi	r20, 0xFF	; 255
    1658:	5f 4f       	sbci	r21, 0xFF	; 255
    165a:	a0 96       	adiw	r28, 0x20	; 32
    165c:	5f af       	std	Y+63, r21	; 0x3f
    165e:	4e af       	std	Y+62, r20	; 0x3e
    1660:	a0 97       	sbiw	r28, 0x20	; 32
    1662:	44 30       	cpi	r20, 0x04	; 4
    1664:	51 05       	cpc	r21, r1
    1666:	0c f0       	brlt	.+2      	; 0x166a <interpret+0x3b2>
    1668:	75 c2       	rjmp	.+1258   	; 0x1b54 <interpret+0x89c>
			// Get distance between points
			float distance = powf(powf(mx[i] - mx[j], 2.0) + powf(my[i] - my[j], 2.0), 0.5);
    166a:	d1 01       	movw	r26, r2
    166c:	2d 91       	ld	r18, X+
    166e:	3d 91       	ld	r19, X+
    1670:	4d 91       	ld	r20, X+
    1672:	5d 91       	ld	r21, X+
    1674:	4d 01       	movw	r8, r26
    1676:	62 96       	adiw	r28, 0x12	; 18
    1678:	2c af       	std	Y+60, r18	; 0x3c
    167a:	3d af       	std	Y+61, r19	; 0x3d
    167c:	4e af       	std	Y+62, r20	; 0x3e
    167e:	5f af       	std	Y+63, r21	; 0x3f
    1680:	62 97       	sbiw	r28, 0x12	; 18
    1682:	a2 96       	adiw	r28, 0x22	; 34
    1684:	ae ac       	ldd	r10, Y+62	; 0x3e
    1686:	bf ac       	ldd	r11, Y+63	; 0x3f
    1688:	a2 97       	sbiw	r28, 0x22	; 34
    168a:	d5 01       	movw	r26, r10
    168c:	2d 91       	ld	r18, X+
    168e:	3d 91       	ld	r19, X+
    1690:	4d 91       	ld	r20, X+
    1692:	5d 91       	ld	r21, X+
    1694:	5d 01       	movw	r10, r26
    1696:	66 96       	adiw	r28, 0x16	; 22
    1698:	2c af       	std	Y+60, r18	; 0x3c
    169a:	3d af       	std	Y+61, r19	; 0x3d
    169c:	4e af       	std	Y+62, r20	; 0x3e
    169e:	5f af       	std	Y+63, r21	; 0x3f
    16a0:	66 97       	sbiw	r28, 0x16	; 22
    16a2:	a0 96       	adiw	r28, 0x20	; 32
    16a4:	4e ac       	ldd	r4, Y+62	; 0x3e
    16a6:	5f ac       	ldd	r5, Y+63	; 0x3f
    16a8:	a0 97       	sbiw	r28, 0x20	; 32
			// Compare to max distance
			if (distance > max_distance) {
    16aa:	a5 96       	adiw	r28, 0x25	; 37
    16ac:	8f af       	std	Y+63, r24	; 0x3f
    16ae:	a5 97       	sbiw	r28, 0x25	; 37
    16b0:	a6 96       	adiw	r28, 0x26	; 38
    16b2:	9f af       	std	Y+63, r25	; 0x3f
    16b4:	a6 97       	sbiw	r28, 0x26	; 38
	float max_distance = 0;
	int indices[2] = {0, 1};
	for (int i = 0; i < 3; i++) {
		for (int j = i + 1; j < 4; j++) {
			// Get distance between points
			float distance = powf(powf(mx[i] - mx[j], 2.0) + powf(my[i] - my[j], 2.0), 0.5);
    16b6:	f4 01       	movw	r30, r8
    16b8:	21 91       	ld	r18, Z+
    16ba:	31 91       	ld	r19, Z+
    16bc:	41 91       	ld	r20, Z+
    16be:	51 91       	ld	r21, Z+
    16c0:	4f 01       	movw	r8, r30
    16c2:	62 96       	adiw	r28, 0x12	; 18
    16c4:	6c ad       	ldd	r22, Y+60	; 0x3c
    16c6:	7d ad       	ldd	r23, Y+61	; 0x3d
    16c8:	8e ad       	ldd	r24, Y+62	; 0x3e
    16ca:	9f ad       	ldd	r25, Y+63	; 0x3f
    16cc:	62 97       	sbiw	r28, 0x12	; 18
    16ce:	0e 94 a3 0e 	call	0x1d46	; 0x1d46 <__subsf3>
    16d2:	6b 01       	movw	r12, r22
    16d4:	7c 01       	movw	r14, r24
    16d6:	d5 01       	movw	r26, r10
    16d8:	2d 91       	ld	r18, X+
    16da:	3d 91       	ld	r19, X+
    16dc:	4d 91       	ld	r20, X+
    16de:	5d 91       	ld	r21, X+
    16e0:	5d 01       	movw	r10, r26
    16e2:	66 96       	adiw	r28, 0x16	; 22
    16e4:	6c ad       	ldd	r22, Y+60	; 0x3c
    16e6:	7d ad       	ldd	r23, Y+61	; 0x3d
    16e8:	8e ad       	ldd	r24, Y+62	; 0x3e
    16ea:	9f ad       	ldd	r25, Y+63	; 0x3f
    16ec:	66 97       	sbiw	r28, 0x16	; 22
    16ee:	0e 94 a3 0e 	call	0x1d46	; 0x1d46 <__subsf3>
    16f2:	9b 01       	movw	r18, r22
    16f4:	ac 01       	movw	r20, r24
    16f6:	0e 94 59 11 	call	0x22b2	; 0x22b2 <__mulsf3>
    16fa:	25 96       	adiw	r28, 0x05	; 5
    16fc:	6c af       	std	Y+60, r22	; 0x3c
    16fe:	7d af       	std	Y+61, r23	; 0x3d
    1700:	8e af       	std	Y+62, r24	; 0x3e
    1702:	9f af       	std	Y+63, r25	; 0x3f
    1704:	25 97       	sbiw	r28, 0x05	; 5
    1706:	a7 01       	movw	r20, r14
    1708:	96 01       	movw	r18, r12
    170a:	c7 01       	movw	r24, r14
    170c:	b6 01       	movw	r22, r12
    170e:	0e 94 59 11 	call	0x22b2	; 0x22b2 <__mulsf3>
    1712:	9b 01       	movw	r18, r22
    1714:	ac 01       	movw	r20, r24
    1716:	25 96       	adiw	r28, 0x05	; 5
    1718:	6c ad       	ldd	r22, Y+60	; 0x3c
    171a:	7d ad       	ldd	r23, Y+61	; 0x3d
    171c:	8e ad       	ldd	r24, Y+62	; 0x3e
    171e:	9f ad       	ldd	r25, Y+63	; 0x3f
    1720:	25 97       	sbiw	r28, 0x05	; 5
    1722:	0e 94 a4 0e 	call	0x1d48	; 0x1d48 <__addsf3>
    1726:	20 e0       	ldi	r18, 0x00	; 0
    1728:	30 e0       	ldi	r19, 0x00	; 0
    172a:	40 e0       	ldi	r20, 0x00	; 0
    172c:	5f e3       	ldi	r21, 0x3F	; 63
    172e:	0e 94 c6 11 	call	0x238c	; 0x238c <pow>
    1732:	e6 2e       	mov	r14, r22
    1734:	f7 2e       	mov	r15, r23
    1736:	08 2f       	mov	r16, r24
    1738:	19 2f       	mov	r17, r25
			// Compare to max distance
			if (distance > max_distance) {
    173a:	2a 96       	adiw	r28, 0x0a	; 10
    173c:	2f ad       	ldd	r18, Y+63	; 0x3f
    173e:	2a 97       	sbiw	r28, 0x0a	; 10
    1740:	2e 96       	adiw	r28, 0x0e	; 14
    1742:	3f ad       	ldd	r19, Y+63	; 0x3f
    1744:	2e 97       	sbiw	r28, 0x0e	; 14
    1746:	46 2d       	mov	r20, r6
    1748:	57 2d       	mov	r21, r7
    174a:	0e 94 4c 11 	call	0x2298	; 0x2298 <__gesf2>
    174e:	18 16       	cp	r1, r24
    1750:	c4 f4       	brge	.+48     	; 0x1782 <interpret+0x4ca>
    1752:	a4 96       	adiw	r28, 0x24	; 36
    1754:	5f ae       	std	Y+63, r5	; 0x3f
    1756:	4e ae       	std	Y+62, r4	; 0x3e
    1758:	a4 97       	sbiw	r28, 0x24	; 36
    175a:	a5 96       	adiw	r28, 0x25	; 37
    175c:	bf ad       	ldd	r27, Y+63	; 0x3f
    175e:	a5 97       	sbiw	r28, 0x25	; 37
    1760:	26 96       	adiw	r28, 0x06	; 6
    1762:	bf af       	std	Y+63, r27	; 0x3f
    1764:	26 97       	sbiw	r28, 0x06	; 6
    1766:	a6 96       	adiw	r28, 0x26	; 38
    1768:	ef ad       	ldd	r30, Y+63	; 0x3f
    176a:	a6 97       	sbiw	r28, 0x26	; 38
    176c:	27 96       	adiw	r28, 0x07	; 7
    176e:	ef af       	std	Y+63, r30	; 0x3f
    1770:	27 97       	sbiw	r28, 0x07	; 7
				// If greater, update max distance indices
				indices[0] = i;
				indices[1] = j;
				max_distance = distance;
    1772:	2a 96       	adiw	r28, 0x0a	; 10
    1774:	ef ae       	std	Y+63, r14	; 0x3f
    1776:	2a 97       	sbiw	r28, 0x0a	; 10
    1778:	2e 96       	adiw	r28, 0x0e	; 14
    177a:	ff ae       	std	Y+63, r15	; 0x3f
    177c:	2e 97       	sbiw	r28, 0x0e	; 14
    177e:	60 2e       	mov	r6, r16
    1780:	71 2e       	mov	r7, r17

	// Get max distance indices
	float max_distance = 0;
	int indices[2] = {0, 1};
	for (int i = 0; i < 3; i++) {
		for (int j = i + 1; j < 4; j++) {
    1782:	ff ef       	ldi	r31, 0xFF	; 255
    1784:	4f 1a       	sub	r4, r31
    1786:	5f 0a       	sbc	r5, r31
    1788:	24 e0       	ldi	r18, 0x04	; 4
    178a:	42 16       	cp	r4, r18
    178c:	51 04       	cpc	r5, r1
    178e:	09 f0       	breq	.+2      	; 0x1792 <interpret+0x4da>
    1790:	92 cf       	rjmp	.-220    	; 0x16b6 <interpret+0x3fe>
    1792:	34 e0       	ldi	r19, 0x04	; 4
    1794:	23 0e       	add	r2, r19
    1796:	31 1c       	adc	r3, r1
    1798:	a2 96       	adiw	r28, 0x22	; 34
    179a:	4e ad       	ldd	r20, Y+62	; 0x3e
    179c:	5f ad       	ldd	r21, Y+63	; 0x3f
    179e:	a2 97       	sbiw	r28, 0x22	; 34
    17a0:	4c 5f       	subi	r20, 0xFC	; 252
    17a2:	5f 4f       	sbci	r21, 0xFF	; 255
    17a4:	a2 96       	adiw	r28, 0x22	; 34
    17a6:	5f af       	std	Y+63, r21	; 0x3f
    17a8:	4e af       	std	Y+62, r20	; 0x3e
    17aa:	a2 97       	sbiw	r28, 0x22	; 34
	////////// Sort mWii point indices based on distance from origin //////////

	// Get max distance indices
	float max_distance = 0;
	int indices[2] = {0, 1};
	for (int i = 0; i < 3; i++) {
    17ac:	a0 96       	adiw	r28, 0x20	; 32
    17ae:	8e ad       	ldd	r24, Y+62	; 0x3e
    17b0:	9f ad       	ldd	r25, Y+63	; 0x3f
    17b2:	a0 97       	sbiw	r28, 0x20	; 32
    17b4:	83 30       	cpi	r24, 0x03	; 3
    17b6:	91 05       	cpc	r25, r1
    17b8:	09 f0       	breq	.+2      	; 0x17bc <interpret+0x504>
    17ba:	4c cf       	rjmp	.-360    	; 0x1654 <interpret+0x39c>
    17bc:	27 96       	adiw	r28, 0x07	; 7
    17be:	2e ac       	ldd	r2, Y+62	; 0x3e
    17c0:	3f ac       	ldd	r3, Y+63	; 0x3f
    17c2:	27 97       	sbiw	r28, 0x07	; 7
    17c4:	a4 96       	adiw	r28, 0x24	; 36
    17c6:	6e ac       	ldd	r6, Y+62	; 0x3e
    17c8:	7f ac       	ldd	r7, Y+63	; 0x3f
    17ca:	a4 97       	sbiw	r28, 0x24	; 36

	// Find which max index has the shortest distance to one of the other two points
	float min_distance = FLT_MAX;
	// Index of top star that we're looking for
	int top_index = indices[0];
	for (int i = 0; i < 4; i++) {
    17cc:	00 e0       	ldi	r16, 0x00	; 0
    17ce:	10 e0       	ldi	r17, 0x00	; 0
		// Looking at other two points
		if (i != indices[0] && i != indices[1]) {
    17d0:	20 16       	cp	r2, r16
    17d2:	31 06       	cpc	r3, r17
    17d4:	09 f4       	brne	.+2      	; 0x17d8 <interpret+0x520>
    17d6:	da c0       	rjmp	.+436    	; 0x198c <interpret+0x6d4>
    17d8:	60 16       	cp	r6, r16
    17da:	71 06       	cpc	r7, r17
    17dc:	09 f4       	brne	.+2      	; 0x17e0 <interpret+0x528>
    17de:	d6 c0       	rjmp	.+428    	; 0x198c <interpret+0x6d4>
			// Get distance to first max distance point
			float distance = powf(powf(mx[indices[0]] - mx[i], 2.0) + powf(my[indices[0]] - my[i], 2.0), 0.5);
    17e0:	00 0f       	add	r16, r16
    17e2:	11 1f       	adc	r17, r17
    17e4:	00 0f       	add	r16, r16
    17e6:	11 1f       	adc	r17, r17
    17e8:	81 e0       	ldi	r24, 0x01	; 1
    17ea:	90 e0       	ldi	r25, 0x00	; 0
    17ec:	8c 0f       	add	r24, r28
    17ee:	9d 1f       	adc	r25, r29
    17f0:	08 0f       	add	r16, r24
    17f2:	19 1f       	adc	r17, r25
    17f4:	d8 01       	movw	r26, r16
    17f6:	90 96       	adiw	r26, 0x20	; 32
    17f8:	2d 91       	ld	r18, X+
    17fa:	3d 91       	ld	r19, X+
    17fc:	4d 91       	ld	r20, X+
    17fe:	5c 91       	ld	r21, X
    1800:	93 97       	sbiw	r26, 0x23	; 35
    1802:	25 96       	adiw	r28, 0x05	; 5
    1804:	2c af       	std	Y+60, r18	; 0x3c
    1806:	3d af       	std	Y+61, r19	; 0x3d
    1808:	4e af       	std	Y+62, r20	; 0x3e
    180a:	5f af       	std	Y+63, r21	; 0x3f
    180c:	25 97       	sbiw	r28, 0x05	; 5
    180e:	71 01       	movw	r14, r2
    1810:	ee 0c       	add	r14, r14
    1812:	ff 1c       	adc	r15, r15
    1814:	ee 0c       	add	r14, r14
    1816:	ff 1c       	adc	r15, r15
    1818:	e8 0e       	add	r14, r24
    181a:	f9 1e       	adc	r15, r25
    181c:	f7 01       	movw	r30, r14
    181e:	60 a1       	ldd	r22, Z+32	; 0x20
    1820:	71 a1       	ldd	r23, Z+33	; 0x21
    1822:	82 a1       	ldd	r24, Z+34	; 0x22
    1824:	93 a1       	ldd	r25, Z+35	; 0x23
    1826:	0e 94 a3 0e 	call	0x1d46	; 0x1d46 <__subsf3>
    182a:	2d 96       	adiw	r28, 0x0d	; 13
    182c:	6c af       	std	Y+60, r22	; 0x3c
    182e:	7d af       	std	Y+61, r23	; 0x3d
    1830:	8e af       	std	Y+62, r24	; 0x3e
    1832:	9f af       	std	Y+63, r25	; 0x3f
    1834:	2d 97       	sbiw	r28, 0x0d	; 13
    1836:	d8 01       	movw	r26, r16
    1838:	d0 96       	adiw	r26, 0x30	; 48
    183a:	8d 90       	ld	r8, X+
    183c:	9d 90       	ld	r9, X+
    183e:	ad 90       	ld	r10, X+
    1840:	bc 90       	ld	r11, X
    1842:	d3 97       	sbiw	r26, 0x33	; 51
    1844:	a5 01       	movw	r20, r10
    1846:	94 01       	movw	r18, r8
    1848:	f7 01       	movw	r30, r14
    184a:	60 a9       	ldd	r22, Z+48	; 0x30
    184c:	71 a9       	ldd	r23, Z+49	; 0x31
    184e:	82 a9       	ldd	r24, Z+50	; 0x32
    1850:	93 a9       	ldd	r25, Z+51	; 0x33
    1852:	0e 94 a3 0e 	call	0x1d46	; 0x1d46 <__subsf3>
    1856:	6b 01       	movw	r12, r22
    1858:	7c 01       	movw	r14, r24
    185a:	2d 96       	adiw	r28, 0x0d	; 13
    185c:	2c ad       	ldd	r18, Y+60	; 0x3c
    185e:	3d ad       	ldd	r19, Y+61	; 0x3d
    1860:	4e ad       	ldd	r20, Y+62	; 0x3e
    1862:	5f ad       	ldd	r21, Y+63	; 0x3f
    1864:	2d 97       	sbiw	r28, 0x0d	; 13
    1866:	ca 01       	movw	r24, r20
    1868:	b9 01       	movw	r22, r18
    186a:	0e 94 59 11 	call	0x22b2	; 0x22b2 <__mulsf3>
    186e:	2d 96       	adiw	r28, 0x0d	; 13
    1870:	6c af       	std	Y+60, r22	; 0x3c
    1872:	7d af       	std	Y+61, r23	; 0x3d
    1874:	8e af       	std	Y+62, r24	; 0x3e
    1876:	9f af       	std	Y+63, r25	; 0x3f
    1878:	2d 97       	sbiw	r28, 0x0d	; 13
    187a:	a7 01       	movw	r20, r14
    187c:	96 01       	movw	r18, r12
    187e:	c7 01       	movw	r24, r14
    1880:	b6 01       	movw	r22, r12
    1882:	0e 94 59 11 	call	0x22b2	; 0x22b2 <__mulsf3>
    1886:	9b 01       	movw	r18, r22
    1888:	ac 01       	movw	r20, r24
    188a:	2d 96       	adiw	r28, 0x0d	; 13
    188c:	6c ad       	ldd	r22, Y+60	; 0x3c
    188e:	7d ad       	ldd	r23, Y+61	; 0x3d
    1890:	8e ad       	ldd	r24, Y+62	; 0x3e
    1892:	9f ad       	ldd	r25, Y+63	; 0x3f
    1894:	2d 97       	sbiw	r28, 0x0d	; 13
    1896:	0e 94 a4 0e 	call	0x1d48	; 0x1d48 <__addsf3>
    189a:	20 e0       	ldi	r18, 0x00	; 0
    189c:	30 e0       	ldi	r19, 0x00	; 0
    189e:	40 e0       	ldi	r20, 0x00	; 0
    18a0:	5f e3       	ldi	r21, 0x3F	; 63
    18a2:	0e 94 c6 11 	call	0x238c	; 0x238c <pow>
    18a6:	2d 96       	adiw	r28, 0x0d	; 13
    18a8:	6c af       	std	Y+60, r22	; 0x3c
    18aa:	7d af       	std	Y+61, r23	; 0x3d
    18ac:	8e af       	std	Y+62, r24	; 0x3e
    18ae:	9f af       	std	Y+63, r25	; 0x3f
    18b0:	2d 97       	sbiw	r28, 0x0d	; 13
			min_distance = distance;

			// Get distance to other max distance point
			distance = powf(powf(mx[indices[1]] - mx[i], 2.0) + powf(my[indices[1]] - my[i], 2.0), 0.5);
    18b2:	83 01       	movw	r16, r6
    18b4:	00 0f       	add	r16, r16
    18b6:	11 1f       	adc	r17, r17
    18b8:	00 0f       	add	r16, r16
    18ba:	11 1f       	adc	r17, r17
    18bc:	21 e0       	ldi	r18, 0x01	; 1
    18be:	30 e0       	ldi	r19, 0x00	; 0
    18c0:	2c 0f       	add	r18, r28
    18c2:	3d 1f       	adc	r19, r29
    18c4:	02 0f       	add	r16, r18
    18c6:	13 1f       	adc	r17, r19
    18c8:	25 96       	adiw	r28, 0x05	; 5
    18ca:	2c ad       	ldd	r18, Y+60	; 0x3c
    18cc:	3d ad       	ldd	r19, Y+61	; 0x3d
    18ce:	4e ad       	ldd	r20, Y+62	; 0x3e
    18d0:	5f ad       	ldd	r21, Y+63	; 0x3f
    18d2:	25 97       	sbiw	r28, 0x05	; 5
    18d4:	d8 01       	movw	r26, r16
    18d6:	90 96       	adiw	r26, 0x20	; 32
    18d8:	6d 91       	ld	r22, X+
    18da:	7d 91       	ld	r23, X+
    18dc:	8d 91       	ld	r24, X+
    18de:	9c 91       	ld	r25, X
    18e0:	93 97       	sbiw	r26, 0x23	; 35
    18e2:	0e 94 a3 0e 	call	0x1d46	; 0x1d46 <__subsf3>
    18e6:	25 96       	adiw	r28, 0x05	; 5
    18e8:	6c af       	std	Y+60, r22	; 0x3c
    18ea:	7d af       	std	Y+61, r23	; 0x3d
    18ec:	8e af       	std	Y+62, r24	; 0x3e
    18ee:	9f af       	std	Y+63, r25	; 0x3f
    18f0:	25 97       	sbiw	r28, 0x05	; 5
    18f2:	a5 01       	movw	r20, r10
    18f4:	94 01       	movw	r18, r8
    18f6:	f8 01       	movw	r30, r16
    18f8:	60 a9       	ldd	r22, Z+48	; 0x30
    18fa:	71 a9       	ldd	r23, Z+49	; 0x31
    18fc:	82 a9       	ldd	r24, Z+50	; 0x32
    18fe:	93 a9       	ldd	r25, Z+51	; 0x33
    1900:	0e 94 a3 0e 	call	0x1d46	; 0x1d46 <__subsf3>
    1904:	6b 01       	movw	r12, r22
    1906:	7c 01       	movw	r14, r24
    1908:	25 96       	adiw	r28, 0x05	; 5
    190a:	2c ad       	ldd	r18, Y+60	; 0x3c
    190c:	3d ad       	ldd	r19, Y+61	; 0x3d
    190e:	4e ad       	ldd	r20, Y+62	; 0x3e
    1910:	5f ad       	ldd	r21, Y+63	; 0x3f
    1912:	25 97       	sbiw	r28, 0x05	; 5
    1914:	ca 01       	movw	r24, r20
    1916:	b9 01       	movw	r22, r18
    1918:	0e 94 59 11 	call	0x22b2	; 0x22b2 <__mulsf3>
    191c:	4b 01       	movw	r8, r22
    191e:	5c 01       	movw	r10, r24
    1920:	a7 01       	movw	r20, r14
    1922:	96 01       	movw	r18, r12
    1924:	c7 01       	movw	r24, r14
    1926:	b6 01       	movw	r22, r12
    1928:	0e 94 59 11 	call	0x22b2	; 0x22b2 <__mulsf3>
    192c:	9b 01       	movw	r18, r22
    192e:	ac 01       	movw	r20, r24
    1930:	c5 01       	movw	r24, r10
    1932:	b4 01       	movw	r22, r8
    1934:	0e 94 a4 0e 	call	0x1d48	; 0x1d48 <__addsf3>
    1938:	20 e0       	ldi	r18, 0x00	; 0
    193a:	30 e0       	ldi	r19, 0x00	; 0
    193c:	40 e0       	ldi	r20, 0x00	; 0
    193e:	5f e3       	ldi	r21, 0x3F	; 63
    1940:	0e 94 c6 11 	call	0x238c	; 0x238c <pow>
    1944:	9b 01       	movw	r18, r22
    1946:	ac 01       	movw	r20, r24
			// If distance is lower than min distance, set as the new top index
			if (distance < min_distance) {
    1948:	2d 96       	adiw	r28, 0x0d	; 13
    194a:	6c ad       	ldd	r22, Y+60	; 0x3c
    194c:	7d ad       	ldd	r23, Y+61	; 0x3d
    194e:	8e ad       	ldd	r24, Y+62	; 0x3e
    1950:	9f ad       	ldd	r25, Y+63	; 0x3f
    1952:	2d 97       	sbiw	r28, 0x0d	; 13
    1954:	0e 94 4c 11 	call	0x2298	; 0x2298 <__gesf2>
    1958:	18 16       	cp	r1, r24
    195a:	3c f5       	brge	.+78     	; 0x19aa <interpret+0x6f2>
		}
	}

	// Determine bottom star index
	int bottom_index;
	if (indices[0] == top_index) {
    195c:	26 14       	cp	r2, r6
    195e:	37 04       	cpc	r3, r7
    1960:	e1 f0       	breq	.+56     	; 0x199a <interpret+0x6e2>
    1962:	a3 96       	adiw	r28, 0x23	; 35
    1964:	9f ad       	ldd	r25, Y+63	; 0x3f
    1966:	a3 97       	sbiw	r28, 0x23	; 35
    1968:	a4 96       	adiw	r28, 0x24	; 36
    196a:	8f ad       	ldd	r24, Y+63	; 0x3f
    196c:	a4 97       	sbiw	r28, 0x24	; 36
    196e:	27 96       	adiw	r28, 0x07	; 7
    1970:	2e ad       	ldd	r18, Y+62	; 0x3e
    1972:	3f ad       	ldd	r19, Y+63	; 0x3f
    1974:	27 97       	sbiw	r28, 0x07	; 7
    1976:	a4 96       	adiw	r28, 0x24	; 36
    1978:	3f af       	std	Y+63, r19	; 0x3f
    197a:	2e af       	std	Y+62, r18	; 0x3e
    197c:	a4 97       	sbiw	r28, 0x24	; 36
    197e:	26 96       	adiw	r28, 0x06	; 6
    1980:	9f af       	std	Y+63, r25	; 0x3f
    1982:	26 97       	sbiw	r28, 0x06	; 6
    1984:	27 96       	adiw	r28, 0x07	; 7
    1986:	8f af       	std	Y+63, r24	; 0x3f
    1988:	27 97       	sbiw	r28, 0x07	; 7
    198a:	0f c0       	rjmp	.+30     	; 0x19aa <interpret+0x6f2>

	// Find which max index has the shortest distance to one of the other two points
	float min_distance = FLT_MAX;
	// Index of top star that we're looking for
	int top_index = indices[0];
	for (int i = 0; i < 4; i++) {
    198c:	0f 5f       	subi	r16, 0xFF	; 255
    198e:	1f 4f       	sbci	r17, 0xFF	; 255
    1990:	04 30       	cpi	r16, 0x04	; 4
    1992:	11 05       	cpc	r17, r1
    1994:	09 f0       	breq	.+2      	; 0x1998 <interpret+0x6e0>
    1996:	1c cf       	rjmp	.-456    	; 0x17d0 <interpret+0x518>
    1998:	08 c0       	rjmp	.+16     	; 0x19aa <interpret+0x6f2>
    199a:	a4 96       	adiw	r28, 0x24	; 36
    199c:	4e ad       	ldd	r20, Y+62	; 0x3e
    199e:	5f ad       	ldd	r21, Y+63	; 0x3f
    19a0:	a4 97       	sbiw	r28, 0x24	; 36
    19a2:	27 96       	adiw	r28, 0x07	; 7
    19a4:	5f af       	std	Y+63, r21	; 0x3f
    19a6:	4e af       	std	Y+62, r20	; 0x3e
    19a8:	27 97       	sbiw	r28, 0x07	; 7
		bottom_index = indices[0];
	}

	////////// Determine mWii rotation //////////
	// determine rotation
	float delx = (mx[top_index] - mx[bottom_index]);
    19aa:	27 96       	adiw	r28, 0x07	; 7
    19ac:	0e ad       	ldd	r16, Y+62	; 0x3e
    19ae:	1f ad       	ldd	r17, Y+63	; 0x3f
    19b0:	27 97       	sbiw	r28, 0x07	; 7
    19b2:	00 0f       	add	r16, r16
    19b4:	11 1f       	adc	r17, r17
    19b6:	00 0f       	add	r16, r16
    19b8:	11 1f       	adc	r17, r17
    19ba:	81 e0       	ldi	r24, 0x01	; 1
    19bc:	90 e0       	ldi	r25, 0x00	; 0
    19be:	8c 0f       	add	r24, r28
    19c0:	9d 1f       	adc	r25, r29
    19c2:	08 0f       	add	r16, r24
    19c4:	19 1f       	adc	r17, r25
    19c6:	a4 96       	adiw	r28, 0x24	; 36
    19c8:	ee ac       	ldd	r14, Y+62	; 0x3e
    19ca:	ff ac       	ldd	r15, Y+63	; 0x3f
    19cc:	a4 97       	sbiw	r28, 0x24	; 36
    19ce:	ee 0c       	add	r14, r14
    19d0:	ff 1c       	adc	r15, r15
    19d2:	ee 0c       	add	r14, r14
    19d4:	ff 1c       	adc	r15, r15
    19d6:	e8 0e       	add	r14, r24
    19d8:	f9 1e       	adc	r15, r25
    19da:	d7 01       	movw	r26, r14
    19dc:	90 96       	adiw	r26, 0x20	; 32
    19de:	2d 91       	ld	r18, X+
    19e0:	3d 91       	ld	r19, X+
    19e2:	4d 91       	ld	r20, X+
    19e4:	5c 91       	ld	r21, X
    19e6:	93 97       	sbiw	r26, 0x23	; 35
    19e8:	f8 01       	movw	r30, r16
    19ea:	60 a1       	ldd	r22, Z+32	; 0x20
    19ec:	71 a1       	ldd	r23, Z+33	; 0x21
    19ee:	82 a1       	ldd	r24, Z+34	; 0x22
    19f0:	93 a1       	ldd	r25, Z+35	; 0x23
    19f2:	0e 94 a3 0e 	call	0x1d46	; 0x1d46 <__subsf3>
    19f6:	4b 01       	movw	r8, r22
    19f8:	5c 01       	movw	r10, r24
	float dely = (my[top_index] - my[bottom_index]);
    19fa:	d7 01       	movw	r26, r14
    19fc:	d0 96       	adiw	r26, 0x30	; 48
    19fe:	2d 91       	ld	r18, X+
    1a00:	3d 91       	ld	r19, X+
    1a02:	4d 91       	ld	r20, X+
    1a04:	5c 91       	ld	r21, X
    1a06:	d3 97       	sbiw	r26, 0x33	; 51
    1a08:	f8 01       	movw	r30, r16
    1a0a:	60 a9       	ldd	r22, Z+48	; 0x30
    1a0c:	71 a9       	ldd	r23, Z+49	; 0x31
    1a0e:	82 a9       	ldd	r24, Z+50	; 0x32
    1a10:	93 a9       	ldd	r25, Z+51	; 0x33
    1a12:	0e 94 a3 0e 	call	0x1d46	; 0x1d46 <__subsf3>
	robot->o = atan2f(dely, delx); //find rotation from y axis
    1a16:	a5 01       	movw	r20, r10
    1a18:	94 01       	movw	r18, r8
    1a1a:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <atan2>
    1a1e:	2b 01       	movw	r4, r22
    1a20:	3c 01       	movw	r6, r24


	////////// Use rotation to translate points into new xy frame //////////
	// Rotate original mWii points around the origin
	float s = sinf(2.0 * PI - robot->o);
    1a22:	9b 01       	movw	r18, r22
    1a24:	ac 01       	movw	r20, r24
    1a26:	6b ed       	ldi	r22, 0xDB	; 219
    1a28:	7f e0       	ldi	r23, 0x0F	; 15
    1a2a:	89 ec       	ldi	r24, 0xC9	; 201
    1a2c:	90 e4       	ldi	r25, 0x40	; 64
    1a2e:	0e 94 a3 0e 	call	0x1d46	; 0x1d46 <__subsf3>
    1a32:	4b 01       	movw	r8, r22
    1a34:	5c 01       	movw	r10, r24
    1a36:	0e 94 16 12 	call	0x242c	; 0x242c <sin>
    1a3a:	6b 01       	movw	r12, r22
    1a3c:	7c 01       	movw	r14, r24
	float c = cosf(2.0 * PI - robot->o);
    1a3e:	c5 01       	movw	r24, r10
    1a40:	b4 01       	movw	r22, r8
    1a42:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <cos>
    1a46:	4b 01       	movw	r8, r22
    1a48:	5c 01       	movw	r10, r24

	float ox = translation_x;
	float oy = translation_y;

	// Rotate points around origin into new xy frame
	translation_x = ox * c - oy * s;
    1a4a:	9b 01       	movw	r18, r22
    1a4c:	ac 01       	movw	r20, r24
    1a4e:	6a 96       	adiw	r28, 0x1a	; 26
    1a50:	6c ad       	ldd	r22, Y+60	; 0x3c
    1a52:	7d ad       	ldd	r23, Y+61	; 0x3d
    1a54:	8e ad       	ldd	r24, Y+62	; 0x3e
    1a56:	9f ad       	ldd	r25, Y+63	; 0x3f
    1a58:	6a 97       	sbiw	r28, 0x1a	; 26
    1a5a:	0e 94 59 11 	call	0x22b2	; 0x22b2 <__mulsf3>
    1a5e:	25 96       	adiw	r28, 0x05	; 5
    1a60:	6c af       	std	Y+60, r22	; 0x3c
    1a62:	7d af       	std	Y+61, r23	; 0x3d
    1a64:	8e af       	std	Y+62, r24	; 0x3e
    1a66:	9f af       	std	Y+63, r25	; 0x3f
    1a68:	25 97       	sbiw	r28, 0x05	; 5
    1a6a:	a7 01       	movw	r20, r14
    1a6c:	96 01       	movw	r18, r12
    1a6e:	6e 96       	adiw	r28, 0x1e	; 30
    1a70:	6c ad       	ldd	r22, Y+60	; 0x3c
    1a72:	7d ad       	ldd	r23, Y+61	; 0x3d
    1a74:	8e ad       	ldd	r24, Y+62	; 0x3e
    1a76:	9f ad       	ldd	r25, Y+63	; 0x3f
    1a78:	6e 97       	sbiw	r28, 0x1e	; 30
    1a7a:	0e 94 59 11 	call	0x22b2	; 0x22b2 <__mulsf3>
    1a7e:	9b 01       	movw	r18, r22
    1a80:	ac 01       	movw	r20, r24
    1a82:	25 96       	adiw	r28, 0x05	; 5
    1a84:	6c ad       	ldd	r22, Y+60	; 0x3c
    1a86:	7d ad       	ldd	r23, Y+61	; 0x3d
    1a88:	8e ad       	ldd	r24, Y+62	; 0x3e
    1a8a:	9f ad       	ldd	r25, Y+63	; 0x3f
    1a8c:	25 97       	sbiw	r28, 0x05	; 5
    1a8e:	0e 94 a3 0e 	call	0x1d46	; 0x1d46 <__subsf3>
    1a92:	9b 01       	movw	r18, r22
    1a94:	ac 01       	movw	r20, r24
	translation_y = oy * c + ox * s;

	// Set robot x and y locations in pixels
	robot->x = -translation_x - CENTER_OFFSET_X;
    1a96:	60 e0       	ldi	r22, 0x00	; 0
    1a98:	70 e0       	ldi	r23, 0x00	; 0
    1a9a:	80 e5       	ldi	r24, 0x50	; 80
    1a9c:	92 e4       	ldi	r25, 0x42	; 66
    1a9e:	0e 94 a3 0e 	call	0x1d46	; 0x1d46 <__subsf3>
    1aa2:	a8 96       	adiw	r28, 0x28	; 40
    1aa4:	ae ad       	ldd	r26, Y+62	; 0x3e
    1aa6:	bf ad       	ldd	r27, Y+63	; 0x3f
    1aa8:	a8 97       	sbiw	r28, 0x28	; 40
    1aaa:	11 96       	adiw	r26, 0x01	; 1
    1aac:	6d 93       	st	X+, r22
    1aae:	7d 93       	st	X+, r23
    1ab0:	8d 93       	st	X+, r24
    1ab2:	9c 93       	st	X, r25
    1ab4:	14 97       	sbiw	r26, 0x04	; 4
	float ox = translation_x;
	float oy = translation_y;

	// Rotate points around origin into new xy frame
	translation_x = ox * c - oy * s;
	translation_y = oy * c + ox * s;
    1ab6:	a5 01       	movw	r20, r10
    1ab8:	94 01       	movw	r18, r8
    1aba:	6e 96       	adiw	r28, 0x1e	; 30
    1abc:	6c ad       	ldd	r22, Y+60	; 0x3c
    1abe:	7d ad       	ldd	r23, Y+61	; 0x3d
    1ac0:	8e ad       	ldd	r24, Y+62	; 0x3e
    1ac2:	9f ad       	ldd	r25, Y+63	; 0x3f
    1ac4:	6e 97       	sbiw	r28, 0x1e	; 30
    1ac6:	0e 94 59 11 	call	0x22b2	; 0x22b2 <__mulsf3>
    1aca:	4b 01       	movw	r8, r22
    1acc:	5c 01       	movw	r10, r24
    1ace:	a7 01       	movw	r20, r14
    1ad0:	96 01       	movw	r18, r12
    1ad2:	6a 96       	adiw	r28, 0x1a	; 26
    1ad4:	6c ad       	ldd	r22, Y+60	; 0x3c
    1ad6:	7d ad       	ldd	r23, Y+61	; 0x3d
    1ad8:	8e ad       	ldd	r24, Y+62	; 0x3e
    1ada:	9f ad       	ldd	r25, Y+63	; 0x3f
    1adc:	6a 97       	sbiw	r28, 0x1a	; 26
    1ade:	0e 94 59 11 	call	0x22b2	; 0x22b2 <__mulsf3>
    1ae2:	9b 01       	movw	r18, r22
    1ae4:	ac 01       	movw	r20, r24
    1ae6:	c5 01       	movw	r24, r10
    1ae8:	b4 01       	movw	r22, r8
    1aea:	0e 94 a4 0e 	call	0x1d48	; 0x1d48 <__addsf3>

	// Set robot x and y locations in pixels
	robot->x = -translation_x - CENTER_OFFSET_X;
	robot->y = -translation_y - CENTER_OFFSET_Y;
    1aee:	90 58       	subi	r25, 0x80	; 128
    1af0:	20 e0       	ldi	r18, 0x00	; 0
    1af2:	30 e0       	ldi	r19, 0x00	; 0
    1af4:	43 e5       	ldi	r20, 0x53	; 83
    1af6:	53 e4       	ldi	r21, 0x43	; 67
    1af8:	0e 94 a3 0e 	call	0x1d46	; 0x1d46 <__subsf3>
    1afc:	a8 96       	adiw	r28, 0x28	; 40
    1afe:	ee ad       	ldd	r30, Y+62	; 0x3e
    1b00:	ff ad       	ldd	r31, Y+63	; 0x3f
    1b02:	a8 97       	sbiw	r28, 0x28	; 40
    1b04:	65 83       	std	Z+5, r22	; 0x05
    1b06:	76 83       	std	Z+6, r23	; 0x06
    1b08:	87 83       	std	Z+7, r24	; 0x07
    1b0a:	90 87       	std	Z+8, r25	; 0x08
	robot->o = -robot->o;
    1b0c:	d3 01       	movw	r26, r6
    1b0e:	c2 01       	movw	r24, r4
    1b10:	b0 58       	subi	r27, 0x80	; 128
    1b12:	81 87       	std	Z+9, r24	; 0x09
    1b14:	92 87       	std	Z+10, r25	; 0x0a
    1b16:	a3 87       	std	Z+11, r26	; 0x0b
    1b18:	b4 87       	std	Z+12, r27	; 0x0c

	// Print data
	print_data(mWii_x, mWii_y, ox, oy, top_index, bottom_index, robot);
    1b1a:	4f 01       	movw	r8, r30
    1b1c:	a4 96       	adiw	r28, 0x24	; 36
    1b1e:	ae ac       	ldd	r10, Y+62	; 0x3e
    1b20:	bf ac       	ldd	r11, Y+63	; 0x3f
    1b22:	a4 97       	sbiw	r28, 0x24	; 36
    1b24:	27 96       	adiw	r28, 0x07	; 7
    1b26:	ce ac       	ldd	r12, Y+62	; 0x3e
    1b28:	df ac       	ldd	r13, Y+63	; 0x3f
    1b2a:	27 97       	sbiw	r28, 0x07	; 7
    1b2c:	6e 96       	adiw	r28, 0x1e	; 30
    1b2e:	ec ac       	ldd	r14, Y+60	; 0x3c
    1b30:	fd ac       	ldd	r15, Y+61	; 0x3d
    1b32:	0e ad       	ldd	r16, Y+62	; 0x3e
    1b34:	1f ad       	ldd	r17, Y+63	; 0x3f
    1b36:	6e 97       	sbiw	r28, 0x1e	; 30
    1b38:	6a 96       	adiw	r28, 0x1a	; 26
    1b3a:	2c ad       	ldd	r18, Y+60	; 0x3c
    1b3c:	3d ad       	ldd	r19, Y+61	; 0x3d
    1b3e:	4e ad       	ldd	r20, Y+62	; 0x3e
    1b40:	5f ad       	ldd	r21, Y+63	; 0x3f
    1b42:	6a 97       	sbiw	r28, 0x1a	; 26
    1b44:	be 01       	movw	r22, r28
    1b46:	6f 5e       	subi	r22, 0xEF	; 239
    1b48:	7f 4f       	sbci	r23, 0xFF	; 255
    1b4a:	ce 01       	movw	r24, r28
    1b4c:	01 96       	adiw	r24, 0x01	; 1
    1b4e:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <print_data>
    1b52:	12 c0       	rjmp	.+36     	; 0x1b78 <interpret+0x8c0>
    1b54:	f4 e0       	ldi	r31, 0x04	; 4
    1b56:	2f 0e       	add	r2, r31
    1b58:	31 1c       	adc	r3, r1
    1b5a:	a2 96       	adiw	r28, 0x22	; 34
    1b5c:	2e ad       	ldd	r18, Y+62	; 0x3e
    1b5e:	3f ad       	ldd	r19, Y+63	; 0x3f
    1b60:	a2 97       	sbiw	r28, 0x22	; 34
    1b62:	2c 5f       	subi	r18, 0xFC	; 252
    1b64:	3f 4f       	sbci	r19, 0xFF	; 255
    1b66:	a2 96       	adiw	r28, 0x22	; 34
    1b68:	3f af       	std	Y+63, r19	; 0x3f
    1b6a:	2e af       	std	Y+62, r18	; 0x3e
    1b6c:	a2 97       	sbiw	r28, 0x22	; 34
	////////// Sort mWii point indices based on distance from origin //////////

	// Get max distance indices
	float max_distance = 0;
	int indices[2] = {0, 1};
	for (int i = 0; i < 3; i++) {
    1b6e:	a0 96       	adiw	r28, 0x20	; 32
    1b70:	8e ad       	ldd	r24, Y+62	; 0x3e
    1b72:	9f ad       	ldd	r25, Y+63	; 0x3f
    1b74:	a0 97       	sbiw	r28, 0x20	; 32
    1b76:	6e cd       	rjmp	.-1316   	; 0x1654 <interpret+0x39c>
	robot->y = -translation_y - CENTER_OFFSET_Y;
	robot->o = -robot->o;

	// Print data
	print_data(mWii_x, mWii_y, ox, oy, top_index, bottom_index, robot);
}
    1b78:	c9 59       	subi	r28, 0x99	; 153
    1b7a:	df 4f       	sbci	r29, 0xFF	; 255
    1b7c:	0f b6       	in	r0, 0x3f	; 63
    1b7e:	f8 94       	cli
    1b80:	de bf       	out	0x3e, r29	; 62
    1b82:	0f be       	out	0x3f, r0	; 63
    1b84:	cd bf       	out	0x3d, r28	; 61
    1b86:	df 91       	pop	r29
    1b88:	cf 91       	pop	r28
    1b8a:	1f 91       	pop	r17
    1b8c:	0f 91       	pop	r16
    1b8e:	ff 90       	pop	r15
    1b90:	ef 90       	pop	r14
    1b92:	df 90       	pop	r13
    1b94:	cf 90       	pop	r12
    1b96:	bf 90       	pop	r11
    1b98:	af 90       	pop	r10
    1b9a:	9f 90       	pop	r9
    1b9c:	8f 90       	pop	r8
    1b9e:	7f 90       	pop	r7
    1ba0:	6f 90       	pop	r6
    1ba2:	5f 90       	pop	r5
    1ba4:	4f 90       	pop	r4
    1ba6:	3f 90       	pop	r3
    1ba8:	2f 90       	pop	r2
    1baa:	08 95       	ret

00001bac <step_to_goal>:
#include "score.h"

bool step_to_goal(Robot* robot) {
    1bac:	8f 92       	push	r8
    1bae:	9f 92       	push	r9
    1bb0:	af 92       	push	r10
    1bb2:	bf 92       	push	r11
    1bb4:	cf 92       	push	r12
    1bb6:	df 92       	push	r13
    1bb8:	ef 92       	push	r14
    1bba:	ff 92       	push	r15
    1bbc:	0f 93       	push	r16
    1bbe:	1f 93       	push	r17
    1bc0:	cf 93       	push	r28
    1bc2:	df 93       	push	r29
    1bc4:	cd b7       	in	r28, 0x3d	; 61
    1bc6:	de b7       	in	r29, 0x3e	; 62
    1bc8:	68 97       	sbiw	r28, 0x18	; 24
    1bca:	0f b6       	in	r0, 0x3f	; 63
    1bcc:	f8 94       	cli
    1bce:	de bf       	out	0x3e, r29	; 62
    1bd0:	0f be       	out	0x3f, r0	; 63
    1bd2:	cd bf       	out	0x3d, r28	; 61
    1bd4:	7c 01       	movw	r14, r24
	unsigned int star_array[12];
	// Get mWii array
	m_wii_read(star_array);
    1bd6:	ce 01       	movw	r24, r28
    1bd8:	01 96       	adiw	r24, 0x01	; 1
    1bda:	0e 94 60 07 	call	0xec0	; 0xec0 <m_wii_read>
	// Get robot location and orientation
	interpret(robot, star_array);
    1bde:	be 01       	movw	r22, r28
    1be0:	6f 5f       	subi	r22, 0xFF	; 255
    1be2:	7f 4f       	sbci	r23, 0xFF	; 255
    1be4:	c7 01       	movw	r24, r14
    1be6:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <interpret>
		turn(0); // drive forward
	} else {
		m_green(OFF);
		turn_in_place(true, 100);
	}*/
	turn(drive_to_goal(robot, OPPONENT_X, OPPONENT_Y));
    1bea:	00 e0       	ldi	r16, 0x00	; 0
    1bec:	10 e0       	ldi	r17, 0x00	; 0
    1bee:	25 e7       	ldi	r18, 0x75	; 117
    1bf0:	33 ec       	ldi	r19, 0xC3	; 195
    1bf2:	40 e0       	ldi	r20, 0x00	; 0
    1bf4:	50 e0       	ldi	r21, 0x00	; 0
    1bf6:	ba 01       	movw	r22, r20
    1bf8:	c7 01       	movw	r24, r14
    1bfa:	0e 94 79 02 	call	0x4f2	; 0x4f2 <drive_to_goal>
    1bfe:	0e 94 25 02 	call	0x44a	; 0x44a <turn>
	float dist = powf(powf(OPPONENT_X - robot->x, 2.0) + powf(OPPONENT_Y - robot->y, 2.0), 0.5);
    1c02:	f7 01       	movw	r30, r14
    1c04:	21 81       	ldd	r18, Z+1	; 0x01
    1c06:	32 81       	ldd	r19, Z+2	; 0x02
    1c08:	43 81       	ldd	r20, Z+3	; 0x03
    1c0a:	54 81       	ldd	r21, Z+4	; 0x04
    1c0c:	60 e0       	ldi	r22, 0x00	; 0
    1c0e:	70 e0       	ldi	r23, 0x00	; 0
    1c10:	cb 01       	movw	r24, r22
    1c12:	0e 94 a3 0e 	call	0x1d46	; 0x1d46 <__subsf3>
    1c16:	4b 01       	movw	r8, r22
    1c18:	5c 01       	movw	r10, r24
    1c1a:	f7 01       	movw	r30, r14
    1c1c:	25 81       	ldd	r18, Z+5	; 0x05
    1c1e:	36 81       	ldd	r19, Z+6	; 0x06
    1c20:	47 81       	ldd	r20, Z+7	; 0x07
    1c22:	50 85       	ldd	r21, Z+8	; 0x08
    1c24:	60 e0       	ldi	r22, 0x00	; 0
    1c26:	70 e0       	ldi	r23, 0x00	; 0
    1c28:	85 e7       	ldi	r24, 0x75	; 117
    1c2a:	93 ec       	ldi	r25, 0xC3	; 195
    1c2c:	0e 94 a3 0e 	call	0x1d46	; 0x1d46 <__subsf3>
    1c30:	6b 01       	movw	r12, r22
    1c32:	7c 01       	movw	r14, r24
    1c34:	a5 01       	movw	r20, r10
    1c36:	94 01       	movw	r18, r8
    1c38:	c5 01       	movw	r24, r10
    1c3a:	b4 01       	movw	r22, r8
    1c3c:	0e 94 59 11 	call	0x22b2	; 0x22b2 <__mulsf3>
    1c40:	4b 01       	movw	r8, r22
    1c42:	5c 01       	movw	r10, r24
    1c44:	a7 01       	movw	r20, r14
    1c46:	96 01       	movw	r18, r12
    1c48:	c7 01       	movw	r24, r14
    1c4a:	b6 01       	movw	r22, r12
    1c4c:	0e 94 59 11 	call	0x22b2	; 0x22b2 <__mulsf3>
    1c50:	9b 01       	movw	r18, r22
    1c52:	ac 01       	movw	r20, r24
    1c54:	c5 01       	movw	r24, r10
    1c56:	b4 01       	movw	r22, r8
    1c58:	0e 94 a4 0e 	call	0x1d48	; 0x1d48 <__addsf3>
    1c5c:	20 e0       	ldi	r18, 0x00	; 0
    1c5e:	30 e0       	ldi	r19, 0x00	; 0
    1c60:	40 e0       	ldi	r20, 0x00	; 0
    1c62:	5f e3       	ldi	r21, 0x3F	; 63
    1c64:	0e 94 c6 11 	call	0x238c	; 0x238c <pow>
    1c68:	6b 01       	movw	r12, r22
    1c6a:	7c 01       	movw	r14, r24
	m_usb_tx_string("Distance: ");
    1c6c:	8e ec       	ldi	r24, 0xCE	; 206
    1c6e:	92 e0       	ldi	r25, 0x02	; 2
    1c70:	0e 94 b8 05 	call	0xb70	; 0xb70 <print_P>
	m_usb_tx_int(dist);
    1c74:	c7 01       	movw	r24, r14
    1c76:	b6 01       	movw	r22, r12
    1c78:	0e 94 fe 0f 	call	0x1ffc	; 0x1ffc <__fixsfsi>
    1c7c:	cb 01       	movw	r24, r22
    1c7e:	0e 94 d4 05 	call	0xba8	; 0xba8 <m_usb_tx_int>
	m_usb_tx_char(13);
    1c82:	8d e0       	ldi	r24, 0x0D	; 13
    1c84:	0e 94 9c 03 	call	0x738	; 0x738 <m_usb_tx_char>
	// if ( abs(OPPONENT_Y - robot->y) > 15 || abs(OPPONENT_X - robot->x) > 30) {
	if (dist < 20) {
    1c88:	20 e0       	ldi	r18, 0x00	; 0
    1c8a:	30 e0       	ldi	r19, 0x00	; 0
    1c8c:	40 ea       	ldi	r20, 0xA0	; 160
    1c8e:	51 e4       	ldi	r21, 0x41	; 65
    1c90:	c7 01       	movw	r24, r14
    1c92:	b6 01       	movw	r22, r12
    1c94:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <__cmpsf2>
		// you're in the goal
		//motor_stop();
		return true;
	}
	 return false;
 }
    1c98:	88 1f       	adc	r24, r24
    1c9a:	88 27       	eor	r24, r24
    1c9c:	88 1f       	adc	r24, r24
    1c9e:	68 96       	adiw	r28, 0x18	; 24
    1ca0:	0f b6       	in	r0, 0x3f	; 63
    1ca2:	f8 94       	cli
    1ca4:	de bf       	out	0x3e, r29	; 62
    1ca6:	0f be       	out	0x3f, r0	; 63
    1ca8:	cd bf       	out	0x3d, r28	; 61
    1caa:	df 91       	pop	r29
    1cac:	cf 91       	pop	r28
    1cae:	1f 91       	pop	r17
    1cb0:	0f 91       	pop	r16
    1cb2:	ff 90       	pop	r15
    1cb4:	ef 90       	pop	r14
    1cb6:	df 90       	pop	r13
    1cb8:	cf 90       	pop	r12
    1cba:	bf 90       	pop	r11
    1cbc:	af 90       	pop	r10
    1cbe:	9f 90       	pop	r9
    1cc0:	8f 90       	pop	r8
    1cc2:	08 95       	ret

00001cc4 <__vector_3>:
		m_red(TOGGLE);
		m_wait(100);
	}
}

ISR(INT2_vect){
    1cc4:	1f 92       	push	r1
    1cc6:	0f 92       	push	r0
    1cc8:	0f b6       	in	r0, 0x3f	; 63
    1cca:	0f 92       	push	r0
    1ccc:	11 24       	eor	r1, r1
    1cce:	2f 93       	push	r18
    1cd0:	3f 93       	push	r19
    1cd2:	4f 93       	push	r20
    1cd4:	5f 93       	push	r21
    1cd6:	6f 93       	push	r22
    1cd8:	7f 93       	push	r23
    1cda:	8f 93       	push	r24
    1cdc:	9f 93       	push	r25
    1cde:	af 93       	push	r26
    1ce0:	bf 93       	push	r27
    1ce2:	ef 93       	push	r30
    1ce4:	ff 93       	push	r31
	// read message into package buffer
	if (!m_rf_read(package, 10)) {
    1ce6:	6a e0       	ldi	r22, 0x0A	; 10
    1ce8:	8e e0       	ldi	r24, 0x0E	; 14
    1cea:	91 e0       	ldi	r25, 0x01	; 1
    1cec:	0e 94 1c 03 	call	0x638	; 0x638 <m_rf_read>
    1cf0:	81 11       	cpse	r24, r1
    1cf2:	04 c0       	rjmp	.+8      	; 0x1cfc <__vector_3+0x38>
		// Default to pause if command not read
		package[0] = 0xA4;
    1cf4:	84 ea       	ldi	r24, 0xA4	; 164
    1cf6:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <package>
    1cfa:	12 c0       	rjmp	.+36     	; 0x1d20 <__vector_3+0x5c>
	} else {
		m_green(ON);
    1cfc:	6a 9a       	sbi	0x0d, 2	; 13
    1cfe:	72 98       	cbi	0x0e, 2	; 14
	}
	
	switch(package[0]){
    1d00:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <package>
    1d04:	84 3a       	cpi	r24, 0xA4	; 164
    1d06:	61 f0       	breq	.+24     	; 0x1d20 <__vector_3+0x5c>
    1d08:	18 f4       	brcc	.+6      	; 0x1d10 <__vector_3+0x4c>
    1d0a:	81 3a       	cpi	r24, 0xA1	; 161
    1d0c:	29 f0       	breq	.+10     	; 0x1d18 <__vector_3+0x54>
    1d0e:	0a c0       	rjmp	.+20     	; 0x1d24 <__vector_3+0x60>
    1d10:	86 5a       	subi	r24, 0xA6	; 166
    1d12:	82 30       	cpi	r24, 0x02	; 2
    1d14:	38 f4       	brcc	.+14     	; 0x1d24 <__vector_3+0x60>
    1d16:	04 c0       	rjmp	.+8      	; 0x1d20 <__vector_3+0x5c>
			// flash LED 
			break;
		case 0xA1:	// Play command
			// light LED
			// set flag to play!
			active = true;
    1d18:	81 e0       	ldi	r24, 0x01	; 1
    1d1a:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <active>
			break;
    1d1e:	02 c0       	rjmp	.+4      	; 0x1d24 <__vector_3+0x60>
		case 0xA5:
			break;
		case 0xA4:
		case 0xA6:
		case 0xA7:
			active = false;
    1d20:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <active>
	}
    1d24:	ff 91       	pop	r31
    1d26:	ef 91       	pop	r30
    1d28:	bf 91       	pop	r27
    1d2a:	af 91       	pop	r26
    1d2c:	9f 91       	pop	r25
    1d2e:	8f 91       	pop	r24
    1d30:	7f 91       	pop	r23
    1d32:	6f 91       	pop	r22
    1d34:	5f 91       	pop	r21
    1d36:	4f 91       	pop	r20
    1d38:	3f 91       	pop	r19
    1d3a:	2f 91       	pop	r18
    1d3c:	0f 90       	pop	r0
    1d3e:	0f be       	out	0x3f, r0	; 63
    1d40:	0f 90       	pop	r0
    1d42:	1f 90       	pop	r1
    1d44:	18 95       	reti

00001d46 <__subsf3>:
    1d46:	50 58       	subi	r21, 0x80	; 128

00001d48 <__addsf3>:
    1d48:	bb 27       	eor	r27, r27
    1d4a:	aa 27       	eor	r26, r26
    1d4c:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <__addsf3x>
    1d50:	0c 94 fe 10 	jmp	0x21fc	; 0x21fc <__fp_round>
    1d54:	0e 94 c5 10 	call	0x218a	; 0x218a <__fp_pscA>
    1d58:	38 f0       	brcs	.+14     	; 0x1d68 <__addsf3+0x20>
    1d5a:	0e 94 cc 10 	call	0x2198	; 0x2198 <__fp_pscB>
    1d5e:	20 f0       	brcs	.+8      	; 0x1d68 <__addsf3+0x20>
    1d60:	39 f4       	brne	.+14     	; 0x1d70 <__addsf3+0x28>
    1d62:	9f 3f       	cpi	r25, 0xFF	; 255
    1d64:	19 f4       	brne	.+6      	; 0x1d6c <__addsf3+0x24>
    1d66:	26 f4       	brtc	.+8      	; 0x1d70 <__addsf3+0x28>
    1d68:	0c 94 9b 10 	jmp	0x2136	; 0x2136 <__fp_nan>
    1d6c:	0e f4       	brtc	.+2      	; 0x1d70 <__addsf3+0x28>
    1d6e:	e0 95       	com	r30
    1d70:	e7 fb       	bst	r30, 7
    1d72:	0c 94 95 10 	jmp	0x212a	; 0x212a <__fp_inf>

00001d76 <__addsf3x>:
    1d76:	e9 2f       	mov	r30, r25
    1d78:	0e 94 23 11 	call	0x2246	; 0x2246 <__fp_split3>
    1d7c:	58 f3       	brcs	.-42     	; 0x1d54 <__addsf3+0xc>
    1d7e:	ba 17       	cp	r27, r26
    1d80:	62 07       	cpc	r22, r18
    1d82:	73 07       	cpc	r23, r19
    1d84:	84 07       	cpc	r24, r20
    1d86:	95 07       	cpc	r25, r21
    1d88:	20 f0       	brcs	.+8      	; 0x1d92 <__addsf3x+0x1c>
    1d8a:	79 f4       	brne	.+30     	; 0x1daa <__addsf3x+0x34>
    1d8c:	a6 f5       	brtc	.+104    	; 0x1df6 <__addsf3x+0x80>
    1d8e:	0c 94 45 11 	jmp	0x228a	; 0x228a <__fp_zero>
    1d92:	0e f4       	brtc	.+2      	; 0x1d96 <__addsf3x+0x20>
    1d94:	e0 95       	com	r30
    1d96:	0b 2e       	mov	r0, r27
    1d98:	ba 2f       	mov	r27, r26
    1d9a:	a0 2d       	mov	r26, r0
    1d9c:	0b 01       	movw	r0, r22
    1d9e:	b9 01       	movw	r22, r18
    1da0:	90 01       	movw	r18, r0
    1da2:	0c 01       	movw	r0, r24
    1da4:	ca 01       	movw	r24, r20
    1da6:	a0 01       	movw	r20, r0
    1da8:	11 24       	eor	r1, r1
    1daa:	ff 27       	eor	r31, r31
    1dac:	59 1b       	sub	r21, r25
    1dae:	99 f0       	breq	.+38     	; 0x1dd6 <__addsf3x+0x60>
    1db0:	59 3f       	cpi	r21, 0xF9	; 249
    1db2:	50 f4       	brcc	.+20     	; 0x1dc8 <__addsf3x+0x52>
    1db4:	50 3e       	cpi	r21, 0xE0	; 224
    1db6:	68 f1       	brcs	.+90     	; 0x1e12 <__addsf3x+0x9c>
    1db8:	1a 16       	cp	r1, r26
    1dba:	f0 40       	sbci	r31, 0x00	; 0
    1dbc:	a2 2f       	mov	r26, r18
    1dbe:	23 2f       	mov	r18, r19
    1dc0:	34 2f       	mov	r19, r20
    1dc2:	44 27       	eor	r20, r20
    1dc4:	58 5f       	subi	r21, 0xF8	; 248
    1dc6:	f3 cf       	rjmp	.-26     	; 0x1dae <__addsf3x+0x38>
    1dc8:	46 95       	lsr	r20
    1dca:	37 95       	ror	r19
    1dcc:	27 95       	ror	r18
    1dce:	a7 95       	ror	r26
    1dd0:	f0 40       	sbci	r31, 0x00	; 0
    1dd2:	53 95       	inc	r21
    1dd4:	c9 f7       	brne	.-14     	; 0x1dc8 <__addsf3x+0x52>
    1dd6:	7e f4       	brtc	.+30     	; 0x1df6 <__addsf3x+0x80>
    1dd8:	1f 16       	cp	r1, r31
    1dda:	ba 0b       	sbc	r27, r26
    1ddc:	62 0b       	sbc	r22, r18
    1dde:	73 0b       	sbc	r23, r19
    1de0:	84 0b       	sbc	r24, r20
    1de2:	ba f0       	brmi	.+46     	; 0x1e12 <__addsf3x+0x9c>
    1de4:	91 50       	subi	r25, 0x01	; 1
    1de6:	a1 f0       	breq	.+40     	; 0x1e10 <__addsf3x+0x9a>
    1de8:	ff 0f       	add	r31, r31
    1dea:	bb 1f       	adc	r27, r27
    1dec:	66 1f       	adc	r22, r22
    1dee:	77 1f       	adc	r23, r23
    1df0:	88 1f       	adc	r24, r24
    1df2:	c2 f7       	brpl	.-16     	; 0x1de4 <__addsf3x+0x6e>
    1df4:	0e c0       	rjmp	.+28     	; 0x1e12 <__addsf3x+0x9c>
    1df6:	ba 0f       	add	r27, r26
    1df8:	62 1f       	adc	r22, r18
    1dfa:	73 1f       	adc	r23, r19
    1dfc:	84 1f       	adc	r24, r20
    1dfe:	48 f4       	brcc	.+18     	; 0x1e12 <__addsf3x+0x9c>
    1e00:	87 95       	ror	r24
    1e02:	77 95       	ror	r23
    1e04:	67 95       	ror	r22
    1e06:	b7 95       	ror	r27
    1e08:	f7 95       	ror	r31
    1e0a:	9e 3f       	cpi	r25, 0xFE	; 254
    1e0c:	08 f0       	brcs	.+2      	; 0x1e10 <__addsf3x+0x9a>
    1e0e:	b0 cf       	rjmp	.-160    	; 0x1d70 <__addsf3+0x28>
    1e10:	93 95       	inc	r25
    1e12:	88 0f       	add	r24, r24
    1e14:	08 f0       	brcs	.+2      	; 0x1e18 <__addsf3x+0xa2>
    1e16:	99 27       	eor	r25, r25
    1e18:	ee 0f       	add	r30, r30
    1e1a:	97 95       	ror	r25
    1e1c:	87 95       	ror	r24
    1e1e:	08 95       	ret
    1e20:	0e 94 c5 10 	call	0x218a	; 0x218a <__fp_pscA>
    1e24:	60 f0       	brcs	.+24     	; 0x1e3e <__addsf3x+0xc8>
    1e26:	80 e8       	ldi	r24, 0x80	; 128
    1e28:	91 e0       	ldi	r25, 0x01	; 1
    1e2a:	09 f4       	brne	.+2      	; 0x1e2e <__addsf3x+0xb8>
    1e2c:	9e ef       	ldi	r25, 0xFE	; 254
    1e2e:	0e 94 cc 10 	call	0x2198	; 0x2198 <__fp_pscB>
    1e32:	28 f0       	brcs	.+10     	; 0x1e3e <__addsf3x+0xc8>
    1e34:	40 e8       	ldi	r20, 0x80	; 128
    1e36:	51 e0       	ldi	r21, 0x01	; 1
    1e38:	71 f4       	brne	.+28     	; 0x1e56 <atan2+0x10>
    1e3a:	5e ef       	ldi	r21, 0xFE	; 254
    1e3c:	0c c0       	rjmp	.+24     	; 0x1e56 <atan2+0x10>
    1e3e:	0c 94 9b 10 	jmp	0x2136	; 0x2136 <__fp_nan>
    1e42:	0c 94 45 11 	jmp	0x228a	; 0x228a <__fp_zero>

00001e46 <atan2>:
    1e46:	e9 2f       	mov	r30, r25
    1e48:	e0 78       	andi	r30, 0x80	; 128
    1e4a:	0e 94 23 11 	call	0x2246	; 0x2246 <__fp_split3>
    1e4e:	40 f3       	brcs	.-48     	; 0x1e20 <__addsf3x+0xaa>
    1e50:	09 2e       	mov	r0, r25
    1e52:	05 2a       	or	r0, r21
    1e54:	b1 f3       	breq	.-20     	; 0x1e42 <__addsf3x+0xcc>
    1e56:	26 17       	cp	r18, r22
    1e58:	37 07       	cpc	r19, r23
    1e5a:	48 07       	cpc	r20, r24
    1e5c:	59 07       	cpc	r21, r25
    1e5e:	38 f0       	brcs	.+14     	; 0x1e6e <atan2+0x28>
    1e60:	0e 2e       	mov	r0, r30
    1e62:	07 f8       	bld	r0, 7
    1e64:	e0 25       	eor	r30, r0
    1e66:	69 f0       	breq	.+26     	; 0x1e82 <atan2+0x3c>
    1e68:	e0 25       	eor	r30, r0
    1e6a:	e0 64       	ori	r30, 0x40	; 64
    1e6c:	0a c0       	rjmp	.+20     	; 0x1e82 <atan2+0x3c>
    1e6e:	ef 63       	ori	r30, 0x3F	; 63
    1e70:	07 f8       	bld	r0, 7
    1e72:	00 94       	com	r0
    1e74:	07 fa       	bst	r0, 7
    1e76:	db 01       	movw	r26, r22
    1e78:	b9 01       	movw	r22, r18
    1e7a:	9d 01       	movw	r18, r26
    1e7c:	dc 01       	movw	r26, r24
    1e7e:	ca 01       	movw	r24, r20
    1e80:	ad 01       	movw	r20, r26
    1e82:	ef 93       	push	r30
    1e84:	0e 94 a3 0f 	call	0x1f46	; 0x1f46 <__divsf3_pse>
    1e88:	0e 94 fe 10 	call	0x21fc	; 0x21fc <__fp_round>
    1e8c:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <atan>
    1e90:	5f 91       	pop	r21
    1e92:	55 23       	and	r21, r21
    1e94:	39 f0       	breq	.+14     	; 0x1ea4 <atan2+0x5e>
    1e96:	2b ed       	ldi	r18, 0xDB	; 219
    1e98:	3f e0       	ldi	r19, 0x0F	; 15
    1e9a:	49 e4       	ldi	r20, 0x49	; 73
    1e9c:	50 fd       	sbrc	r21, 0
    1e9e:	49 ec       	ldi	r20, 0xC9	; 201
    1ea0:	0c 94 a4 0e 	jmp	0x1d48	; 0x1d48 <__addsf3>
    1ea4:	08 95       	ret

00001ea6 <atan>:
    1ea6:	df 93       	push	r29
    1ea8:	dd 27       	eor	r29, r29
    1eaa:	b9 2f       	mov	r27, r25
    1eac:	bf 77       	andi	r27, 0x7F	; 127
    1eae:	40 e8       	ldi	r20, 0x80	; 128
    1eb0:	5f e3       	ldi	r21, 0x3F	; 63
    1eb2:	16 16       	cp	r1, r22
    1eb4:	17 06       	cpc	r1, r23
    1eb6:	48 07       	cpc	r20, r24
    1eb8:	5b 07       	cpc	r21, r27
    1eba:	18 f4       	brcc	.+6      	; 0x1ec2 <atan+0x1c>
    1ebc:	d9 2f       	mov	r29, r25
    1ebe:	0e 94 51 11 	call	0x22a2	; 0x22a2 <inverse>
    1ec2:	9f 93       	push	r25
    1ec4:	8f 93       	push	r24
    1ec6:	7f 93       	push	r23
    1ec8:	6f 93       	push	r22
    1eca:	0e 94 1e 12 	call	0x243c	; 0x243c <square>
    1ece:	ec ea       	ldi	r30, 0xAC	; 172
    1ed0:	f0 e0       	ldi	r31, 0x00	; 0
    1ed2:	0e 94 9e 10 	call	0x213c	; 0x213c <__fp_powser>
    1ed6:	0e 94 fe 10 	call	0x21fc	; 0x21fc <__fp_round>
    1eda:	2f 91       	pop	r18
    1edc:	3f 91       	pop	r19
    1ede:	4f 91       	pop	r20
    1ee0:	5f 91       	pop	r21
    1ee2:	0e 94 6c 11 	call	0x22d8	; 0x22d8 <__mulsf3x>
    1ee6:	dd 23       	and	r29, r29
    1ee8:	51 f0       	breq	.+20     	; 0x1efe <atan+0x58>
    1eea:	90 58       	subi	r25, 0x80	; 128
    1eec:	a2 ea       	ldi	r26, 0xA2	; 162
    1eee:	2a ed       	ldi	r18, 0xDA	; 218
    1ef0:	3f e0       	ldi	r19, 0x0F	; 15
    1ef2:	49 ec       	ldi	r20, 0xC9	; 201
    1ef4:	5f e3       	ldi	r21, 0x3F	; 63
    1ef6:	d0 78       	andi	r29, 0x80	; 128
    1ef8:	5d 27       	eor	r21, r29
    1efa:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <__addsf3x>
    1efe:	df 91       	pop	r29
    1f00:	0c 94 fe 10 	jmp	0x21fc	; 0x21fc <__fp_round>

00001f04 <__cmpsf2>:
    1f04:	0e 94 71 10 	call	0x20e2	; 0x20e2 <__fp_cmp>
    1f08:	08 f4       	brcc	.+2      	; 0x1f0c <__cmpsf2+0x8>
    1f0a:	81 e0       	ldi	r24, 0x01	; 1
    1f0c:	08 95       	ret

00001f0e <cos>:
    1f0e:	0e 94 d5 10 	call	0x21aa	; 0x21aa <__fp_rempio2>
    1f12:	e3 95       	inc	r30
    1f14:	0c 94 0f 11 	jmp	0x221e	; 0x221e <__fp_sinus>

00001f18 <__divsf3>:
    1f18:	0e 94 a0 0f 	call	0x1f40	; 0x1f40 <__divsf3x>
    1f1c:	0c 94 fe 10 	jmp	0x21fc	; 0x21fc <__fp_round>
    1f20:	0e 94 cc 10 	call	0x2198	; 0x2198 <__fp_pscB>
    1f24:	58 f0       	brcs	.+22     	; 0x1f3c <__divsf3+0x24>
    1f26:	0e 94 c5 10 	call	0x218a	; 0x218a <__fp_pscA>
    1f2a:	40 f0       	brcs	.+16     	; 0x1f3c <__divsf3+0x24>
    1f2c:	29 f4       	brne	.+10     	; 0x1f38 <__divsf3+0x20>
    1f2e:	5f 3f       	cpi	r21, 0xFF	; 255
    1f30:	29 f0       	breq	.+10     	; 0x1f3c <__divsf3+0x24>
    1f32:	0c 94 95 10 	jmp	0x212a	; 0x212a <__fp_inf>
    1f36:	51 11       	cpse	r21, r1
    1f38:	0c 94 46 11 	jmp	0x228c	; 0x228c <__fp_szero>
    1f3c:	0c 94 9b 10 	jmp	0x2136	; 0x2136 <__fp_nan>

00001f40 <__divsf3x>:
    1f40:	0e 94 23 11 	call	0x2246	; 0x2246 <__fp_split3>
    1f44:	68 f3       	brcs	.-38     	; 0x1f20 <__divsf3+0x8>

00001f46 <__divsf3_pse>:
    1f46:	99 23       	and	r25, r25
    1f48:	b1 f3       	breq	.-20     	; 0x1f36 <__divsf3+0x1e>
    1f4a:	55 23       	and	r21, r21
    1f4c:	91 f3       	breq	.-28     	; 0x1f32 <__divsf3+0x1a>
    1f4e:	95 1b       	sub	r25, r21
    1f50:	55 0b       	sbc	r21, r21
    1f52:	bb 27       	eor	r27, r27
    1f54:	aa 27       	eor	r26, r26
    1f56:	62 17       	cp	r22, r18
    1f58:	73 07       	cpc	r23, r19
    1f5a:	84 07       	cpc	r24, r20
    1f5c:	38 f0       	brcs	.+14     	; 0x1f6c <__divsf3_pse+0x26>
    1f5e:	9f 5f       	subi	r25, 0xFF	; 255
    1f60:	5f 4f       	sbci	r21, 0xFF	; 255
    1f62:	22 0f       	add	r18, r18
    1f64:	33 1f       	adc	r19, r19
    1f66:	44 1f       	adc	r20, r20
    1f68:	aa 1f       	adc	r26, r26
    1f6a:	a9 f3       	breq	.-22     	; 0x1f56 <__divsf3_pse+0x10>
    1f6c:	35 d0       	rcall	.+106    	; 0x1fd8 <__divsf3_pse+0x92>
    1f6e:	0e 2e       	mov	r0, r30
    1f70:	3a f0       	brmi	.+14     	; 0x1f80 <__divsf3_pse+0x3a>
    1f72:	e0 e8       	ldi	r30, 0x80	; 128
    1f74:	32 d0       	rcall	.+100    	; 0x1fda <__divsf3_pse+0x94>
    1f76:	91 50       	subi	r25, 0x01	; 1
    1f78:	50 40       	sbci	r21, 0x00	; 0
    1f7a:	e6 95       	lsr	r30
    1f7c:	00 1c       	adc	r0, r0
    1f7e:	ca f7       	brpl	.-14     	; 0x1f72 <__divsf3_pse+0x2c>
    1f80:	2b d0       	rcall	.+86     	; 0x1fd8 <__divsf3_pse+0x92>
    1f82:	fe 2f       	mov	r31, r30
    1f84:	29 d0       	rcall	.+82     	; 0x1fd8 <__divsf3_pse+0x92>
    1f86:	66 0f       	add	r22, r22
    1f88:	77 1f       	adc	r23, r23
    1f8a:	88 1f       	adc	r24, r24
    1f8c:	bb 1f       	adc	r27, r27
    1f8e:	26 17       	cp	r18, r22
    1f90:	37 07       	cpc	r19, r23
    1f92:	48 07       	cpc	r20, r24
    1f94:	ab 07       	cpc	r26, r27
    1f96:	b0 e8       	ldi	r27, 0x80	; 128
    1f98:	09 f0       	breq	.+2      	; 0x1f9c <__divsf3_pse+0x56>
    1f9a:	bb 0b       	sbc	r27, r27
    1f9c:	80 2d       	mov	r24, r0
    1f9e:	bf 01       	movw	r22, r30
    1fa0:	ff 27       	eor	r31, r31
    1fa2:	93 58       	subi	r25, 0x83	; 131
    1fa4:	5f 4f       	sbci	r21, 0xFF	; 255
    1fa6:	3a f0       	brmi	.+14     	; 0x1fb6 <__divsf3_pse+0x70>
    1fa8:	9e 3f       	cpi	r25, 0xFE	; 254
    1faa:	51 05       	cpc	r21, r1
    1fac:	78 f0       	brcs	.+30     	; 0x1fcc <__divsf3_pse+0x86>
    1fae:	0c 94 95 10 	jmp	0x212a	; 0x212a <__fp_inf>
    1fb2:	0c 94 46 11 	jmp	0x228c	; 0x228c <__fp_szero>
    1fb6:	5f 3f       	cpi	r21, 0xFF	; 255
    1fb8:	e4 f3       	brlt	.-8      	; 0x1fb2 <__divsf3_pse+0x6c>
    1fba:	98 3e       	cpi	r25, 0xE8	; 232
    1fbc:	d4 f3       	brlt	.-12     	; 0x1fb2 <__divsf3_pse+0x6c>
    1fbe:	86 95       	lsr	r24
    1fc0:	77 95       	ror	r23
    1fc2:	67 95       	ror	r22
    1fc4:	b7 95       	ror	r27
    1fc6:	f7 95       	ror	r31
    1fc8:	9f 5f       	subi	r25, 0xFF	; 255
    1fca:	c9 f7       	brne	.-14     	; 0x1fbe <__divsf3_pse+0x78>
    1fcc:	88 0f       	add	r24, r24
    1fce:	91 1d       	adc	r25, r1
    1fd0:	96 95       	lsr	r25
    1fd2:	87 95       	ror	r24
    1fd4:	97 f9       	bld	r25, 7
    1fd6:	08 95       	ret
    1fd8:	e1 e0       	ldi	r30, 0x01	; 1
    1fda:	66 0f       	add	r22, r22
    1fdc:	77 1f       	adc	r23, r23
    1fde:	88 1f       	adc	r24, r24
    1fe0:	bb 1f       	adc	r27, r27
    1fe2:	62 17       	cp	r22, r18
    1fe4:	73 07       	cpc	r23, r19
    1fe6:	84 07       	cpc	r24, r20
    1fe8:	ba 07       	cpc	r27, r26
    1fea:	20 f0       	brcs	.+8      	; 0x1ff4 <__divsf3_pse+0xae>
    1fec:	62 1b       	sub	r22, r18
    1fee:	73 0b       	sbc	r23, r19
    1ff0:	84 0b       	sbc	r24, r20
    1ff2:	ba 0b       	sbc	r27, r26
    1ff4:	ee 1f       	adc	r30, r30
    1ff6:	88 f7       	brcc	.-30     	; 0x1fda <__divsf3_pse+0x94>
    1ff8:	e0 95       	com	r30
    1ffa:	08 95       	ret

00001ffc <__fixsfsi>:
    1ffc:	0e 94 05 10 	call	0x200a	; 0x200a <__fixunssfsi>
    2000:	68 94       	set
    2002:	b1 11       	cpse	r27, r1
    2004:	0c 94 46 11 	jmp	0x228c	; 0x228c <__fp_szero>
    2008:	08 95       	ret

0000200a <__fixunssfsi>:
    200a:	0e 94 2b 11 	call	0x2256	; 0x2256 <__fp_splitA>
    200e:	88 f0       	brcs	.+34     	; 0x2032 <__fixunssfsi+0x28>
    2010:	9f 57       	subi	r25, 0x7F	; 127
    2012:	98 f0       	brcs	.+38     	; 0x203a <__fixunssfsi+0x30>
    2014:	b9 2f       	mov	r27, r25
    2016:	99 27       	eor	r25, r25
    2018:	b7 51       	subi	r27, 0x17	; 23
    201a:	b0 f0       	brcs	.+44     	; 0x2048 <__fixunssfsi+0x3e>
    201c:	e1 f0       	breq	.+56     	; 0x2056 <__fixunssfsi+0x4c>
    201e:	66 0f       	add	r22, r22
    2020:	77 1f       	adc	r23, r23
    2022:	88 1f       	adc	r24, r24
    2024:	99 1f       	adc	r25, r25
    2026:	1a f0       	brmi	.+6      	; 0x202e <__fixunssfsi+0x24>
    2028:	ba 95       	dec	r27
    202a:	c9 f7       	brne	.-14     	; 0x201e <__fixunssfsi+0x14>
    202c:	14 c0       	rjmp	.+40     	; 0x2056 <__fixunssfsi+0x4c>
    202e:	b1 30       	cpi	r27, 0x01	; 1
    2030:	91 f0       	breq	.+36     	; 0x2056 <__fixunssfsi+0x4c>
    2032:	0e 94 45 11 	call	0x228a	; 0x228a <__fp_zero>
    2036:	b1 e0       	ldi	r27, 0x01	; 1
    2038:	08 95       	ret
    203a:	0c 94 45 11 	jmp	0x228a	; 0x228a <__fp_zero>
    203e:	67 2f       	mov	r22, r23
    2040:	78 2f       	mov	r23, r24
    2042:	88 27       	eor	r24, r24
    2044:	b8 5f       	subi	r27, 0xF8	; 248
    2046:	39 f0       	breq	.+14     	; 0x2056 <__fixunssfsi+0x4c>
    2048:	b9 3f       	cpi	r27, 0xF9	; 249
    204a:	cc f3       	brlt	.-14     	; 0x203e <__fixunssfsi+0x34>
    204c:	86 95       	lsr	r24
    204e:	77 95       	ror	r23
    2050:	67 95       	ror	r22
    2052:	b3 95       	inc	r27
    2054:	d9 f7       	brne	.-10     	; 0x204c <__fixunssfsi+0x42>
    2056:	3e f4       	brtc	.+14     	; 0x2066 <__fixunssfsi+0x5c>
    2058:	90 95       	com	r25
    205a:	80 95       	com	r24
    205c:	70 95       	com	r23
    205e:	61 95       	neg	r22
    2060:	7f 4f       	sbci	r23, 0xFF	; 255
    2062:	8f 4f       	sbci	r24, 0xFF	; 255
    2064:	9f 4f       	sbci	r25, 0xFF	; 255
    2066:	08 95       	ret

00002068 <__floatunsisf>:
    2068:	e8 94       	clt
    206a:	09 c0       	rjmp	.+18     	; 0x207e <__floatsisf+0x12>

0000206c <__floatsisf>:
    206c:	97 fb       	bst	r25, 7
    206e:	3e f4       	brtc	.+14     	; 0x207e <__floatsisf+0x12>
    2070:	90 95       	com	r25
    2072:	80 95       	com	r24
    2074:	70 95       	com	r23
    2076:	61 95       	neg	r22
    2078:	7f 4f       	sbci	r23, 0xFF	; 255
    207a:	8f 4f       	sbci	r24, 0xFF	; 255
    207c:	9f 4f       	sbci	r25, 0xFF	; 255
    207e:	99 23       	and	r25, r25
    2080:	a9 f0       	breq	.+42     	; 0x20ac <__floatsisf+0x40>
    2082:	f9 2f       	mov	r31, r25
    2084:	96 e9       	ldi	r25, 0x96	; 150
    2086:	bb 27       	eor	r27, r27
    2088:	93 95       	inc	r25
    208a:	f6 95       	lsr	r31
    208c:	87 95       	ror	r24
    208e:	77 95       	ror	r23
    2090:	67 95       	ror	r22
    2092:	b7 95       	ror	r27
    2094:	f1 11       	cpse	r31, r1
    2096:	f8 cf       	rjmp	.-16     	; 0x2088 <__floatsisf+0x1c>
    2098:	fa f4       	brpl	.+62     	; 0x20d8 <__floatsisf+0x6c>
    209a:	bb 0f       	add	r27, r27
    209c:	11 f4       	brne	.+4      	; 0x20a2 <__floatsisf+0x36>
    209e:	60 ff       	sbrs	r22, 0
    20a0:	1b c0       	rjmp	.+54     	; 0x20d8 <__floatsisf+0x6c>
    20a2:	6f 5f       	subi	r22, 0xFF	; 255
    20a4:	7f 4f       	sbci	r23, 0xFF	; 255
    20a6:	8f 4f       	sbci	r24, 0xFF	; 255
    20a8:	9f 4f       	sbci	r25, 0xFF	; 255
    20aa:	16 c0       	rjmp	.+44     	; 0x20d8 <__floatsisf+0x6c>
    20ac:	88 23       	and	r24, r24
    20ae:	11 f0       	breq	.+4      	; 0x20b4 <__floatsisf+0x48>
    20b0:	96 e9       	ldi	r25, 0x96	; 150
    20b2:	11 c0       	rjmp	.+34     	; 0x20d6 <__floatsisf+0x6a>
    20b4:	77 23       	and	r23, r23
    20b6:	21 f0       	breq	.+8      	; 0x20c0 <__floatsisf+0x54>
    20b8:	9e e8       	ldi	r25, 0x8E	; 142
    20ba:	87 2f       	mov	r24, r23
    20bc:	76 2f       	mov	r23, r22
    20be:	05 c0       	rjmp	.+10     	; 0x20ca <__floatsisf+0x5e>
    20c0:	66 23       	and	r22, r22
    20c2:	71 f0       	breq	.+28     	; 0x20e0 <__floatsisf+0x74>
    20c4:	96 e8       	ldi	r25, 0x86	; 134
    20c6:	86 2f       	mov	r24, r22
    20c8:	70 e0       	ldi	r23, 0x00	; 0
    20ca:	60 e0       	ldi	r22, 0x00	; 0
    20cc:	2a f0       	brmi	.+10     	; 0x20d8 <__floatsisf+0x6c>
    20ce:	9a 95       	dec	r25
    20d0:	66 0f       	add	r22, r22
    20d2:	77 1f       	adc	r23, r23
    20d4:	88 1f       	adc	r24, r24
    20d6:	da f7       	brpl	.-10     	; 0x20ce <__floatsisf+0x62>
    20d8:	88 0f       	add	r24, r24
    20da:	96 95       	lsr	r25
    20dc:	87 95       	ror	r24
    20de:	97 f9       	bld	r25, 7
    20e0:	08 95       	ret

000020e2 <__fp_cmp>:
    20e2:	99 0f       	add	r25, r25
    20e4:	00 08       	sbc	r0, r0
    20e6:	55 0f       	add	r21, r21
    20e8:	aa 0b       	sbc	r26, r26
    20ea:	e0 e8       	ldi	r30, 0x80	; 128
    20ec:	fe ef       	ldi	r31, 0xFE	; 254
    20ee:	16 16       	cp	r1, r22
    20f0:	17 06       	cpc	r1, r23
    20f2:	e8 07       	cpc	r30, r24
    20f4:	f9 07       	cpc	r31, r25
    20f6:	c0 f0       	brcs	.+48     	; 0x2128 <__fp_cmp+0x46>
    20f8:	12 16       	cp	r1, r18
    20fa:	13 06       	cpc	r1, r19
    20fc:	e4 07       	cpc	r30, r20
    20fe:	f5 07       	cpc	r31, r21
    2100:	98 f0       	brcs	.+38     	; 0x2128 <__fp_cmp+0x46>
    2102:	62 1b       	sub	r22, r18
    2104:	73 0b       	sbc	r23, r19
    2106:	84 0b       	sbc	r24, r20
    2108:	95 0b       	sbc	r25, r21
    210a:	39 f4       	brne	.+14     	; 0x211a <__fp_cmp+0x38>
    210c:	0a 26       	eor	r0, r26
    210e:	61 f0       	breq	.+24     	; 0x2128 <__fp_cmp+0x46>
    2110:	23 2b       	or	r18, r19
    2112:	24 2b       	or	r18, r20
    2114:	25 2b       	or	r18, r21
    2116:	21 f4       	brne	.+8      	; 0x2120 <__fp_cmp+0x3e>
    2118:	08 95       	ret
    211a:	0a 26       	eor	r0, r26
    211c:	09 f4       	brne	.+2      	; 0x2120 <__fp_cmp+0x3e>
    211e:	a1 40       	sbci	r26, 0x01	; 1
    2120:	a6 95       	lsr	r26
    2122:	8f ef       	ldi	r24, 0xFF	; 255
    2124:	81 1d       	adc	r24, r1
    2126:	81 1d       	adc	r24, r1
    2128:	08 95       	ret

0000212a <__fp_inf>:
    212a:	97 f9       	bld	r25, 7
    212c:	9f 67       	ori	r25, 0x7F	; 127
    212e:	80 e8       	ldi	r24, 0x80	; 128
    2130:	70 e0       	ldi	r23, 0x00	; 0
    2132:	60 e0       	ldi	r22, 0x00	; 0
    2134:	08 95       	ret

00002136 <__fp_nan>:
    2136:	9f ef       	ldi	r25, 0xFF	; 255
    2138:	80 ec       	ldi	r24, 0xC0	; 192
    213a:	08 95       	ret

0000213c <__fp_powser>:
    213c:	df 93       	push	r29
    213e:	cf 93       	push	r28
    2140:	1f 93       	push	r17
    2142:	0f 93       	push	r16
    2144:	ff 92       	push	r15
    2146:	ef 92       	push	r14
    2148:	df 92       	push	r13
    214a:	7b 01       	movw	r14, r22
    214c:	8c 01       	movw	r16, r24
    214e:	68 94       	set
    2150:	06 c0       	rjmp	.+12     	; 0x215e <__fp_powser+0x22>
    2152:	da 2e       	mov	r13, r26
    2154:	ef 01       	movw	r28, r30
    2156:	0e 94 6c 11 	call	0x22d8	; 0x22d8 <__mulsf3x>
    215a:	fe 01       	movw	r30, r28
    215c:	e8 94       	clt
    215e:	a5 91       	lpm	r26, Z+
    2160:	25 91       	lpm	r18, Z+
    2162:	35 91       	lpm	r19, Z+
    2164:	45 91       	lpm	r20, Z+
    2166:	55 91       	lpm	r21, Z+
    2168:	a6 f3       	brts	.-24     	; 0x2152 <__fp_powser+0x16>
    216a:	ef 01       	movw	r28, r30
    216c:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <__addsf3x>
    2170:	fe 01       	movw	r30, r28
    2172:	97 01       	movw	r18, r14
    2174:	a8 01       	movw	r20, r16
    2176:	da 94       	dec	r13
    2178:	69 f7       	brne	.-38     	; 0x2154 <__fp_powser+0x18>
    217a:	df 90       	pop	r13
    217c:	ef 90       	pop	r14
    217e:	ff 90       	pop	r15
    2180:	0f 91       	pop	r16
    2182:	1f 91       	pop	r17
    2184:	cf 91       	pop	r28
    2186:	df 91       	pop	r29
    2188:	08 95       	ret

0000218a <__fp_pscA>:
    218a:	00 24       	eor	r0, r0
    218c:	0a 94       	dec	r0
    218e:	16 16       	cp	r1, r22
    2190:	17 06       	cpc	r1, r23
    2192:	18 06       	cpc	r1, r24
    2194:	09 06       	cpc	r0, r25
    2196:	08 95       	ret

00002198 <__fp_pscB>:
    2198:	00 24       	eor	r0, r0
    219a:	0a 94       	dec	r0
    219c:	12 16       	cp	r1, r18
    219e:	13 06       	cpc	r1, r19
    21a0:	14 06       	cpc	r1, r20
    21a2:	05 06       	cpc	r0, r21
    21a4:	08 95       	ret
    21a6:	0c 94 9b 10 	jmp	0x2136	; 0x2136 <__fp_nan>

000021aa <__fp_rempio2>:
    21aa:	0e 94 2b 11 	call	0x2256	; 0x2256 <__fp_splitA>
    21ae:	d8 f3       	brcs	.-10     	; 0x21a6 <__fp_pscB+0xe>
    21b0:	e8 94       	clt
    21b2:	e0 e0       	ldi	r30, 0x00	; 0
    21b4:	bb 27       	eor	r27, r27
    21b6:	9f 57       	subi	r25, 0x7F	; 127
    21b8:	f0 f0       	brcs	.+60     	; 0x21f6 <__fp_rempio2+0x4c>
    21ba:	2a ed       	ldi	r18, 0xDA	; 218
    21bc:	3f e0       	ldi	r19, 0x0F	; 15
    21be:	49 ec       	ldi	r20, 0xC9	; 201
    21c0:	06 c0       	rjmp	.+12     	; 0x21ce <__fp_rempio2+0x24>
    21c2:	ee 0f       	add	r30, r30
    21c4:	bb 0f       	add	r27, r27
    21c6:	66 1f       	adc	r22, r22
    21c8:	77 1f       	adc	r23, r23
    21ca:	88 1f       	adc	r24, r24
    21cc:	28 f0       	brcs	.+10     	; 0x21d8 <__fp_rempio2+0x2e>
    21ce:	b2 3a       	cpi	r27, 0xA2	; 162
    21d0:	62 07       	cpc	r22, r18
    21d2:	73 07       	cpc	r23, r19
    21d4:	84 07       	cpc	r24, r20
    21d6:	28 f0       	brcs	.+10     	; 0x21e2 <__fp_rempio2+0x38>
    21d8:	b2 5a       	subi	r27, 0xA2	; 162
    21da:	62 0b       	sbc	r22, r18
    21dc:	73 0b       	sbc	r23, r19
    21de:	84 0b       	sbc	r24, r20
    21e0:	e3 95       	inc	r30
    21e2:	9a 95       	dec	r25
    21e4:	72 f7       	brpl	.-36     	; 0x21c2 <__fp_rempio2+0x18>
    21e6:	80 38       	cpi	r24, 0x80	; 128
    21e8:	30 f4       	brcc	.+12     	; 0x21f6 <__fp_rempio2+0x4c>
    21ea:	9a 95       	dec	r25
    21ec:	bb 0f       	add	r27, r27
    21ee:	66 1f       	adc	r22, r22
    21f0:	77 1f       	adc	r23, r23
    21f2:	88 1f       	adc	r24, r24
    21f4:	d2 f7       	brpl	.-12     	; 0x21ea <__fp_rempio2+0x40>
    21f6:	90 48       	sbci	r25, 0x80	; 128
    21f8:	0c 94 5e 12 	jmp	0x24bc	; 0x24bc <__fp_mpack_finite>

000021fc <__fp_round>:
    21fc:	09 2e       	mov	r0, r25
    21fe:	03 94       	inc	r0
    2200:	00 0c       	add	r0, r0
    2202:	11 f4       	brne	.+4      	; 0x2208 <__fp_round+0xc>
    2204:	88 23       	and	r24, r24
    2206:	52 f0       	brmi	.+20     	; 0x221c <__fp_round+0x20>
    2208:	bb 0f       	add	r27, r27
    220a:	40 f4       	brcc	.+16     	; 0x221c <__fp_round+0x20>
    220c:	bf 2b       	or	r27, r31
    220e:	11 f4       	brne	.+4      	; 0x2214 <__fp_round+0x18>
    2210:	60 ff       	sbrs	r22, 0
    2212:	04 c0       	rjmp	.+8      	; 0x221c <__fp_round+0x20>
    2214:	6f 5f       	subi	r22, 0xFF	; 255
    2216:	7f 4f       	sbci	r23, 0xFF	; 255
    2218:	8f 4f       	sbci	r24, 0xFF	; 255
    221a:	9f 4f       	sbci	r25, 0xFF	; 255
    221c:	08 95       	ret

0000221e <__fp_sinus>:
    221e:	ef 93       	push	r30
    2220:	e0 ff       	sbrs	r30, 0
    2222:	07 c0       	rjmp	.+14     	; 0x2232 <__fp_sinus+0x14>
    2224:	a2 ea       	ldi	r26, 0xA2	; 162
    2226:	2a ed       	ldi	r18, 0xDA	; 218
    2228:	3f e0       	ldi	r19, 0x0F	; 15
    222a:	49 ec       	ldi	r20, 0xC9	; 201
    222c:	5f eb       	ldi	r21, 0xBF	; 191
    222e:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <__addsf3x>
    2232:	0e 94 fe 10 	call	0x21fc	; 0x21fc <__fp_round>
    2236:	0f 90       	pop	r0
    2238:	03 94       	inc	r0
    223a:	01 fc       	sbrc	r0, 1
    223c:	90 58       	subi	r25, 0x80	; 128
    223e:	e9 ed       	ldi	r30, 0xD9	; 217
    2240:	f0 e0       	ldi	r31, 0x00	; 0
    2242:	0c 94 6a 12 	jmp	0x24d4	; 0x24d4 <__fp_powsodd>

00002246 <__fp_split3>:
    2246:	57 fd       	sbrc	r21, 7
    2248:	90 58       	subi	r25, 0x80	; 128
    224a:	44 0f       	add	r20, r20
    224c:	55 1f       	adc	r21, r21
    224e:	59 f0       	breq	.+22     	; 0x2266 <__fp_splitA+0x10>
    2250:	5f 3f       	cpi	r21, 0xFF	; 255
    2252:	71 f0       	breq	.+28     	; 0x2270 <__fp_splitA+0x1a>
    2254:	47 95       	ror	r20

00002256 <__fp_splitA>:
    2256:	88 0f       	add	r24, r24
    2258:	97 fb       	bst	r25, 7
    225a:	99 1f       	adc	r25, r25
    225c:	61 f0       	breq	.+24     	; 0x2276 <__fp_splitA+0x20>
    225e:	9f 3f       	cpi	r25, 0xFF	; 255
    2260:	79 f0       	breq	.+30     	; 0x2280 <__fp_splitA+0x2a>
    2262:	87 95       	ror	r24
    2264:	08 95       	ret
    2266:	12 16       	cp	r1, r18
    2268:	13 06       	cpc	r1, r19
    226a:	14 06       	cpc	r1, r20
    226c:	55 1f       	adc	r21, r21
    226e:	f2 cf       	rjmp	.-28     	; 0x2254 <__fp_split3+0xe>
    2270:	46 95       	lsr	r20
    2272:	f1 df       	rcall	.-30     	; 0x2256 <__fp_splitA>
    2274:	08 c0       	rjmp	.+16     	; 0x2286 <__fp_splitA+0x30>
    2276:	16 16       	cp	r1, r22
    2278:	17 06       	cpc	r1, r23
    227a:	18 06       	cpc	r1, r24
    227c:	99 1f       	adc	r25, r25
    227e:	f1 cf       	rjmp	.-30     	; 0x2262 <__fp_splitA+0xc>
    2280:	86 95       	lsr	r24
    2282:	71 05       	cpc	r23, r1
    2284:	61 05       	cpc	r22, r1
    2286:	08 94       	sec
    2288:	08 95       	ret

0000228a <__fp_zero>:
    228a:	e8 94       	clt

0000228c <__fp_szero>:
    228c:	bb 27       	eor	r27, r27
    228e:	66 27       	eor	r22, r22
    2290:	77 27       	eor	r23, r23
    2292:	cb 01       	movw	r24, r22
    2294:	97 f9       	bld	r25, 7
    2296:	08 95       	ret

00002298 <__gesf2>:
    2298:	0e 94 71 10 	call	0x20e2	; 0x20e2 <__fp_cmp>
    229c:	08 f4       	brcc	.+2      	; 0x22a0 <__gesf2+0x8>
    229e:	8f ef       	ldi	r24, 0xFF	; 255
    22a0:	08 95       	ret

000022a2 <inverse>:
    22a2:	9b 01       	movw	r18, r22
    22a4:	ac 01       	movw	r20, r24
    22a6:	60 e0       	ldi	r22, 0x00	; 0
    22a8:	70 e0       	ldi	r23, 0x00	; 0
    22aa:	80 e8       	ldi	r24, 0x80	; 128
    22ac:	9f e3       	ldi	r25, 0x3F	; 63
    22ae:	0c 94 8c 0f 	jmp	0x1f18	; 0x1f18 <__divsf3>

000022b2 <__mulsf3>:
    22b2:	0e 94 6c 11 	call	0x22d8	; 0x22d8 <__mulsf3x>
    22b6:	0c 94 fe 10 	jmp	0x21fc	; 0x21fc <__fp_round>
    22ba:	0e 94 c5 10 	call	0x218a	; 0x218a <__fp_pscA>
    22be:	38 f0       	brcs	.+14     	; 0x22ce <__mulsf3+0x1c>
    22c0:	0e 94 cc 10 	call	0x2198	; 0x2198 <__fp_pscB>
    22c4:	20 f0       	brcs	.+8      	; 0x22ce <__mulsf3+0x1c>
    22c6:	95 23       	and	r25, r21
    22c8:	11 f0       	breq	.+4      	; 0x22ce <__mulsf3+0x1c>
    22ca:	0c 94 95 10 	jmp	0x212a	; 0x212a <__fp_inf>
    22ce:	0c 94 9b 10 	jmp	0x2136	; 0x2136 <__fp_nan>
    22d2:	11 24       	eor	r1, r1
    22d4:	0c 94 46 11 	jmp	0x228c	; 0x228c <__fp_szero>

000022d8 <__mulsf3x>:
    22d8:	0e 94 23 11 	call	0x2246	; 0x2246 <__fp_split3>
    22dc:	70 f3       	brcs	.-36     	; 0x22ba <__mulsf3+0x8>

000022de <__mulsf3_pse>:
    22de:	95 9f       	mul	r25, r21
    22e0:	c1 f3       	breq	.-16     	; 0x22d2 <__mulsf3+0x20>
    22e2:	95 0f       	add	r25, r21
    22e4:	50 e0       	ldi	r21, 0x00	; 0
    22e6:	55 1f       	adc	r21, r21
    22e8:	62 9f       	mul	r22, r18
    22ea:	f0 01       	movw	r30, r0
    22ec:	72 9f       	mul	r23, r18
    22ee:	bb 27       	eor	r27, r27
    22f0:	f0 0d       	add	r31, r0
    22f2:	b1 1d       	adc	r27, r1
    22f4:	63 9f       	mul	r22, r19
    22f6:	aa 27       	eor	r26, r26
    22f8:	f0 0d       	add	r31, r0
    22fa:	b1 1d       	adc	r27, r1
    22fc:	aa 1f       	adc	r26, r26
    22fe:	64 9f       	mul	r22, r20
    2300:	66 27       	eor	r22, r22
    2302:	b0 0d       	add	r27, r0
    2304:	a1 1d       	adc	r26, r1
    2306:	66 1f       	adc	r22, r22
    2308:	82 9f       	mul	r24, r18
    230a:	22 27       	eor	r18, r18
    230c:	b0 0d       	add	r27, r0
    230e:	a1 1d       	adc	r26, r1
    2310:	62 1f       	adc	r22, r18
    2312:	73 9f       	mul	r23, r19
    2314:	b0 0d       	add	r27, r0
    2316:	a1 1d       	adc	r26, r1
    2318:	62 1f       	adc	r22, r18
    231a:	83 9f       	mul	r24, r19
    231c:	a0 0d       	add	r26, r0
    231e:	61 1d       	adc	r22, r1
    2320:	22 1f       	adc	r18, r18
    2322:	74 9f       	mul	r23, r20
    2324:	33 27       	eor	r19, r19
    2326:	a0 0d       	add	r26, r0
    2328:	61 1d       	adc	r22, r1
    232a:	23 1f       	adc	r18, r19
    232c:	84 9f       	mul	r24, r20
    232e:	60 0d       	add	r22, r0
    2330:	21 1d       	adc	r18, r1
    2332:	82 2f       	mov	r24, r18
    2334:	76 2f       	mov	r23, r22
    2336:	6a 2f       	mov	r22, r26
    2338:	11 24       	eor	r1, r1
    233a:	9f 57       	subi	r25, 0x7F	; 127
    233c:	50 40       	sbci	r21, 0x00	; 0
    233e:	9a f0       	brmi	.+38     	; 0x2366 <__mulsf3_pse+0x88>
    2340:	f1 f0       	breq	.+60     	; 0x237e <__mulsf3_pse+0xa0>
    2342:	88 23       	and	r24, r24
    2344:	4a f0       	brmi	.+18     	; 0x2358 <__mulsf3_pse+0x7a>
    2346:	ee 0f       	add	r30, r30
    2348:	ff 1f       	adc	r31, r31
    234a:	bb 1f       	adc	r27, r27
    234c:	66 1f       	adc	r22, r22
    234e:	77 1f       	adc	r23, r23
    2350:	88 1f       	adc	r24, r24
    2352:	91 50       	subi	r25, 0x01	; 1
    2354:	50 40       	sbci	r21, 0x00	; 0
    2356:	a9 f7       	brne	.-22     	; 0x2342 <__mulsf3_pse+0x64>
    2358:	9e 3f       	cpi	r25, 0xFE	; 254
    235a:	51 05       	cpc	r21, r1
    235c:	80 f0       	brcs	.+32     	; 0x237e <__mulsf3_pse+0xa0>
    235e:	0c 94 95 10 	jmp	0x212a	; 0x212a <__fp_inf>
    2362:	0c 94 46 11 	jmp	0x228c	; 0x228c <__fp_szero>
    2366:	5f 3f       	cpi	r21, 0xFF	; 255
    2368:	e4 f3       	brlt	.-8      	; 0x2362 <__mulsf3_pse+0x84>
    236a:	98 3e       	cpi	r25, 0xE8	; 232
    236c:	d4 f3       	brlt	.-12     	; 0x2362 <__mulsf3_pse+0x84>
    236e:	86 95       	lsr	r24
    2370:	77 95       	ror	r23
    2372:	67 95       	ror	r22
    2374:	b7 95       	ror	r27
    2376:	f7 95       	ror	r31
    2378:	e7 95       	ror	r30
    237a:	9f 5f       	subi	r25, 0xFF	; 255
    237c:	c1 f7       	brne	.-16     	; 0x236e <__mulsf3_pse+0x90>
    237e:	fe 2b       	or	r31, r30
    2380:	88 0f       	add	r24, r24
    2382:	91 1d       	adc	r25, r1
    2384:	96 95       	lsr	r25
    2386:	87 95       	ror	r24
    2388:	97 f9       	bld	r25, 7
    238a:	08 95       	ret

0000238c <pow>:
    238c:	fa 01       	movw	r30, r20
    238e:	ee 0f       	add	r30, r30
    2390:	ff 1f       	adc	r31, r31
    2392:	30 96       	adiw	r30, 0x00	; 0
    2394:	21 05       	cpc	r18, r1
    2396:	31 05       	cpc	r19, r1
    2398:	a1 f1       	breq	.+104    	; 0x2402 <pow+0x76>
    239a:	61 15       	cp	r22, r1
    239c:	71 05       	cpc	r23, r1
    239e:	61 f4       	brne	.+24     	; 0x23b8 <pow+0x2c>
    23a0:	80 38       	cpi	r24, 0x80	; 128
    23a2:	bf e3       	ldi	r27, 0x3F	; 63
    23a4:	9b 07       	cpc	r25, r27
    23a6:	49 f1       	breq	.+82     	; 0x23fa <pow+0x6e>
    23a8:	68 94       	set
    23aa:	90 38       	cpi	r25, 0x80	; 128
    23ac:	81 05       	cpc	r24, r1
    23ae:	61 f0       	breq	.+24     	; 0x23c8 <pow+0x3c>
    23b0:	80 38       	cpi	r24, 0x80	; 128
    23b2:	bf ef       	ldi	r27, 0xFF	; 255
    23b4:	9b 07       	cpc	r25, r27
    23b6:	41 f0       	breq	.+16     	; 0x23c8 <pow+0x3c>
    23b8:	99 23       	and	r25, r25
    23ba:	4a f5       	brpl	.+82     	; 0x240e <pow+0x82>
    23bc:	ff 3f       	cpi	r31, 0xFF	; 255
    23be:	e1 05       	cpc	r30, r1
    23c0:	31 05       	cpc	r19, r1
    23c2:	21 05       	cpc	r18, r1
    23c4:	19 f1       	breq	.+70     	; 0x240c <pow+0x80>
    23c6:	e8 94       	clt
    23c8:	08 94       	sec
    23ca:	e7 95       	ror	r30
    23cc:	d9 01       	movw	r26, r18
    23ce:	aa 23       	and	r26, r26
    23d0:	29 f4       	brne	.+10     	; 0x23dc <pow+0x50>
    23d2:	ab 2f       	mov	r26, r27
    23d4:	be 2f       	mov	r27, r30
    23d6:	f8 5f       	subi	r31, 0xF8	; 248
    23d8:	d0 f3       	brcs	.-12     	; 0x23ce <pow+0x42>
    23da:	10 c0       	rjmp	.+32     	; 0x23fc <pow+0x70>
    23dc:	ff 5f       	subi	r31, 0xFF	; 255
    23de:	70 f4       	brcc	.+28     	; 0x23fc <pow+0x70>
    23e0:	a6 95       	lsr	r26
    23e2:	e0 f7       	brcc	.-8      	; 0x23dc <pow+0x50>
    23e4:	f7 39       	cpi	r31, 0x97	; 151
    23e6:	50 f0       	brcs	.+20     	; 0x23fc <pow+0x70>
    23e8:	19 f0       	breq	.+6      	; 0x23f0 <pow+0x64>
    23ea:	ff 3a       	cpi	r31, 0xAF	; 175
    23ec:	38 f4       	brcc	.+14     	; 0x23fc <pow+0x70>
    23ee:	9f 77       	andi	r25, 0x7F	; 127
    23f0:	9f 93       	push	r25
    23f2:	0d d0       	rcall	.+26     	; 0x240e <pow+0x82>
    23f4:	0f 90       	pop	r0
    23f6:	07 fc       	sbrc	r0, 7
    23f8:	90 58       	subi	r25, 0x80	; 128
    23fa:	08 95       	ret
    23fc:	46 f0       	brts	.+16     	; 0x240e <pow+0x82>
    23fe:	0c 94 9b 10 	jmp	0x2136	; 0x2136 <__fp_nan>
    2402:	60 e0       	ldi	r22, 0x00	; 0
    2404:	70 e0       	ldi	r23, 0x00	; 0
    2406:	80 e8       	ldi	r24, 0x80	; 128
    2408:	9f e3       	ldi	r25, 0x3F	; 63
    240a:	08 95       	ret
    240c:	4f e7       	ldi	r20, 0x7F	; 127
    240e:	9f 77       	andi	r25, 0x7F	; 127
    2410:	5f 93       	push	r21
    2412:	4f 93       	push	r20
    2414:	3f 93       	push	r19
    2416:	2f 93       	push	r18
    2418:	0e 94 c0 12 	call	0x2580	; 0x2580 <log>
    241c:	2f 91       	pop	r18
    241e:	3f 91       	pop	r19
    2420:	4f 91       	pop	r20
    2422:	5f 91       	pop	r21
    2424:	0e 94 59 11 	call	0x22b2	; 0x22b2 <__mulsf3>
    2428:	0c 94 2a 12 	jmp	0x2454	; 0x2454 <exp>

0000242c <sin>:
    242c:	9f 93       	push	r25
    242e:	0e 94 d5 10 	call	0x21aa	; 0x21aa <__fp_rempio2>
    2432:	0f 90       	pop	r0
    2434:	07 fc       	sbrc	r0, 7
    2436:	ee 5f       	subi	r30, 0xFE	; 254
    2438:	0c 94 0f 11 	jmp	0x221e	; 0x221e <__fp_sinus>

0000243c <square>:
    243c:	9b 01       	movw	r18, r22
    243e:	ac 01       	movw	r20, r24
    2440:	0c 94 59 11 	jmp	0x22b2	; 0x22b2 <__mulsf3>
    2444:	29 f4       	brne	.+10     	; 0x2450 <square+0x14>
    2446:	16 f0       	brts	.+4      	; 0x244c <square+0x10>
    2448:	0c 94 95 10 	jmp	0x212a	; 0x212a <__fp_inf>
    244c:	0c 94 45 11 	jmp	0x228a	; 0x228a <__fp_zero>
    2450:	0c 94 9b 10 	jmp	0x2136	; 0x2136 <__fp_nan>

00002454 <exp>:
    2454:	0e 94 2b 11 	call	0x2256	; 0x2256 <__fp_splitA>
    2458:	a8 f3       	brcs	.-22     	; 0x2444 <square+0x8>
    245a:	96 38       	cpi	r25, 0x86	; 134
    245c:	a0 f7       	brcc	.-24     	; 0x2446 <square+0xa>
    245e:	07 f8       	bld	r0, 7
    2460:	0f 92       	push	r0
    2462:	e8 94       	clt
    2464:	2b e3       	ldi	r18, 0x3B	; 59
    2466:	3a ea       	ldi	r19, 0xAA	; 170
    2468:	48 eb       	ldi	r20, 0xB8	; 184
    246a:	5f e7       	ldi	r21, 0x7F	; 127
    246c:	0e 94 6f 11 	call	0x22de	; 0x22de <__mulsf3_pse>
    2470:	0f 92       	push	r0
    2472:	0f 92       	push	r0
    2474:	0f 92       	push	r0
    2476:	4d b7       	in	r20, 0x3d	; 61
    2478:	5e b7       	in	r21, 0x3e	; 62
    247a:	0f 92       	push	r0
    247c:	0e 94 08 13 	call	0x2610	; 0x2610 <modf>
    2480:	e7 ef       	ldi	r30, 0xF7	; 247
    2482:	f0 e0       	ldi	r31, 0x00	; 0
    2484:	0e 94 9e 10 	call	0x213c	; 0x213c <__fp_powser>
    2488:	4f 91       	pop	r20
    248a:	5f 91       	pop	r21
    248c:	ef 91       	pop	r30
    248e:	ff 91       	pop	r31
    2490:	e5 95       	asr	r30
    2492:	ee 1f       	adc	r30, r30
    2494:	ff 1f       	adc	r31, r31
    2496:	49 f0       	breq	.+18     	; 0x24aa <exp+0x56>
    2498:	fe 57       	subi	r31, 0x7E	; 126
    249a:	e0 68       	ori	r30, 0x80	; 128
    249c:	44 27       	eor	r20, r20
    249e:	ee 0f       	add	r30, r30
    24a0:	44 1f       	adc	r20, r20
    24a2:	fa 95       	dec	r31
    24a4:	e1 f7       	brne	.-8      	; 0x249e <exp+0x4a>
    24a6:	41 95       	neg	r20
    24a8:	55 0b       	sbc	r21, r21
    24aa:	0e 94 82 12 	call	0x2504	; 0x2504 <ldexp>
    24ae:	0f 90       	pop	r0
    24b0:	07 fe       	sbrs	r0, 7
    24b2:	0c 94 51 11 	jmp	0x22a2	; 0x22a2 <inverse>
    24b6:	08 95       	ret

000024b8 <__fp_mpack>:
    24b8:	9f 3f       	cpi	r25, 0xFF	; 255
    24ba:	31 f0       	breq	.+12     	; 0x24c8 <__fp_mpack_finite+0xc>

000024bc <__fp_mpack_finite>:
    24bc:	91 50       	subi	r25, 0x01	; 1
    24be:	20 f4       	brcc	.+8      	; 0x24c8 <__fp_mpack_finite+0xc>
    24c0:	87 95       	ror	r24
    24c2:	77 95       	ror	r23
    24c4:	67 95       	ror	r22
    24c6:	b7 95       	ror	r27
    24c8:	88 0f       	add	r24, r24
    24ca:	91 1d       	adc	r25, r1
    24cc:	96 95       	lsr	r25
    24ce:	87 95       	ror	r24
    24d0:	97 f9       	bld	r25, 7
    24d2:	08 95       	ret

000024d4 <__fp_powsodd>:
    24d4:	9f 93       	push	r25
    24d6:	8f 93       	push	r24
    24d8:	7f 93       	push	r23
    24da:	6f 93       	push	r22
    24dc:	ff 93       	push	r31
    24de:	ef 93       	push	r30
    24e0:	9b 01       	movw	r18, r22
    24e2:	ac 01       	movw	r20, r24
    24e4:	0e 94 59 11 	call	0x22b2	; 0x22b2 <__mulsf3>
    24e8:	ef 91       	pop	r30
    24ea:	ff 91       	pop	r31
    24ec:	0e 94 9e 10 	call	0x213c	; 0x213c <__fp_powser>
    24f0:	2f 91       	pop	r18
    24f2:	3f 91       	pop	r19
    24f4:	4f 91       	pop	r20
    24f6:	5f 91       	pop	r21
    24f8:	0c 94 59 11 	jmp	0x22b2	; 0x22b2 <__mulsf3>
    24fc:	0c 94 95 10 	jmp	0x212a	; 0x212a <__fp_inf>
    2500:	0c 94 5c 12 	jmp	0x24b8	; 0x24b8 <__fp_mpack>

00002504 <ldexp>:
    2504:	0e 94 2b 11 	call	0x2256	; 0x2256 <__fp_splitA>
    2508:	d8 f3       	brcs	.-10     	; 0x2500 <__fp_powsodd+0x2c>
    250a:	99 23       	and	r25, r25
    250c:	c9 f3       	breq	.-14     	; 0x2500 <__fp_powsodd+0x2c>
    250e:	94 0f       	add	r25, r20
    2510:	51 1d       	adc	r21, r1
    2512:	a3 f3       	brvs	.-24     	; 0x24fc <__fp_powsodd+0x28>
    2514:	91 50       	subi	r25, 0x01	; 1
    2516:	50 40       	sbci	r21, 0x00	; 0
    2518:	94 f0       	brlt	.+36     	; 0x253e <ldexp+0x3a>
    251a:	59 f0       	breq	.+22     	; 0x2532 <ldexp+0x2e>
    251c:	88 23       	and	r24, r24
    251e:	32 f0       	brmi	.+12     	; 0x252c <ldexp+0x28>
    2520:	66 0f       	add	r22, r22
    2522:	77 1f       	adc	r23, r23
    2524:	88 1f       	adc	r24, r24
    2526:	91 50       	subi	r25, 0x01	; 1
    2528:	50 40       	sbci	r21, 0x00	; 0
    252a:	c1 f7       	brne	.-16     	; 0x251c <ldexp+0x18>
    252c:	9e 3f       	cpi	r25, 0xFE	; 254
    252e:	51 05       	cpc	r21, r1
    2530:	2c f7       	brge	.-54     	; 0x24fc <__fp_powsodd+0x28>
    2532:	88 0f       	add	r24, r24
    2534:	91 1d       	adc	r25, r1
    2536:	96 95       	lsr	r25
    2538:	87 95       	ror	r24
    253a:	97 f9       	bld	r25, 7
    253c:	08 95       	ret
    253e:	5f 3f       	cpi	r21, 0xFF	; 255
    2540:	ac f0       	brlt	.+42     	; 0x256c <ldexp+0x68>
    2542:	98 3e       	cpi	r25, 0xE8	; 232
    2544:	9c f0       	brlt	.+38     	; 0x256c <ldexp+0x68>
    2546:	bb 27       	eor	r27, r27
    2548:	86 95       	lsr	r24
    254a:	77 95       	ror	r23
    254c:	67 95       	ror	r22
    254e:	b7 95       	ror	r27
    2550:	08 f4       	brcc	.+2      	; 0x2554 <ldexp+0x50>
    2552:	b1 60       	ori	r27, 0x01	; 1
    2554:	93 95       	inc	r25
    2556:	c1 f7       	brne	.-16     	; 0x2548 <ldexp+0x44>
    2558:	bb 0f       	add	r27, r27
    255a:	58 f7       	brcc	.-42     	; 0x2532 <ldexp+0x2e>
    255c:	11 f4       	brne	.+4      	; 0x2562 <ldexp+0x5e>
    255e:	60 ff       	sbrs	r22, 0
    2560:	e8 cf       	rjmp	.-48     	; 0x2532 <ldexp+0x2e>
    2562:	6f 5f       	subi	r22, 0xFF	; 255
    2564:	7f 4f       	sbci	r23, 0xFF	; 255
    2566:	8f 4f       	sbci	r24, 0xFF	; 255
    2568:	9f 4f       	sbci	r25, 0xFF	; 255
    256a:	e3 cf       	rjmp	.-58     	; 0x2532 <ldexp+0x2e>
    256c:	0c 94 46 11 	jmp	0x228c	; 0x228c <__fp_szero>
    2570:	16 f0       	brts	.+4      	; 0x2576 <ldexp+0x72>
    2572:	0c 94 5c 12 	jmp	0x24b8	; 0x24b8 <__fp_mpack>
    2576:	0c 94 9b 10 	jmp	0x2136	; 0x2136 <__fp_nan>
    257a:	68 94       	set
    257c:	0c 94 95 10 	jmp	0x212a	; 0x212a <__fp_inf>

00002580 <log>:
    2580:	0e 94 2b 11 	call	0x2256	; 0x2256 <__fp_splitA>
    2584:	a8 f3       	brcs	.-22     	; 0x2570 <ldexp+0x6c>
    2586:	99 23       	and	r25, r25
    2588:	c1 f3       	breq	.-16     	; 0x257a <ldexp+0x76>
    258a:	ae f3       	brts	.-22     	; 0x2576 <ldexp+0x72>
    258c:	df 93       	push	r29
    258e:	cf 93       	push	r28
    2590:	1f 93       	push	r17
    2592:	0f 93       	push	r16
    2594:	ff 92       	push	r15
    2596:	c9 2f       	mov	r28, r25
    2598:	dd 27       	eor	r29, r29
    259a:	88 23       	and	r24, r24
    259c:	2a f0       	brmi	.+10     	; 0x25a8 <log+0x28>
    259e:	21 97       	sbiw	r28, 0x01	; 1
    25a0:	66 0f       	add	r22, r22
    25a2:	77 1f       	adc	r23, r23
    25a4:	88 1f       	adc	r24, r24
    25a6:	da f7       	brpl	.-10     	; 0x259e <log+0x1e>
    25a8:	20 e0       	ldi	r18, 0x00	; 0
    25aa:	30 e0       	ldi	r19, 0x00	; 0
    25ac:	40 e8       	ldi	r20, 0x80	; 128
    25ae:	5f eb       	ldi	r21, 0xBF	; 191
    25b0:	9f e3       	ldi	r25, 0x3F	; 63
    25b2:	88 39       	cpi	r24, 0x98	; 152
    25b4:	20 f0       	brcs	.+8      	; 0x25be <log+0x3e>
    25b6:	80 3e       	cpi	r24, 0xE0	; 224
    25b8:	38 f0       	brcs	.+14     	; 0x25c8 <log+0x48>
    25ba:	21 96       	adiw	r28, 0x01	; 1
    25bc:	8f 77       	andi	r24, 0x7F	; 127
    25be:	0e 94 a4 0e 	call	0x1d48	; 0x1d48 <__addsf3>
    25c2:	ef e1       	ldi	r30, 0x1F	; 31
    25c4:	f1 e0       	ldi	r31, 0x01	; 1
    25c6:	04 c0       	rjmp	.+8      	; 0x25d0 <log+0x50>
    25c8:	0e 94 a4 0e 	call	0x1d48	; 0x1d48 <__addsf3>
    25cc:	ec e4       	ldi	r30, 0x4C	; 76
    25ce:	f1 e0       	ldi	r31, 0x01	; 1
    25d0:	0e 94 9e 10 	call	0x213c	; 0x213c <__fp_powser>
    25d4:	8b 01       	movw	r16, r22
    25d6:	be 01       	movw	r22, r28
    25d8:	ec 01       	movw	r28, r24
    25da:	fb 2e       	mov	r15, r27
    25dc:	6f 57       	subi	r22, 0x7F	; 127
    25de:	71 09       	sbc	r23, r1
    25e0:	75 95       	asr	r23
    25e2:	77 1f       	adc	r23, r23
    25e4:	88 0b       	sbc	r24, r24
    25e6:	99 0b       	sbc	r25, r25
    25e8:	0e 94 36 10 	call	0x206c	; 0x206c <__floatsisf>
    25ec:	28 e1       	ldi	r18, 0x18	; 24
    25ee:	32 e7       	ldi	r19, 0x72	; 114
    25f0:	41 e3       	ldi	r20, 0x31	; 49
    25f2:	5f e3       	ldi	r21, 0x3F	; 63
    25f4:	0e 94 6c 11 	call	0x22d8	; 0x22d8 <__mulsf3x>
    25f8:	af 2d       	mov	r26, r15
    25fa:	98 01       	movw	r18, r16
    25fc:	ae 01       	movw	r20, r28
    25fe:	ff 90       	pop	r15
    2600:	0f 91       	pop	r16
    2602:	1f 91       	pop	r17
    2604:	cf 91       	pop	r28
    2606:	df 91       	pop	r29
    2608:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <__addsf3x>
    260c:	0c 94 fe 10 	jmp	0x21fc	; 0x21fc <__fp_round>

00002610 <modf>:
    2610:	fa 01       	movw	r30, r20
    2612:	dc 01       	movw	r26, r24
    2614:	aa 0f       	add	r26, r26
    2616:	bb 1f       	adc	r27, r27
    2618:	9b 01       	movw	r18, r22
    261a:	ac 01       	movw	r20, r24
    261c:	bf 57       	subi	r27, 0x7F	; 127
    261e:	28 f4       	brcc	.+10     	; 0x262a <modf+0x1a>
    2620:	22 27       	eor	r18, r18
    2622:	33 27       	eor	r19, r19
    2624:	44 27       	eor	r20, r20
    2626:	50 78       	andi	r21, 0x80	; 128
    2628:	20 c0       	rjmp	.+64     	; 0x266a <modf+0x5a>
    262a:	b7 51       	subi	r27, 0x17	; 23
    262c:	90 f4       	brcc	.+36     	; 0x2652 <modf+0x42>
    262e:	ab 2f       	mov	r26, r27
    2630:	00 24       	eor	r0, r0
    2632:	46 95       	lsr	r20
    2634:	37 95       	ror	r19
    2636:	27 95       	ror	r18
    2638:	01 1c       	adc	r0, r1
    263a:	a3 95       	inc	r26
    263c:	d2 f3       	brmi	.-12     	; 0x2632 <modf+0x22>
    263e:	00 20       	and	r0, r0
    2640:	71 f0       	breq	.+28     	; 0x265e <modf+0x4e>
    2642:	22 0f       	add	r18, r18
    2644:	33 1f       	adc	r19, r19
    2646:	44 1f       	adc	r20, r20
    2648:	b3 95       	inc	r27
    264a:	da f3       	brmi	.-10     	; 0x2642 <modf+0x32>
    264c:	0e d0       	rcall	.+28     	; 0x266a <modf+0x5a>
    264e:	0c 94 a3 0e 	jmp	0x1d46	; 0x1d46 <__subsf3>
    2652:	61 30       	cpi	r22, 0x01	; 1
    2654:	71 05       	cpc	r23, r1
    2656:	a0 e8       	ldi	r26, 0x80	; 128
    2658:	8a 07       	cpc	r24, r26
    265a:	b9 46       	sbci	r27, 0x69	; 105
    265c:	30 f4       	brcc	.+12     	; 0x266a <modf+0x5a>
    265e:	9b 01       	movw	r18, r22
    2660:	ac 01       	movw	r20, r24
    2662:	66 27       	eor	r22, r22
    2664:	77 27       	eor	r23, r23
    2666:	88 27       	eor	r24, r24
    2668:	90 78       	andi	r25, 0x80	; 128
    266a:	30 96       	adiw	r30, 0x00	; 0
    266c:	21 f0       	breq	.+8      	; 0x2676 <modf+0x66>
    266e:	20 83       	st	Z, r18
    2670:	31 83       	std	Z+1, r19	; 0x01
    2672:	42 83       	std	Z+2, r20	; 0x02
    2674:	53 83       	std	Z+3, r21	; 0x03
    2676:	08 95       	ret

00002678 <__itoa_ncheck>:
    2678:	bb 27       	eor	r27, r27
    267a:	4a 30       	cpi	r20, 0x0A	; 10
    267c:	31 f4       	brne	.+12     	; 0x268a <__itoa_ncheck+0x12>
    267e:	99 23       	and	r25, r25
    2680:	22 f4       	brpl	.+8      	; 0x268a <__itoa_ncheck+0x12>
    2682:	bd e2       	ldi	r27, 0x2D	; 45
    2684:	90 95       	com	r25
    2686:	81 95       	neg	r24
    2688:	9f 4f       	sbci	r25, 0xFF	; 255
    268a:	0c 94 48 13 	jmp	0x2690	; 0x2690 <__utoa_common>

0000268e <__utoa_ncheck>:
    268e:	bb 27       	eor	r27, r27

00002690 <__utoa_common>:
    2690:	fb 01       	movw	r30, r22
    2692:	55 27       	eor	r21, r21
    2694:	aa 27       	eor	r26, r26
    2696:	88 0f       	add	r24, r24
    2698:	99 1f       	adc	r25, r25
    269a:	aa 1f       	adc	r26, r26
    269c:	a4 17       	cp	r26, r20
    269e:	10 f0       	brcs	.+4      	; 0x26a4 <__utoa_common+0x14>
    26a0:	a4 1b       	sub	r26, r20
    26a2:	83 95       	inc	r24
    26a4:	50 51       	subi	r21, 0x10	; 16
    26a6:	b9 f7       	brne	.-18     	; 0x2696 <__utoa_common+0x6>
    26a8:	a0 5d       	subi	r26, 0xD0	; 208
    26aa:	aa 33       	cpi	r26, 0x3A	; 58
    26ac:	08 f0       	brcs	.+2      	; 0x26b0 <__utoa_common+0x20>
    26ae:	a9 5d       	subi	r26, 0xD9	; 217
    26b0:	a1 93       	st	Z+, r26
    26b2:	00 97       	sbiw	r24, 0x00	; 0
    26b4:	79 f7       	brne	.-34     	; 0x2694 <__utoa_common+0x4>
    26b6:	b1 11       	cpse	r27, r1
    26b8:	b1 93       	st	Z+, r27
    26ba:	11 92       	st	Z+, r1
    26bc:	cb 01       	movw	r24, r22
    26be:	0c 94 61 13 	jmp	0x26c2	; 0x26c2 <strrev>

000026c2 <strrev>:
    26c2:	dc 01       	movw	r26, r24
    26c4:	fc 01       	movw	r30, r24
    26c6:	67 2f       	mov	r22, r23
    26c8:	71 91       	ld	r23, Z+
    26ca:	77 23       	and	r23, r23
    26cc:	e1 f7       	brne	.-8      	; 0x26c6 <strrev+0x4>
    26ce:	32 97       	sbiw	r30, 0x02	; 2
    26d0:	04 c0       	rjmp	.+8      	; 0x26da <strrev+0x18>
    26d2:	7c 91       	ld	r23, X
    26d4:	6d 93       	st	X+, r22
    26d6:	70 83       	st	Z, r23
    26d8:	62 91       	ld	r22, -Z
    26da:	ae 17       	cp	r26, r30
    26dc:	bf 07       	cpc	r27, r31
    26de:	c8 f3       	brcs	.-14     	; 0x26d2 <strrev+0x10>
    26e0:	08 95       	ret

000026e2 <_exit>:
    26e2:	f8 94       	cli

000026e4 <__stop_program>:
    26e4:	ff cf       	rjmp	.-2      	; 0x26e4 <__stop_program>
